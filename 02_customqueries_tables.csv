workbookID,datasource,connType,customQuery
ff041013-9040-e754-9e23-90ab09571b35,Clients,postgres,"select t1.id, t1.name as Client, T1.IS_dEMO_CLIENT,CASE WHEN t1.status='1' THEN 'Active' when t1.status='2' then 'Inactive' else t1.status end as STATUS,
	   t1.accounting_id, t1.referred_by, t1.preferring_billing_currency,t2.name AS CURRENCY,
	   concat(Z.first_name,' ',Z.last_name) as Client_Solutions_Manager,
	   concat(t4.first_name,' ',t4.last_name) as Original_Sales_rep,
	   concat(t9.first_name,' ',t9.last_name) as Acc_Man_GG,
	   case when t3.payment_method='1' then 'Wire'
		    when t3.payment_method='2' then 'ACH'
			when t3.payment_method='3' then 'BACS'
			when t3.payment_method='4' then 'IAT'
			when t3.payment_method='5' then 'SEPA'
			when t3.payment_method='6' then 'GIRO'
		    ELSE t3.payment_method 
	   END AS PAYMENT_METHOD,
	   t3.term_calendar,t3.term_days,t1.is_bank_info_approved,t8.transfer_minimum_term_cost,
	   t1.billing_address_id, 
           T5.ADDRESS1, T5.ADDRESS2, T5.ADDRESS3, T5.CITY, T6.NAME as Province_Name, 
           T5.POSTAL_CODE,  
           CONCAT(T5.ADDRESS1,' ',T5.ADDRESS2,' ',T5.ADDRESS3,' ',T5.CITY,' ',t6.name,' ',T5.POSTAL_CODE,' ',T7.NAME) AS BILLING, t7.name as Billing_Country
from goglobal_gp_goglobal.v_gp_gg_client_current t1
left join goglobal_gp_goglobal.v_gp_gg_country_current t2 on t1.preferring_billing_currency=t2.id
left join goglobal_gp_goglobal.v_gp_gg_client_terms_current t3 on t1.client_terms_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9 on t1.gp_account_manager_id=t9.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current Z on Z.id = T1.gp_current_sales_rep_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t4 on t1.gp_original_sales_rep_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_ADDRESS_current t5 on t1.billing_address_id=t5.id								 
left join goglobal_gp_goglobal.v_gp_gg_province_current t6 on t5.province_id=t6.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t7 on t5.COUNTRY_ID=t7.id
left join goglobal_gp_goglobal.v_gp_gg_client_country_current T8  on t1.id=t8.client_id"
ff041013-9040-e754-9e23-90ab09571b35,Clients,postgres,"with a as (
	select distinct id, num_days || ' ' || day_type || ' days ' || before_or_after || ' ' || start_or_end || ' of month' as changes_due
	from (
			select id, num_days, 
			CASE WHEN day_type = '1' THEN 'business' WHEN day_type = '2' THEN 'calendar' ELSE '' END as day_type,
			CASE WHEN before_or_after = '1' THEN 'before' WHEN before_or_after = '2' THEN 'after' ELSE '' END as before_or_after,
			CASE WHEN start_or_end = '1' THEN 'start' WHEN start_or_end = '2' THEN 'end' ELSE '' END as start_or_end 
			from goglobal_gp_goglobal.scheduled_item 
			) as schedule_item
	)
	select distinct t1.id,
	t1.monthly_payroll_changes_due, a1.changes_due as mp_changes_due,
	t1.bi_monthly_payroll_changes_due_period_one, a2.changes_due as bm_changes_due_one,
	t1.bi_monthly_payroll_changes_due_period_two, a3.changes_due as bm_changes_due_two
from goglobal_gp_goglobal.v_gp_gg_client_current t1
left join a a1
	on a1.id=t1.monthly_payroll_changes_due
left join a a2
	on a2.id=t1.bi_monthly_payroll_changes_due_period_one
left join a a3
	on a3.id=t1.bi_monthly_payroll_changes_due_period_two"
5dcd51e1-e456-5bf3-44d4-f61e67d98c06,Custom SQL Query (gpbidb) (2),,
5dcd51e1-e456-5bf3-44d4-f61e67d98c06,Custom SQL Query (gpbidb) (2),postgres,"with a AS (
     select 
     c.professional_id,concat(t2.first_name,' ',t2.last_name) as pro,t2.status, t3.id as client_id, t3.name as Client, t5.name as Country,t6.name as currency_name,  t2.is_failed_to_launch, b.ar_account_id, 
     a.client_bill_id,c.billing_cycle_id, c.bill_type,c.accounting_id, lsp.legal_entity_name, a.notes as customer_notes, t2.accounting_id as pro_account_id, t2.contract_start_date, t2.payroll_start_date,
  CASE
   WHEN t4.is_gp_entity IS TRUE THEN 'GP Entity'::text
   WHEN t4.is_gp_entity IS FALSE THEN 'LSP Entity'::text
  ELSE 'UNKNOWN'::text
  END AS entity_status,
 CASE WHEN c.status='1' THEN 'Draft'
 WHEN c.status='2' THEN 'Client Approval'
 WHEN c.status='3' THEN 'Submitted'
 WHEN c.status='4' THEN 'LSP Approval'
 WHEN c.status='5' THEN 'LSP Submitted'
 WHEN c.status='6' THEN 'Ready to Validate'
 WHEN c.status='7' THEN 'Preparing Bill'
 WHEN c.status='8' THEN 'Generate Invoice'
 WHEN c.status='9' THEN 'Ready to Send'
 WHEN c.status='10' THEN 'Billed'
 WHEN c.status='11' THEN 'Paid'
 WHEN c.status='12' THEN 'Invoice in Progress'
 WHEN c.status='13' THEN 'Invoice Error'
  END as bill_status,
Case When t2.residency_status = '1' then 'US CITIZEN'
    When t2.residency_status = '2' THEN 'EXPAT'
	When t2.residency_status = '3' THEN 'Local National'
	When t2.residency_status = '4' THEN 'Third Country National'  
	Else 'Verify Residency Code' 
end as Residency_status,
Case When t3.pricing_model = 0 then 'Enterprise' 
 	  When t3.pricing_model = 1 then 'Standard'
 	Else 'Verify Pricing Model' end as Pricing_Model,
	d.start_date,
	b.category_type,
	 CASE
                    WHEN b.category_type::text = '1'::text THEN 'Professional'::character varying
                    WHEN b.category_type::text = '2'::text THEN 'GP Fees'::character varying
                    WHEN b.category_type::text = '3'::text THEN 'Professional Variable'::character varying
                    WHEN b.category_type::text = '6'::text THEN 'Markup Transactions'::character varying
                    ELSE b.category_type
                END AS category,
 	b.name as type,
     Case 
        When t2.service_class = '1' then 'PEO'
        When t2.service_class = '2' then 'ASO'
        When t2.service_class = '3' then 'Services'
        When t2.service_class = '4' then 'Contractor'
        Else 'Review Code'
    End as Pro_Service_Class,
    Case 
        When c.document_type='1' then 'Invoice'
	    When c.document_type='2' then 'Credit Memo'
	End as document_type,
	a.amount AS local_amount,
            t6.name AS local_currency,
	a.currency,t3.preferring_billing_currency,T8.NAME AS PREFERRING_CURRENCY_NAME,C.LEGACY,c.fx_rate,a.target_currency_fxrate, A.LSP_INVOICE_ID,a.amount AS AMOUNT, T7.INVOICE_FX_RATE
from goglobal_gp_goglobal.v_gp_gg_client_bill_transaction_current a 
left join goglobal_gp_goglobal.v_gp_gg_billing_transaction_type_current b on a.billing_transaction_type_id=b.id
left join goglobal_gp_goglobal.v_gp_gg_client_bill_current c on c.id=a.client_bill_id
left join goglobal_gp_goglobal.v_gp_gg_billing_cycle_current d on c.billing_cycle_id=d.id
 left join goglobal_gp_goglobal.v_gp_gg_professional_current t2 on c.professional_id=t2.id 
left join goglobal_gp_goglobal.v_gp_gg_client_current t3 on t2.client_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t4 on t2.lsp_country_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_current_mat lsp on t4.lsp_id = lsp.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t5 on t4.country_id=t5.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t6 on a.currency=t6.id
LEFT JOIN GOGLOBAL_gp_GOGLOBAL.V_GP_GG_lsp_invoice_CURRENT T7 on A.LSP_INVOICE_ID=T7.ID
left join goglobal_gp_goglobal.v_gp_gg_country_current t8 on T3.PREFERRING_BILLING_currency=t8.id
order by 7,8,14
),


MDM_Catalogue as (
	/*Code to bring the Universal MDM ID into total bills dashboard*/
	Select distinct 
		parent_name, parent_taxonomyitemid as MDM_ID, source_id::bigint as MDM_GPP_ID
	from repo.v_gp_mdm_customer 
	where source = 'GoGlobal Client' 
	Order by source_id::bigint
),
B AS(
	select a.*, case when currency=preferring_billing_currency then '1' else '0' end as IND
	FROM A),
c as(SELECT B.*,
	CASE WHEN IND='1'  THEN B.AMOUNT 
             WHEN (IND='0' AND LEGACY='true') then (b.amount*b.invoice_fx_rate)
             When (ind='0' and legacy='false' and target_currency_fxrate is not null)  then (b.amount * b.target_currency_fxrate)
             When (ind='0' and legacy='false' and target_currency_fxrate is null)  then (b.amount * b.fx_rate)
	else null 
	END AS BILL_FIN, 
        Case When category_type = '2' then b.amount
	Else
            CASE When IND='1'  THEN B.AMOUNT 
		 When (IND='0' AND LEGACY='true') then (b.amount*b.invoice_fx_rate)
		 When (ind='0' and legacy='false' and target_currency_fxrate is not null)  then (b.amount * b.target_currency_fxrate)
		 When (ind='0' and legacy='false' and target_currency_fxrate is null)  then (b.amount * b.fx_rate)
             Else null end 
	END AS BILL_FIN_NEW,
        Case 
            When category_type = '2' then b.currency_name
	Else b.preferring_currency_name
	End as currency_billed
FROM B), 
Last as (
	select distinct 
		contract_start_date, payroll_start_date, Residency_status, pro_account_id, legal_entity_name, entity_status, is_failed_to_launch, 
		ar_account_id, client_id,  client, Pricing_Model, document_type,category_type,category,local_amount,local_currency, country, professional_id, pro, customer_notes, Pro_Service_Class,
		client_bill_id, accounting_id, billing_cycle_id, start_date, type, preferring_currency_name as Preferred_Currency, 
		currency_billed as Currency, bill_status, sum(bill_fin_new), sum(bill_fin) as Sum_bill_fin_previous
	from c
	group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29
	order by billing_cycle_id,accounting_id
		 ), 
fee_bucket as (
	Select Distinct
		start_date, fee_bucket, professional_id, client_id,net_revenue
	FROM ltv_analysis.v_ltv_int_fee_buckets
	Where fee_bucket is not null and date_trunc('month', start_date)<<>> date_trunc('month', now()::date)
	Order by professional_id, start_date desc
				)
Select distinct
	Last.*, 
	Case When Currency NOT IN ('Australian Dollar', 'Canadian Dollar', 'European Euro', 'Pound Sterling', 'Singapore Dollar', 'United States Dollar') and Sum_bill_fin_previous is null then sum
		 When Currency NOT IN ('Australian Dollar', 'Canadian Dollar', 'European Euro', 'Pound Sterling', 'Singapore Dollar', 'United States Dollar') and Sum_bill_fin_previous is not null then Sum_bill_fin_previous
	Else sum 
	end as Review_New_Total_Bill_Logic, 
	Case When Currency NOT IN ('Australian Dollar', 'Canadian Dollar', 'European Euro', 'Pound Sterling', 'Singapore Dollar', 'United States Dollar')  then Preferred_Currency
	Else Currency
	End as Review_New_Currency_Logic, 
	fee_bucket.fee_bucket 
From Last 
Left Join fee_bucket on (Last.professional_id = fee_bucket.professional_id and Last.start_date = fee_bucket.start_date)"
5e37de85-f74b-8c4d-0c83-625203fb7390,Custom SQL Query (gpbidb),postgres,"WITH satisfaction AS (SELECT id, s.ticket_id, score, created_at, last_date, comment, reason
	FROM ""zendesk"".""satisfaction_rating"" AS s
	INNER JOIN (
	SELECT ticket_id, MAX(created_at) AS last_date
	FROM ""zendesk"".""satisfaction_rating""
	GROUP BY ticket_id) AS m
	ON (s.ticket_id = m.ticket_id AND created_at = last_date)),
gpp_zendesk as
(
SELECT 
	    CASE WHEN O.CUSTOM_CUSTOMER_ID IS NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
	         WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NULL THEN O.CUSTOM_CUSTOMER_ID
	         WHEN O.CUSTOM_CUSTOMER_ID = zendesk_org.CUSTOM_CUSTOMER_ID THEN zendesk_org.CUSTOM_CUSTOMER_ID
	         END AS zendesk_gpp_client_id_match,
	    CASE WHEN cc.name IS NULL AND cc2.name IS NOT NULL THEN cc2.name
	         WHEN cc.name IS NOT NULL AND cc2.name IS NULL THEN cc.name
	         WHEN cc.name = cc2.name THEN cc.name
	         END AS zendesk_gpp_client_name_match,
	    
	    CASE WHEN O.NAME IS NULL AND zendesk_org.name IS NOT NULL THEN zendesk_org.name
	         WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NULL THEN O.NAME
	         WHEN O.NAME = zendesk_org.name THEN O.NAME
	         END AS Zendesk_client_org,
		t.created_at,
		t.created_at::date as date,	
		t.created_at::time as time,
		t.organization_id AS customer_id,
							g.name AS group,
							t.requester_id,t.submitter_id,
							u.name AS requester,
							U.ROLE AS requester_ROLE,
							t.id AS ticket_id_ZENDESK,
							t.status,
							T.PRIORITY,
							T.CUSTOM_CATEGORY,
							CASE WHEN t_form.ticket_form='Shared Services' THEN concat('Shared Services -',' ',t.custom_SSC_Action)
									WHEN t_form.ticket_form='Internal Request' AND t.CUSTOM_INTERNAL_REQUEST_TYPE='Zendesk Support' THEN concat('Internal -',' ',t.custom_Internal_Request_Type)
									WHEN t.custom_category='expenses' THEN concat('Expense -',' ',t.custom_Expenses)
									WHEN t.custom_category='benefits' THEN concat('Benefits -',' ',t.custom_Benefits)
									WHEN t.custom_category='employee_onboarding' THEN concat('Employee Onboarding -',' ', t.custom_Employee_Onboarding)
									WHEN t.custom_category='invoicing' THEN CONCAT('Invoicing -',' ', t.custom_Invoicing)
									WHEN t.custom_category='time_off' THEN concat('Time Off -',' ',t.custom_Time_Off)
									WHEN t.custom_category='zoho' THEN concat('Zoho -',' ', t.custom_Zoho_Sub_Category)
									WHEN t.custom_category='time_tracking' THEN CONCAT('Time Tracking -',' ',t.custom_Time_Tracking)
									WHEN t.custom_category='hr_support' THEN CONCAT('HR Support -',' ',t.custom_HR_Support)
									WHEN t.custom_category='payroll' THEN concat('Payroll -',' ',t.custom_Payroll)
									WHEN t.custom_category='tech_support' THEN CONCAT('Tech Support -',' ',t.custom_Tech_Support)
									WHEN t.custom_category is not NULL THEN t.custom_category
									ELSE 'No Category'
							end as sub_category,	
							U.organization_id AS USER_ORGANIZATION_ID,
							T.organization_id,
							U3.NAME AS SUBMITTER,
							U3.ROLE AS SUBMITTER_ROLE,
							t.via_channel,
							zendesk_tm.replies, zendesk_tm.full_resolution_time_in_minutes_business, zendesk_tm.reply_time_in_minutes_business,
							s.score,
							Case when ZENDESK_TM.full_resolution_time_in_minutes_business <<=7200 then '0 - 5 days'
								 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>7200 and ZENDESK_TM.full_resolution_time_in_minutes_business<<=43200) then '5 - 30 days'
								 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>43200) then '+30 days'
							end as resolution_time,
							case when ZENDESK_TM.replies =0 then '0 touches'
								 when (ZENDESK_TM.replies>>0 and ZENDESK_TM.replies<<3) then '1 to 2 touches'
								 when (ZENDESK_TM.replies>>2 and ZENDESK_TM.replies<<6) then '3 to 5 touches'
								 when (ZENDESK_TM.replies>>5) then '+5 touches'
							end as replies_touches,
							ticket_merge.tag as closed_by_merge
							FROM ""zendesk"".""ticket"" AS t
							LEFT JOIN ""zendesk"".""user"" AS u
							ON t.requester_id = u.id
							LEFT JOIN ""zendesk"".""group"" AS g
							ON t.group_id = g.id
							LEFT JOIN ""zendesk"".""organization"" AS org
							ON t.organization_id = org.id
							LEFT JOIN ""zendesk"".""user"" AS u3
							ON t.SUBMITTER_ID = u3.id
							LEFT JOIN ZENDESK.TICKET_METRICS AS ZENDESK_TM ON t.id=ZENDESK_TM.TICKET_ID
							LEFT JOIN ""satisfaction"" AS s ON t.id = s.ticket_id
							left join zendesk.organization o on o.id=U.organization_id
							left join zendesk.organization zendesk_org on zendesk_org.id=T.organization_id
							left join goglobal_gp_goglobal.v_gp_gg_client_current cc on cc.id=o.custom_customer_id
							left join goglobal_gp_goglobal.v_gp_gg_client_current cc2 on cc2.id=zendesk_org.custom_customer_id
							left join (
										select distinct id,
								   				name as ticket_form
										from  zendesk.ticket_form_history t2
										where name in ('Shared Services','Internal Request') and active='true'
										) t_form on t_form.id=t.ticket_form_id
							left join (
										SELECT *
										FROM zendesk.ticket_tag
										WHERE tag = 'closed_by_merge'
									  ) ticket_merge on t.id=ticket_merge.ticket_id
 ),
zoom as 
(
select *,
		case when priority='urgent' then 'Urgent' --URGENT 
			when custom_category in ('professional_onboarding', 'employee_onboarding') then 'Onboarding' --Onboarding
			when custom_category in ('benefits','expenses','payroll') then 'Employment Lifecycle' --Employment Lifecycle
			when custom_category='professional_offboarding' then 'Offboarding' --Offboarding
			when custom_category='tech_support' then 'Platform access' --Platform access
		end as SLA_CATEGORY,
		case when priority='urgent' then '12' --URGENT 
			when custom_category in ('professional_onboarding', 'employee_onboarding') then '24' --Onboarding
			when custom_category in ('benefits','expenses','payroll') then '24' --Employment Lifecycle
			when custom_category='professional_offboarding' then '24' --Offboarding
			when custom_category='tech_support' then '4' --Platform access
		end as primary_response_hours,
		case when priority='urgent' then '24' --URGENT 
			when custom_category in ('professional_onboarding', 'employee_onboarding') then '48' --Onboarding
			when custom_category in ('benefits','expenses','payroll') then '36' --Employment Lifecycle
			when custom_category='professional_offboarding' then '48' --Offboarding
			when custom_category='tech_support' then '8' --Platform access
		end as secondary_response_hours,
		case when priority='urgent' then '5 US Business Days' --URGENT 
			when custom_category in ('professional_onboarding', 'employee_onboarding') then '25 US Business Days' --Onboarding
			when custom_category in ('benefits','expenses','payroll') then '10 US Business Days' --Employment Lifecycle
			when custom_category='professional_offboarding' then '30 US Business Days' --Offboarding
			when custom_category='tech_support' then '24 hours' --Platform access
		end as target_resolution_time,
		case when priority='urgent' then '5' --URGENT 
			when custom_category in ('professional_onboarding', 'employee_onboarding') then '25' --Onboarding
			when custom_category in ('benefits','expenses','payroll') then '10' --Employment Lifecycle
			when custom_category='professional_offboarding' then '30' --Offboarding
			when custom_category='tech_support' then '1' --Platform access
		end as target_resolution_time_us_business_days
		
		
from gpp_zendesk
where zendesk_gpp_client_name_match='Zoom Video Communications' and status <<>> 'deleted'
--and priority='urgent' and custom_category in ('payroll')and ticket_id_zendesk in ('39246','98368')
)
select *,
		case when sla_category='Urgent' then '100'--URGENT 
			when sla_category='Onboarding' then '50' --Onboarding
			when sla_category='Employment Lifecycle' then '50' --Employment Lifecycle
			when sla_category='Offboarding' then '50'--Offboarding
			when sla_category='Platform access' then '25' --Platform access
		end as response_fail,
		case when sla_category='Urgent' then '200'--URGENT 
			when sla_category='Onboarding' then '100' --Onboarding
			when sla_category='Employment Lifecycle' then '100' --Employment Lifecycle
			when sla_category='Offboarding' then '100'--Offboarding
			when sla_category='Platform access' then '50' --Platform access
		end as resolution_fail
from zoom"
5f3f755e-2adc-9955-c880-32b863252598,Custom SQL Query (gpbidb),postgres,"WITH A AS(SELECT DISTINCT professional_id, pro, country, currency, applied_fx, type, client_id,
		  start_date AS invoice_date,--AVG(net_revenue) AS net, 
		  ROUND( AVG(gross_revenue)::numeric, 2) AS invoicing
	FROM goglobal_gp_goglobal.v_gp_tableau_ltv_base
        WHERE applied_fx >> 0
	GROUP BY professional_id, pro, country, currency, applied_fx, client_id, start_date, type
	HAVING AVG(gross_revenue) <<>> 0	 )
	, B AS
(SELECT DISTINCT id AS professional_id, 
	    preferred_pronoun, 
        annual_base_salary,
        floor(random() * 15 + 1)::int AS random_group,
 		payroll_start_date,
 		payroll_end_date,
 		CASE
            WHEN status::text = '1'::text THEN 'New'::text::character varying
            WHEN status::text = '2'::text THEN 'Onboarding'::text::character varying
            WHEN status::text = '3'::text THEN 'Active'::text::character varying
            WHEN status::text = '4'::text THEN 'Terminating'::text::character varying
            WHEN status::text = '5'::text THEN 'Inactive'::text::character varying
            ELSE status
        END AS professional_status_desc
	FROM ""goglobal_gp_goglobal"".""professional""
	-- WHERE preferred_pronoun IS NOT NULL AND is_failed_to_launch IS false
        WHERE is_failed_to_launch IS false
	ORDER BY id)
	, C AS
(SELECT DISTINCT cl.id AS client_Id, 
                cl.name AS Client_name, 
                i.name AS Industry,
                co.name AS client_country,
 		p.code AS client_province_code,
                p.name AS client_province
    FROM ""goglobal_gp_goglobal"".""client"" AS cl
    LEFT JOIN ""goglobal_gp_goglobal"".""industry"" AS i
    ON cl.industry_id = i.id
    LEFT JOIN goglobal_gp_goglobal.address	AS a
	ON cl.billing_address_id = a.id
	LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_country_current"" AS co
	ON a.country_id = co.id
	LEFT JOIN ""goglobal_gp_goglobal"".""province"" AS p
	ON a.province_id = p.id
        
), D AS 
(SELECT id AS professional_id,
		 new_title AS Title
		 FROM ""goglobal_gp_goglobal"".""professional_job_title_cleaned"" 
)

SELECT *, 
		CASE
            WHEN invoice_date >>= date_trunc('month'::text, payroll_start_date::timestamp with time zone) AND invoice_date <<= COALESCE(payroll_end_date::timestamp with time zone, date_trunc('month'::text, now() + '6 mons'::interval) + '1 mon'::interval - '1 day'::interval) THEN 'Active'::text
            ELSE NULL::text
        END AS active_flag
FROM A
INNER JOIN B
USING (professional_id)
LEFT JOIN C
USING (client_id)
LEFT JOIN D
USING (professional_id)
WHERE (applied_fx * annual_base_salary) << 500000"
5f3f755e-2adc-9955-c880-32b863252598,Custom SQL Query (gpbidb),postgres,"WITH A AS(select currency_code, currency_name, DATE(date_trunc('month',date)) AS year_month, date, rate
from goglobal_gp_goglobal.v_gp_gg_country_current country, goglobal_gp_goglobal.v_gp_gg_fxrate_current  fxrate
where fxrate.currency_id = country.id)

SELECT currency_code, currency_name AS currency, rate AS invoice_rate, date
from A AS a1
WHERE a1.date = (SELECT MAX(a2.date)
				 FROM A a2
				 WHERE a1.currency_code = a2.currency_code)"
5f3f755e-2adc-9955-c880-32b863252598,Custom SQL Query (gpbidb),postgres,"SELECT DISTINCT professional_id,
                CASE 
                    WHEN exchange_rate IS NULL THEN 1
                    ELSE exchange_rate
		END AS rate
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard"
604836dc-513a-bc74-6119-ca845e1488bb,Master (Country_names),,
6089cdd8-857f-64b5-82c0-00e05ad3541a,Custom SQL Query (gpbidb),postgres,"WITH last_date as ( 
SELECT DISTINCT salesforce.sbqq_quote_c.id, 
   salesforce.sbqq_quote_c.owner_id, 
   salesforce.sbqq_quote_c.name, 
   salesforce.sbqq_quote_c.currency_iso_code, 
   salesforce.sbqq_quote_c.created_date, 
   salesforce.sbqq_quote_c.last_modified_date, 
   salesforce.sbqq_quote_c.sbqq_account_c,
   salesforce.v_gp_sfdc_account_current.name AS account_name,
   salesforce.sbqq_quote_c.sbqq_average_customer_discount_c, 
   salesforce.sbqq_quote_c.sbqq_billing_country_c, 
   salesforce.sbqq_quote_c.sbqq_billing_name_c, 
   salesforce.sbqq_quote_c.sbqq_days_quote_open_c, 
   salesforce.sbqq_quote_c.sbqq_opportunity_2_c, 
   salesforce.sbqq_quote_c.sbqq_primary_c, 
   salesforce.sbqq_quote_c.sbqq_start_date_c, 
   salesforce.sbqq_quote_c.sbqq_total_customer_discount_amount_c, 
   salesforce.sbqq_quote_c.sbqq_regular_amount_c, 
   salesforce.sbqq_quote_c.sbqq_customer_amount_c,
   salesforce.sbqq_quote_c.sbqq_list_amount_c,
   salesforce.sbqq_quote_c.sbqq_net_amount_c,
   salesforce.sbqq_quote_c.sum_of_salary_bonus_c,
   salesforce.sbqq_quote_c.sum_of_gp_fees_c,	
   salesforce.sbqq_quote_c.salary_bonus_c,
   salesforce.sbqq_quote_c.gp_fees_c,
   salesforce.sbqq_quote_c.total_year_1_cost_c,
   salesforce.sbqq_quote_c.total_subsequent_years_cost_c,
   salesforce.sbqq_quote_c.estimated_monthly_cost_c,
   salesforce.sbqq_quote_c.total_of_chart_fees_c,
   salesforce.sbqq_quote_c.monthly_sum_of_salary_c,
   salesforce.sbqq_quote_c.gp_quote_name_c, 
   salesforce.sbqq_quote_c.country_names_c, 
   salesforce.sbqq_quote_c.countries_c, 
   salesforce.sbqq_quote_c.vp_approver_c, 
   salesforce.sbqq_quote_c.rsd_approved_c, 
   salesforce.sbqq_quote_c.vp_approved_c, 
   salesforce.sbqq_quote_c.c_level_approved_c, 
   salesforce.sbqq_quote_c.manager_approver_c, 
   salesforce.sbqq_quote_c.client_legal_entity_c, 
   salesforce.sbqq_quote_c.h_2_pricebook_c, 
   salesforce.sbqq_quote_c.number_of_professionals_on_quote_c, 
   salesforce.sbqq_quote_c.pricebook_name_c, 
   salesforce.sbqq_quote_c.complete_price_book_name_c, 
   salesforce.sbqq_quote_c.pricing_model_c, 
   salesforce.v_gp_sfdc_user_current.name AS Sales_Rep, 
   salesforce.v_gp_sfdc_user_current.division, 
   salesforce.v_gp_sfdc_user_current.department, 
   salesforce.v_gp_sfdc_user_current.title, 
   salesforce.v_marketing_dashboard_pacific_time.lead_or_opp_id as opportunity_id, 
   salesforce.v_marketing_dashboard_pacific_time.opportunity_name, 
   salesforce.v_marketing_dashboard_pacific_time.oppotunity_type, 
   salesforce.v_marketing_dashboard_pacific_time.opportunity_lead_source, 
   salesforce.v_marketing_dashboard_pacific_time.stage_name, 
   salesforce.v_marketing_dashboard_pacific_time.is_won, 
   salesforce.v_marketing_dashboard_pacific_time.account_id, 
   salesforce.v_marketing_dashboard_pacific_time.opportunity__status__c, 
   salesforce.v_marketing_dashboard_pacific_time.closed__lost__c, 
   salesforce.v_marketing_dashboard_pacific_time.record_type_text_id_c, 
   salesforce.v_marketing_dashboard_pacific_time.iso_code_2_digit_2__c, 
   salesforce.v_marketing_dashboard_pacific_time.region_iso__c as Region, 
   salesforce.v_marketing_dashboard_pacific_time.total__professionals__c, 
   salesforce.v_marketing_dashboard_pacific_time.won__professionals__c, 
   salesforce.v_marketing_dashboard_pacific_time.lost__professionals__c, 
   salesforce.v_marketing_dashboard_pacific_time.cal_date, 
   salesforce.v_marketing_dashboard_pacific_time.pipeline_stage, 
   salesforce.v_marketing_dashboard_pacific_time.partner_acquisition__c, 
   salesforce.currency_type.conversion_rate, 
   user_2.name AS vp_approver_c_name, 
   user_3.name AS manager_approver_c_name 
FROM salesforce.v_marketing_dashboard_pacific_time 
LEFT JOIN salesforce.sbqq_quote_c 
ON salesforce.v_marketing_dashboard_pacific_time.lead_or_opp_id=salesforce.sbqq_quote_c.sbqq_opportunity_2_c 
LEFT JOIN salesforce.v_gp_sfdc_user_current  
ON salesforce.sbqq_quote_c.owner_id=salesforce.v_gp_sfdc_user_current.id 
LEFT JOIN salesforce.v_gp_sfdc_user_current as user_2 
ON salesforce.sbqq_quote_c.vp_approver_c=user_2.id  
LEFT JOIN salesforce.v_gp_sfdc_user_current as user_3 
ON salesforce.sbqq_quote_c.manager_approver_c=user_3.id 
LEFT JOIN salesforce.currency_type 
ON salesforce.sbqq_quote_c.currency_iso_code=salesforce.currency_type.iso_code
LEFT JOIN salesforce.v_gp_sfdc_account_current 
ON salesforce.sbqq_quote_c.sbqq_account_c=salesforce.v_gp_sfdc_account_current.id
WHERE salesforce.v_marketing_dashboard_pacific_time.pipeline_stage='Qualified Opportunity'
AND salesforce.sbqq_quote_c.owner_id NOT IN ('0050W000006pMziQAE','0056T000008HWABQA4','0050W000007m7IAQAY', '0050W000006cFR6QAM'))
SELECT *, row_number()over (partition by last_date.opportunity_id order by last_modified_date desc) 
FROM last_date"
60c4f0b6-8624-9822-881e-852bf156f37e,missing_countries,postgres,"select country_code, country_name from v_headcount_dashboard where region is null group by country_code, country_name order by country_name"
6157574e-7618-ccdc-257c-824c59761d57,Assessments,,
6157574e-7618-ccdc-257c-824c59761d57,Service Delivery,,
6157574e-7618-ccdc-257c-824c59761d57,Intake,,
6157574e-7618-ccdc-257c-824c59761d57,Client Enrollment and participation,,
618857a5-abc5-119d-00d1-7ff004ecf026,Custom SQL Query (gpbidb),postgres,"with rolez as (
			SELECT  distinct t2.id as client_id,t2.name as client,t2.status, a.user_id, concat(first_name,' ', last_name) as user_name,
				regexp_split_to_table(a.roles, ',') AS rolez, t3.email as User_EMAIL
			from goglobal_gp_goglobal.v_gp_gg_client_person_current a
			left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on a.client_id = t2.id
			left join goglobal_gp_goglobal.v_gp_gg_user_current t3 on a.user_id = t3.id 
			where t2.is_demo_client='false' and  a.is_no_longer_with_firm='false'),
ca as( select * from rolez where rolez='1'),
roles as (
			select concat(t2.first_name,' ', t2.last_name) as User_Name, 
			t3.email as User_EMAIL, case when role='4' then 'Expense Approver 1' when role='5' then 'Time Approver' end  as rolez, t1.*
			from goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current t1
			left join goglobal_gp_goglobal.v_gp_gg_client_person_current t2  on t1.client_person_id = t2.id
			left join goglobal_gp_goglobal.v_gp_gg_user_current t3 on t2.user_id = t3.id
			where role in ('4','5')
			),
TA AS (SELECT * FROM ROLES WHERE ROLE='5'),
EA_1 AS (SELECT * FROM ROLES WHERE ROLE='4')
select t1.id, t6.employee_id as gp_submit_id,concat(t1.first_name,' ',t1.last_name) as professional,
t1.contract_start_date,t1.status, t2.name as client, t4.name as country, t1.work_email, t1.personal_email,t5.email as used_for_login,
concat(t9.first_name,' ',t9.last_name) as Account_Manager,
case when t1.expense_method='1' then 'GP Submit'
	 when t1.expense_method='2' then ' Client Expense System/GP Reimburses'
	 when t1.expense_method='3' then 'Client Expense System/Client Reimburses'
	 when t1.expense_method='4' then '3rd Party EOR'
end as expense_method,
ca.user_name as Company_admin, ca.user_email as Ca_email,
TA.USER_NAME AS Time_approver, ta.user_email as TA_EMAIL,
EA_1.USER_NAME AS Expense_approver, EA_1.user_email as EA_1_EMAIL
from goglobal_gp_goglobal.v_gp_gg_professional_current t1
left join goglobal_gp_goglobal.v_gp_gg_client_current t2 	
	on t1.client_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t3 
		on t1.lsp_country_id=t3.id
	left join repo.v_gp_gg_country_current t4 
		on t3.country_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9  
		on t9.id = t2.gp_account_manager_id
left join goglobal_gp_goglobal.v_gp_gg_useR_current t5
	on t1.useR_id=t5.id
left join goglobal_gp_goglobal.v_gp_gg_user_expenses_current t6 on t1.user_id=t6.user_id
left join ca on ca.client_id=t2.id
LEFT JOIN TA ON T1.ID=TA.PROFESSIONAL_ID
LEFT JOIN EA_1 ON T1.ID=EA_1.PROFESSIONAL_ID
where t1.is_failed_to_launch='false' and is_demo_client='false'"
6188a97e-416b-4526-a54c-10743419a172,Escalated tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)""
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_10390','customfield_10397', 'customfield_10450','customfield_10470')"
6188a97e-416b-4526-a54c-10743419a172,Escalated tickets,postgres,"with valueStreamDomain as (
select domain.name as TDomain, valueStream.name as TValueStream from jira_integration.field_option domain
left join jira_integration.field_option valueStream on valueStream.id = domain.parent_id
)

SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)"",
  valueStreamDomain.TDomain,
  valueStreamDomain.TValueStream
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" 
LEFT JOIN valueStreamDomain on valueStreamDomain.TDomain = issue_field_history.value
where issue_field_history.is_active = true and issue_field_history.field_id in ('customfield_10459')"
6188a97e-416b-4526-a54c-10743419a172,Escalated tickets,postgres,"with affectsVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (affectsVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""affectsVersionID"",
  ""issue_multiselect_history"".""value"" AS ""affectsVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'versions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from version
left join affectsVersion on version.""id (version)"" = affectsVersion.""affectsVersionID"""
6188a97e-416b-4526-a54c-10743419a172,Escalated tickets,postgres,"SELECT CAST(""issue_multiselect_history"".""_fivetran_id"" AS TEXT) AS ""_fivetran_id"",
  ""issue_multiselect_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_multiselect_history)"",
  CAST(""issue_multiselect_history"".""author_id"" AS TEXT) AS ""author_id"",
  CAST(""issue_multiselect_history"".""field_id"" AS TEXT) AS ""field_id"",
  ""issue_multiselect_history"".""is_active"" AS ""is_active"",
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id"",
  ""issue_multiselect_history"".""time"" AS ""time"",
  CAST(""issue_multiselect_history"".""value"" AS TEXT) AS ""value""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where

""issue_multiselect_history"".field_id = 'labels' and ""issue_multiselect_history"".is_active = true and ""issue_multiselect_history"".value in  ('affects_payroll')"
6188a97e-416b-4526-a54c-10743419a172,Escalated tickets,postgres,"with fixVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (fixVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""fixVersionID"",
  ""issue_multiselect_history"".""value"" AS ""fixVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'fixVersions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from fixVersion
left join version on version.""id (version)"" = fixVersion.""fixVersionID"""
6188a97e-416b-4526-a54c-10743419a172,Escalated tickets,postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
""issue_type"".""name"" as ""issueTypeName""
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
LEfT JOIN ""jira_integration"".""issue_type"" ""issue_type"" on ""issue_type"".id = ""issue"".""issue_type""

JOIN ""jira_integration"".""issue_multiselect_history"" ""labels"" on ""labels"".issue_id = ""issue"".id and ""labels"".field_id = 'labels' and ""labels"".is_active = true and ""labels"".value in  ('jira_escalated', 'tech_escalated', 'jira-escalated', 'apr-2021-bug-bash') 
where project in (10000,10103) and _fivetran_deleted = false"
6188a97e-416b-4526-a54c-10743419a172,Escalated tickets,postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
6188a97e-416b-4526-a54c-10743419a172,Zendesk from DW,postgres,"SELECT ""ticket"".""_fivetran_synced"" AS ""_fivetran_synced"",
  ""ticket"".""allow_channelback"" AS ""allow_channelback"",
  ""ticket"".""created_at"" AS ""created_at"",
  ""ticket"".""custom_acumatica_related"" AS ""custom_acumatica_related"",
  CAST(""ticket"".""custom_tech_case_type"" AS TEXT) AS ""custom_tech_case_type"",
  ""ticket"".""has_incidents"" AS ""has_incidents"",
  ""ticket"".""id"" AS ""id"",
  ""ticket"".""is_public"" AS ""is_public"",
  ""ticket"".""merged_ticket_ids"" AS ""merged_ticket_ids"",
  ""ticket"".""requester_id"" AS ""requester_id"",
  CAST(""ticket"".""type"" AS TEXT) AS ""type"",
  ""ticket"".""updated_at"" AS ""updated_at"",
  CAST(""ticket"".""url"" AS TEXT) AS ""url""
FROM ""zendesk"".""ticket"" ""ticket""
where ""ticket"".""organization_id"" is NOT null"
6188a97e-416b-4526-a54c-10743419a172,Zendesk from DW,postgres,"SELECT ""ticket_tag"".""_fivetran_synced"" AS ""_fivetran_synced (ticket_tag)"",
  CAST(""ticket_tag"".""tag"" AS TEXT) AS ""tag"",
  ""ticket_tag"".""ticket_id"" AS ""ticket_id""
FROM ""zendesk"".""ticket_tag"" ""ticket_tag"" where ""tag"" in ('jira_escalated')"
6188a97e-416b-4526-a54c-10743419a172,Releases details (Jira),postgres,"with valueStreamDomain as (
select domain.name as TDomain, valueStream.name as TValueStream from jira_integration.field_option domain
left join jira_integration.field_option valueStream on valueStream.id = domain.parent_id
)

SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)"",
  valueStreamDomain.TDomain,
  valueStreamDomain.TValueStream
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" 
LEFT JOIN valueStreamDomain on valueStreamDomain.TDomain = issue_field_history.value
where issue_field_history.is_active = true and issue_field_history.field_id in ('customfield_10459')"
6188a97e-416b-4526-a54c-10743419a172,Releases details (Jira),postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
6188a97e-416b-4526-a54c-10743419a172,Releases details (Jira),postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
 CAST(""fixVersions"".""value"" as INT) as fixVersionID
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
JOIN ""jira_integration"".""issue_multiselect_history"" ""fixVersions"" on ""fixVersions"".issue_id = ""issue"".id and ""fixVersions"".field_id = 'fixVersions' and ""fixVersions"".is_active = true and ""fixVersions"".value is not NULL
where project in (10000,10103,10166,10164,10153,10010,10145) and _fivetran_deleted = false"
6188a97e-416b-4526-a54c-10743419a172,Releases details (Jira),postgres,"SELECT CAST(""issue_multiselect_history"".""_fivetran_id"" AS TEXT) AS ""_fivetran_id"",
  ""issue_multiselect_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_multiselect_history)"",
  CAST(""issue_multiselect_history"".""author_id"" AS TEXT) AS ""author_id"",
  CAST(""issue_multiselect_history"".""field_id"" AS TEXT) AS ""field_id"",
  ""issue_multiselect_history"".""is_active"" AS ""is_active"",
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id"",
  ""issue_multiselect_history"".""time"" AS ""time"",
  CAST(""issue_multiselect_history"".""value"" AS TEXT) AS ""value""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where

""issue_multiselect_history"".field_id = 'labels' and ""issue_multiselect_history"".is_active = true and ""issue_multiselect_history"".value in  ('automated-level0',
'automated-level1',
'automated-level2',
'automated-level3')"
64469502-6f64-273d-87ec-7d0348132c4f,Custom SQL Query+ (Multiple Connections),postgres,"SELECT cal_date,
       professional_id,
	   accounting_id
       FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
	   WHERE active_flag = 'Active'
	   AND (service_class <<>> '4' OR service_class IS NULL)
	   AND cal_date >>= '2023-01-01'
AND cal_date <<= '2023-07-01'"
64469502-6f64-273d-87ec-7d0348132c4f,Custom SQL Query+ (Multiple Connections),databricks,"SELECT 
  CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
  accounting_period,
  project_id,
  concat(right(accounting_period,4),left(accounting_period,2))::int as yearmonth

FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view 
WHERE 
  total_eor_recurring_fee_billing_value >> 0 
  AND accounting_period IN ('01-2023', '02-2023', '03-2023', '04-2023','05-2023','06-2023', '07-2023')"
645c45d8-db03-c1ef-1d89-f4ea5babf3f9,Campaigns Info,postgres,"WITH v_leads_and_opportunities AS (
         SELECT DISTINCT opps.id AS opp_id,
            opps.closed__lost__c,
            opps.created_date,
            opps.sales__accepted__date__c AS sal_accepted_date,
            opps.s_a_l__c,
            opps.s_a_l_by__sales__c,
            opps.record_type_bi__c,
            opps.close_date,
            opps.stage_name,
            opps.partner_acquisition__c AS partner_acq_opps,
            opps.is_won,
            opps.owner_id,
			opps.created_by_id,
            opps.type AS opp_type,
			opps.lead_source,
			opps.update_time,
            opps.pricing_model__c AS pricing_model_opps--,
                /*CASE
                    WHEN (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) 
	                AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) 
	                --AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text) 
	                THEN 'Non Partner Opp or Existing Business'::text
                    ELSE 'Partner Opp or Existing Business'::text
                END AS opp_go_flag*/
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
        ), sql AS (
         SELECT DISTINCT v_leads_and_opportunities.close_date,
            'SQL'::text AS cohort_stage,
            v_leads_and_opportunities.closed__lost__c,
            v_leads_and_opportunities.created_date,
            v_leads_and_opportunities.is_won,
            --v_leads_and_opportunities.opp_go_flag,
            v_leads_and_opportunities.opp_id,
            v_leads_and_opportunities.opp_type,
			v_leads_and_opportunities.lead_source,
			v_leads_and_opportunities.created_by_id AS name_join_id,
            v_leads_and_opportunities.partner_acq_opps,
            v_leads_and_opportunities.created_date::date AS point_time_date,
            v_leads_and_opportunities.pricing_model_opps,
            v_leads_and_opportunities.record_type_bi__c,
            v_leads_and_opportunities.s_a_l__c,
            v_leads_and_opportunities.s_a_l_by__sales__c,
            v_leads_and_opportunities.sal_accepted_date,
            v_leads_and_opportunities.stage_name,
			v_leads_and_opportunities.update_time
           FROM v_leads_and_opportunities
        ), sal AS (
         SELECT DISTINCT v_leads_and_opportunities.close_date,
            'SAL'::text AS cohort_stage,
            v_leads_and_opportunities.closed__lost__c,
            v_leads_and_opportunities.created_date,
            v_leads_and_opportunities.is_won,
            --v_leads_and_opportunities.opp_go_flag,
            v_leads_and_opportunities.opp_id,
            v_leads_and_opportunities.opp_type,
			v_leads_and_opportunities.lead_source,
            v_leads_and_opportunities.owner_id AS name_join_id,
            v_leads_and_opportunities.partner_acq_opps,
            v_leads_and_opportunities.sal_accepted_date::date AS point_time_date,
            v_leads_and_opportunities.pricing_model_opps,
            v_leads_and_opportunities.record_type_bi__c,
            v_leads_and_opportunities.s_a_l__c,
            v_leads_and_opportunities.s_a_l_by__sales__c,
            v_leads_and_opportunities.sal_accepted_date,
            v_leads_and_opportunities.stage_name,
			v_leads_and_opportunities.update_time
           FROM v_leads_and_opportunities
          WHERE --v_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND
			v_leads_and_opportunities.s_a_l_by__sales__c::text = 'Yes'::text
        ), ma AS (
         SELECT DISTINCT v_leads_and_opportunities.close_date,
            'MA'::text AS cohort_stage,
            v_leads_and_opportunities.closed__lost__c,
            v_leads_and_opportunities.created_date,
            v_leads_and_opportunities.is_won,
            --v_leads_and_opportunities.opp_go_flag,
            v_leads_and_opportunities.opp_id,
            v_leads_and_opportunities.opp_type,
			v_leads_and_opportunities.lead_source,
            v_leads_and_opportunities.owner_id AS name_join_id,
            v_leads_and_opportunities.partner_acq_opps,
            v_leads_and_opportunities.close_date::date AS point_time_date,
            v_leads_and_opportunities.pricing_model_opps,
            v_leads_and_opportunities.record_type_bi__c,
            v_leads_and_opportunities.s_a_l__c,
            v_leads_and_opportunities.s_a_l_by__sales__c,
            v_leads_and_opportunities.sal_accepted_date,
            v_leads_and_opportunities.stage_name,
			v_leads_and_opportunities.update_time
           FROM v_leads_and_opportunities
          WHERE --v_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND
			v_leads_and_opportunities.is_won = true
        ), closed_lost AS (
         SELECT DISTINCT v_leads_and_opportunities.close_date,
            'Closed Lost'::text AS cohort_stage,
            v_leads_and_opportunities.closed__lost__c,
            v_leads_and_opportunities.created_date,
            v_leads_and_opportunities.is_won,
            --v_leads_and_opportunities.opp_go_flag,
            v_leads_and_opportunities.opp_id,
            v_leads_and_opportunities.opp_type,
			v_leads_and_opportunities.lead_source,
            v_leads_and_opportunities.owner_id AS name_join_id,
            v_leads_and_opportunities.partner_acq_opps,
            v_leads_and_opportunities.close_date::date AS point_time_date,
            v_leads_and_opportunities.pricing_model_opps,
            v_leads_and_opportunities.record_type_bi__c,
            v_leads_and_opportunities.s_a_l__c,
            v_leads_and_opportunities.s_a_l_by__sales__c,
            v_leads_and_opportunities.sal_accepted_date,
            v_leads_and_opportunities.stage_name,
			v_leads_and_opportunities.update_time
           FROM v_leads_and_opportunities
          WHERE --v_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND
			v_leads_and_opportunities.stage_name = 'Closed Lost'
        ),  full_union AS (
         SELECT sql.close_date,
            sql.cohort_stage,
            sql.closed__lost__c,
            sql.created_date,
            sql.is_won,
            --sql.opp_go_flag,
            sql.opp_id,
            sql.opp_type,
			sql.lead_source,
            sql.name_join_id,
            sql.partner_acq_opps,
            sql.point_time_date,
            sql.pricing_model_opps,
            sql.record_type_bi__c,
            sql.s_a_l__c,
            sql.s_a_l_by__sales__c,
            sql.sal_accepted_date,
            sql.stage_name,
			sql.update_time
           FROM sql
        UNION ALL
         SELECT sal.close_date,
            sal.cohort_stage,
            sal.closed__lost__c,
            sal.created_date,
            sal.is_won,
            --sal.opp_go_flag,
            sal.opp_id,
            sal.opp_type,
			sal.lead_source,
            sal.name_join_id,
            sal.partner_acq_opps,
            sal.point_time_date,
            sal.pricing_model_opps,
            sal.record_type_bi__c,
            sal.s_a_l__c,
            sal.s_a_l_by__sales__c,
            sal.sal_accepted_date,
            sal.stage_name,
			sal.update_time
           FROM sal
        UNION ALL
         SELECT ma.close_date,
            ma.cohort_stage,
            ma.closed__lost__c,
            ma.created_date,
            ma.is_won,
            --ma.opp_go_flag,
            ma.opp_id,
            ma.opp_type,
			ma.lead_source,
            ma.name_join_id,
            ma.partner_acq_opps,
            ma.point_time_date,
            ma.pricing_model_opps,
            ma.record_type_bi__c,
            ma.s_a_l__c,
            ma.s_a_l_by__sales__c,
            ma.sal_accepted_date,
            ma.stage_name,
			ma.update_time
           FROM ma
        UNION ALL
         SELECT closed_lost.close_date,
            closed_lost.cohort_stage,
            closed_lost.closed__lost__c,
            closed_lost.created_date,
            closed_lost.is_won,
            --closed_lost.opp_go_flag,
            closed_lost.opp_id,
            closed_lost.opp_type,
			closed_lost.lead_source,
            closed_lost.name_join_id,
            closed_lost.partner_acq_opps,
            closed_lost.point_time_date,
            closed_lost.pricing_model_opps,
            closed_lost.record_type_bi__c,
            closed_lost.s_a_l__c,
            closed_lost.s_a_l_by__sales__c,
            closed_lost.sal_accepted_date,
            closed_lost.stage_name,
			closed_lost.update_time
           FROM closed_lost
        )
 SELECT *
   FROM full_union"
645c45d8-db03-c1ef-1d89-f4ea5babf3f9,Campaigns Info,postgres,"WITH spend_info AS(	
SELECT ""Campaign Name"" AS campaign, 
CONCAT(""Period"",'-01')::date AS dates, 
""Value"" AS spend
	FROM anaplan.marketing_spend_by_campaign_anaplan
	WHERE ""Campaign Name"" IS NOT NULL AND ""Period"" NOT ILIKE 'FY%'
	AND ""Line Item"" = 'Spend  $'
	),
campaign_spend AS(
SELECT campaign, SUM(spend) AS total_spend
FROM spend_info AS s
WHERE dates <<= date_trunc('month', now())::date - 1
GROUP BY campaign)
SELECT ca.name AS campaign,
	ca.start_date AS campaign_start,
	ca.type AS campaign_type,
	ow.name AS campaign_owner,
	mc.id,
	leads.partner_acquisition__c,
	mc.type,
	cs.total_spend,
	CASE
         WHEN mc.contact_id IS NOT NULL AND oc.id IS NOT NULL THEN oc.id
         WHEN mc.contact_id IS NOT NULL AND oc.id IS NULL THEN leads.converted_opportunity_id
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NULL AND leads.converted_opportunity_id IS NOT NULL THEN leads.converted_opportunity_id
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NOT NULL AND leads.converted_opportunity_id IS NULL THEN mc.lead_id
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NOT NULL AND leads.converted_opportunity_id IS NOT NULL THEN leads.converted_opportunity_id
         ELSE NULL
	END AS lead_or_opp_id,
	CASE
         WHEN mc.has_responded = false THEN 'Never responded'
         WHEN mc.has_responded = true AND mc.first_responded_date <<= COALESCE(oc.close_date, oc2.close_date) THEN 'In time'
         WHEN mc.has_responded = true AND mc.first_responded_date >> COALESCE(oc.close_date, oc2.close_date) THEN 'Too late'
		 WHEN COALESCE(oc.close_date, oc2.close_date) IS NULL THEN 'Not closed'
		 ELSE NULL::text
	END AS response_member_time_flag
FROM salesforce.v_gp_sfdc_campaign_member_current mc
LEFT JOIN salesforce.v_gp_sfdc_campaign_current ca
ON mc.campaign_id = ca.id
LEFT JOIN salesforce.v_gp_sfdc_user_current ow
ON ow.id = ca.owner_id
LEFT JOIN salesforce.v_gp_sfdc_opportunity_current_pacific_time  oc ON oc.contact_id = mc.contact_id
LEFT JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON mc.lead_id = leads.id
LEFT JOIN salesforce.v_gp_sfdc_opportunity_current_pacific_time  oc2 ON oc2.id = leads.converted_opportunity_id
LEFT JOIN campaign_spend cs ON cs.campaign = ca.name"
6495ebf0-7fe5-6fb0-5814-2689939db427,Custom SQL Query (gpbidb),postgres,"SELECT DISTINCT
       client.id, 
       client.name,
	   partner.name AS partner, 
	   CASE WHEN client.msa_contract_start_date_peo IS NOT NULL THEN client.msa_contract_start_date_peo
	        WHEN client.msa_contract_start_date_peo IS NULL AND client.msa_contract_start_date_services IS NOT NULL THEN client.msa_contract_start_date_services
	        WHEN client.msa_contract_start_date_services IS NULL AND client.msa_contract_start_date_sourcing IS NOT NULL THEN client.msa_contract_start_date_sourcing
	        WHEN client.msa_contract_start_date_sourcing IS NULL AND client.msa_contract_start_date_aso IS NOT NULL THEN client.msa_contract_start_date_aso
	   ELSE client.msa_contract_start_date_peo END AS gpp_contract_date,
	   client.salesforce_account_id AS integration_id,
	   SFDC.min_close_date AS min_sfdc_close_date,
	   prof.first_pop,
	   pop.current_month_pop
FROM goglobal_gp_goglobal.v_gp_gg_client_current client
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current partner ON client.partners_referral_id = partner.id
LEFT JOIN (SELECT client_id, MIN(payroll_start_date) AS first_pop
		   FROM goglobal_gp_goglobal.v_gp_gg_professional_current
		   WHERE is_failed_to_launch= false
		   AND (service_class <<>> '4' OR service_class IS NULL)
                   AND payroll_start_date <<= CURRENT_DATE
		   GROUP BY 1) AS prof ON client.id = prof.client_id
		   
LEFT JOIN (SELECT client_id, COUNT(DISTINCT professional_id) AS current_month_pop
		   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
		   WHERE DATE_TRUNC('month', cal_date) = DATE_TRUNC ('month', CURRENT_DATE)
		   AND (service_class IS NULL OR service_class <<>> '4')
		   GROUP BY 1) AS pop ON client.id = pop.client_id
		   
LEFT JOIN (SELECT DISTINCT account_id, stage_name, type, MIN(close_date) AS min_close_date
		  FROM salesforce.v_gp_sfdc_opportunity_current
		  WHERE stage_name = 'Closed Won'
		  AND ( record_type_text_id_c IS NULL OR record_type_text_id_c <<>> 'Potential Partner Opportunity')
		  AND (what_is_your_primary_product_interest__c IS NULL OR what_is_your_primary_product_interest__c <<>> 'G-P Contractor')
		  AND (pricing_model__c IS NULL OR pricing_model__c <<>> 'Contractor only')
		  AND (type IS NULL OR type <<>> 'Existing Business')
		  GROUP BY 1,2,3 ) AS SFDC 
		  ON client.salesforce_account_id = SFDC.account_id

		   
WHERE client.is_demo_client = false
ORDER BY client.id"
664b9388-b428-9e1c-b801-ee89d4786606,Custom SQL Query (gpbidb),postgres,"with a as
	(select distinct t1.id, case when cb.bill_type='1' then 'Yes' else 'No' end as Setup
	from goglobal_gp_goglobal.v_gp_gg_professional_current t1
		left join goglobal_gp_goglobal.V_GP_GG_client_bill_CURRENT cb on cb.professional_id= t1.id
			where cb.bill_type='1'
			order by t1.id),
b as ( select distinct t1.id, case when cb.bill_type='2' then 'Yes' else 'No' end as Deposit
	from goglobal_gp_goglobal.v_gp_gg_professional_current t1 
		 left join goglobal_gp_goglobal.V_GP_GG_client_bill_CURRENT cb on cb.professional_id= t1.id where cb.bill_type='2'
			order by t1.id)
		select distinct t1.id, concat(t1.first_name,' ',t1.last_name) as Professional, t1.status,t1.is_failed_to_launch,
	t2.name as Client, t4.name as Country,
	date(t1.payroll_start_date) as Payroll_start_date, PAYROLL_END_DATE,
        CASE WHEN service_class = '1' THEN 'EOR'
     WHEN service_class = '2' THEN 'ASO'
	 WHEN service_class = '3' THEN  'Services'
	 WHEN service_class = '4' THEN 'Contractor' END AS service_class,
a.setup,b.deposit 
from goglobal_gp_goglobal.v_gp_gg_professional_current t1
left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on t1.client_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t3 on t1.lsp_country_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t4 on t3.country_id=t4.id 
left join a on a.id=t1.id left join b on b.id=t1.id 
where is_demo_client='false'
order by t1.id"
5ce6a1ff-2fde-66f1-1ad3-0eb173387ad0,gl_transactions_reports (workday_erp.gl_transactions_reports) (gpbidb),,
5ce6a1ff-2fde-66f1-1ad3-0eb173387ad0,gl_transactions_reports (workday_erp.gl_transactions_reports) (gpbidb),postgres,"SELECT cc.id,
		cc.accounting_id,
		cc.name as client, 
		prt.name as Partner
FROM goglobal_gp_goglobal.v_gp_gg_client_current cc
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current prt ON cc.PARTNERS_REFERRAL_ID=prt.ID
where cc.is_demo_client='false'"
5ce6a1ff-2fde-66f1-1ad3-0eb173387ad0,gl_transactions_reports (workday_erp.gl_transactions_reports) (gpbidb),postgres,"select  distinct ar.project_id AS PROJECT_ID_AR, 
		ar.company as CUSTOMER_MSA,
		customer.customer_id,
		customer.customer,
		PRO.BUSINESS_UNIT
from workday_erp.ar_transactions_reports ar
LEFT JOIN workday_erp.customers_reports customer  ON ar.CUSTOMER_ID=customer.CUSTOMER_ID
LEFT JOIN workday_erp.projects_reports PRO ON AR.PROJECT_ID=PRO.PROJECT"
66c95a64-407d-3ac3-2287-8ea242b84cd7,v_gp_sfdc_lead_current_pacific_time (salesforce.v_gp_sfdc_lead_current_pacific_time) (gpbidb),postgres,"with users as (with user_team as (with table_date as (select user_id,  max(_fivetran_synced) as last_updated
from outreach.user_team
group by 1)
select distinct table_date.*, users.team_id
from table_date
left join outreach.user_team as users
on table_date.last_updated=users._fivetran_synced
and table_date.user_id=users.user_id)
select user_team.user_id, user_team.team_id, users.name as user_name, team.name AS team_name
from user_team
left join outreach.v_outreach_team_current team
ON user_team.team_id = team.id
left join outreach.v_outreach_users_current users
ON user_team.user_id=users.id)

select distinct leads.*, us.name as owner_name, users.*, us2.manager_id, us3.name as bdr_manager
from salesforce.v_gp_sfdc_lead_current_pacific_time as leads
left join salesforce.v_gp_sfdc_user_current as us
on leads.owner_id=us.id
left join salesforce.v_gp_sfdc_user_current as us2
on leads.b_d__owner__c=us2.name
left join salesforce.v_gp_sfdc_user_current as us3
on us2.manager_id=us3.id
left join users
on us.name=users.user_name"
66c95a64-407d-3ac3-2287-8ea242b84cd7,Outreach - Calls,postgres,"SELECT
	u.name AS user_name,
	dt.relationship_user_id,
	dt.call_id,
	dt.name AS relationship_sequence_name,
	dt.created_at,
	dt.date,
	dt.answered_at,
        dt.completed_at,
		--dt.completed_at - dt.answered_at AS duration_test,
       	extract(EPOCH from (dt.completed_at - dt.answered_at)) as duration,
        CASE WHEN SUM(outbound) != 0 THEN SUM(outbound) ELSE 0 END AS outbound,
	CASE WHEN SUM(inbound) != 0 THEN SUM(inbound) ELSE 0 END AS inbound,
	CASE WHEN SUM(""Answered - Qualified"") != 0 THEN SUM(""Answered - Qualified"") ELSE 0 END AS ""Answered - Qualified"",
	CASE WHEN SUM(""Answered -Qualified"") != 0 THEN SUM(""Answered -Qualified"") ELSE 0 END AS ""Answered -Qualified"",
	CASE WHEN SUM(""Answered - Follow Up"") != 0 THEN SUM(""Answered - Follow Up"") ELSE 0 END AS ""Answered - Follow Up"",
	CASE WHEN SUM(""Answered - Hold for Future"") != 0 THEN SUM(""Answered - Hold for Future"") ELSE 0 END AS ""Answered - Hold for Future"",
	CASE WHEN SUM(""Answered -Hold for Future"") != 0 THEN SUM(""Answered -Hold for Future"") ELSE 0 END AS ""Answered -Hold for Future"",
	CASE WHEN SUM(""Answered - Not Interested"") != 0 THEN SUM(""Answered - Not Interested"") ELSE 0 END AS ""Answered - Not Interested"",
	CASE WHEN SUM(""Gatekeeper"") != 0 THEN SUM(""Gatekeeper"") ELSE 0 END AS ""Gatekeeper"",
	CASE WHEN SUM(""Left Voicemail"") != 0 THEN SUM(""Left Voicemail"") ELSE 0 END AS ""Left Voicemail"",
	CASE WHEN SUM(""No Answer"") != 0 THEN SUM(""No Answer"") ELSE 0 END AS ""No Answer"",
	CASE WHEN SUM(""Junk Lead - Wrong Information"") != 0 THEN SUM(""Junk Lead - Wrong Information"") ELSE 0 END AS ""Junk Lead - Wrong Information"",
	CASE WHEN SUM(""Junk Lead - Bad Number"") != 0 THEN SUM(""Junk Lead - Bad Number"") ELSE 0 END AS ""Junk Lead - Bad Number"",
	CASE WHEN SUM(""Junk Lead - Customer Profile"") != 0 THEN SUM(""Junk Lead - Customer Profile"") ELSE 0 END AS ""Junk Lead - Customer Profile"",
	CASE WHEN SUM(""Not Logged"") != 0 THEN SUM(""Not Logged"") ELSE 0 END AS ""Not Logged"",
	CASE WHEN SUM(""Answered - Already Has a Solution"") != 0 THEN SUM(""Answered - Already Has a Solution"") ELSE 0 END AS ""Answered - Already Has a Solution"",
	CASE WHEN SUM(""Answered - Just Researching"") != 0 THEN SUM(""Answered - Just Researching"") ELSE 0 END AS ""Answered - Just Researching"",
	CASE WHEN SUM(""Answered - No Longer w/ Company"") != 0 THEN SUM(""Answered - No Longer w/ Company"") ELSE 0 END AS ""Answered - No Longer w/ Company"",
	CASE WHEN SUM(""Answered - No Longer with Company"") != 0 THEN SUM(""Answered - No Longer with Company"") ELSE 0 END AS ""Answered - No Longer with Company"",
	CASE WHEN SUM(""Answered - Already has a solution"") != 0 THEN SUM(""Answered - Already has a solution"") ELSE 0 END AS ""Answered - Already has a solution"",
	CASE WHEN SUM(""Answered - Not A Current Product Fit"") != 0 THEN SUM(""Answered - Not A Current Product Fit"") ELSE 0 END AS ""Answered - Not A Current Product Fit""
	/*CASE WHEN SUM(""Answered - Follow Up"") != 0 THEN SUM(""Answered - Follow Up"") ELSE 0 END AS ""Answered - Follow Up"",
	CASE WHEN SUM(""Answered - Hold for Future"") != 0 THEN SUM(""Answered - Hold for Future"") ELSE 0 END AS ""Answered - Hold for Future"",
	CASE WHEN SUM(""Answered - Just Researching"") != 0 THEN SUM(""Answered - Just Researching"") ELSE 0 END AS ""Answered - Just Researching"",
	CASE WHEN SUM(""Answered - Meeting Set"") != 0 THEN SUM(""Answered - Meeting Set"") ELSE 0 END AS ""Answered - Meeting Set"",
	CASE WHEN SUM(""Answered - No Longer with Company"") != 0 THEN SUM(""Answered - No Longer with Company"") ELSE 0 END AS ""Answered - No Longer with Company"",
	CASE WHEN SUM(""Answered - Not Interested"") != 0 THEN SUM(""Answered - Not Interested"") ELSE 0 END AS ""Answered - Not Interested"",
	CASE WHEN SUM(""Answered - Qualified"") != 0 THEN SUM(""Answered - Qualified"") ELSE 0 END AS ""Answered - Qualified"",
	CASE WHEN SUM(""Answered - Requested more Info"") != 0 THEN SUM(""Answered - Requested more Info"") ELSE 0 END AS ""Answered - Requested more Info"",
	CASE WHEN SUM(""Answered - Wrong Contact"") != 0 THEN SUM(""Answered - Wrong Contact"") ELSE 0 END AS ""Answered - Wrong Contact"",
	CASE WHEN SUM(""Bad Number"") != 0 THEN SUM(""Bad Number"") ELSE 0 END AS ""Bad Number"",
	CASE WHEN SUM(""Dropped Voicemail"") != 0 THEN SUM(""Dropped Voicemail"") ELSE 0 END AS ""Dropped Voicemail"",
	CASE WHEN SUM(""Gatekeeper"") != 0 THEN SUM(""Gatekeeper"") ELSE 0 END AS ""Gatekeeper"",
	CASE WHEN SUM(""Junk Lead - Bad Number"") != 0 THEN SUM(""Junk Lead - Bad Number"") ELSE 0 END AS ""Junk Lead - Bad Number"",
	CASE WHEN SUM(""Junk Lead -  Customer Profile"") != 0 THEN SUM(""Junk Lead -  Customer Profile"") ELSE 0 END AS ""Junk Lead -  Customer Profile"",
	CASE WHEN SUM(""Junk Lead - Wrong Information"") != 0 THEN SUM(""Junk Lead - Wrong Information"") ELSE 0 END AS ""Junk Lead - Wrong Information"",
	CASE WHEN SUM(""Left Voicemail"") != 0 THEN SUM(""Left Voicemail"") ELSE 0 END AS ""Left Voicemail"",
	CASE WHEN SUM(""No Answer"") != 0 THEN SUM(""No Answer"") ELSE 0 END AS ""No Answer"",
	CASE WHEN SUM(""Not Logged"") != 0 THEN SUM(""Not Logged"") ELSE 0 END AS ""Not Logged"",
	CASE WHEN SUM(""Orum"") != 0 THEN SUM(""Orum"") ELSE 0 END AS ""Orum""*/
	FROM
	(
	SELECT 
		call.id AS call_id,
		call.relationship_user_id,
		sequence.name,
		call.answered_at,
		call.completed_at,
		call.created_at,
		timezone('PDT'::text, date_trunc('hour', call.created_at::timestamp with time zone))::timestamp with time zone AS date,
			CASE WHEN call.direction = 'outbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS outbound,
			CASE WHEN call.direction = 'inbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS inbound,
			CASE WHEN disposition.name = 'Answered - Qualified' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Qualified"",
			CASE WHEN disposition.name = 'Answered -Qualified' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered -Qualified"",
			CASE WHEN disposition.name = 'Answered - Follow Up' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Follow Up"",
			CASE WHEN disposition.name = 'Answered - Hold for Future' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Hold for Future"",
			CASE WHEN disposition.name = 'Answered -Hold for Future' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered -Hold for Future"",
			CASE WHEN disposition.name = 'Answered - Not Interested' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Not Interested"",
			CASE WHEN disposition.name = 'Gatekeeper' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Gatekeeper"",
			CASE WHEN disposition.name = 'Left Voicemail' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Left Voicemail"",
			CASE WHEN disposition.name = 'No Answer' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""No Answer"",
			CASE WHEN disposition.name = 'Junk Lead - Bad Number' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Bad Number"",
			CASE WHEN disposition.name = 'Junk Lead -  Customer Profile ' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Customer Profile"",
			CASE WHEN disposition.name = 'Junk Lead - Wrong Information' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Wrong Information"",
		    CASE WHEN disposition.name = 'Answered - Already Has a Solution' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Already Has a Solution"",
			CASE WHEN disposition.name = 'Answered - Not A Current Product Fit' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Not A Current Product Fit"",
		    CASE WHEN disposition.name = 'Answered - Just Researching' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Just Researching"",
			CASE WHEN disposition.name = 'Answered - No Longer w/ Company' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - No Longer w/ Company"",
			CASE WHEN disposition.name = 'Answered - No Longer with Company' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - No Longer with Company"",
			CASE WHEN disposition.name = 'Answered - Already has a solution' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Already has a solution"",
			CASE WHEN disposition.name IS NULL THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Not Logged""
			/*CASE WHEN call.direction = 'outbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS outbound,
			CASE WHEN call.direction = 'inbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS inbound,
			CASE WHEN disposition.name = 'Answered - Already has a solution' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Already has a solution"",
			CASE WHEN disposition.name = 'Answered - Follow Up' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Follow Up"",
			CASE WHEN disposition.name = 'Answered - Hold for Future' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Hold for Future"",
			CASE WHEN disposition.name = 'Answered - Just Researching' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Just Researching"",
			CASE WHEN disposition.name = 'Answered - Meeting Set' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Meeting Set"",
			CASE WHEN disposition.name = 'Answered - No Longer with Company' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - No Longer with Company"",
			CASE WHEN disposition.name = 'Answered - Not Interested' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Not Interested"",
			CASE WHEN disposition.name = 'Answered - Qualified' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Qualified"",
			CASE WHEN disposition.name = 'Answered - Requested more Info' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Requested more Info"",
			CASE WHEN disposition.name = 'Answered - Wrong Contact' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Wrong Contact"",
			CASE WHEN disposition.name = 'Bad Number' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Bad Number"",
			CASE WHEN disposition.name = 'Junk Lead - Bad Number' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Bad Number"",
			CASE WHEN disposition.name = 'Junk Lead -  Customer Profile' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead -  Customer Profile"",
			CASE WHEN disposition.name = 'Junk Lead - Wrong Information' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Wrong Information"",
			CASE WHEN disposition.name = 'Left Voicemail' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Left Voicemail"",
			CASE WHEN disposition.name = 'No Answer' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""No Answer"",
			CASE WHEN disposition.name IS NULL THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Not Logged"",
			CASE WHEN disposition.name = 'Orum' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Orum""*/
	FROM outreach.v_outreach_call_current call
	LEFT JOIN outreach.v_outreach_call_disposition_current disposition
	ON call.relationship_call_disposition_id = disposition.id
	LEFT JOIN outreach.v_outreach_sequence_current sequence
	ON call.relationship_sequence_id = sequence.id
		--WHERE call.relationship_user_id='581'
	--WHERE call.created_at::date BETWEEN '2022-11-01 AND '2021-11-30'
	) AS dt
LEFT JOIN outreach.v_outreach_users_current u
ON dt.relationship_user_id = u.id
GROUP BY 1, 2 , 3, 4, 5, 6, 7, 8, 9
ORDER BY 4 DESC"
66c95a64-407d-3ac3-2287-8ea242b84cd7,Outreach - Calls,postgres,"SELECT call_tag.call_id, call_tag.tag_name
FROM outreach.call_tag call_tag"
66c95a64-407d-3ac3-2287-8ea242b84cd7,Outreach - Calls,postgres,"with user_team as (with table_date as (select user_id,  max(_fivetran_synced) as last_updated
from outreach.user_team
--where user_id='488'
group by 1)
select distinct table_date.*, users.team_id
from table_date
left join outreach.user_team as users
on table_date.last_updated=users._fivetran_synced
and table_date.user_id=users.user_id)
select user_team.user_id, user_team.team_id, team.name AS team_name
from user_team
left join outreach.v_outreach_team_current team
ON user_team.team_id = team.id"
5c759498-1567-076a-7c86-4a29430c99e7,Custom SQL Query (gpbidb),postgres,"WITH v_gp_sfdc_leads_and_opportunities AS (
         SELECT DISTINCT account.id AS account_id,
            account.name AS account_name,
                CASE
                    WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    ELSE date_trunc('month'::text, opps.created_date)
                END AS mql_cohort_month,
            leads.id AS lead_id,
            opps.b_d_r__date__c,
            opps.id AS opp_id,
            leads.is_converted,
            leads.converted_opportunity_id,
            leads.country AS lead_country,
            leads.campaign__source__c AS campaign_name,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    ELSE NULL::text
                END AS lead_disqualified_reason,
            leads.status AS lead_status,
            opps.opportunity__status__c AS opp_status,
            opps.closed__lost__c,
            leads.country_code AS lead_country_code,
            leads.lead_tier_c,
            opps.lead_source_tier_c,
            leads.bdr_unqualified_reason__c AS bdr_unqualified_reason,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    ELSE NULL::text
                END AS country_code,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    ELSE NULL::text
                END AS client_country,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    ELSE NULL::text
                END AS client_region,
            leads.created_date AS mql_date,
            leads.converted_date,
            leads.partner_acquisition__c AS partner_acq_leads,
            -- usr_lead_opp.leads_owner_name,
            -- usr_lead_opp.leads_owner_manager,
            opps.created_date,
            opps.sales__accepted__date__c AS sal_accepted_date,
            opps.s_a_l__c,
            opps.s_a_l_by__sales__c,
            opps.record_type_bi__c,
            opps.close_date AS msa_date,
            opps.stage_name,
            opps.partner_acquisition__c AS partner_acq_opps,
            opps.is_won AS opp_won,
            opps.record_type_text_id_c AS record_type_opps,
            -- usr_lead_opp.opps_owner_name,
            -- usr_lead_opp.opps_owner_manager,
            opps.name AS opp_name,
            opps.type AS opp_type,
            acc_partn.partner_level__c AS partner_level,
            opps.pricing_model__c AS pricing_model_opps,
                CASE
                    WHEN leads.lead_source IS NULL THEN opps.lead_source
                    ELSE leads.lead_source
                END::text AS lead_or_opp_source,
            -- usr_lead_opp.partner_development_owner,
            -- usr_lead_opp.bdr_owner_name,
            -- usr_lead_opp.bdr_manager_name,
            acc_partn.name AS partner,
            acc_partn.client_region_billing_country AS partner_region,
            account.type AS account_type,
            account.pricing_model__c AS acc_pricing_model,
                CASE
                    WHEN (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) 
	 				AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) 
	 				-- AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text) 
	 				THEN 'Non Partner Opp or Existing Business'::text
                    ELSE 'Partner Opp or Existing Business'::text
                END AS opp_go_flag,
            opps.immediate_headcount_c,
            opps.headcount_c,
            opps.de_country_c,
            opps.closed_lost_category_detail_c,
            opps.incumbent_solution_c,
            opps.competitorsthatare_involved_c,
            opps.contact_id,
            opps.primary_quotes_pricing_model_c,
            opps.competitors__involved__c,
            opps.other__competitor__c,
            opps.update_time AS fivetran_synced_opps,
            opps.total_professionals_c,
            leads.update_time AS fivetran_synced_leads,
            leads.company,
            leads.name,
            leads.email,
            acc_partn.billing_country AS partner_country,
            opps.existing_business_deal_classification_c,
            opps.existing_business_opp_type_c,
            opps.existing_business_opp_type_detail_c,
            users.name AS opp_owner_name,
            acc_partn.partner_agreement_effective_date__c AS partner_agreement_effective_date_c,
                CASE
                    WHEN leads.converted_opportunity_id IS NULL THEN 1::bigint
                    ELSE rank() OVER (PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date)
                END AS row_num,
            acc_partn.partner_vertical__c,
            acc_partn.vital_few__c,
            opps.opportunity_score_segment_c AS opps_score_segment,
            leads.opportunity_score_segment_c AS lead_score_segment,
			opps.what_is_your_primary_product_interest__c AS what_ppi,
			acc.is_gp_contractor_customer_c as gp_contractor_customer,
	 		leads.sales_motion_formula__c AS sales_motion_lead,
            opps.sales_motion_formula__c AS sales_motion_opp
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
             LEFT JOIN salesforce.v_gp_sfdc_user_current users ON users.id::text = opps.owner_id::text
			 LEFT JOIN salesforce.v_gp_sfdc_account_current_pacific_time acc ON opps.account_id::text = acc.id::text
             --LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_or_opp_id::text =
    				-- CASE
                    -- WHEN leads.id IS NULL THEN opps.id
                    -- ELSE leads.id
                -- END::text
        ), mql AS (
         SELECT DISTINCT 'MQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.lead_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.mql_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            -- v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            -- v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few__c,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.what_ppi,
			v_gp_sfdc_leads_and_opportunities.gp_contractor_customer,
			v_gp_sfdc_leads_and_opportunities.sales_motion_lead as sales_motion
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE (v_gp_sfdc_leads_and_opportunities.partner_acq_leads::text <<>> 'Yes'::text OR v_gp_sfdc_leads_and_opportunities.partner_acq_leads IS NULL) AND v_gp_sfdc_leads_and_opportunities.lead_id IS NOT NULL
        ), mql_to_sql AS (
         SELECT DISTINCT 'MQL to SQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.created_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few__c,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.what_ppi,
			v_gp_sfdc_leads_and_opportunities.gp_contractor_customer,
			v_gp_sfdc_leads_and_opportunities.sales_motion_opp as sales_motion
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_id IS NOT NULL
        ), sql_to_sal AS (
         SELECT DISTINCT 'SQL to SAL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few__c,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.what_ppi,
			v_gp_sfdc_leads_and_opportunities.gp_contractor_customer,
			v_gp_sfdc_leads_and_opportunities.sales_motion_opp as sales_motion
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c::text = 'Yes'::text
        ), sal_to_msa AS (
         SELECT DISTINCT 'SAL to MSA'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few__c,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.what_ppi,
			v_gp_sfdc_leads_and_opportunities.gp_contractor_customer,
			v_gp_sfdc_leads_and_opportunities.sales_motion_opp as sales_motion
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = true
        ), closed_lost AS (
         SELECT DISTINCT 'Closed Lost'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few__c,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.what_ppi,
			v_gp_sfdc_leads_and_opportunities.gp_contractor_customer,
			v_gp_sfdc_leads_and_opportunities.sales_motion_opp as sales_motion
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = false AND v_gp_sfdc_leads_and_opportunities.stage_name::text = 'Closed Lost'::text
        ), full_union AS (
         SELECT mql.cohort_stage,
            mql.account_id,
            mql.account_name,
            mql.b_d_r__date__c,
            mql.lead_or_opp_id,
            mql.point_time_date,
            mql.mql_cohort_month,
            mql.lead_id,
            mql.opp_id,
            mql.is_converted,
            mql.converted_opportunity_id,
            mql.lead_country,
            mql.campaign_name,
            mql.lead_disqualified_reason,
            mql.lead_status,
            mql.opp_status,
            mql.closed__lost__c,
            mql.lead_country_code,
            mql.country_code,
            mql.tier,
            mql.bdr_unqualified_reason,
            mql.client_region,
            mql.client_country,
            mql.mql_date,
            mql.converted_date,
            mql.partner_acq_leads,
            --mql.leads_owner_name,
            --mql.leads_owner_manager,
            mql.created_date,
            mql.sal_accepted_date,
            mql.s_a_l__c,
            mql.s_a_l_by__sales__c,
            mql.record_type_bi__c,
            mql.msa_date,
            mql.stage_name,
            mql.partner_acq_opps,
            mql.opp_won,
            mql.record_type_opps,
            mql.pricing_model_opps,
            --mql.opps_owner_name,
            --mql.opps_owner_manager,
            mql.opp_name,
            mql.opp_type,
            mql.partner_level,
            mql.lead_or_opp_source,
            --mql.partner_development_owner,
            --mql.bdr_owner_name,
            --mql.bdr_manager_name,
            mql.partner,
            mql.partner_region,
            mql.account_type,
            mql.acc_pricing_model,
            mql.opp_go_flag,
            mql.immediate_headcount_c,
            mql.headcount_c,
            mql.de_country_c,
            mql.closed_lost_category_detail_c,
            mql.incumbent_solution_c,
            mql.competitorsthatare_involved_c,
            mql.contact_id,
            mql.primary_quotes_pricing_model_c,
            mql.competitors__involved__c,
            mql.other__competitor__c,
            mql.fivetran_synced_opps,
            mql.fivetran_synced_leads,
            mql.partner_country,
            mql.existing_business_deal_classification_c,
            mql.existing_business_opp_type_c,
            mql.existing_business_opp_type_detail_c,
            mql.opp_owner_name,
            mql.row_num,
            mql.partner_vertical__c,
            mql.vital_few__c,
            mql.partner_agreement_effective_date_c,
            mql.opps_score_segment,
            mql.lead_score_segment,
			mql.what_ppi,
			mql.gp_contractor_customer,
			mql.sales_motion
           FROM mql
        UNION ALL
         SELECT mql_to_sql.cohort_stage,
            mql_to_sql.account_id,
            mql_to_sql.account_name,
            mql_to_sql.b_d_r__date__c,
            mql_to_sql.lead_or_opp_id,
            mql_to_sql.point_time_date,
            mql_to_sql.mql_cohort_month,
            mql_to_sql.lead_id,
            mql_to_sql.opp_id,
            mql_to_sql.is_converted,
            mql_to_sql.converted_opportunity_id,
            mql_to_sql.lead_country,
            mql_to_sql.campaign_name,
            mql_to_sql.lead_disqualified_reason,
            mql_to_sql.lead_status,
            mql_to_sql.opp_status,
            mql_to_sql.closed__lost__c,
            mql_to_sql.lead_country_code,
            mql_to_sql.country_code,
            mql_to_sql.tier,
            mql_to_sql.bdr_unqualified_reason,
            mql_to_sql.client_region,
            mql_to_sql.client_country,
            mql_to_sql.mql_date,
            mql_to_sql.converted_date,
            mql_to_sql.partner_acq_leads,
            --mql_to_sql.leads_owner_name,
           -- mql_to_sql.leads_owner_manager,
            mql_to_sql.created_date,
            mql_to_sql.sal_accepted_date,
            mql_to_sql.s_a_l__c,
            mql_to_sql.s_a_l_by__sales__c,
            mql_to_sql.record_type_bi__c,
            mql_to_sql.msa_date,
            mql_to_sql.stage_name,
            mql_to_sql.partner_acq_opps,
            mql_to_sql.opp_won,
            mql_to_sql.record_type_opps,
            mql_to_sql.pricing_model_opps,
            --mql_to_sql.opps_owner_name,
            --mql_to_sql.opps_owner_manager,
            mql_to_sql.opp_name,
            mql_to_sql.opp_type,
            mql_to_sql.partner_level,
            mql_to_sql.lead_or_opp_source,
            --mql_to_sql.partner_development_owner,
            --mql_to_sql.bdr_owner_name,
            --mql_to_sql.bdr_manager_name,
            mql_to_sql.partner,
            mql_to_sql.partner_region,
            mql_to_sql.account_type,
            mql_to_sql.acc_pricing_model,
            mql_to_sql.opp_go_flag,
            mql_to_sql.immediate_headcount_c,
            mql_to_sql.headcount_c,
            mql_to_sql.de_country_c,
            mql_to_sql.closed_lost_category_detail_c,
            mql_to_sql.incumbent_solution_c,
            mql_to_sql.competitorsthatare_involved_c,
            mql_to_sql.contact_id,
            mql_to_sql.primary_quotes_pricing_model_c,
            mql_to_sql.competitors__involved__c,
            mql_to_sql.other__competitor__c,
            mql_to_sql.fivetran_synced_opps,
            mql_to_sql.fivetran_synced_leads,
            mql_to_sql.partner_country,
            mql_to_sql.existing_business_deal_classification_c,
            mql_to_sql.existing_business_opp_type_c,
            mql_to_sql.existing_business_opp_type_detail_c,
            mql_to_sql.opp_owner_name,
            mql_to_sql.row_num,
            mql_to_sql.partner_vertical__c,
            mql_to_sql.vital_few__c,
            mql_to_sql.partner_agreement_effective_date_c,
            mql_to_sql.opps_score_segment,
            mql_to_sql.lead_score_segment,
			mql_to_sql.what_ppi,
			mql_to_sql.gp_contractor_customer,
			mql_to_sql.sales_motion
           FROM mql_to_sql
        UNION ALL
         SELECT sql_to_sal.cohort_stage,
            sql_to_sal.account_id,
            sql_to_sal.account_name,
            sql_to_sal.b_d_r__date__c,
            sql_to_sal.lead_or_opp_id,
            sql_to_sal.point_time_date,
            sql_to_sal.mql_cohort_month,
            sql_to_sal.lead_id,
            sql_to_sal.opp_id,
            sql_to_sal.is_converted,
            sql_to_sal.converted_opportunity_id,
            sql_to_sal.lead_country,
            sql_to_sal.campaign_name,
            sql_to_sal.lead_disqualified_reason,
            sql_to_sal.lead_status,
            sql_to_sal.opp_status,
            sql_to_sal.closed__lost__c,
            sql_to_sal.lead_country_code,
            sql_to_sal.country_code,
            sql_to_sal.tier,
            sql_to_sal.bdr_unqualified_reason,
            sql_to_sal.client_region,
            sql_to_sal.client_country,
            sql_to_sal.mql_date,
            sql_to_sal.converted_date,
            sql_to_sal.partner_acq_leads,
            --sql_to_sal.leads_owner_name,
            --sql_to_sal.leads_owner_manager,
            sql_to_sal.created_date,
            sql_to_sal.sal_accepted_date,
            sql_to_sal.s_a_l__c,
            sql_to_sal.s_a_l_by__sales__c,
            sql_to_sal.record_type_bi__c,
            sql_to_sal.msa_date,
            sql_to_sal.stage_name,
            sql_to_sal.partner_acq_opps,
            sql_to_sal.opp_won,
            sql_to_sal.record_type_opps,
            sql_to_sal.pricing_model_opps,
            --sql_to_sal.opps_owner_name,
            --sql_to_sal.opps_owner_manager,
            sql_to_sal.opp_name,
            sql_to_sal.opp_type,
            sql_to_sal.partner_level,
            sql_to_sal.lead_or_opp_source,
            --sql_to_sal.partner_development_owner,
            --sql_to_sal.bdr_owner_name,
            --sql_to_sal.bdr_manager_name,
            sql_to_sal.partner,
            sql_to_sal.partner_region,
            sql_to_sal.account_type,
            sql_to_sal.acc_pricing_model,
            sql_to_sal.opp_go_flag,
            sql_to_sal.immediate_headcount_c,
            sql_to_sal.headcount_c,
            sql_to_sal.de_country_c,
            sql_to_sal.closed_lost_category_detail_c,
            sql_to_sal.incumbent_solution_c,
            sql_to_sal.competitorsthatare_involved_c,
            sql_to_sal.contact_id,
            sql_to_sal.primary_quotes_pricing_model_c,
            sql_to_sal.competitors__involved__c,
            sql_to_sal.other__competitor__c,
            sql_to_sal.fivetran_synced_opps,
            sql_to_sal.fivetran_synced_leads,
            sql_to_sal.partner_country,
            sql_to_sal.existing_business_deal_classification_c,
            sql_to_sal.existing_business_opp_type_c,
            sql_to_sal.existing_business_opp_type_detail_c,
            sql_to_sal.opp_owner_name,
            sql_to_sal.row_num,
            sql_to_sal.partner_vertical__c,
            sql_to_sal.vital_few__c,
            sql_to_sal.partner_agreement_effective_date_c,
            sql_to_sal.opps_score_segment,
            sql_to_sal.lead_score_segment,
			sql_to_sal.what_ppi,
			sql_to_sal.gp_contractor_customer,
			sql_to_sal.sales_motion
           FROM sql_to_sal
        UNION ALL
         SELECT sal_to_msa.cohort_stage,
            sal_to_msa.account_id,
            sal_to_msa.account_name,
            sal_to_msa.b_d_r__date__c,
            sal_to_msa.lead_or_opp_id,
            sal_to_msa.point_time_date,
            sal_to_msa.mql_cohort_month,
            sal_to_msa.lead_id,
            sal_to_msa.opp_id,
            sal_to_msa.is_converted,
            sal_to_msa.converted_opportunity_id,
            sal_to_msa.lead_country,
            sal_to_msa.campaign_name,
            sal_to_msa.lead_disqualified_reason,
            sal_to_msa.lead_status,
            sal_to_msa.opp_status,
            sal_to_msa.closed__lost__c,
            sal_to_msa.lead_country_code,
            sal_to_msa.country_code,
            sal_to_msa.tier,
            sal_to_msa.bdr_unqualified_reason,
            sal_to_msa.client_region,
            sal_to_msa.client_country,
            sal_to_msa.mql_date,
            sal_to_msa.converted_date,
            sal_to_msa.partner_acq_leads,
            --sal_to_msa.leads_owner_name,
            --sal_to_msa.leads_owner_manager,
            sal_to_msa.created_date,
            sal_to_msa.sal_accepted_date,
            sal_to_msa.s_a_l__c,
            sal_to_msa.s_a_l_by__sales__c,
            sal_to_msa.record_type_bi__c,
            sal_to_msa.msa_date,
            sal_to_msa.stage_name,
            sal_to_msa.partner_acq_opps,
            sal_to_msa.opp_won,
            sal_to_msa.record_type_opps,
            sal_to_msa.pricing_model_opps,
            --sal_to_msa.opps_owner_name,
            --sal_to_msa.opps_owner_manager,
            sal_to_msa.opp_name,
            sal_to_msa.opp_type,
            sal_to_msa.partner_level,
            sal_to_msa.lead_or_opp_source,
            --sal_to_msa.partner_development_owner,
            --sal_to_msa.bdr_owner_name,
            --sal_to_msa.bdr_manager_name,
            sal_to_msa.partner,
            sal_to_msa.partner_region,
            sal_to_msa.account_type,
            sal_to_msa.acc_pricing_model,
            sal_to_msa.opp_go_flag,
            sal_to_msa.immediate_headcount_c,
            sal_to_msa.headcount_c,
            sal_to_msa.de_country_c,
            sal_to_msa.closed_lost_category_detail_c,
            sal_to_msa.incumbent_solution_c,
            sal_to_msa.competitorsthatare_involved_c,
            sal_to_msa.contact_id,
            sal_to_msa.primary_quotes_pricing_model_c,
            sal_to_msa.competitors__involved__c,
            sal_to_msa.other__competitor__c,
            sal_to_msa.fivetran_synced_opps,
            sal_to_msa.fivetran_synced_leads,
            sal_to_msa.partner_country,
            sal_to_msa.existing_business_deal_classification_c,
            sal_to_msa.existing_business_opp_type_c,
            sal_to_msa.existing_business_opp_type_detail_c,
            sal_to_msa.opp_owner_name,
            sal_to_msa.row_num,
            sal_to_msa.partner_vertical__c,
            sal_to_msa.vital_few__c,
            sal_to_msa.partner_agreement_effective_date_c,
            sal_to_msa.opps_score_segment,
            sal_to_msa.lead_score_segment,
			sal_to_msa.what_ppi,
			sal_to_msa.gp_contractor_customer,
			sal_to_msa.sales_motion
           FROM sal_to_msa
        UNION ALL
         SELECT closed_lost.cohort_stage,
            closed_lost.account_id,
            closed_lost.account_name,
            closed_lost.b_d_r__date__c,
            closed_lost.lead_or_opp_id,
            closed_lost.point_time_date,
            closed_lost.mql_cohort_month,
            closed_lost.lead_id,
            closed_lost.opp_id,
            closed_lost.is_converted,
            closed_lost.converted_opportunity_id,
            closed_lost.lead_country,
            closed_lost.campaign_name,
            closed_lost.lead_disqualified_reason,
            closed_lost.lead_status,
            closed_lost.opp_status,
            closed_lost.closed__lost__c,
            closed_lost.lead_country_code,
            closed_lost.country_code,
            closed_lost.tier,
            closed_lost.bdr_unqualified_reason,
            closed_lost.client_region,
            closed_lost.client_country,
            closed_lost.mql_date,
            closed_lost.converted_date,
            closed_lost.partner_acq_leads,
            --closed_lost.leads_owner_name,
            --closed_lost.leads_owner_manager,
            closed_lost.created_date,
            closed_lost.sal_accepted_date,
            closed_lost.s_a_l__c,
            closed_lost.s_a_l_by__sales__c,
            closed_lost.record_type_bi__c,
            closed_lost.msa_date,
            closed_lost.stage_name,
            closed_lost.partner_acq_opps,
            closed_lost.opp_won,
            closed_lost.record_type_opps,
            closed_lost.pricing_model_opps,
            --closed_lost.opps_owner_name,
            --closed_lost.opps_owner_manager,
            closed_lost.opp_name,
            closed_lost.opp_type,
            closed_lost.partner_level,
            closed_lost.lead_or_opp_source,
            --closed_lost.partner_development_owner,
            --closed_lost.bdr_owner_name,
            --closed_lost.bdr_manager_name,
            closed_lost.partner,
            closed_lost.partner_region,
            closed_lost.account_type,
            closed_lost.acc_pricing_model,
            closed_lost.opp_go_flag,
            closed_lost.immediate_headcount_c,
            closed_lost.headcount_c,
            closed_lost.de_country_c,
            closed_lost.closed_lost_category_detail_c,
            closed_lost.incumbent_solution_c,
            closed_lost.competitorsthatare_involved_c,
            closed_lost.contact_id,
            closed_lost.primary_quotes_pricing_model_c,
            closed_lost.competitors__involved__c,
            closed_lost.other__competitor__c,
            closed_lost.fivetran_synced_opps,
            closed_lost.fivetran_synced_leads,
            closed_lost.partner_country,
            closed_lost.existing_business_deal_classification_c,
            closed_lost.existing_business_opp_type_c,
            closed_lost.existing_business_opp_type_detail_c,
            closed_lost.opp_owner_name,
            closed_lost.row_num,
            closed_lost.partner_vertical__c,
            closed_lost.vital_few__c,
            closed_lost.partner_agreement_effective_date_c,
            closed_lost.opps_score_segment,
            closed_lost.lead_score_segment,
			closed_lost.what_ppi,
			closed_lost.gp_contractor_customer,
			closed_lost.sales_motion
           FROM closed_lost
        )
 SELECT DISTINCT full_union.cohort_stage,
    full_union.account_id,
    full_union.account_name,
    full_union.b_d_r__date__c,
    full_union.lead_or_opp_id,
    full_union.point_time_date,
    full_union.mql_cohort_month,
    full_union.lead_id,
    full_union.opp_id,
    full_union.is_converted,
    full_union.converted_opportunity_id,
    full_union.lead_country,
    full_union.campaign_name,
    full_union.lead_disqualified_reason,
    full_union.lead_status,
    full_union.opp_status,
    full_union.closed__lost__c,
    full_union.lead_country_code,
    full_union.country_code,
    full_union.tier,
    full_union.bdr_unqualified_reason,
    full_union.client_region,
    full_union.client_country,
    full_union.mql_date,
    full_union.converted_date,
    full_union.partner_acq_leads,
    --full_union.leads_owner_name,
    --full_union.leads_owner_manager,
    full_union.created_date,
    full_union.sal_accepted_date,
    full_union.s_a_l__c,
    full_union.s_a_l_by__sales__c,
    full_union.record_type_bi__c,
    full_union.msa_date,
    full_union.stage_name,
    full_union.partner_acq_opps,
    full_union.opp_won,
    full_union.record_type_opps,
    full_union.pricing_model_opps,
    --full_union.opps_owner_name,
    --full_union.opps_owner_manager,
    full_union.opp_name,
    full_union.opp_type,
    full_union.partner_level,
    full_union.lead_or_opp_source,
    --full_union.partner_development_owner,
    --full_union.bdr_owner_name,
    --full_union.bdr_manager_name,
    full_union.partner,
    full_union.partner_region,
    full_union.account_type,
    full_union.acc_pricing_model,
    full_union.opp_go_flag,
    full_union.immediate_headcount_c,
    full_union.headcount_c,
    full_union.de_country_c,
    full_union.closed_lost_category_detail_c,
    full_union.incumbent_solution_c,
    full_union.competitorsthatare_involved_c,
    full_union.contact_id,
    full_union.primary_quotes_pricing_model_c,
    full_union.competitors__involved__c,
    full_union.other__competitor__c,
    full_union.fivetran_synced_opps,
    full_union.fivetran_synced_leads,
    full_union.partner_country,
    full_union.existing_business_deal_classification_c,
    full_union.existing_business_opp_type_c,
    full_union.existing_business_opp_type_detail_c,
    full_union.opp_owner_name,
    full_union.row_num,
    full_union.partner_vertical__c,
    full_union.vital_few__c,
    full_union.partner_agreement_effective_date_c,
    full_union.opps_score_segment,
    full_union.lead_score_segment,
	full_union.what_ppi,
	full_union.gp_contractor_customer,
	full_union.sales_motion
   FROM full_union
  WHERE full_union.row_num = 1"
5956b520-7fdc-00f4-8b78-1cc4956f2394,Custom SQL Query+ (gpbidb),postgres,"with A as(
	SELECT t1.id, 
        t1.lsp_professional_id,
		concat(t1.first_name,' ',t1.last_name) as Professional,
	   	case 
	   		when t1.status='1' then 'New' 
	   		when t1.status='2' then 'Onboarding'
	   		when t1.status='3' then 'Active'
	   		when t1.status='4' then 'Terminating'
	   		when t1.status='5' then 'Inactive'
		end as Pro_Status,
	   	t2.name as Client,
                t1.client_id,
	   	t2.status as client_status, 
	   	T9.NAME AS LSP_NAME,
	   	t4.name as Country,
	   	t7.name as Benefit_type,
	   	case 
	   		when t8.mandatory='1' then 'Mandatory'
	   		when t8.mandatory='0' then 'Supplemental'
	   	end as Plan_Type,
	   	t6.name as Plan_Name,
		t6.custom,
		case 
			when t6.active='1' then 'Yes'
			when t6.active='0' then 'No' 
			else null
		end as Active_plan,
		t5.benefit_id,
	   	t5.status,
	   	case 
	   		when t5.status='1' then 'Offered' 
	   		when t5.status='2' then 'Enrolled'
	   		when t5.status='3' then 'Declined' 
	   		when t5.status='4' then 'Unenrolled'
			else t5.status
		end as benefit_status,
		t5.enrollment_date,
		t5.unenrollment_date,
	t1.contract_start_date,
		t1.payroll_start_date, 
		t1.payroll_end_date,
        t1.annual_base_salary AS salary
	from goglobal_gp_goglobal.v_gp_gg_professional_current t1
	left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on t1.client_id=t2.id
	left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t3  on t1.lsp_country_id=t3.id
	left join goglobal_gp_goglobal.v_gp_gg_country_current t4 on t3.country_id=t4.id
	left join benefits_gp_benefits.v_benefits_professional_benefit_enrollment_current t5 on t1.id=t5.professional_external_id::integer
	left join benefits_gp_benefits.v_benefits_benefit_current t6 on t5.benefit_id=t6.id::INTEGER and t4.id=t6.country_external_id::integer
	left join benefits_gp_benefits.v_benefits_benefit_type_current t7 on t6.benefit_type_id=t7.id::INTEGER
	left join benefits_gp_benefits.v_benefits_country_benefit_type_current t8 on t7.id::INTEGER=t8.benefit_type_id and t8.country_external_id::integer=t4.id 
	LEFT JOIN goglobal_gp_goglobal.V_GP_GG_LSP_CURRENT T9 ON T3.LSP_ID=T9.ID
	where is_failed_to_launch='false' 
		and is_demo_client='false' 
	order by professional),
b as(
	select *, 
	case 
		when (benefit_type is null and status is null) then 'A'
		when (benefit_type is null and status is NOT null) THEN 'B'
	END AS FLAG FROM A),
pension as(
select t1.id, t1.country, t1.professional,t1.pro_status,t1.client,t1.client_status, t1.contract_start_date, t1.benefit_type,t1.plan_name, t1.benefit_status
from b t1 where country='Canada' and benefit_type in ('Pension')
),
medical as (
select t1.id, t1.country, t1.professional,t1.pro_status,t1.client,t1.client_status, t1.contract_start_date, t1.benefit_type,t1.plan_name, t1.benefit_status
from b t1 where country='Canada' and benefit_type in ('Medical Bundled','Executive Medical Concierge ')),
Premium AS (
	SELECT 
	t1.country_id, t1.client_id,
	t2.name as client,t2.status,t2.is_demo_client,
	t3.name as country,
	t4.is_applicable, t4.markup_transaction_amt,t4.markup_transaction_id
	FROM goglobal_gp_goglobal.v_gp_gg_client_country_current t1
	left join goglobal_gp_goglobal.v_gp_gg_client_current t2 
		on t1.client_id=t2.id
	left join goglobal_gp_goglobal.v_gp_gg_country_current t3 on t1.country_id=t3.id
	left join goglobal_gp_goglobal.v_gp_gg_client_country_markup_transaction_current t4 on t1.id=t4.client_country_id
	WHERE t2.is_demo_client = false AND t3.name = 'Canada' AND t4.markup_transaction_id='1'
),
markup AS (
SELECT professional_id AS id, type AS m_type, local_amount AS amount, local_currency AS currency, 
billing_amount AS dollar_amount, invoice_date AS markup_date
FROM goglobal_gp_goglobal.v_gp_gg_total_bills_mat AS tbi
WHERE type = 'Insurance Premium Markup' AND country = 'Canada'
)

select distinct 
t1.id,
t1.lsp_professional_id,
t1.professional,
 t1.country, t1.pro_status,t1.client,t1.client_status, t1.contract_start_date, t1.salary,
pension.benefit_type as Pension, pension.plan_name as Pension_plan_name, pension.benefit_status as pension_benefit_status,
medical.benefit_type as medical, medical.plan_name as medical_plan_name, medical.benefit_status as medical_benefit_status,
premium.is_applicable, premium.markup_transaction_amt,premium.markup_transaction_id,
markup.amount AS amount, markup.currency, markup.dollar_amount, markup.markup_date, 
markup.m_type
from b t1
left join pension on t1.id=pension.id
left join medical on t1.id=medical.id
left join premium ON t1.client_id = premium.client_id
left join markup ON t1.id = markup.id
where t1.country='Canada'"
5956b520-7fdc-00f4-8b78-1cc4956f2394,Custom SQL Query+ (gpbidb),postgres,"select *
FROM GOGLOBAL_GP_GOGLOBAL.V_GP_GG_transactions_MAT
WHERE transaction in ('Insurance Premium','Insurance Premium - Life', 
'Pension', 'Pension Adjustment')"
5956b520-7fdc-00f4-8b78-1cc4956f2394,Custom SQL Query+ (gpbidb),postgres,"SELECT DISTINCT professional_id,CONCAT(v.first_name, ' ', v.last_name) AS professional_name, p.personal_email,
province_id, pr.name AS professional_province, a.city as professional_city, a.postal_code, 
CONCAT(a.address1, ' ', a.address2) AS professional_address
	FROM ""goglobal_gp_goglobal"".""v_tableau_headcount_dashboard"" as v
	LEFT JOIN ""goglobal_gp_goglobal"".""professional"" as p
	ON v.professional_id = p.id
	LEFT JOIN ""goglobal_gp_goglobal"".""address"" as a
	ON p.home_address_id = a.id
	LEFT JOIN ""goglobal_gp_goglobal"".""province"" as pr
	ON a.province_id = pr.id
	WHERE active_flag = 'Active'
	AND cal_date <<= CURRENT_DATE
	ORDER BY professional_id"
4ee0c837-29ef-71bf-9a1d-0c5e183a94d0,Custom SQL Query (gpbidb),postgres,"SELECT DISTINCT
       client.id, 
       client.name,
	   client.pricing_model,
	   partner.name AS partner, 
	   CASE WHEN client.msa_contract_start_date_peo IS NOT NULL THEN client.msa_contract_start_date_peo
	        WHEN client.msa_contract_start_date_peo IS NULL AND client.msa_contract_start_date_services IS NOT NULL THEN client.msa_contract_start_date_services
	        WHEN client.msa_contract_start_date_services IS NULL AND client.msa_contract_start_date_sourcing IS NOT NULL THEN client.msa_contract_start_date_sourcing
	        WHEN client.msa_contract_start_date_sourcing IS NULL AND client.msa_contract_start_date_aso IS NOT NULL THEN client.msa_contract_start_date_aso
	   ELSE client.msa_contract_start_date_peo END AS gpp_contract_date,
	   client.salesforce_account_id AS integration_id,
	   SFDC.min_close_date AS min_sfdc_close_date,
	   prof.first_pop,
	   pop.current_month_pop,
	   contractors.current_month_contractors
FROM goglobal_gp_goglobal.v_gp_gg_client_current client
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current partner ON client.partners_referral_id = partner.id
LEFT JOIN (SELECT client_id, MIN(payroll_start_date) AS first_pop
		   FROM goglobal_gp_goglobal.v_gp_gg_professional_current
		   WHERE is_failed_to_launch= false
		   AND (service_class <<>> '4' OR service_class IS NULL)
                   AND date_trunc('month', payroll_start_date) <<= date_trunc('month', CURRENT_DATE)
		   GROUP BY 1) AS prof ON client.id = prof.client_id
		   
LEFT JOIN (SELECT client_id, COUNT(DISTINCT professional_id) AS current_month_pop
		   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
		   WHERE DATE_TRUNC('month', cal_date) = DATE_TRUNC ('month', CURRENT_DATE)
		   AND (service_class IS NULL OR service_class <<>> '4')
		   AND active_flag = 'Active'
		   GROUP BY 1) AS pop ON client.id = pop.client_id
		   
LEFT JOIN (SELECT client_id, COUNT(DISTINCT professional_id) AS current_month_contractors
		   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
		   WHERE DATE_TRUNC('month', cal_date) = DATE_TRUNC ('month', CURRENT_DATE)
		   AND service_class = '4'
		   AND active_flag = 'Active'
		   GROUP BY 1) AS contractors ON client.id = contractors.client_id
		   
LEFT JOIN (SELECT DISTINCT account_id, stage_name, type, MIN(close_date) AS min_close_date
		  FROM salesforce.v_gp_sfdc_opportunity_current
		  WHERE stage_name = 'Closed Won'
		  AND ( record_type_text_id_c IS NULL OR record_type_text_id_c <<>> 'Potential Partner Opportunity')
		  AND (what_is_your_primary_product_interest__c IS NULL OR what_is_your_primary_product_interest__c <<>> 'G-P Contractor')
		  AND (pricing_model__c IS NULL OR pricing_model__c <<>> 'Contractor only')
		  AND (type IS NULL OR type <<>> 'Existing Business')
		  GROUP BY 1,2,3 ) AS SFDC 
		  ON client.salesforce_account_id = SFDC.account_id

		   
WHERE client.is_demo_client = false
ORDER BY client.id"
4fc544a7-2765-7743-e707-4d78862ffba9,Custom SQL Query (gpbidb),postgres,"WITH aud AS(
SELECT DISTINCT id,
                name,
				msa_contract_start_date_peo,
				LAG(msa_contract_start_date_peo,1) OVER (PARTITION BY id ORDER BY date_modified ASC)AS msa_contract_start_date_peo_previous_value ,
				msa_contract_start_date_aso, 
				LAG(msa_contract_start_date_aso ,1) OVER (PARTITION BY id ORDER BY date_modified)AS msa_contract_start_date_aso_previous_value,
				revtype,
				date_modified,
				modified_by  
FROM goglobal_gp_goglobal.client_aud
ORDER BY id, revtype)


SELECT aud.*, CONCAT(person.first_name, ' ', person.last_name) AS modified_by_name
FROM aud
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current person ON aud.modified_by = person.user_id



WHERE (aud.msa_contract_start_date_peo <<>> aud.msa_contract_start_date_peo_previous_value
OR aud.msa_contract_start_date_aso <<>> aud.msa_contract_start_date_aso_previous_value)
AND DATE_TRUNC('year',aud.date_modified) = '2023-01-01'
-- Cambio de fecha de contrato mayor a 30 días
AND ((aud.msa_contract_start_date_peo - aud.msa_contract_start_date_peo_previous_value)>> 30
OR (aud.msa_contract_start_date_aso - aud.msa_contract_start_date_aso_previous_value)>> 30)"
4ff6c245-b67e-bf90-8150-a103656af4ae,PoP by EOR and Contractor,,
5000fec4-e062-3d1c-f4f8-73c8c8295399,Workday AR Reports,,
5085fbe8-b11a-9ee3-604b-14fa40a5b9ea,info_schema,postgres,"select 
c.table_schema as ""Table Schema"",
c.table_name as ""Table Name"",
z.rowcount as ""Row Count"",
c.column_name as ""Column Name"",
t.table_type as ""Table Type""
from information_schema.columns c inner join
information_schema.tables t
on c.table_schema = t.table_schema
and c.table_name = t.table_name
left outer join (SELECT schemaname, relname, n_tup_ins - n_tup_del as rowcount FROM pg_stat_all_tables
				where schemaname not in ('information_schema','pg_catalog','mdm','pg_toast')) as z
on c.table_schema = z.schemaname
and c.table_name = z.relname
where c.table_schema not in ('information_schema','pg_catalog','mdm')"
5085fbe8-b11a-9ee3-604b-14fa40a5b9ea,sample_values,postgres,"select repo.get_sample_values(<[Parameters].[Parameter 3]>,<[Parameters].[Parameter 1]>,<[Parameters].[Parameter 2]>)"
50f6b0af-dc79-1bd5-534f-f0e5fbcc3767,Custom SQL Query (gpbidb),postgres,"WITH country AS (
SELECT
ra.response_id,
	qo.text as LSP_Country
	FROM survey_monkey.question q 
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh 
	ON sp.survey_id = sh.id 
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310266443' and q.subtype <<>> 'descriptive_text' and q.id='690569538'
	GROUP BY 1,2

),
name_lsp AS (
SELECT
	ra.response_id,
	qo.text as name
	FROM survey_monkey.question q 
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh 
	ON sp.survey_id = sh.id 
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310266443' and q.subtype <<>> 'descriptive_text' and q.id='691130947'
	GROUP BY 1,2

),


Role_LSP AS (
SELECT
	ra.response_id,
	qo.text as position_lsp
	FROM survey_monkey.question q 
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh 
	ON sp.survey_id = sh.id 
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310266443' and q.subtype <<>> 'descriptive_text' and q.id='691079314'
	GROUP BY 1,2

),

il AS (
SELECT
	ra.response_id,
	ra.text as issue_log
	FROM survey_monkey.question q 
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh 
	ON sp.survey_id = sh.id 
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310266443' and q.subtype <<>> 'descriptive_text' and q.id='691020263'
	GROUP BY 1,2

),

il_Group AS (SELECT
	
	ra.response_id,
	ra.text as issue_log,
	CASE WHEN q.id= '704319700' THEN 'CorpSec'
		 WHEN q.id = '704322789' THEN 'Finance'
		 WHEN q.id = '704323842' THEN 'Tax'
		 WHEN q.id = '704323990' THEN 'HR'
		 WHEN q.id = '704324224' THEN 'Payroll' END AS Group
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh 
	ON sp.survey_id = sh.id 
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310266443' and q.subtype <<>> 'descriptive_text' 
	and q.id in ('704324224','704323990','704323842','704322789','704319700')
	GROUP BY 1,2,3),

Gp as(
SELECT
	q.id as question_id,
	CASE WHEN q.id= '691136664' THEN 'CorpSec'
		 WHEN q.id = '691168919' THEN 'Finance'
		 WHEN q.id = '691170162' THEN 'Tax'
		 WHEN q.id = '691173554' THEN 'HR'
		 WHEN q.id = '691174719' THEN 'Payroll' END AS Group
	FROM survey_monkey.question q 
WHERE  q.id  in ('691136664','691168919','691170162','691173554','691174719') 
)

SELECT
	name_lsp.name,
	Role_LSP.position_lsp,
	country.LSP_Country,
	q.id as question_id,
	Gp.Group,
	qh.heading,
	CASE WHEN q.id = '691136664' THEN 'CorpSec' Else sq.text end as subquestion,
	ra.response_id,
--	ra.choice_id,
	CASE WHEN ra.choice_id = '4544693764' or ra.choice_id = '4544906398' or ra.choice_id = '4544913919' or ra.choice_id = '4544942431' or ra.choice_id = '4544935882' then 1
	 WHEN ra.choice_id = '4544693765' or ra.choice_id = '4544906399' or ra.choice_id = '4544913920' or ra.choice_id = '4544942432' or ra.choice_id = '4544935883' then 2
	 WHEN ra.choice_id = '4544693766' or ra.choice_id = '4544906400' or ra.choice_id = '4544913921' or ra.choice_id = '4544942433' or ra.choice_id = '4544935884' then 3
	 WHEN ra.choice_id = '4544693767' or ra.choice_id = '4544906401' or ra.choice_id = '4544913922' or ra.choice_id = '4544942434' or ra.choice_id = '4544935885' then 4
	 WHEN ra.choice_id = '4544693768' or ra.choice_id = '4544906402' or ra.choice_id = '4544913923' or ra.choice_id = '4544942435' or ra.choice_id = '4544935886' then 5
	 WHEN ra.choice_id = '4544693769' or ra.choice_id = '4544906403' or ra.choice_id = '4544913924' or ra.choice_id = '4544942436' or ra.choice_id = '4544935887' then 6
	 WHEN ra.choice_id = '4544693770' or ra.choice_id = '4544906404' or ra.choice_id = '4544913925' or ra.choice_id = '4544942437' or ra.choice_id = '4544935888' then 7
	 WHEN ra.choice_id = '4544693771' or ra.choice_id = '4544906405' or ra.choice_id = '4544913926' or ra.choice_id = '4544942438' or ra.choice_id = '4544935889' then 8
	 WHEN ra.choice_id = '4544693772' or ra.choice_id = '4544906406' or ra.choice_id = '4544913927' or ra.choice_id = '4544942439' or ra.choice_id = '4544935890' then 9
	 WHEN ra.choice_id = '4544693773' or ra.choice_id = '4544906407' or ra.choice_id = '4544913928' or ra.choice_id = '4544942440' or ra.choice_id = '4544935891' then 10
	 else 0 end as value,
	qo.text,
	rh.total_time as total_time,
	rh.created_at as Start_Date,
	CASE WHEN rh.created_at  >> '2021-10-05' and rh.created_at << '2021-10-22' then CONCAT(('Q2' ),' / ', extract(year from rh.created_at))
	WHEN extract(quarter from rh.created_at) = '1' then CONCAT(('Q4'),' / ', extract(year from rh.created_at)-1)
	WHEN extract(quarter from rh.created_at) = '2' then CONCAT(('Q1' ),' / ', extract(year from rh.created_at))
	WHEN extract(quarter from rh.created_at) = '3' then CONCAT(('Q2' ),' / ', extract(year from rh.created_at))
	WHEN extract(quarter from rh.created_at) = '4' then CONCAT(('Q3' ),' / ', extract(year from rh.created_at))
	END as Quater_Year_SD,
	rh.updated_at as End_Date,
	q.family, 
	q.subtype, 
	q.required_text, 
	il_Group.issue_log as issue_log_group,
	il.issue_log,
	MAX(ra._fivetran_synced)
	FROM survey_monkey.survey_history sh 
	LEFT JOIN  survey_monkey.survey_page sp
	ON sh.id = sp.survey_id
	LEFT JOIN survey_monkey.question q 
	on sp.id = q.survey_page_id
	LEFT JOIN survey_monkey.question_heading qh
	on q.id = qh.question_id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.sub_question sq
 	on ra.row_id = sq.id
	LEFT JOIN survey_monkey.response_page rp
	on ra.response_page_id = rp.id
	LEFT JOIN survey_monkey.response_history rh
	on ra.response_id = rh.id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	LEFT JOIN country
	on  ra.response_id = country.response_id
	LEFT JOIN name_lsp
	on  ra.response_id = name_lsp.response_id
	LEFT JOIN Role_LSP
	on  ra.response_id = Role_LSP.response_id
	LEFT JOIN il
	on  ra.response_id = il.response_id
	LEFT JOIN Gp 
	on q.id = gp.question_id
	LEFT JOIN il_Group
	on ra.response_id = il_Group.response_id and Gp.Group = il_Group.Group
	
WHERE sh._fivetran_active = true and 
	sh.id = '310266443' and q.subtype <<>> 'descriptive_text'  and rh.created_at  >> '2021-10-05' and
	 q.id not in ('691079314','691130947','690569538','691020263','704324224','704323990','704323842','704322789','704319700' ) 
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
ORDER BY ra.response_id"
50f6b0af-dc79-1bd5-534f-f0e5fbcc3767,Custom SQL Query (gpbidb),,
5128986c-9c9d-d19c-1c69-33a079aa07a8,v_gp_gg_master_client (goglobal_gp_goglobal.v_gp_gg_master_client)+ (gpbidb),,
5128986c-9c9d-d19c-1c69-33a079aa07a8,v_gp_gg_master_client (goglobal_gp_goglobal.v_gp_gg_master_client)+ (gpbidb),postgres,"SELECT t.id AS ticket_id_ZENDESK,
					   t.id::TEXT as ticket_id_zendesk_text,
						CASE WHEN O.CUSTOM_CUSTOMER_ID IS NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
							 WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NULL THEN O.CUSTOM_CUSTOMER_ID
                             WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
							 WHEN O.CUSTOM_CUSTOMER_ID = zendesk_org.CUSTOM_CUSTOMER_ID THEN zendesk_org.CUSTOM_CUSTOMER_ID
                                                         ELSE NULL
						END AS zendesk_gpp_client_id_match,
						CASE WHEN cc.name IS NULL AND cc2.name IS NOT NULL THEN cc2.name
							 WHEN cc.name IS NOT NULL AND cc2.name IS NULL THEN cc.name
							 WHEN cc.name IS NOT NULL AND cc2.name IS not NULL THEN cc2.name
							 WHEN cc.name = cc2.name THEN cc2.name
							 else null 
						END AS zendesk_gpp_client_name_match, 
						CASE WHEN O.NAME IS NULL AND zendesk_org.name IS NOT NULL THEN zendesk_org.name
							 WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NULL THEN O.NAME
							 WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NOT NULL THEN ZENDESK_ORG.NAME
							 WHEN O.NAME = zendesk_org.name THEN ZENDESK_ORG.NAME
							 ELSE NULL 
						END AS Zendesk_client_org,
						t.created_at,
						t.created_at::date as date,	
						t.created_at::time as time,
						t.organization_id AS customer_id,
						g.name AS group,
						t.requester_id,
						t.submitter_id,
						t.assignee_id,
						u4.name as assignee,
	                    split_part(LOWER(u4.email), '@', 1) AS assignee_email,
						u.name AS requester,
						U.ROLE AS requester_ROLE,
						t.status,
						T.PRIORITY,	
						case when t.priority='urgent' then 60
							else 2400 
						end as target_sla,
						T.CUSTOM_CATEGORY,
						CASE WHEN t_form.ticket_form='Shared Services' THEN concat('Shared Services -',' ',t.custom_SSC_Action)
							WHEN t_form.ticket_form='Internal Request' AND t.CUSTOM_INTERNAL_REQUEST_TYPE='Zendesk Support' THEN concat('Internal -',' ',t.custom_Internal_Request_Type)
							WHEN t.custom_category='expenses' THEN concat('Expense -',' ',t.custom_Expenses)
							WHEN t.custom_category='benefits' THEN concat('Benefits -',' ',t.custom_Benefits)
							WHEN t.custom_category='employee_onboarding' THEN concat('Employee Onboarding -',' ', t.custom_Employee_Onboarding)
							WHEN t.custom_category='invoicing' THEN CONCAT('Invoicing -',' ', t.custom_Invoicing)
							WHEN t.custom_category='time_off' THEN concat('Time Off -',' ',t.custom_Time_Off)
							WHEN t.custom_category='zoho' THEN concat('Zoho -',' ', t.custom_Zoho_Sub_Category)
							WHEN t.custom_category='time_tracking' THEN CONCAT('Time Tracking -',' ',t.custom_Time_Tracking)
							WHEN t.custom_category='hr_support' THEN CONCAT('HR Support -',' ',t.custom_HR_Support)
							WHEN t.custom_category='payroll' THEN concat('Payroll -',' ',t.custom_Payroll)
							WHEN t.custom_category='tech_support' THEN CONCAT('Tech Support -',' ',t.custom_Tech_Support)
							WHEN t.custom_category is not NULL THEN t.custom_category
							ELSE 'No Category'
						end as sub_category,	
						U.organization_id AS USER_ORGANIZATION_ID,
						T.organization_id,	
						U3.NAME AS SUBMITTER,
						U3.ROLE AS SUBMITTER_ROLE,
						t.via_channel,
						t.custom_customer_satisfaction,						
                                                zendesk_tm.assignee_updated_at,
						zendesk_tm.replies, 
						zendesk_tm.full_resolution_time_in_minutes_business, 
						zendesk_tm.reply_time_in_minutes_business,
						zendesk_tm.full_resolution_time_in_minutes_calendar, 
						zendesk_tm.reply_time_in_minutes_calendar,
						zendesk_tm.solved_at,
						zendesk_tm.requester_wait_time_in_minutes_calendar,
	                    zendesk_tm.initially_assigned_at,
						t.custom_region,
						u.custom_country,	
						Case when ZENDESK_TM.full_resolution_time_in_minutes_business <<=7200 then '0 - 5 days'
							 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>7200 and ZENDESK_TM.full_resolution_time_in_minutes_business<<=43200) then '5 - 30 days'
							 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>43200) then '+30 days'
						end as resolution_time,
						case when ZENDESK_TM.replies =0 then '0 touches'
							 when (ZENDESK_TM.replies>>0 and ZENDESK_TM.replies<<3) then '1 to 2 touches'
							 when (ZENDESK_TM.replies>>2 and ZENDESK_TM.replies<<6) then '3 to 5 touches'
							 when (ZENDESK_TM.replies>>5) then '+5 touches'
						end as replies_touches,
	
				
						ticket_merge.tag as closed_by_merge
	
				FROM ""zendesk"".""ticket"" AS t
				LEFT JOIN ""zendesk"".""user"" AS u ON t.requester_id = u.id
				LEFT JOIN ""zendesk"".""group"" AS g ON t.group_id = g.id
				LEFT JOIN ""zendesk"".""organization"" AS org ON t.organization_id = org.id
				LEFT JOIN ""zendesk"".""user"" AS u3 ON t.SUBMITTER_ID = u3.id
				LEFT JOIN ""zendesk"".""user"" AS u4 ON t.assignee_id = u4.id
				LEFT JOIN ZENDESK.TICKET_METRICS AS ZENDESK_TM ON t.id=ZENDESK_TM.TICKET_ID
				left join zendesk.organization o on o.id=U.organization_id
				left join zendesk.organization zendesk_org on zendesk_org.id=T.organization_id
				left join goglobal_gp_goglobal.v_gp_gg_client_current cc on cc.id=o.custom_customer_id	
				left join goglobal_gp_goglobal.v_gp_gg_client_current cc2 on cc2.id=zendesk_org.custom_customer_id
				left join (
							select distinct id,
								   name as ticket_form
							from  zendesk.ticket_form_history t2
							where name in ('Shared Services','Internal Request') and active='true'
							) t_form on t_form.id=t.ticket_form_id
				left join (
							SELECT *
							FROM zendesk.ticket_tag
							WHERE tag = 'closed_by_merge'
							) ticket_merge on t.id=ticket_merge.ticket_id"
51566d37-fb7b-0909-d1c4-f54940948b29,Marketo,,
5214e9d5-3421-7e8e-1d8f-dabae5d3e49e,goglobal_goglobal view,postgres,"WITH SFDC AS(
	            SELECT
                account.id AS account_id,
                opps.id AS opp_id,
                opps.name AS opp_name,
				opps.created_date,
                users.name,
                users.user_location_c,
                account.client_region_billing_country,

				RANK() OVER (
                PARTITION BY account.id
                ORDER BY opps.created_date )
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text 
LEFT JOIN salesforce.user users ON users.id::text = opps.owner_id::text
WHERE opps.is_won ='true'
AND stage_name = 'Closed Won'
AND (opps.type <<>> 'Existing Business' OR opps.type IS NULL)
AND (opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
AND (opps.what_is_your_primary_product_interest__c <<>> 'G-P Contractor' or opps.what_is_your_primary_product_interest__c IS NULL)
AND ( opps.pricing_model__c <<>> 'Contractor only' OR opps.pricing_model__c  is NULL)
	ORDER BY 1,2
)

SELECT *
FROM SFDC
WHERE rank = 1"
5214e9d5-3421-7e8e-1d8f-dabae5d3e49e,goglobal_goglobal view,,
5214e9d5-3421-7e8e-1d8f-dabae5d3e49e,goglobal_goglobal view,postgres,"SELECT client.id,
	   CASE WHEN     client.salesforce_account_id IS NOT NULL AND mdm_GG.source_id IS NOT NULL THEN client.salesforce_account_id
                     WHEN client.salesforce_account_id IS NULL AND mdm_GG.source_id IS NOT NULL THEN mdm_GG.source_id::TEXT
                     WHEN client.salesforce_account_id IS NOT NULL AND mdm_GG.source_id IS NULL THEN client.salesforce_account_id
                     END AS id_match
FROM goglobal_gp_goglobal.v_gp_gg_client_current client
LEFT JOIN repo.v_gp_mdm_customer AS mdm
            ON client.id::VARCHAR = mdm.source_id
            LEFT JOIN (SELECT *
            FROM repo.v_gp_mdm_customer
            WHERE source = 'SFDC Customer'
             ) AS mdm_GG
            ON mdm.parent_name = mdm_GG.parent_name"
52334405-814e-2a7a-f3a0-661d0f7e4268,v_gp_sfdc_marketing_dashboard (salesforce.v_gp_sfdc_marketing_dashboard) (gpbidb),,
53a41868-bc2d-a458-815d-117ded79cc6f,Custom SQL Query (gpbidb),postgres,"WITH ENVIRONMENTS AS (
select 
id,  date_modified, name, description, modified_by, value, 'Staging 1' as Environment, 'Config_aud' as Table from staging1_goglobal.config_aud
UNION
select 
id,  date_modified, name, description, modified_by, value, 'Staging 1' as Environment, 'Config' as Table from  staging1_goglobal.config
UNION
select 
id, date_modified, name, description, modified_by, value, 'Production' as Environment, 'Config_aud' as Table from  goglobal_gp_goglobal.config_aud
UNION
select 
id, date_modified, name, description, modified_by, value, 'Production' as Environment, 'Config' as Table from goglobal_gp_goglobal.config
UNION
select 
id, date_modified, name, description, modified_by, value, 'Staging' as Environment, 'Config_aud' as Table from   staging_goglobal.config_aud
UNION
select 
id, date_modified, name, description, modified_by, value, 'Staging' as Environment , 'Config' as Table from staging_goglobal.config
)


SELECT ENVIRONMENTS.*, CONCAT(a.first_name,' ' , a.last_name) as gp_modified_by, md.max_date

FROM ENVIRONMENTS
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_gp_person_current as a
on ENVIRONMENTS.modified_by = a.user_id
Left join (SELECT name, MAX(date_modified) as max_date_modified, 1 as max_date
FROM ENVIRONMENTS
group by 1) as md on (ENVIRONMENTS.name = md.name and ENVIRONMENTS.date_modified = md.max_date_modified)"
53a41868-bc2d-a458-815d-117ded79cc6f,Custom SQL Query (gpbidb),postgres,"WITH ENVIRONMENTS AS (select 
id, version, created_by, value, date_modified, date_created, modified_by, description, name, 'Staging 1' as Environment, _fivetran_synced FROM staging1_goglobal.config
UNION
select 
id, version, created_by, value, date_modified, date_created, modified_by, description, name, 'Staging' as Environment, _fivetran_synced FROM staging_goglobal.config
UNION
select 
id, version, created_by, value, date_modified, date_created, modified_by, description, name, 'Production' as Environment, _fivetran_synced FROM goglobal_gp_goglobal.config
)

SELECT ENVIRONMENTS.*, CONCAT(a.first_name,' ' , a.last_name) as gp_modified_by, ps.prod_stag, ps1.prod_stag1, ss1.stag_stag1 

FROM ENVIRONMENTS
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_gp_person_current as a
on ENVIRONMENTS.modified_by = a.user_id
lEFT JOIN ( 
	Select s.name, s.value, p.value, 
		case when s.name = p.name and s.value <<>> p.value then s.name end as prod_stag 
FROM staging_goglobal.config as s
LEFT JOIN goglobal_gp_goglobal.config as p on s.name = p.name	
) as ps on ENVIRONMENTS.name = ps.name

lEFT JOIN ( 
	Select s1.name, s1.value, p.value, 
		case when s1.name = p.name and s1.value <<>> p.value then s1.name end as prod_stag1 
FROM staging1_goglobal.config as s1
LEFT JOIN goglobal_gp_goglobal.config as p on s1.name = p.name	
) as ps1 on ENVIRONMENTS.name = ps1.name

lEFT JOIN ( 
	Select s1.name, s1.value, s.value, 
		case when s1.name = s.name and s1.value <<>> s.value then s1.name end as stag_stag1 
FROM staging1_goglobal.config as s1
LEFT JOIN staging_goglobal.config as s on s1.name = s.name	
) as ss1 on ENVIRONMENTS.name = ss1.name


order by ENVIRONMENTS.name"
5478064e-6803-2be2-5f22-d7db2e807c1b,goglobal_goglobal view,,
5481d9a9-e736-9c8a-16bb-10c2fcdd7f00,Marketing View (gpbidb),postgres,"WITH 
max_dates AS(
	SELECT opportunity_id,
		   MAX(rank) AS latest	
FROM salesforce.v_gp_sfdc_opportunity_stage_duration
WHERE NOT(prev_stage_name = to_stage_name AND to_stage_name = 'Closed Lost')
GROUP BY opportunity_id),
opp_history AS(
SELECT DISTINCT opportunity_id, 
		prev_stage_name AS prev_stage, 
		to_stage_name AS final_stage,
		stage_last_modified AS last_mod_date
FROM salesforce.v_gp_sfdc_opportunity_stage_duration osd
LEFT JOIN max_dates mx USING(opportunity_id)
WHERE rank = latest
),
Leads_Opps as ( /*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
   Select Distinct
      CASE
         WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
         ELSE date_trunc('month'::text, opps.created_date)
      END AS MQL_Cohort_Month,
      leads.id as lead_id,
      opps.id as opp_id,
      leads.is_converted,
      leads.converted_opportunity_id,
      leads.country as lead_country,
      leads.campaign__source__c as campaign_name,
					--opps.bdr_owner__c as bdr_owner_test,
					--opps_bdr_manager.manager_id as bdr_manager_id_test,
					--bdr_manager.name as bdr_manager_test,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_disqualified_reason__c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c
         ELSE NULL::text
      END AS lead_disqualified_reason,
       opps.closed__lost__c,
      leads.status AS lead_status,
      leads.country_code AS lead_country_code,
       CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_source_tier_c
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_tier_c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_source_tier_c
         ELSE NULL::text
      END AS tier,
      --leads.lead_disqualified_reason__c as lead_disqualified_reason,
      leads.bdr_unqualified_reason__c as bdr_unqualified_reason,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
         ELSE NULL::text
      END AS client_region,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country_code
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country_code
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country_code
         ELSE NULL::text
      END AS country_code,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
         ELSE NULL::text
                END AS client_country,
      leads.created_date AS mql_date,
      leads.converted_date,
      leads.partner_acquisition__c AS partner_acq_leads,
      --leads_owner.name as leads_owner_name,
      --leads_owner_manager.name as leads_owner_manager,
      opps.created_date AS opp_created_date,
	  opps.last_modified_date AS opp_last_modified_date,
      opps.created_date,
	  opps.potential_partner_lead__c,
      opps.sales__accepted__date__c as SAL_Accepted_Date,
      opps.s_a_l__c,
      opps.s_a_l_by__sales__c,
      opps.record_type_bi__c,
      opps.is_closed AS opp_closed,
      opps.close_date AS msa_date,
      opps.stage_name,
      opps.partner_acquisition__c AS partner_acq_opps,
      opps.type AS opportunity_type,
      opps.is_won AS opp_won,
      opps.what_is_your_primary_product_interest__c AS what_is_opps,
      opps.record_type_text_id_c AS record_type_opps,
      opps.pricing_model__c AS pricing_model_opps,
      --opps_owner.name as opps_owner_name,
      --opps_owner_manager.name as opps_owner_manager,
      opps.name AS opp_name,
	sfdc_opp.closed_lost_competitor_name_c AS lost_to_competitor,
		leads.hot_form_c AS hot_form_leads,
	opps.hot_form_c AS hot_form_opps,
	CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.b_d_r__date__c::date
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN sfdc_lead.bdr_date_c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.b_d_r__date__c::date
         ELSE NULL
      END AS b_d_r__date__c,
     -- opps.b_d_r__date__c,
      opps.type AS opp_type,
      opps.is_won AS won_flag,
      opps.partner_level__c AS partner_level,
      opps.update_time AS fivetran_synced_opps,
      --opps.lead_disqualified_reason__c AS lead_disqualified_reason,
      opps.pricing_model__c AS opp_pricing_model,
	/*CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps_owner_role.name
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner_role.name
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps_owner_role.name
         ELSE NULL::text
      END AS owner_role,*/
	/*CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps_owner.title
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner.title
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN leads_owner.title
         ELSE NULL::text
      END AS leads_owner_title,*/
	  leads_owner.title AS leads_owner_title,
 	  CASE
		WHEN leads_owner.title IN ('BDR','Business Development Manager',
			'Business Development Representative','Busines Development Representative',
			'Business Development Team Lead', 'Director of Business Development',
			'Senior Business Development Representative','Senior Business Development Trainer',
			'Senior Manager, Business Development','Vice President, Global Outbound'
		) THEN 'BDR lead'
		ELSE 'Non-BDR lead'
		END AS lead_owner_title_flag,
      CASE
         WHEN leads.lead_source IS NULL THEN opps.lead_source
         ELSE leads.lead_source
      END::text as Lead_or_Opp_Source,
      --dev_own.name AS partner_development_owner,
      /*CASE
      WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN 
      opps.bdr_owner_name
      WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner.name
      WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN 
      opps.bdr_owner_name
      END AS bdr_owner_name,*/
      acc_partn.name AS partner,
      acc_partn.client_region_billing_country AS partner_region,
      account.type AS account_type,
      account.pricing_model__c AS acc_pricing_model,
      CASE
         WHEN 
			--(opps.type <<>> 'Existing Business' OR opps.type IS NULL)
         --And 
			(opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
         And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
         --And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
         And (opps.pricing_model__c IS NULL OR opps.pricing_model__c  <<>> 'Contractor only')
	  Then 'Non Partner Opp or Existing Business'
      Else 'Partner Opp or Existing Business'
      End as Opp_Go_Flag,
	  opp_history.prev_stage, 
	  opp_history.final_stage,
	  opp_history.last_mod_date,
	  CASE
         WHEN opp_history.final_stage = 'Closed Lost' THEN opp_history.prev_stage
         ELSE NULL
      END AS lost_from_stage,
/*camp_memb.id AS member_id,
	camp_memb.name AS member_name,
    camp_memb.fcrm_fcr_admin_response_day_c AS member_response_date,
CASE 
	WHEN camp_memb.fcrm_fcr_admin_response_day_c <<= opps.close_date THEN 'In time'
	WHEN camp_memb.fcrm_fcr_admin_response_day_c >> opps.close_date THEN 'Too late'
	WHEN opps.close_date IS NULL THEN 'Not closed'
    ELSE NULL::text
END AS response_time_flag*/
mc.type AS member_type,
            usr_lead_opp.leads_owner_name,
            usr_lead_opp.leads_owner_manager,
            usr_lead_opp.opps_owner_name,
            usr_lead_opp.opps_owner_manager,
            usr_lead_opp.partner_development_owner,
            usr_lead_opp.bdr_owner_name,
            usr_lead_opp.bdr_manager_name

	
	
   From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
   Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
   Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
   LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c = acc_partn.id
   Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
   LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_or_opp_id::text =
                CASE
                    WHEN leads.id IS NULL THEN opps.id
                    ELSE leads.id
                END::text
   LEFT JOIN salesforce.lead sfdc_lead ON sfdc_lead.id = leads.id
   LEFT JOIN salesforce.opportunity sfdc_opp ON sfdc_opp.id = opps.id 
   LEFT JOIN opp_history ON opps.id = opp_history.opportunity_id
  -- LEFT JOIN salesforce.v_gp_sfdc_campaign_member_current camp_memb
   --ON (opps.contact_id = camp_memb.contact_id AND opps.campaign_id = camp_memb.campaign_id)
   LEFT JOIN salesforce.v_gp_sfdc_campaign_member_current mc ON mc.lead_id = leads.id
WHERE (leads.created_date::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())
OR (opps.created_date::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())
OR (opps.sales__accepted__date__c::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())
OR (opps.close_date::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())

), 
MQL as (
   Select Distinct
      'MQL' as Cohort_Stage,
      lead_id as lead_or_opp_id,
      MQL_Date::date as Point_time_date,
      *
   From Leads_Opps 
   Where --(partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) And 
	lead_id is not null
	--AND lead_owner_title_flag = 'BDR lead'
   ),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      Created_date::date as Point_time_date,
      *
   From Leads_Opps lo
   Where --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	opp_id is not null
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	s_a_l_by__sales__c = 'Yes'
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	opp_won ='true'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
Opp_lost as (
   Select Distinct
      'Opp lost' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      --last_mod_date::date as Point_time_date,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	final_stage = 'Closed Lost'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
   L1 as (
	 Select Distinct
      'Negotiations L1' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	   s_a_l_by__sales__c = 'Yes' 
		  AND (stage_name IN ('Negotiations L1','Negotiations L2','Contract','Closed Won') OR
		   lost_from_stage IN ('Negotiations L1','NegotiationsL1','Negotiations L2','NegotiationsL2','Contract'))
   ),
    L2 as (
	 Select Distinct
      'Negotiations L2' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
		s_a_l_by__sales__c = 'Yes' 
	 			  AND (stage_name IN ('Negotiations L2','Contract','Closed Won') OR
		   lost_from_stage IN ('Negotiations L2','NegotiationsL2','Contract'))
   ),
   Contract as (
	 Select Distinct
      'Contract' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	   s_a_l_by__sales__c = 'Yes' 
	   	  AND (stage_name IN ('Contract','Closed Won') OR
		   lost_from_stage IN ('Contract'))
   ),
Full_Union as (
   Select *
   From MQL
   Union All
   Select *
   From MQL_to_SQL
   Union AlL
   Select *
   From SQL_to_SAL
   Union AlL
   Select *
   From SAL_to_MSA
   Union All
   Select *
   From L1
   Union All
   Select *
   From L2
   Union All
   Select *
   From Contract
	Union All
   Select *
   From Opp_Lost
   )
SELECT * 
FROM Full_Union"
548f534d-938c-e6b3-5917-80495b5dc2be,Custom SQL Query (gpbidb),postgres,"select name as Country, country_ops_lead,concat(t2.first_name,' ',t2.last_name) as Country_ops_lead_name,
 		country_finance_lead, concat(t3.first_name,' ',t3.last_name) as Country_finance_lead_name, t1.payslips_delivered, t1.currency_code, t1.currency_name,
 		case when t1.services like '%5%' then 'Yes' 
 		else 'No'
 		end as Entity_Setup,gp_region
	from goglobal_gp_goglobal.v_gp_gg_country_current t1 
 left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t2
	on t1.country_ops_lead=t2.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t3
	on t1.country_finance_lead=t3.id
 where t1.is_currency_only='false'
order by country"
552c245b-424f-c6db-1291-b9112d4fa13c,Client + Prof,postgres,"SELECT mp.*,
       u_onb.email AS onb_lead_email,
	   split_part(LOWER(u_onb.email), '@', 1) AS onb_lead_email_split,
	   u_off.email AS off_lead_email,
	   split_part(LOWER(u_off.email), '@', 1) AS off_lead_email_split
FROM goglobal_gp_goglobal.v_gp_gg_master_professional AS mp
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS p_onb ON mp.onboard_person_id = p_onb.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_user_current AS u_onb ON p_onb.user_id = u_onb.id

LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS p_off ON mp.offboard_person_id = p_off.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_user_current AS u_off ON p_off.user_id = u_off.id"
552c245b-424f-c6db-1291-b9112d4fa13c,Client + Prof,postgres,"SELECT *
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
WHERE DATE_TRUNC('month',cal_date) >>= '2022-01-01'
AND DATE_TRUNC('month',cal_date) <<= DATE_TRUNC('month',CURRENT_DATE)"
552c245b-424f-c6db-1291-b9112d4fa13c,Client + Prof,,
552c245b-424f-c6db-1291-b9112d4fa13c,Client + Prof,postgres,"SELECT wd.*, split_part(LOWER(wd.""Work Contact: Work Email""), '@', 1) AS email_split
FROM workday_hris.v_non_sensitive_workday_data AS wd"
552c245b-424f-c6db-1291-b9112d4fa13c,Client + Prof,postgres,"SELECT mc.*, c.salesforce_account_id
FROM goglobal_gp_goglobal.v_gp_gg_master_client AS mc
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS c ON mc.id = c.id"
552c245b-424f-c6db-1291-b9112d4fa13c,Zendesk,postgres,"WITH sfdc as (
			  SELECT customer.id,
					 customer.name,
					 CASE WHEN Customer.salesforce_account_id IS NOT NULL AND mdm2.source_id IS NOT NULL THEN Customer.salesforce_account_id::TEXT
						  WHEN Customer.salesforce_account_id IS NULL AND mdm2.source_id IS NOT NULL THEN mdm2.source_id::TEXT
						  WHEN Customer.salesforce_account_id IS NOT NULL AND mdm2.source_id IS NULL THEN Customer.salesforce_account_id::TEXT
					 END as id_match
			 FROM goglobal_gp_goglobal.v_gp_gg_client_current customer
			 LEFT JOIN repo.v_gp_mdm_customer AS mdm ON customer.id::VARCHAR = mdm.source_id
			 LEFT JOIN (
				 		SELECT *
				 		FROM repo.v_gp_mdm_customer
				 		WHERE source = 'SFDC Customer'
						) AS mdm2 ON mdm.parent_name = mdm2.parent_name
			WHERE customer.is_demo_client = false
			),
sfdc_health as (
				select sfdc.*,
					   sfdc_ac.client_health__c
				from sfdc
				left join salesforce.v_gp_sfdc_account_current sfdc_ac on sfdc.id_match=sfdc_ac.id),
satisfaction AS (
				SELECT id,
					   s.ticket_id,
					   score, created_at, last_date,comment,reason
				FROM ""zendesk"".""satisfaction_rating"" AS s
				INNER JOIN (
							SELECT ticket_id, 
								   MAX(created_at) AS last_date
							FROM ""zendesk"".""satisfaction_rating""
							GROUP BY ticket_id
							) AS m ON (s.ticket_id = m.ticket_id AND created_at = last_date)
				),
gpp_zendesk as (
				SELECT t.id AS ticket_id_ZENDESK,
					   t.id::TEXT as ticket_id_zendesk_text,
						CASE WHEN O.CUSTOM_CUSTOMER_ID IS NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
							 WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NULL THEN O.CUSTOM_CUSTOMER_ID
                             WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
							 WHEN O.CUSTOM_CUSTOMER_ID = zendesk_org.CUSTOM_CUSTOMER_ID THEN zendesk_org.CUSTOM_CUSTOMER_ID
                                                         ELSE NULL
						END AS zendesk_gpp_client_id_match,
						CASE WHEN cc.name IS NULL AND cc2.name IS NOT NULL THEN cc2.name
							 WHEN cc.name IS NOT NULL AND cc2.name IS NULL THEN cc.name
							 WHEN cc.name IS NOT NULL AND cc2.name IS not NULL THEN cc2.name
							 WHEN cc.name = cc2.name THEN cc2.name
							 else null 
						END AS zendesk_gpp_client_name_match, 
						CASE WHEN O.NAME IS NULL AND zendesk_org.name IS NOT NULL THEN zendesk_org.name
							 WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NULL THEN O.NAME
							 WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NOT NULL THEN ZENDESK_ORG.NAME
							 WHEN O.NAME = zendesk_org.name THEN ZENDESK_ORG.NAME
							 ELSE NULL 
						END AS Zendesk_client_org,
						t.created_at,
						t.created_at::date as date,	
						t.created_at::time as time,
						t.organization_id AS customer_id,
						g.name AS group,
						t.requester_id,
						t.submitter_id,
						t.assignee_id,
						u4.name as assignee,
	                    LOWER(u4.email) AS assignee_email,
	                    split_part( LOWER(u4.email), '@', 1) AS split_email,
						u.name AS requester,
						U.ROLE AS requester_ROLE,
						t.status,
						T.PRIORITY,	
						case when t.priority='urgent' then 60
							else 2400 
						end as target_sla,
						T.CUSTOM_CATEGORY,
						CASE WHEN t_form.ticket_form='Shared Services' THEN concat('Shared Services -',' ',t.custom_SSC_Action)
							WHEN t_form.ticket_form='Internal Request' AND t.CUSTOM_INTERNAL_REQUEST_TYPE='Zendesk Support' THEN concat('Internal -',' ',t.custom_Internal_Request_Type)
							WHEN t.custom_category='expenses' THEN concat('Expense -',' ',t.custom_Expenses)
							WHEN t.custom_category='benefits' THEN concat('Benefits -',' ',t.custom_Benefits)
							WHEN t.custom_category='employee_onboarding' THEN concat('Employee Onboarding -',' ', t.custom_Employee_Onboarding)
							WHEN t.custom_category='invoicing' THEN CONCAT('Invoicing -',' ', t.custom_Invoicing)
							WHEN t.custom_category='time_off' THEN concat('Time Off -',' ',t.custom_Time_Off)
							WHEN t.custom_category='zoho' THEN concat('Zoho -',' ', t.custom_Zoho_Sub_Category)
							WHEN t.custom_category='time_tracking' THEN CONCAT('Time Tracking -',' ',t.custom_Time_Tracking)
							WHEN t.custom_category='hr_support' THEN CONCAT('HR Support -',' ',t.custom_HR_Support)
							WHEN t.custom_category='payroll' THEN concat('Payroll -',' ',t.custom_Payroll)
							WHEN t.custom_category='tech_support' THEN CONCAT('Tech Support -',' ',t.custom_Tech_Support)
							WHEN t.custom_category is not NULL THEN t.custom_category
							ELSE 'No Category'
						end as sub_category,	
						U.organization_id AS USER_ORGANIZATION_ID,
						T.organization_id,	
						U3.NAME AS SUBMITTER,
						U3.ROLE AS SUBMITTER_ROLE,
						t.via_channel,
						t.custom_customer_satisfaction,						
                                                zendesk_tm.assignee_updated_at,
						zendesk_tm.replies, 
						zendesk_tm.full_resolution_time_in_minutes_business, 
						zendesk_tm.reply_time_in_minutes_business,
						zendesk_tm.full_resolution_time_in_minutes_calendar, 
						zendesk_tm.reply_time_in_minutes_calendar,
						zendesk_tm.solved_at,
						zendesk_tm.requester_wait_time_in_minutes_calendar,
	                    zendesk_tm.initially_assigned_at,
						s.score,
						t.custom_region,
						u.custom_country,	
						Case when ZENDESK_TM.full_resolution_time_in_minutes_business <<=7200 then '0 - 5 days'
							 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>7200 and ZENDESK_TM.full_resolution_time_in_minutes_business<<=43200) then '5 - 30 days'
							 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>43200) then '+30 days'
						end as resolution_time,
						case when ZENDESK_TM.replies =0 then '0 touches'
							 when (ZENDESK_TM.replies>>0 and ZENDESK_TM.replies<<3) then '1 to 2 touches'
							 when (ZENDESK_TM.replies>>2 and ZENDESK_TM.replies<<6) then '3 to 5 touches'
							 when (ZENDESK_TM.replies>>5) then '+5 touches'
						end as replies_touches,
		case when score='good' then '1' 
							 when custom_customer_SATISFACTION='csat_rating_3' then '1'
							 when custom_customer_SATISFACTION='csat_rating_4' then '1'
							 when custom_customer_SATISFACTION='csat_rating_5' then '1'
							 else 0 
						end as CSAT_1,
						case when score='bad' then '1' 
							 when custom_customer_SATISFACTION='csat_rating_1' then '1'
							 when custom_customer_SATISFACTION='csat_rating_2' then '1'
							 else 0 
						end as CSAT_2,
						ticket_merge.tag as closed_by_merge
	
				FROM ""zendesk"".""ticket"" AS t
				LEFT JOIN ""zendesk"".""user"" AS u ON t.requester_id = u.id
				LEFT JOIN ""zendesk"".""group"" AS g ON t.group_id = g.id
				LEFT JOIN ""zendesk"".""organization"" AS org ON t.organization_id = org.id
				LEFT JOIN ""zendesk"".""user"" AS u3 ON t.SUBMITTER_ID = u3.id
				LEFT JOIN ""zendesk"".""user"" AS u4 ON t.assignee_id = u4.id
				LEFT JOIN ZENDESK.TICKET_METRICS AS ZENDESK_TM ON t.id=ZENDESK_TM.TICKET_ID
				LEFT JOIN ""satisfaction"" AS s ON t.id = s.ticket_id
				left join zendesk.organization o on o.id=U.organization_id
				left join zendesk.organization zendesk_org on zendesk_org.id=T.organization_id
				left join goglobal_gp_goglobal.v_gp_gg_client_current cc on cc.id=o.custom_customer_id	
				left join goglobal_gp_goglobal.v_gp_gg_client_current cc2 on cc2.id=zendesk_org.custom_customer_id
				left join (
							select distinct id,
								   name as ticket_form
							from  zendesk.ticket_form_history t2
							where name in ('Shared Services','Internal Request') and active='true'
							) t_form on t_form.id=t.ticket_form_id
				left join (
							SELECT *
							FROM zendesk.ticket_tag
							WHERE tag = 'closed_by_merge'
							) ticket_merge on t.id=ticket_merge.ticket_id
			)
select distinct gpp_zendesk.*, tme.type,
	  	(reply_time_in_minutes_business- target_sla) AS TIME_DIF,
		case
			when (reply_time_in_minutes_business- target_sla)>>0 then 'Breach'
			when (reply_time_in_minutes_business- target_sla)<<=0 then 'Within'
			ELSE NULL 
		end as SLA_performance,
		case 
			when (reply_time_in_minutes_business- target_sla)>>0 THEN 1
		end as SLA_performance_BREACH,
		case
			when (reply_time_in_minutes_business- target_sla)<<=0 THEN 1
		end as SLA_performance_WITHIN,
		case
			when reply_time_in_minutes_business is null then 1
		end as first_reply_ind,
	   client.accounting_id,
           client.status as client_status, 
	   client.tier_type, 
	   	CASE 
			WHEN client.pricing_model = 0 THEN 'Enterprise'::text
			WHEN client.pricing_model = 1 THEN 'Standard'::text
			ELSE 'Verify Pricing Model'::text
		END AS pricing_model,
		sfdc_health.client_health__c  ""SFDC Client Health"",
		concat(gpp_am.first_name,' ',gpp_am.last_name) AS Account_Manager,
		concat(gpp_ae.first_name,' ',gpp_ae.last_name)  AS Account_Executive,
		client.msa_contract_start_date_peo,
		idr.name as industry
from gpp_zendesk
left join goglobal_gp_goglobal.v_gp_gg_client_current client on client.id=gpp_zendesk.zendesk_gpp_client_id_match
left join (select * 
		   from zendesk.ticket_metric_events 
		   where type='apply_sla') TME on gpp_zendesk.ticket_id_zendesk_text=TME.ticket_id
LEFT JOIN sfdc_health ON sfdc_health.ID=client.ID
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current gpp_am on gpp_am.id = client.gp_account_manager_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current gpp_ae on gpp_ae.id = client.gp_current_sales_rep_id
left join goglobal_gp_goglobal.v_gp_gg_industry_current idr on idr.id = client.industry_id"
552c245b-424f-c6db-1291-b9112d4fa13c,Zendesk,postgres,"SELECT wd.*, 
 split_part(LOWER(""Work Contact: Work Email""), '@', 1) AS lower_case_email

FROM workday_hris.v_non_sensitive_workday_data AS wd"
558debf5-dc4d-ffa6-a112-3c4fc7d79410,Metrics (FPData),,
558debf5-dc4d-ffa6-a112-3c4fc7d79410,Data (FPData),,
5a769452-bc23-48a9-aa93-927c15a15bc5,Custom SQL Query (gpbidb),,
68a7a9f2-959e-1c57-fab6-d4e933dc1269,Custom SQL Query (gpbidb),postgres,"with deposit_accrued as (
select professional_id,sum(amount) as deposit_accrued
from goglobal_gp_goglobal.client_bill cb, goglobal_gp_goglobal.client_bill_transaction cbt
where cb.id = cbt.client_bill_id and document_type = 1 and billing_transaction_type_id = 257 
group by 1
-- DEPOSIT ACCURED  = Sum of all transactions of type INVOICE (1)
),
deposit_credited as (
select professional_id,sum(amount) as deposit_credited 
from goglobal_gp_goglobal.v_gp_gg_client_bill_current cb, goglobal_gp_goglobal.v_gp_gg_client_bill_transaction_current cbt
where cb.id = cbt.client_bill_id and document_type = 2 and billing_transaction_type_id = 257
group by 1),
EOS_BILLED AS (
select PROFESSIONAL_ID, sum(amount) AS EOS_BILLED
from goglobal_gp_goglobal.client_bill cb,
goglobal_gp_goglobal.client_bill_transaction cbt,
goglobal_gp_goglobal.billing_transaction_type  btt
where cb.id = cbt.client_bill_id  and document_type = 1 and btt.name = 'GP End of Service Assessment' and billing_transaction_type_id = btt.id
GROUP BY 1),
EOS_CREDITED AS (
select PROFESSIONAL_ID, sum(amount) AS EOS_CREDITED
from goglobal_gp_goglobal.client_bill cb,
goglobal_gp_goglobal.client_bill_transaction cbt,
goglobal_gp_goglobal.billing_transaction_type  btt
where cb.id = cbt.client_bill_id and document_type = 2 and btt.name = 'GP End of Service Assessment' and billing_transaction_type_id = btt.id
GROUP BY 1),
final as(

select t1.id, concat(t1.first_name,' ',t1.last_name) as professional, t1.status, t1.accounting_id as acumatica_id,t1.payroll_end_date,
t2.name as client,t2.status as client_status, 
CASE WHEN T2.silo_msa_id = 1 THEN 'USA'
WHEN T2.silo_msa_id  = 22 THEN 'Ireland'
WHEN T2.silo_msa_id  = 37 THEN 'Signapore'
END AS msa_country,
case when DEPOSIT_ACCRUED.DEPOSIT_ACCRUED is null then 0
	else DEPOSIT_ACCRUED.DEPOSIT_ACCRUED end as DEPOSIT_ACCRUED,
case when DEPOSIT_CREDITED.DEPOSIT_CREDITED is null then 0
	else DEPOSIT_CREDITED.DEPOSIT_CREDITED end as DEPOSIT_CREDITED,

case when EOS_BILLED.EOS_BILLED is null then 0
	else EOS_BILLED.EOS_BILLED end as EOS_BILLED,
case when EOS_CREDITED.EOS_CREDITED is null then 0 
	else EOS_CREDITED.EOS_CREDITED end as EOS_CREDITED
from goglobal_gp_goglobal.v_gp_gg_professional_current t1
left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on t1.client_id=t2.id
left join DEPOSIT_ACCRUED on t1.ID=DEPOSIT_ACCRUED.PROFESSIONAL_id
left join DEPOSIT_CREDITED on t1.ID=DEPOSIT_CREDITED.PROFESSIONAL_id
left join EOS_BILLED on t1.ID=EOS_BILLED.PROFESSIONAL_id
left join EOS_CREDITED on t1.ID=EOS_CREDITED.PROFESSIONAL_id
where t1.is_failed_to_launch='false' and t2.is_demo_client='false')
select *, 
case when DEPOSIT_CREDITED<<0 then (deposit_accrued + deposit_credited)
else (deposit_accrued - deposit_credited)
end AS DEPOSIT_BALANCE_HELD,
case when EOS_CREDITED<<0 then (EOS_BILLED + EOS_CREDITED) 
else (EOS_BILLED - EOS_CREDITED) 
end AS EOS_BALANCE_HELD
from final"
692fc530-f67a-74ff-92a2-853f804f2630,Custom SQL Query (gpbidb),postgres,"WITH 

CR AS (
    SELECT a.professional_id, a.client_person_id, CONCAT (b.first_name, ' ', b.last_name) AS user_name
    ,c.email
    ,CASE 
        WHEN a.role='6' THEN 'AccountsPayable'
        WHEN a.role='1' THEN 'Client Admin'
        WHEN a.role='4' THEN'Expense Approver 1'
        WHEN a.role='10' THEN 'Expense Approver 2'
        WHEN a.role='13' THEN 'GP Submit Repor Administrator'
        WHEN a.role='2' THEN'Human Resources'
        WHEN a.role='12' THEN 'Invoice Details'
        WHEN a.role='3' THEN 'Payroll Approver'
        WHEN a.role='5' THEN 'PTO Approver'
        WHEN a.role='11' THEN 'RECRUITGLOBAL'
        WHEN a.role='7' THEN 'Stakeholder'
        WHEN a.role='8' THEN 'Supervisor Manager'
        WHEN a.role='9' THEN 'Unassigned'
	END AS Role
	FROM goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current AS a
	INNER JOIN goglobal_gp_goglobal.v_gp_gg_client_person_current AS b
	ON a.client_person_id = b.id
	INNER JOIN goglobal_gp_goglobal.v_gp_gg_user_current AS c
	ON b.user_id = c.id
	
    WHERE a.role='8'
	ORDER BY a.professional_id
)

,zoho as (
	select
		professional_id as zoho_id
		,case 
			when (ZOHO_user_id is null) then 'User not sent to Zoho'
			when (professional_id is not null AND status='4') then concat('In-active',' ',inactive_timestamp)
			when (status='1' or status='2') then concat(ZOHO_STATUS,' ','GPP-',ZOHO_USER_ID)
			when (status='5') then concat('Error: ',zoho_response)
			ELSE ZOHO_STATUS
		END AS TIME_EXP_SYST
	from (
		select 
			t2.user_id AS ZOHO_USER_ID
			,t2.professional_id
			,t2.status
			,t2.inactive_timestamp
			,t2.zoho_response
			,case 
				when t2.status='0' then 'Pending' 
				when t2.status='1' then 'Invitation Sent'
				when t2.status='2' then 'Active'
				when t2.status='3' then 'Invitation Rejected'
				when t2.status='4' then 'Inactive'
				when t2.status='5' then 'Error' 
				when t2.status='6' then 'Deleted'
				when t2.status='7' then 'Pending on Client User Creation'
				when t2.status='8' then 'Error Client User Creation'
				when t2.status='9' then 'Pending Inactive'
				when t2.status='10' then 'Error on Required on Mandatory Approver'
				when t2.status='11' then 'Error Client User Creation Stuck on Pending'
			end as zoho_status
		from goglobal_gp_goglobal.v_gp_gg_zoho_person_current t2	
	) a

)

--- 407
,principal as (
    SELECT 
        CASE 
            WHEN  p.goes_by is null then CONCAT(p.first_name, ' ',p.last_name)
            ELSE CONCAT(p.first_name, ' ',p.last_name,' (',p.goes_by,')') 
        END AS professional_name
        ,p.title
        ,p.legal_full_name
        ,p.birth_date
        ,client.name
        ,p.work_email
        ,p.personal_email
        ,Supervisor.user_name as Supervisor
        ,Supervisor.email as Supervisor_Email
        ,p.contract_start_date
        ,p.contract_notes
        ,CASE 
            WHEN p5.address2 IS NULL THEN p5.address1
            ELSE CONCAT(p5.address1,' ',p5.address2) 
        END AS home_address
        ,p5.city
        ,p5.postal_code

        --- AGREGADOS lsp PERO  LPP ID (under Personal Information)
        ,p.id as professional_id
        ,p.lsp_professional_id
        ,zoho.TIME_EXP_SYST

    FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS p

    LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS p3 ON p.lsp_country_id=p3.id
    LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current AS cco ON p.client_country_id=cco.id	
    LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS p4 ON cco.country_id=p4.id
    LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS client ON p.client_id = client.id
    LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS p5 ON p.home_address_id = p5.id
    LEFT JOIN CR AS Supervisor ON p.id = Supervisor.professional_id

    INNER JOIN goglobal_gp_goglobal.v_tableau_headcount_dashboard headcount 
    ON p.id = headcount.professional_id AND active_flag = 'Active' AND cal_date = DATE(date_trunc('month',now()))
    
    LEFT JOIN zoho ON zoho.zoho_id=p.id

    WHERE p4.name = 'Philippines'
    AND (p.service_class IS NULL OR p.service_class <<>>'4')
    --AND p.is_failed_to_launch = FALSE
    AND client.is_demo_client = false
    ORDER BY 1   
)

select * from principal"
6996c96d-3876-2b40-123e-de52e67c81d8,Coaching,,
6996c96d-3876-2b40-123e-de52e67c81d8,Feedback Leadership Development,,
6996c96d-3876-2b40-123e-de52e67c81d8,In Person Training Report,,
6996c96d-3876-2b40-123e-de52e67c81d8,In Person Training Report,postgres,"SELECT DISTINCT ""Work Contact: Work Email"",""Business Unit Description"",""Home Department Description""
FROM workday_hris.v_workday_adp_hris"
7caa92ac-a55f-8ed5-55fd-65b21c452553,v_gp_sfdc_marketing_dashboard (salesforce.v_gp_sfdc_marketing_dashboard) (gpbidb),,
7caa92ac-a55f-8ed5-55fd-65b21c452553,v_gp_sfdc_marketing_dashboard (salesforce.v_gp_sfdc_marketing_dashboard) (gpbidb),postgres,"SELECT opps_det.opportunity__c,
	opps_det.professionals__c
FROM salesforce.v_gp_sfdc_opportunity_detail_current opps_det"
7cca00e7-b665-3072-99ba-b31ab9dc9fa9,feature_impact (feature_impact),,
7cca00e7-b665-3072-99ba-b31ab9dc9fa9,Customer Data,postgres,"SELECT CAST(""Predicted"".""EXPLANATION_10_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_10_VALUE"",
  CAST(""Predicted"".""EXPLANATION_10_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_10_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_10_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_10_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_10_STRENGTH"" AS TEXT) AS ""EXPLANATION_10_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_1_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_1_VALUE"",
  CAST(""Predicted"".""EXPLANATION_1_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_1_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_1_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_1_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_1_STRENGTH"" AS TEXT) AS ""EXPLANATION_1_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_2_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_2_VALUE"",
  CAST(""Predicted"".""EXPLANATION_2_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_2_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_2_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_2_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_2_STRENGTH"" AS TEXT) AS ""EXPLANATION_2_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_3_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_3_VALUE"",
  CAST(""Predicted"".""EXPLANATION_3_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_3_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_3_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_3_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_3_STRENGTH"" AS TEXT) AS ""EXPLANATION_3_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_4_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_4_VALUE"",
  CAST(""Predicted"".""EXPLANATION_4_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_4_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_4_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_4_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_4_STRENGTH"" AS TEXT) AS ""EXPLANATION_4_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_5_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_5_VALUE"",
  CAST(""Predicted"".""EXPLANATION_5_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_5_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_5_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_5_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_5_STRENGTH"" AS TEXT) AS ""EXPLANATION_5_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_6_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_6_VALUE"",
  CAST(""Predicted"".""EXPLANATION_6_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_6_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_6_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_6_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_6_STRENGTH"" AS TEXT) AS ""EXPLANATION_6_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_7_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_7_VALUE"",
  CAST(""Predicted"".""EXPLANATION_7_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_7_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_7_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_7_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_7_STRENGTH"" AS TEXT) AS ""EXPLANATION_7_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_8_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_8_VALUE"",
  CAST(""Predicted"".""EXPLANATION_8_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_8_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_8_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_8_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_8_STRENGTH"" AS TEXT) AS ""EXPLANATION_8_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_9_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_9_VALUE"",
  CAST(""Predicted"".""EXPLANATION_9_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_9_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_9_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_9_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_9_STRENGTH"" AS TEXT) AS ""EXPLANATION_9_STRENGTH_NUMERIC"",
  CASE 
    WHEN ""Predicted"".""POSITIVE_CLASS"" ISNULL OR 
         TRIM(""Predicted"".""POSITIVE_CLASS"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""POSITIVE_CLASS"" AS BOOLEAN) END AS ""POSITIVE_CLASS"",
  CASE 
    WHEN ""Predicted"".""THRESHOLD"" ISNULL OR 
         TRIM(""Predicted"".""THRESHOLD"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""THRESHOLD"" AS FLOAT) END AS ""THRESHOLD"",
  CAST(""Predicted"".""client_id"" AS TEXT) AS ""client_id (customer_churn_with_dnb_latest)"",
  CAST(""Predicted"".""deployment_id"" AS TEXT) AS ""deployment_id"",
  CASE 
    WHEN ""Predicted"".""is_churn_False_PREDICTION"" ISNULL OR 
         TRIM(""Predicted"".""is_churn_False_PREDICTION"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""is_churn_False_PREDICTION"" AS FLOAT) END AS ""is_churn_False_PREDICTION"",
  CASE 
    WHEN ""Predicted"".""is_churn_PREDICTION"" ISNULL OR 
         TRIM(""Predicted"".""is_churn_PREDICTION"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""is_churn_PREDICTION"" AS BOOLEAN) END AS ""is_churn_PREDICTION"",
  CASE 
    WHEN ""Predicted"".""is_churn_True_PREDICTION"" ISNULL OR 
         TRIM(""Predicted"".""is_churn_True_PREDICTION"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""is_churn_True_PREDICTION"" AS FLOAT) END AS ""is_churn_True_PREDICTION"",
  CAST(""Predicted"".""prediction_status"" AS TEXT) AS ""prediction_status"",
  ""Predicted"".""update_time"" AS ""update_time"",
  ""Predicted"".""use_case"" AS ""use_case""
FROM ""datarobot_predictions"".""customer_churn_with_dnb_latest"" ""Predicted""
WHERE ""Predicted"".""prediction_status"" = 'OK'"
7cca00e7-b665-3072-99ba-b31ab9dc9fa9,Customer Data,postgres,"SELECT
	""Actual"".""active_professionals""           AS ""active_professionals""
  , ""Actual"".""active_profs_ratio""             AS ""active_profs_ratio""
  , ""Actual"".""businessEntityType_description"" AS ""businessEntityType_description""
  , ""Actual"".""charterType_description""        AS ""charterType_description""
  , ""Actual"".""client_id""                      AS ""client_id""
  , ""Actual"".""client_name""                    AS ""client_name""
  , ""Actual"".""comments_clean""                 AS ""comments_clean""
  , ""Actual"".""company_age_bins""               AS ""company_age_bins""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""company_age_in_gp"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""company_age_in_gp""
		END
	)
	                                                                   AS ""company_age_in_gp""
  , ""Actual"".""company_operational_age_bins""                            AS ""company_operational_age_bins""
  , CAST(""Actual"".""country_count"" AS BIGINT)                           AS ""country_count""
  , ""Actual"".""country_count_bins""                                      AS ""country_count_bins""
  , CAST(""Actual"".""customer_crossed_avg_age"" AS BOOL)                  AS ""customer_crossed_avg_age""
  , ""Actual"".""date_created""                                            AS ""date_created""
  , ""Actual"".""dunsControlStatus_operatingStatus_description""           AS ""dunsControlStatus_operatingStatus_description""
  , ""Actual"".""duns_number""                                             AS ""duns_number""
  , CAST(""Actual"".""dunscontrolstatus_isdelisted"" AS BOOL)              AS ""dunscontrolstatus_isdelisted""
  , CAST(""Actual"".""dunscontrolstatus_ismailundeliverable"" AS BOOL)     AS ""dunscontrolstatus_ismailundeliverable""
  , CAST(""Actual"".""dunscontrolstatus_ismarketable"" AS BOOL)            AS ""dunscontrolstatus_ismarketable""
  , CAST(""Actual"".""dunscontrolstatus_istelephonedisconnected"" AS BOOL) AS ""dunscontrolstatus_istelephonedisconnected""
  , ""Actual"".""failed_professionals""                                    AS ""failed_professionals""
  , ""Actual"".""first_hire""                                              AS ""first_hire""
  , ""Actual"".""gg_billing_country""                                      AS ""gg_billing_country""
  , CASE WHEN ""Actual"".""has_profs_in_country_w_own_entity"" = 'None'
  THEN CAST('false' AS BOOL) 
  ELSE CAST(""Actual"".""has_profs_in_country_w_own_entity"" AS BOOL) END AS ""has_profs_in_country_w_own_entity""
  , CAST(""Actual"".""has_urgent_tickets"" AS BOOL)                        AS ""has_urgent_tickets""
  , CAST(""Actual"".""is_bank_info_approved"" AS BOOL)                     AS ""is_bank_info_approved""
  , CAST(""Actual"".""is_churn"" AS BOOL)                                  AS ""is_churn""
  , CAST(""Actual"".""is_partner_referred"" AS BOOL)                       AS ""is_partner_referred""
  , CAST(""Actual"".""isexporter"" AS BOOL)                                AS ""isexporter""
  , CAST(""Actual"".""isfortune1000listed"" AS BOOL)                       AS ""isfortune1000listed""
  , CAST(""Actual"".""isimporter"" AS BOOL)                                AS ""isimporter""
  , CAST(""Actual"".""issmallbusiness"" AS BOOL)                           AS ""issmallbusiness""
  , CAST(""Actual"".""isstandalone"" AS BOOL)                              AS ""isstandalone""
  , ""Actual"".""inactive_professionals""                                  AS ""inactive_professionals""
  , ""Actual"".""industry_name""                                           AS ""industry_name""
  , ""Actual"".""health_sentiment""                                        AS ""health_sentiment""
  , ""Actual"".""legalForm_description""                                   AS ""legalForm_description""
  , ""Actual"".""max_prof_country""                                        AS ""max_prof_country""
  , ""Actual"".""max_prof_in_any_country""                                 AS ""max_prof_in_any_country""
  , ""Actual"".""max_prof_in_any_country_bins""                            AS ""max_prof_in_any_country_bins""
  , ""Actual"".""min_engagement_length""                                   AS ""min_engagement_length""
  , ""Actual"".""min_engagement_length_bins""                              AS ""min_engagement_length_bins""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT) = 'NaT'
				THEN NULL
			WHEN (
					CAST(CAST(TO_TIMESTAMP(CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT), 'YYYY-MM-DD') AS TIMESTAMP) AS DATE) NOTNULL
				)
				THEN CAST(CAST(TO_TIMESTAMP(CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT), 'YYYY-MM-DD') AS TIMESTAMP) AS DATE)
			WHEN (
					CAST(CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT) AS DATE) NOTNULL
				)
				THEN CAST(CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT) AS DATE)
				ELSE NULL
		END
	)
	                                                     AS ""msa_contract_start_date_peo""
  , ""Actual"".""net_professionals_terminated""              AS ""net_professionals_terminated""
  , ""Actual"".""net_professionals_terminated_bins""         AS ""net_professionals_terminated_bins""
  , ""Actual"".""net_professionals_terminated_percent""      AS ""net_professionals_terminated_percent""
  , ""Actual"".""new_professionals""                         AS ""new_professionals""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""no_countries_with_entity"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""no_countries_with_entity""
		END
	)
	                                                                   AS ""no_countries_with_entity""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""no_countries_with_entity_and_active_profs"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""no_countries_with_entity_and_active_profs""
		END
	)
	                                                                   AS ""no_countries_with_entity_and_active_profs""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""no_profs_moved_to_entity"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""no_profs_moved_to_entity""
		END
	)
	                                                                   AS ""no_profs_moved_to_entity""
  , ""Actual"".""num_stock_exchange_reg_bins""               AS ""num_stock_exchange_reg_bins""
  , ""Actual"".""num_years_since_incorporated""              AS ""num_years_since_incorporated""
  , ""Actual"".""num_years_since_operating""                 AS ""num_years_since_operating""
  , ""Actual"".""numberofemployees""                         AS ""numberofemployees""
  , ""Actual"".""numberofemployees_bins""                    AS ""numberofemployees_bins""
  , ""Actual"".""numberofregisteredstockexchanges""          AS ""numberofregisteredstockexchanges""
  , ""Actual"".""numberofregistrations""                     AS ""numberofregistrations""
  , ""Actual"".""offboarding_trend_bins""                    AS ""offboarding_trend_bins""
  , ""Actual"".""onboarding_finished""                       AS ""onboarding_finished""
  , ""Actual"".""onboarding_professionals""                  AS ""onboarding_professionals""
  , ""Actual"".""onboarding_trend_bins""                     AS ""onboarding_trend_bins""
  , ""Actual"".""org_type""                                  AS ""org_type""
  , CAST(""Actual"".""own_entity_ind"" AS BOOL)              AS ""own_entity_ind""
  , ""Actual"".""payroll_end_last_1_months_prof""            AS ""payroll_end_last_1_months_prof""
  , ""Actual"".""payroll_end_last_2_months_prof""            AS ""payroll_end_last_2_months_prof""
  , ""Actual"".""payroll_end_last_3_months_prof""            AS ""payroll_end_last_3_months_prof""
  , ""Actual"".""payroll_end_last_4_months_prof""            AS ""payroll_end_last_4_months_prof""
  , ""Actual"".""payroll_end_last_5_months_prof""            AS ""payroll_end_last_5_months_prof""
  , ""Actual"".""payroll_end_last_6_months_prof""            AS ""payroll_end_last_6_months_prof""
  , ""Actual"".""payroll_end_last_6_months_prof_bins""       AS ""payroll_end_last_6_months_prof_bins""
  , ""Actual"".""payroll_end_trend""                         AS ""payroll_end_trend""
  , ""Actual"".""payroll_start_last_1_months""               AS ""payroll_start_last_1_months""
  , ""Actual"".""payroll_start_last_2_months""               AS ""payroll_start_last_2_months""
  , ""Actual"".""payroll_start_last_3_months""               AS ""payroll_start_last_3_months""
  , ""Actual"".""payroll_start_last_4_months""               AS ""payroll_start_last_4_months""
  , ""Actual"".""payroll_start_last_5_months""               AS ""payroll_start_last_5_months""
  , ""Actual"".""payroll_start_last_6_months""               AS ""payroll_start_last_6_months""
  , ""Actual"".""payroll_start_last_6_months_bins""          AS ""payroll_start_last_6_months_bins""
  , ""Actual"".""payroll_start_trend""                       AS ""payroll_start_trend""
  , ""Actual"".""primaryAddress_addressCountry_name""        AS ""primaryAddress_addressCountry_name""
  , ""Actual"".""primaryAddress_continentalRegion_name""     AS ""primaryAddress_continentalRegion_name""
  , ""Actual"".""primaryIndustryCode_usSicV4Description""    AS ""primaryIndustryCode_usSicV4Description""
  , ""Actual"".""primaryaddress_ismanufacturinglocation""    AS ""primaryaddress_ismanufacturinglocation""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""profs_at_risk"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""profs_at_risk""
		END
	)
	                                                                   AS ""profs_at_risk""
  , CAST(""Actual"".""profs_moved_to_entity"" AS BOOL)              AS ""profs_moved_to_entity""
  , ""Actual"".""sfdc_client_health""                        AS ""sfdc_client_health""
  , ""Actual"".""sfdc_expansion_tier_level""                 AS ""sfdc_expansion_tier_level""
  , ""Actual"".""sfdc_pricing_model""                        AS ""sfdc_pricing_model""
  , ""Actual"".""sfdccustomer_health_notes""                 AS ""sfdccustomer_health_notes""
  , ""Actual"".""sfdccustomer_health_notes_agg""             AS ""sfdccustomer_health_notes_agg""
  , ""Actual"".""status""                                    AS ""status""
  , ""Actual"".""stockexchanges""                            AS ""stockexchanges""
  , ""Actual"".""terminating_professionals""                 AS ""terminating_professionals""
  , ""Actual"".""tier_type""                                 AS ""tier_type""
  , ""Actual"".""time_taken_for_first_hire""                 AS ""time_taken_for_first_hire""
  , ""Actual"".""time_taken_for_first_hire_bins""            AS ""time_taken_for_first_hire_bins""
  , ""Actual"".""time_taken_to_sign_msa""                    AS ""time_taken_to_sign_msa""
  , ""Actual"".""time_taken_to_sign_msa_bins""               AS ""time_taken_to_sign_msa_bins""
  , ""Actual"".""total_active_benefits""                     AS ""total_active_benefits""
  , ""Actual"".""total_active_benefits_bins""                AS ""total_active_benefits_bins""
  , ""Actual"".""total_benefits""                            AS ""total_benefits""
  , ""Actual"".""total_benefits_bins""                       AS ""total_benefits_bins""
  , ""Actual"".""total_benefits_created_last_6_months""      AS ""total_benefits_created_last_6_months""
  , ""Actual"".""total_benefits_created_last_6_months_bins"" AS ""total_benefits_created_last_6_months_bins""
  , ""Actual"".""total_professionals""                       AS ""total_professionals""
  , ""Actual"".""total_professionals_bins""                  AS ""total_professionals_bins""
  , ""Actual"".""yearly_revenue""                            AS ""yearly_revenue""
  , ""Actual"".""yearly_revenue_bins""                       AS ""yearly_revenue_bins""
  , ""Actual"".""zendesk_avg_sla_days""                      AS ""zendesk_avg_sla_days""
  , ""Actual"".""zendesk_issue_count""                       AS ""zendesk_issue_count""
  , ""Actual"".""zendesk_issue_count_bins""                  AS ""zendesk_issue_count_bins""
  , ""Actual"".""zendesk_issue_count_high""                  AS ""zendesk_issue_count_high""
  , ""Actual"".""zendesk_issue_count_urgent""                AS ""zendesk_issue_count_urgent""
FROM
	""preprocessed_data"".""customer_with_dnb_data"" ""Actual"""
7cca00e7-b665-3072-99ba-b31ab9dc9fa9,Customer Data,postgres,"WITH sm_temp AS
    (
        SELECT
            l1.""Associate ID""
          , l1.""Payroll Name""          AS ""M1 Name""
          , l1.""Job Title Description"" AS ""M1 Job Title""
          , l1.""Status""                AS ""M1 Status""
          , l2.""Payroll Name""          AS ""M2 Name""
          , l2.""Job Title Description"" AS ""M2 Job Title""
          , l3.""Payroll Name""          AS ""M3 Name""
          , l3.""Job Title Description"" AS ""M3 Job Title""
          , l1.""Work Contact: Work Email""
          , ROW_NUMBER() OVER (PARTITION BY l1.""Associate ID"") AS row_num
        FROM
            workday_hris.v_non_sensitive_workday_data l1
            LEFT JOIN
                workday_hris.v_non_sensitive_workday_data l2
                ON
                    l1.""Reports To Associate ID"" = l2.""Associate ID""
            LEFT JOIN
                workday_hris.v_non_sensitive_workday_data l3
                ON
                    l2.""Reports To Associate ID"" = l3.""Associate ID""
        --WHERE
            --l1.""Business Unit Description"" in ('Global Operations'
            --                               , 'Global Ops')
            --AND l1.""Home Department Description""='Account Management'
            --AND l1.""Job Title Description""      = 'Account Manager'
            --AND l1.""Status"" = 'Active'
        order by
            l1.""Reports To Name""
    )
  , sm_final as
    (
        SELECT
            CASE
                WHEN ""M1 Name"" like '%,%'
                    THEN CONCAT(SPLIT_PART(""M1 Name"",',',2),' ',SPLIT_PART(""M1 Name"",',',1))
                    ELSE ""M1 Name""
            END AS ""M1 Name""
          , ""M1 Job Title""
          , ""M1 Status""
          , lower(""Work Contact: Work Email"") AS ""M1 Work Email""
          , CASE
                WHEN ""M2 Job Title"" = 'Sr. Manager, Customer Experience'
                    THEN NULL
                    ELSE
                    CASE
                        WHEN ""M2 Name"" like '%,%'
                            THEN CONCAT(SPLIT_PART(""M2 Name"",',',2),' ',SPLIT_PART(""M2 Name"",',',1))
                            ELSE ""M2 Name""
                    END
            END ""M2 Name""
          , CASE
                WHEN ""M2 Job Title"" = 'Sr. Manager, Customer Experience'
                    THEN NULL
                    ELSE ""M2 Job Title""
            END ""M2 Job Title""
            --, CONCAT(SPLIT_PART(""M2 Name"",',',2),' ',SPLIT_PART(""M2 Name"",',',1)) AS ""M2 Name""
            --, ""M2 Job Title""
          , CASE
                WHEN ""M2 Job Title"" = 'Sr. Manager, Customer Experience'
                    THEN
                    CASE
                        WHEN ""M2 Name"" like '%,%'
                            THEN CONCAT(SPLIT_PART(""M2 Name"",',',2),' ',SPLIT_PART(""M2 Name"",',',1))
                            ELSE ""M2 Name""
                    END
                    ELSE
                    CASE
                        WHEN ""M3 Name"" like '%,%'
                            THEN CONCAT(SPLIT_PART(""M3 Name"",',',2),' ',SPLIT_PART(""M3 Name"",',',1))
                            ELSE ""M3 Name""
                    END
            END ""M3 Name""
          , CASE
                WHEN ""M2 Job Title"" = 'Sr. Manager, Customer Experience'
                    THEN ""M2 Job Title""
                    ELSE ""M3 Job Title""
            END ""M3 Job Title""
            --, CONCAT(SPLIT_PART(""M3 Name"",',',2),' ',SPLIT_PART(""M3 Name"",',',1)) AS ""M3 Name""
            --, ""M3 Job Title""
        from
            sm_temp
        WHERE
            row_num = 1
        order by
            ""M1 Name""
    )
  , ticket_sla AS
    (
        SELECT
            t.id AS ticket_id
          , CASE
                WHEN t.priority = 'urgent'
                    THEN 2880
                WHEN t.priority = 'high'
                    THEN 7200
                WHEN t.priority = 'normal'
                    THEN 28800
                WHEN t.priority = 'low'
                    THEN 64800
                    ELSE 129600
            END AS sla_limit
        FROM
            zendesk.ticket t
        WHERE
            t.status <<>> 'deleted'
    )
  , zd AS
    (
        SELECT
            u.organization_id
          , o.custom_customer_id AS zd_client_id
          , o.name               AS org_name
          , COUNT(t.id)             issues_raised
          , COUNT
                (
                    CASE
                        WHEN tm.full_resolution_time_in_minutes_business <<= sla_limit
                            AND status in ('closed'
                                         , 'solved')
                            THEN t.id
                            ELSE NULL
                    END
                )
            AS ticket_count_within_sla
          , COUNT
                (
                    CASE
                        WHEN tm.full_resolution_time_in_minutes_business >> sla_limit
                            AND status in ('closed'
                                         , 'solved')
                            THEN t.id
                            ELSE NULL
                    END
                )
            AS ticket_count_sla_breached
          , COUNT
                (
                    CASE
                        WHEN lower(status) not in ('closed'
                                                 , 'solved')
                            THEN t.id
                            ELSE NULL
                    END
                )
            AS open_ticket_count
        FROM
            zendesk.ticket t
            LEFT JOIN
                zendesk.""user"" u
                ON
                    t.requester_id = u.id
            LEFT JOIN
                zendesk.organization o
                ON
                    u.organization_id = o.id
            LEFT JOIN
                zendesk.ticket_metrics tm
                ON
                    t.id = tm.ticket_id
            LEFT JOIN
                ticket_sla ts
                ON
                    t.id = ts.ticket_id
        WHERE
            t.status              <<>> 'deleted'
            AND u.organization_id <<>>'369464938673'
            AND o.custom_customer_id notnull
        GROUP BY
            u.organization_id
          , o.custom_customer_id
          , o.name
    )
  , sfdc AS
    (
        SELECT
            parent_name
          , MAX
                (
                    CASE
                        WHEN source ='SFDC Customer'
                            THEN source_id
                    END
                )
            AS salesforce_id
          , MIN
                (
                    CASE
                        WHEN source ='SFDC Customer'
                            THEN source_id
                    END
                )
            AS salesforce_id_2
          , MAX
                (
                    CASE
                        WHEN source ='GoGlobal Client'
                            THEN source_id
                    END
                )
            AS goglobal_id
        FROM
            repo.v_gp_mdm_customer
        GROUP BY
            parent_name
    )
  , sfdc_health AS
    (
        SELECT
            sfdc.*
          , t2.factors_for_customer_health_c
          , t2.complexity_c
        FROM
            sfdc
            LEFT JOIN
                salesforce.account t2
                ON
                    sfdc.salesforce_id=t2.id
        WHERE
            t2._fivetran_active = true
    )
  , client_prof_by_status AS
	(
		SELECT
			cl_country.client_id as cps_client_id
		  , COUNT(cl_country.id) AS total_professionals
		  , SUM
				(
					CASE
						WHEN (
								is_failed_to_launch='true'
							)
							THEN 1
							ELSE 0
					END
				)
			AS Failed
		  , SUM
				(
					CASE
						WHEN (
								status= '1'
							)
							AND is_failed_to_launch = 'false'
							THEN 1
							ELSE 0
					END
				)
			AS New
		  , SUM
				(
					CASE
						WHEN (
								status= '2'
							)
							AND is_failed_to_launch = 'false'
							THEN 1
							ELSE 0
					END
				)
			AS Onboarding
		  , SUM
				(
					CASE
						WHEN (
								status= '3'
							)
							AND is_failed_to_launch = 'false'
							THEN 1
							ELSE 0
					END
				)
			AS Active
		  , SUM
				(
					CASE
						WHEN (
								status= '4'
							)
							AND is_failed_to_launch = 'false'
							THEN 1
							ELSE 0
					END
				)
			AS Terminating
		  , SUM
				(
					CASE
						WHEN (
								status='5'
							)
							AND is_failed_to_launch = 'false'
							THEN 1
							ELSE 0
					END
				)
			AS Inactive
		FROM
			goglobal_gp_goglobal.v_gp_gg_professional_current cl_country
		GROUP BY
			cl_country.client_id
	)
  , client_end_date_data AS
	(
		Select
			cl_country.client_id as ced_id
		  , CASE
				WHEN (
						cps.total_professionals = cps.Failed+cps.Inactive
					)
					THEN max(cl_country.payroll_end_date)
					ELSE NULL
			END customer_inactive_date
		FROM
			(
				select *
				from
					goglobal_gp_goglobal.v_gp_gg_professional_current
				where
					is_failed_to_launch = 'false'
			)
			cl_country
			left join
				client_prof_by_status cps
				ON
					cps.cps_client_id = cl_country.client_id
		GROUP BY
			cl_country.client_id
		  , cps.total_professionals
		  , cps.Failed
		  , cps.Inactive
	)
  , final AS
    (
        SELECT
            client.id::TEXT                         AS client_id
          , client.name                             AS client_name
          , CONCAT(am.first_name, ' ',am.last_name) AS account_manager
          , CONCAT(ae.first_name, ' ',ae.last_name) AS account_executive
          , zd.ticket_count_sla_breached
          , zd.ticket_count_within_sla
          , zd.open_ticket_count
          , sfdc_health.factors_for_customer_health_c
          , sfdc_health.complexity_c
          , us.email AS work_email
        FROM
            goglobal_gp_goglobal.v_gp_gg_client_current client
            LEFT JOIN
                goglobal_gp_goglobal.v_gp_gg_gp_person_current am
                ON
                    client.gp_account_manager_id = am.id
            LEFT JOIN
                goglobal_gp_goglobal.v_gp_gg_gp_person_current ae
                ON
                    client.gp_current_sales_rep_id = ae.id
            LEFT JOIN
                zd
                ON
                    client.id = zd.zd_client_id
            LEFT JOIN
                sfdc_health
                ON
                    sfdc_health.goglobal_id::integer=client.id
            LEFT JOIN
                (
                    SELECT *
                    FROM
                        goglobal_gp_goglobal.v_gp_gg_user_current
                    where
                        lower(email) like '%globalization-partners.com%'
                )
                us
                ON
                    am.user_id = us.id
        WHERE
            client.is_demo_client IS FALSE
    ),
	current_pop AS(SELECT client_id,cal_date,COUNT(DISTINCT professional_id) AS current_month_pop
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
WHERE active_flag = 'Active'
AND (service_class IS NULL OR service_class <<>> '4')
AND cal_date = DATE_TRUNC('month', CURRENT_DATE)
GROUP BY cal_date, client_id
),
max_pay_end AS (SELECT prof.client_id, MAX(prof.payroll_end_date)max_end
			    FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS prof
				LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current as client on prof.client_id = client.id
				WHERE (prof.service_class IS NULL OR prof.service_class <<>> '4')
			    AND prof.is_failed_to_launch = FALSE
			    AND client.is_demo_client = FALSE
			   GROUP BY prof.client_id)
SELECT final.*, sm_final.*,ced.*, current_pop.current_month_pop, max_pay_end.max_end AS max_payroll_end
from
    final
    left join
        sm_final
        on
            final.work_email = sm_final.""M1 Work Email""
	left join 
		client_end_date_data ced 
		on final.client_id=ced.ced_id::text
		left join current_pop
		on final.client_id::INT = current_pop.client_id
		left join max_pay_end  ON final.client_id::INT = max_pay_end.client_id"
7cca00e7-b665-3072-99ba-b31ab9dc9fa9,Toggle,,
7cca00e7-b665-3072-99ba-b31ab9dc9fa9,Waffle (Waffle Template),,
7ced6095-f0dd-2b05-8ea7-a7da1c256023,Custom SQL Query+ (Multiple Connections),,
7ced6095-f0dd-2b05-8ea7-a7da1c256023,Custom SQL Query+ (Multiple Connections),databricks,"with first_billlings as (
  SELECT 
    b.project_id,
    min(b.invoice_date) as first_billing_date
  FROM gp_prod.gold_kpi.billing_kpi_view as b
  where true
    and b.accounting_period is not null
    and b.bill_type  not in ('DEPOSIT','SETUP')
  group by 1
  order by 1
)

,a as (
SELECT 
  CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
  accounting_period,
  project_id,
  concat(right(accounting_period,4),left(accounting_period,2))::int as yearmonth

FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view 
WHERE 
  total_eor_recurring_fee_billing_value >> 0 
  --AND accounting_period IN ('01-2023','02-2023','03-2023', '04-2023', '05-2023','06-2023')
  --and concat(right(accounting_period,4),left(accounting_period,2))::int >>= 202301
) 

,final as (
  select 
    a.*
    ,first_billlings.first_billing_date
  from a 
  left join first_billlings on a.project_id=first_billlings.project_id
  where yearmonth>>=202301
)

select * from final"
7d51d185-9276-4fe0-ae04-7c9d8198b16b,Historic Contractors,postgres,"SELECT     hd.cal_date,
            hd.client_id,
	    hd.client_billing_region,
	    hd.region AS prof_region,
            hd.client_name,
	    hd.professional_id,
            hd.accounting_id,
	    hd.active_flag,
	    hd.new_flag,
	    hd.termination_flag,
            mc.partner_referral
	   
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS hd
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_client AS mc ON hd.client_id = mc.id
WHERE  hd.active_flag = 'Active'
AND  hd.cal_date <<= DATE_TRUNC('month', CURRENT_DATE)	
AND  hd.cal_date >>= '2022-01-01'
AND  hd.service_class = '4'

ORDER BY  hd.client_id,  hd.professional_id,  hd.cal_date"
7d51d185-9276-4fe0-ae04-7c9d8198b16b,Historic Contractors,databricks,"SELECT  CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
  accounting_period,
  project_id,
  sum(total_recurring_contractor_revenue)
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view
group by 1,2,3"
7d51d185-9276-4fe0-ae04-7c9d8198b16b,Contractors Customer,postgres,"WITH A AS(
	   SELECT DISTINCT
           th.cal_date, 
           th.client_id,
	   th.client_name, 
       th.client_billing_region,
	   mc.partner_referral,
	   contractor.count AS contractors,
	   prof.count AS profs,
	   ter_prof.count AS ter_profs,
	   ter_contractor.count AS ter_contractor,
	   CASE WHEN contractor.count >> 0 AND prof.count >>0  THEN 'Both'
	   WHEN contractor.count >> 0 AND prof.count  IS NULL THEN 'Contractor Only'
	   WHEN prof.count >> 0 AND contractor.count  IS NULL THEN 'Professional Only'
	   END AS product_mix
	   
	 
	  
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS th
LEFT JOIN (SELECT cal_date, client_id, COUNT(DISTINCT professional_id) AS count
		  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
		  WHERE active_flag = 'Active'
		  AND service_class = '4'
		  GROUP BY cal_date, client_id)contractor
		  ON th.client_id = contractor.client_id
		  AND th.cal_date= contractor.cal_date
LEFT JOIN (SELECT cal_date, client_id, COUNT(DISTINCT professional_id) AS count
		  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
		  WHERE active_flag = 'Active'
		  AND (service_class IS NULL OR service_class <<>> '4')
		  GROUP BY cal_date, client_id)prof
		  ON th.client_id = prof.client_id
		  AND th.cal_date= prof.cal_date
LEFT JOIN (SELECT cal_date, client_id, COUNT(DISTINCT professional_id) AS count
		  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
		  WHERE termination_flag = 'Termination'
		  AND (service_class IS NULL OR service_class <<>> '4')
		  GROUP BY cal_date, client_id)ter_prof
		  ON th.client_id = ter_prof.client_id
		  AND th.cal_date= ter_prof.cal_date
LEFT JOIN (SELECT cal_date, client_id, COUNT(DISTINCT professional_id) AS count
		  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
		  WHERE termination_flag = 'Termination'
		  AND service_class = '4'
		  GROUP BY cal_date, client_id)ter_contractor
		  ON th.client_id = ter_contractor.client_id
		  AND th.cal_date= ter_contractor.cal_date
	
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_client AS mc ON th.client_id= mc.id
		  
WHERE  th.cal_date <<= DATE_TRUNC('month', CURRENT_DATE)	
AND th.cal_date >>= '2022-01-01'


ORDER BY client_id, cal_date),


B AS (SELECT A.*, 

	 
	  
	  CASE WHEN product_mix = 'Both' AND profs >> 0 AND contractors >> 0 THEN cal_date
	       WHEN product_mix = 'Professional Only' and profs >> 0 THEN cal_date
	       WHEN product_mix = 'Contractor Only' AND contractors >> 0 THEN cal_date END AS active_date
	 FROM A),

C AS(
SELECT B.*,
       CASE WHEN product_mix = 'Professional Only' AND profs >> 0 AND cal_date = MIN(active_date) OVER (PARTITION BY client_id) THEN TRUE 
	        WHEN product_mix = 'Both' AND profs >>0  AND contractors >> 0 AND cal_date = MIN(active_date) OVER (PARTITION BY client_id) THEN TRUE 
			WHEN Product_mix = 'Contractor Only' AND contractors >> 0 AND cal_date = MIN(active_date) OVER (PARTITION BY client_id) THEN TRUE 
	   END AS new_in,
	   
	CASE WHEN  (LAG(product_mix ,1) OVER ( PARTITION BY client_id) IS NOT NULL AND product_mix IS NOT NULL AND product_mix <<>>  LAG(product_mix ,1) OVER ( PARTITION BY client_id)) THEN TRUE END AS migration_in,
	
    CASE WHEN  (LAG(product_mix ,-1) OVER ( PARTITION BY client_id) IS NOT NULL AND product_mix IS NOT NULL AND product_mix <<>>  LAG(product_mix ,-1) OVER ( PARTITION BY client_id)) THEN TRUE END AS migration_out,
	
  CASE WHEN active_date IS NOT NULL AND cal_date <<>> MIN(active_date) OVER (PARTITION BY client_id, product_mix) 
          AND LAG(active_date ,1) OVER ( PARTITION BY client_id) IS NOT NULL 
		  AND LAG(product_mix ,1) OVER ( PARTITION BY client_id) = product_mix THEN TRUE END AS opening,
  
 
	   
	   CASE WHEN  product_mix = 'Professional Only' AND profs >>0 AND ter_profs >>0 AND profs = ter_profs AND  (LAG(profs ,-1) OVER ( PARTITION BY client_id)) IS NULL THEN TRUE 
	        WHEN product_mix = 'Both' AND profs >>0 AND ter_profs >>0 AND contractors >> 0 AND ter_contractor >> 0 AND profs = ter_profs AND contractors = ter_contractor AND (LAG(profs ,-1) OVER ( PARTITION BY client_id)) IS NULL THEN TRUE
	        WHEN product_mix = 'Contractor Only' AND contractors >> 0 AND ter_contractor >> 0 AND contractors = ter_contractor AND  (LAG(contractors ,-1) OVER ( PARTITION BY client_id)) IS NULL  THEN TRUE
	  END AS churning,
	  
	  
       CASE WHEN LAG(active_date ,1) OVER ( PARTITION BY client_id) IS NULL AND active_date >> MIN(active_date) OVER (PARTITION BY client_id) THEN TRUE END AS reactivation
	 
	   
FROM B


ORDER BY client_id, cal_date)

SELECT
    cal_date,
	client_id,
	client_name,
        client_billing_region,
		partner_referral,
	contractors,
	ter_contractor,
	profs,
	ter_profs,
	product_mix,
	new_in,
	migration_in,
	migration_out,
	opening,
	CASE WHEN churning = TRUE AND migration_out = TRUE THEN NULL
	     WHEN churning = TRUE AND migration_out IS NULL THEN TRUE
		 END AS churning,
        reactivation
FROM C
ORDER BY client_id, cal_date"
7f18aa3f-1bab-9fde-1caf-9358131cb58b,DW - SFDC,postgres,"SELECT acc_partn.name AS partner,
account.id AS account_id,
account.name AS account_name,
date_trunc('month', oc.close_date)::date AS close_date,
oc.id AS opp_id,
oc.update_time AS fivetran_synced_opps,
dev_own.name AS partner_dev_owner
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time oc
LEFT JOIN salesforce.v_gp_sfdc_account_current account ON oc.account_id::text = account.id::text
LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON oc.partner2__c::text = acc_partn.id::text
LEFT JOIN salesforce.v_gp_sfdc_user_current dev_own ON oc.partner_development_owner_lookup__c::text = dev_own.id::text
WHERE (oc.type::text <<>> 'Existing Business'::text OR oc.type IS NULL) 
AND (oc.record_type_bi__c IS NULL OR oc.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
AND (oc.partner_acquisition__c IS NULL OR oc.partner_acquisition__c::text <<>> 'Yes'::text)
AND oc.is_won = TRUE AND (oc.pricing_model__c <<>> 'Contractor only' OR oc.pricing_model__c IS NULL)
AND acc_partn.vital_few__c = true
ORDER BY oc.close_date DESC"
7f18aa3f-1bab-9fde-1caf-9358131cb58b,DB - GPP,postgres,"SELECT a.id AS account_id, a.partner__c AS partner_id, b.name AS partner_name, b.vital_few__c
FROM salesforce.v_gp_sfdc_account_current AS a
LEFT JOIN salesforce.v_gp_sfdc_account_current AS b ON a.partner__c = b.id"
7f18aa3f-1bab-9fde-1caf-9358131cb58b,DB - GPP,databricks,"SELECT
date_trunc('month', period_date)::date AS period_date,
--gp_customer_internal_id,
partners_referral_name,
gp_customer_accounting_id,
sfdc_account,
SUM(total_eor_recurring_fee_billing_value) AS eor_recurring_fee,
COUNT(DISTINCT(project_id)) as active_professional_eor_count
FROM
(
SELECT CONCAT(RIGHT(b.accounting_period,4),'-',LEFT(b.accounting_period,2),'-01')::date AS period_date,
b.project_id,
b.gp_customer_accounting_id,
--b.gp_customer_internal_id,
c.partners_referral_name,
c.sfdc_account,
-- EOR sum
(
  SUM(
    CASE 
      WHEN b.recurring_category IN (""Recurring Fees and Mark-ups"") 
      AND (service_class = 'EOR' OR service_class = 'EOR (Services)' OR service_class IS NULL OR service_class == 'Grow Global') 
      AND (b.transaction_type= 'INV' OR b.transaction_type= 'DBM')
      THEN b.extended_amount_in_company_base_currency 
      ELSE 0 END)
  -
  sum(
    case 
    WHEN b.recurring_category IN (""Recurring Fees and Mark-ups"") 
    AND (service_class = 'EOR' OR service_class = 'EOR (Services)' OR service_class IS NULL OR service_class == 'Grow Global') 
    AND b.transaction_type= 'CRM' 
    THEN b.extended_amount_in_company_base_currency 
    ELSE 0 END) 
) AS total_eor_recurring_fee_billing_value
FROM gold_kpi.billing_kpi_view b
LEFT JOIN gold_kpi.customer_kpi_view c ON b.gp_customer_internal_id = c.customer_internal_id
GROUP BY 1, 2, 3, 4, 5
) 
WHERE total_eor_recurring_fee_billing_value >> 0
AND partners_referral_name IS NOT NULL
GROUP BY 1, 2, 3, 4
ORDER BY 1, 2"
7f7cef01-6084-c241-c85e-b2c405ef22f5,Custom SQL Query (gpbidb),,
7f7cef01-6084-c241-c85e-b2c405ef22f5,Custom SQL Query (gpbidb),postgres,"select distinct t1.id as client_id, t2.*
from goglobal_gp_goglobal.v_gp_gg_client_current t1
left join goglobal_gp_goglobal.v_gp_gg_client_terms_current t2 on t1.client_terms_id=t2.id"
7f7cef01-6084-c241-c85e-b2c405ef22f5,Custom SQL Query (gpbidb),postgres,"select distinct t1.id, t1.name as Client, 
CONCAT(T5.ADDRESS1,' ',T5.ADDRESS2,' ',T5.ADDRESS3,' ',T5.CITY,', ',t6.name,' ',T5.POSTAL_CODE,' ',T7.NAME) AS BILLING_address
from goglobal_gp_goglobal.v_gp_gg_client_current t1
left join goglobal_gp_goglobal.v_gp_gg_ADDRESS_current t5 on t1.billing_address_id=t5.id								 
left join goglobal_gp_goglobal.v_gp_gg_province_current t6 on t5.province_id=t6.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t7 on t5.COUNTRY_ID=t7.id"
7f7cef01-6084-c241-c85e-b2c405ef22f5,Custom SQL Query (gpbidb),postgres,"select distinct t1.id as professional_id2, t3.name as lsp
from goglobal_gp_goglobal.v_gp_gg_professional_current t1
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current t2 
	on t1.lsp_country_id=t2.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_current t3 
	on t2.lsp_id=t3.id"
82776e1c-b6da-7522-9b72-60ab95304d37,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"SELECT 
    ""v_gp_gg_professional_current1"".external_id,
    ""v_gp_gg_client_current1"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_client_current1)"",
    ""v_gp_gg_country_current"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_country_current3)"",
    ""v_gp_gg_gp_person_current"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_lsp_country_current1"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_lsp_country_current1)"",
    ""v_gp_gg_lsp_current1"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_lsp_current1)"",
    ""v_gp_gg_professional_offboarding_current1"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_professional_offboarding_current1)"",
    ""v_gp_gg_user_expenses_current1"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_user_expenses_current1)"",
    ""v_gp_gg_professional_current1"".""_fivetran_deleted"" AS ""_fivetran_deleted"",
    ""v_gp_gg_client_current1"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_client_current1)"",
    ""v_gp_gg_country_current"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_country_current3)"",
    ""v_gp_gg_gp_person_current"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_lsp_country_current1"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_lsp_country_current1)"",
    ""v_gp_gg_lsp_current1"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_lsp_current1)"",
    ""v_gp_gg_professional_offboarding_current1"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_professional_offboarding_current1)"",
    ""v_gp_gg_user_expenses_current1"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_user_expenses_current1)"",
    ""v_gp_gg_professional_current1"".""_fivetran_synced"" AS ""_fivetran_synced"",
    ""v_gp_gg_client_current1"".""accounting_id"" AS ""accounting_id (v_gp_gg_client_current1)"",
    ""v_gp_gg_gp_person_current"".""accounting_id"" AS ""accounting_id (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""accounting_id"" AS ""accounting_id (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""accounting_id"" AS ""accounting_id (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_lsp_country_current1"".""accounting_id"" AS ""accounting_id (v_gp_gg_lsp_country_current1)"",
    ""v_gp_gg_lsp_current1"".""accounting_id"" AS ""accounting_id (v_gp_gg_lsp_current1)"",
    ""v_gp_gg_professional_current1"".""accounting_id"" AS ""accounting_id"",
    ""v_gp_gg_client_current1"".""adp_lead_source"" AS ""adp_lead_source"",
    ""v_gp_gg_professional_offboarding_current1"".""agreement_client_sent_date_completed"" AS ""agreement_client_sent_date_completed"",
    ""v_gp_gg_professional_offboarding_current1"".""agreement_professional_approved_date_signed"" AS ""agreement_professional_approved_date_signed"",
    ""v_gp_gg_professional_offboarding_current1"".""agreement_professional_sent_date_completed"" AS ""agreement_professional_sent_date_completed"",
    ""v_gp_gg_professional_current1"".""annual_base_salary"" AS ""annual_base_salary"",
    ""v_gp_gg_professional_current1"".""annual_base_salary_currency"" AS ""annual_base_salary_currency"",
    ""v_gp_gg_lsp_country_current1"".""annual_billing_amount"" AS ""annual_billing_amount"",
    ""v_gp_gg_lsp_country_current1"".""annual_billing_currency"" AS ""annual_billing_currency"",
    ""v_gp_gg_lsp_country_current1"".""annual_billing_notes"" AS ""annual_billing_notes"",
    ""v_gp_gg_client_current1"".""any_specific_terms"" AS ""any_specific_terms"",
    ""v_gp_gg_professional_offboarding_current1"".""applies"" AS ""applies"",
    ""v_gp_gg_professional_offboarding_current1"".""benefits_review_date_completed"" AS ""benefits_review_date_completed"",
    ""v_gp_gg_client_current1"".""bi_monthly_payroll_changes_due_period_one"" AS ""bi_monthly_payroll_changes_due_period_one"",
    ""v_gp_gg_client_current1"".""bi_monthly_payroll_changes_due_period_two"" AS ""bi_monthly_payroll_changes_due_period_two"",
    ""v_gp_gg_client_current1"".""billing_address_id"" AS ""billing_address_id"",
    ""v_gp_gg_professional_current1"".""birth_date"" AS ""birth_date"",
    ""v_gp_gg_gp_person_current"".""bus_phone"" AS ""bus_phone (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""bus_phone"" AS ""bus_phone (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""bus_phone"" AS ""bus_phone (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_professional_current1"".""bus_phone"" AS ""bus_phone"",
    ""v_gp_gg_professional_current1"".""client_country_id"" AS ""client_country_id"",
    ""v_gp_gg_professional_current1"".""client_id"" AS ""client_id"",
    ""v_gp_gg_client_current1"".""client_terms_id"" AS ""client_terms_id"",
    ""v_gp_gg_professional_current1"".""client_thirteenth_month_payment"" AS ""client_thirteenth_month_payment"",
    ""v_gp_gg_professional_current1"".""contract_end_date"" AS ""contract_end_date"",
    ""v_gp_gg_professional_current1"".""contract_notes"" AS ""contract_notes"",
    ""v_gp_gg_professional_current1"".""contract_prob_period_end_date"" AS ""contract_prob_period_end_date"",
    ""v_gp_gg_professional_current1"".""contract_start_date"" AS ""contract_start_date"",
    ""v_gp_gg_professional_current1"".""country_accounting_id"" AS ""country_accounting_id"",
    ""v_gp_gg_country_current"".""country_code"" AS ""country_code (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""country_code"" AS ""country_code (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""country_code"" AS ""country_code"",
    ""v_gp_gg_country_current"".""country_finance_lead"" AS ""country_finance_lead (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""country_finance_lead"" AS ""country_finance_lead (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""country_finance_lead"" AS ""country_finance_lead"",
    ""v_gp_gg_lsp_country_current1"".""country_id"" AS ""country_id"",
    ""v_gp_gg_country_current"".""country_info_link"" AS ""country_info_link (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""country_info_link"" AS ""country_info_link (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""country_info_link"" AS ""country_info_link"",
    ""v_gp_gg_country_current"".""country_ops_associate"" AS ""country_ops_associate (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""country_ops_associate"" AS ""country_ops_associate (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""country_ops_associate"" AS ""country_ops_associate"",
    ""v_gp_gg_country_current"".""country_ops_lead"" AS ""country_ops_lead (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""country_ops_lead"" AS ""country_ops_lead (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""country_ops_lead"" AS ""country_ops_lead"",
    ""v_gp_gg_country_current"".""countrypedia_link"" AS ""countrypedia_link (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""countrypedia_link"" AS ""countrypedia_link (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""countrypedia_link"" AS ""countrypedia_link"",
    ""v_gp_gg_client_current1"".""created_by"" AS ""created_by (v_gp_gg_client_current1)"",
    ""v_gp_gg_country_current"".""created_by"" AS ""created_by (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""created_by"" AS ""created_by (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""created_by"" AS ""created_by (v_gp_gg_country_current3)"",
    ""v_gp_gg_gp_person_current"".""created_by"" AS ""created_by (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""created_by"" AS ""created_by (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""created_by"" AS ""created_by (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_lsp_country_current1"".""created_by"" AS ""created_by (v_gp_gg_lsp_country_current1)"",
    ""v_gp_gg_lsp_current1"".""created_by"" AS ""created_by (v_gp_gg_lsp_current1)"",
    ""v_gp_gg_professional_offboarding_current1"".""created_by"" AS ""created_by (v_gp_gg_professional_offboarding_current1)"",
    ""v_gp_gg_user_expenses_current1"".""created_by"" AS ""created_by (v_gp_gg_user_expenses_current1)"",
    ""v_gp_gg_professional_current1"".""created_by"" AS ""created_by"",
    ""v_gp_gg_country_current"".""currency_code"" AS ""currency_code (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""currency_code"" AS ""currency_code (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""currency_code"" AS ""currency_code"",
    ""v_gp_gg_country_current"".""currency_name"" AS ""currency_name (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""currency_name"" AS ""currency_name (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""currency_name"" AS ""currency_name"",
    ""v_gp_gg_country_current"".""custom_message_for_expenses"" AS ""custom_message_for_expenses (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""custom_message_for_expenses"" AS ""custom_message_for_expenses (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""custom_message_for_expenses"" AS ""custom_message_for_expenses"",
    ""v_gp_gg_professional_current1"".""date_carryover_must_be_taken"" AS ""date_carryover_must_be_taken"",
    ""v_gp_gg_client_current1"".""date_created"" AS ""date_created (v_gp_gg_client_current1)"",
    ""v_gp_gg_country_current"".""date_created"" AS ""date_created (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""date_created"" AS ""date_created (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""date_created"" AS ""date_created (v_gp_gg_country_current3)"",
    ""v_gp_gg_gp_person_current"".""date_created"" AS ""date_created (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""date_created"" AS ""date_created (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""date_created"" AS ""date_created (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_lsp_country_current1"".""date_created"" AS ""date_created (v_gp_gg_lsp_country_current1)"",
    ""v_gp_gg_lsp_current1"".""date_created"" AS ""date_created (v_gp_gg_lsp_current1)"",
    ""v_gp_gg_professional_offboarding_current1"".""date_created"" AS ""date_created (v_gp_gg_professional_offboarding_current1)"",
    ""v_gp_gg_user_expenses_current1"".""date_created"" AS ""date_created (v_gp_gg_user_expenses_current1)"",
    ""v_gp_gg_professional_current1"".""date_created"" AS ""date_created"",
    ""v_gp_gg_client_current1"".""date_modified"" AS ""date_modified (v_gp_gg_client_current1)"",
    ""v_gp_gg_country_current"".""date_modified"" AS ""date_modified (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""date_modified"" AS ""date_modified (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""date_modified"" AS ""date_modified (v_gp_gg_country_current3)"",
    ""v_gp_gg_gp_person_current"".""date_modified"" AS ""date_modified (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""date_modified"" AS ""date_modified (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""date_modified"" AS ""date_modified (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_lsp_country_current1"".""date_modified"" AS ""date_modified (v_gp_gg_lsp_country_current1)"",
    ""v_gp_gg_lsp_current1"".""date_modified"" AS ""date_modified (v_gp_gg_lsp_current1)"",
    ""v_gp_gg_professional_offboarding_current1"".""date_modified"" AS ""date_modified (v_gp_gg_professional_offboarding_current1)"",
    ""v_gp_gg_user_expenses_current1"".""date_modified"" AS ""date_modified (v_gp_gg_user_expenses_current1)"",
    ""v_gp_gg_professional_current1"".""date_modified"" AS ""date_modified"",
    ""v_gp_gg_lsp_country_current1"".""default_invoice_currency"" AS ""default_invoice_currency"",
    ""v_gp_gg_lsp_country_current1"".""default_invoice_type"" AS ""default_invoice_type"",
    ""v_gp_gg_professional_current1"".""deposit_amount"" AS ""deposit_amount"",
    ""v_gp_gg_professional_current1"".""deposit_balance"" AS ""deposit_balance"",
    ""v_gp_gg_professional_current1"".""deposit_billed"" AS ""deposit_billed"",
    ""Custom SQL Query"".""email"" AS ""email"",
    ""v_gp_gg_professional_current1"".""emergency_email"" AS ""emergency_email"",
    ""v_gp_gg_professional_current1"".""emergency_name"" AS ""emergency_name"",
    ""v_gp_gg_professional_current1"".""emergency_phone"" AS ""emergency_phone"",
    ""v_gp_gg_user_expenses_current1"".""employee_id"" AS ""employee_id"",
    ""v_gp_gg_professional_current1"".""employment_contract_reject_count"" AS ""employment_contract_reject_count"",
    ""v_gp_gg_lsp_current1"".""enrollment_date"" AS ""enrollment_date"",
    ""v_gp_gg_lsp_country_current1"".""estimated_time_to_fund"" AS ""estimated_time_to_fund"",
    ""v_gp_gg_professional_current1"".""expense_frequency"" AS ""expense_frequency"",
    ""v_gp_gg_professional_current1"".""expense_method"" AS ""expense_method"",
    ""v_gp_gg_user_expenses_current1"".""exported"" AS ""exported"",
    ""v_gp_gg_gp_person_current"".""first_name"" AS ""first_name (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""first_name"" AS ""first_name (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""first_name"" AS ""first_name (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_professional_current1"".""first_name"" AS ""first_name"",
    ""v_gp_gg_professional_current1"".""forecast_end_date"" AS ""forecast_end_date"",
    ""v_gp_gg_professional_current1"".""forecast_start_date"" AS ""forecast_start_date"",
    ""v_gp_gg_lsp_country_current1"".""fund_by_type"" AS ""fund_by_type"",
    ""v_gp_gg_professional_current1"".""funded_lsp_country_id"" AS ""funded_lsp_country_id"",
    ""v_gp_gg_client_current1"".""go_live_date"" AS ""go_live_date"",
    ""v_gp_gg_gp_person_current"".""goes_by"" AS ""goes_by (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""goes_by"" AS ""goes_by (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""goes_by"" AS ""goes_by (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_professional_current1"".""goes_by"" AS ""goes_by"",
    ""v_gp_gg_client_current1"".""gp_account_manager_id"" AS ""gp_account_manager_id"",
    ""v_gp_gg_professional_offboarding_current1"".""gp_agreement_client_sent_completed_by"" AS ""gp_agreement_client_sent_completed_by"",
    ""v_gp_gg_professional_offboarding_current1"".""gp_agreement_professional_sent_completed_by"" AS ""gp_agreement_professional_sent_completed_by"",
    ""v_gp_gg_professional_offboarding_current1"".""gp_benefits_reviewed_by"" AS ""gp_benefits_reviewed_by"",
    ""v_gp_gg_lsp_country_current1"".""gp_billing_manager_id"" AS ""gp_billing_manager_id"",
    ""v_gp_gg_client_current1"".""gp_current_sales_rep_id"" AS ""gp_current_sales_rep_id"",
    ""v_gp_gg_client_current1"".""gp_executive_sponsor_id"" AS ""gp_executive_sponsor_id"",
    ""v_gp_gg_professional_offboarding_current1"".""gp_lsp_closeout_completed_by"" AS ""gp_lsp_closeout_completed_by"",
    ""v_gp_gg_professional_current1"".""gp_offboard_lead_id"" AS ""gp_offboard_lead_id"",
    ""v_gp_gg_professional_current1"".""gp_onboard_lead_id"" AS ""gp_onboard_lead_id"",
    ""v_gp_gg_client_current1"".""gp_original_sales_rep_id"" AS ""gp_original_sales_rep_id"",
    ""v_gp_gg_professional_offboarding_current1"".""gp_partner_notification_completed_by"" AS ""gp_partner_notification_completed_by"",
    ""v_gp_gg_professional_offboarding_current1"".""gp_payout_calc_completed_by"" AS ""gp_payout_calc_completed_by"",
    ""v_gp_gg_professional_offboarding_current1"".""gp_refund_issued_completed_by"" AS ""gp_refund_issued_completed_by"",
    ""v_gp_gg_country_current"".""gp_region"" AS ""gp_region (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""gp_region"" AS ""gp_region (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""gp_region"" AS ""gp_region"",
    ""v_gp_gg_lsp_country_current1"".""gp_relationship_manager_id"" AS ""gp_relationship_manager_id"",
    ""v_gp_gg_professional_current1"".""home_address_id"" AS ""home_address_id"",
    ""v_gp_gg_professional_current1"".""home_country_id"" AS ""home_country_id"",
    ""Custom SQL Query"".""id"" AS ""id (Custom SQL Query)"",
    ""Contract Signed Date"".""id"" AS ""id (Custom SQL Query1)"",
    ""v_gp_gg_client_current1"".""id"" AS ""id (v_gp_gg_client_current1)"",
    ""v_gp_gg_country_current"".""id"" AS ""id (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""id"" AS ""id (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""id"" AS ""id (v_gp_gg_country_current3)"",
    ""v_gp_gg_gp_person_current"".""id"" AS ""id (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""id"" AS ""id (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""id"" AS ""id (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_lsp_country_current1"".""id"" AS ""id (v_gp_gg_lsp_country_current1)"",
    ""v_gp_gg_lsp_current1"".""id"" AS ""id (v_gp_gg_lsp_current1)"",
    ""v_gp_gg_professional_offboarding_current1"".""id"" AS ""id (v_gp_gg_professional_offboarding_current1)"",
    ""v_gp_gg_user_expenses_current1"".""id"" AS ""id (v_gp_gg_user_expenses_current1)"",
    ""v_gp_gg_professional_current1"".""id"" AS ""id"",
    ""v_gp_gg_professional_current1"".""increment_id"" AS ""increment_id"",
    ""v_gp_gg_client_current1"".""industry_id"" AS ""industry_id"",
    ""v_gp_gg_professional_current1"".""initial_information_collected_date"" AS ""initial_information_collected_date"",
    ""v_gp_gg_client_current1"".""is_bank_info_approved"" AS ""is_bank_info_approved"",
    ""v_gp_gg_client_current1"".""is_confidential"" AS ""is_confidential"",
    ""v_gp_gg_professional_current1"".""is_contract_end_date_manually_set"" AS ""is_contract_end_date_manually_set"",
    ""v_gp_gg_professional_current1"".""is_contract_prob_period_applies"" AS ""is_contract_prob_period_applies"",
    ""v_gp_gg_professional_current1"".""is_country_specific_items_verified"" AS ""is_country_specific_items_verified"",
    ""v_gp_gg_country_current"".""is_currency_only"" AS ""is_currency_only (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""is_currency_only"" AS ""is_currency_only (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""is_currency_only"" AS ""is_currency_only"",
    ""v_gp_gg_professional_current1"".""is_days_carryover_indefinite"" AS ""is_days_carryover_indefinite"",
    ""v_gp_gg_client_current1"".""is_demo_client"" AS ""is_demo_client"",
    ""v_gp_gg_gp_person_current"".""is_enabled"" AS ""is_enabled (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""is_enabled"" AS ""is_enabled (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""is_enabled"" AS ""is_enabled (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_professional_current1"".""is_enabled"" AS ""is_enabled"",
    ""v_gp_gg_lsp_country_current1"".""is_expense_included_in_tax"" AS ""is_expense_included_in_tax"",
    ""v_gp_gg_user_expenses_current1"".""is_exported"" AS ""is_exported"",
    ""v_gp_gg_professional_current1"".""is_failed_to_launch"" AS ""is_failed_to_launch"",
    ""v_gp_gg_professional_current1"".""is_first_time_user"" AS ""is_first_time_user"",
    ""v_gp_gg_professional_current1"".""is_fixed_term_emp_contract"" AS ""is_fixed_term_emp_contract"",
    ""v_gp_gg_lsp_country_current1"".""is_funding_entity"" AS ""is_funding_entity"",
    ""v_gp_gg_client_current1"".""is_goglobal_opt_out"" AS ""is_goglobal_opt_out"",
    ""v_gp_gg_lsp_country_current1"".""is_gp_entity"" AS ""is_gp_entity"",
    ""v_gp_gg_lsp_country_current1"".""is_gp_submit_policies_apply"" AS ""is_gp_submit_policies_apply"",
    ""v_gp_gg_professional_current1"".""is_guaranteed_salary_increase"" AS ""is_guaranteed_salary_increase"",
    ""v_gp_gg_gp_person_current"".""is_no_longer_with_firm"" AS ""is_no_longer_with_firm (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""is_no_longer_with_firm"" AS ""is_no_longer_with_firm (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""is_no_longer_with_firm"" AS ""is_no_longer_with_firm (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_professional_current1"".""is_no_longer_with_firm"" AS ""is_no_longer_with_firm"",
    ""v_gp_gg_professional_current1"".""is_offboardlead_unassigned"" AS ""is_offboardlead_unassigned"",
    ""v_gp_gg_professional_current1"".""is_override_bill_status_check"" AS ""is_override_bill_status_check"",
    ""v_gp_gg_professional_current1"".""is_payroll_enrollment_form_completed"" AS ""is_payroll_enrollment_form_completed"",
    ""v_gp_gg_lsp_country_current1"".""is_preferred_partner"" AS ""is_preferred_partner"",
    ""v_gp_gg_professional_current1"".""is_sponsoring_visa"" AS ""is_sponsoring_visa"",
    ""v_gp_gg_professional_current1"".""is_sponsorship_visa_for_dependants"" AS ""is_sponsorship_visa_for_dependants"",
    ""v_gp_gg_professional_current1"".""is_sponsorship_visa_for_dependants_required"" AS ""is_sponsorship_visa_for_dependants_required"",
    ""v_gp_gg_professional_current1"".""is_thirteenth_month"" AS ""is_thirteenth_month"",
    ""v_gp_gg_professional_current1"".""is_transfer"" AS ""is_transfer"",
    ""v_gp_gg_professional_current1"".""is_visa_sponsorship_required"" AS ""is_visa_sponsorship_required"",
    ""v_gp_gg_country_current"".""is_work_visa_required_block_ecg"" AS ""is_work_visa_required_block_ecg (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""is_work_visa_required_block_ecg"" AS ""is_work_visa_required_block_ecg (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""is_work_visa_required_block_ecg"" AS ""is_work_visa_required_block_ecg"",
    ""v_gp_gg_professional_current1"".""job_category"" AS ""job_category"",
    ""v_gp_gg_gp_person_current"".""last_name"" AS ""last_name (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""last_name"" AS ""last_name (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""last_name"" AS ""last_name (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_professional_current1"".""last_name"" AS ""last_name"",
    ""v_gp_gg_client_current1"".""last_salesforce_sync_date"" AS ""last_salesforce_sync_date"",
    ""v_gp_gg_professional_offboarding_current1"".""legacy_gp_medical_provider_notify_completed_by"" AS ""legacy_gp_medical_provider_notify_completed_by"",
    ""v_gp_gg_professional_offboarding_current1"".""legacy_medical_provider_date_completed"" AS ""legacy_medical_provider_date_completed"",
    ""v_gp_gg_professional_current1"".""legacy_other_insurance_notes"" AS ""legacy_other_insurance_notes"",
    ""v_gp_gg_professional_current1"".""legacy_professional_medical_id"" AS ""legacy_professional_medical_id"",
    ""v_gp_gg_professional_current1"".""legacy_professional_other_insurance_id"" AS ""legacy_professional_other_insurance_id"",
    ""v_gp_gg_professional_current1"".""legacy_professional_pension_id"" AS ""legacy_professional_pension_id"",
    ""v_gp_gg_lsp_current1"".""legal_entity_name"" AS ""legal_entity_name (v_gp_gg_lsp_current1)"",
    ""v_gp_gg_client_current1"".""legal_entity_name"" AS ""legal_entity_name"",
    ""v_gp_gg_professional_current1"".""legal_full_name"" AS ""legal_full_name"",
    ""v_gp_gg_professional_offboarding_current1"".""lsp_closeout_date_completed"" AS ""lsp_closeout_date_completed"",
    ""v_gp_gg_professional_current1"".""lsp_country_id"" AS ""lsp_country_id"",
    ""v_gp_gg_lsp_country_current1"".""lsp_id"" AS ""lsp_id"",
    ""v_gp_gg_professional_current1"".""lsp_professional_id"" AS ""lsp_professional_id"",
    ""v_gp_gg_professional_offboarding_current1"".""method_type"" AS ""method_type"",
    ""v_gp_gg_gp_person_current"".""microsoft_bookings_url"" AS ""microsoft_bookings_url (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""microsoft_bookings_url"" AS ""microsoft_bookings_url (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""microsoft_bookings_url"" AS ""microsoft_bookings_url"",
    ""v_gp_gg_client_current1"".""min_engagement_length"" AS ""min_engagement_length"",
    ""v_gp_gg_client_current1"".""min_engagement_length_type"" AS ""min_engagement_length_type"",
    ""v_gp_gg_gp_person_current"".""mobile_phone"" AS ""mobile_phone (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""mobile_phone"" AS ""mobile_phone (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""mobile_phone"" AS ""mobile_phone (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_professional_current1"".""mobile_phone"" AS ""mobile_phone"",
    ""v_gp_gg_client_current1"".""modified_by"" AS ""modified_by (v_gp_gg_client_current1)"",
    ""v_gp_gg_country_current"".""modified_by"" AS ""modified_by (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""modified_by"" AS ""modified_by (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""modified_by"" AS ""modified_by (v_gp_gg_country_current3)"",
    ""v_gp_gg_gp_person_current"".""modified_by"" AS ""modified_by (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""modified_by"" AS ""modified_by (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""modified_by"" AS ""modified_by (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_lsp_country_current1"".""modified_by"" AS ""modified_by (v_gp_gg_lsp_country_current1)"",
    ""v_gp_gg_lsp_current1"".""modified_by"" AS ""modified_by (v_gp_gg_lsp_current1)"",
    ""v_gp_gg_professional_offboarding_current1"".""modified_by"" AS ""modified_by (v_gp_gg_professional_offboarding_current1)"",
    ""v_gp_gg_user_expenses_current1"".""modified_by"" AS ""modified_by (v_gp_gg_user_expenses_current1)"",
    ""v_gp_gg_professional_current1"".""modified_by"" AS ""modified_by"",
    ""v_gp_gg_client_current1"".""monthly_payroll_changes_due"" AS ""monthly_payroll_changes_due"",
    ""v_gp_gg_client_current1"".""msa_contract_start_date_aso"" AS ""msa_contract_start_date_aso"",
    ""v_gp_gg_client_current1"".""msa_contract_start_date_entitysetup"" AS ""msa_contract_start_date_entitysetup"",
    ""v_gp_gg_client_current1"".""msa_contract_start_date_peo"" AS ""msa_contract_start_date_peo"",
    ""v_gp_gg_client_current1"".""msa_contract_start_date_services"" AS ""msa_contract_start_date_services"",
    ""v_gp_gg_client_current1"".""msa_contract_start_date_sourcing"" AS ""msa_contract_start_date_sourcing"",
    ""v_gp_gg_country_current"".""name"" AS ""name (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""name"" AS ""name (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""name"" AS ""name (v_gp_gg_country_current3)"",
    ""v_gp_gg_lsp_current1"".""name"" AS ""name (v_gp_gg_lsp_current1)"",
    ""v_gp_gg_client_current1"".""external_id"" AS ""client_external_id"",
    ""v_gp_gg_client_current1"".""name"" AS ""name"",
    ""v_gp_gg_client_current1"".""net_promoter_score"" AS ""net_promoter_score"",
    ""v_gp_gg_client_current1"".""next_quarterly_call_date"" AS ""next_quarterly_call_date"",
    ""v_gp_gg_professional_offboarding_current1"".""offboard_end_date"" AS ""offboard_end_date"",
    ""v_gp_gg_professional_offboarding_current1"".""offboard_start_date"" AS ""offboard_start_date"",
    ""v_gp_gg_professional_offboarding_current1"".""offboarding_notes"" AS ""offboarding_notes"",
    ""v_gp_gg_client_current1"".""onboarding_finished"" AS ""onboarding_finished"",
    ""v_gp_gg_client_current1"".""org_type"" AS ""org_type"",
    ""v_gp_gg_lsp_country_current1"".""other_notes"" AS ""other_notes"",
    ""v_gp_gg_professional_current1"".""other_payroll_notes"" AS ""other_payroll_notes"",
    ""v_gp_gg_lsp_country_current1"".""paid_from"" AS ""paid_from"",
    ""v_gp_gg_professional_current1"".""paid_to_professional_in_month"" AS ""paid_to_professional_in_month"",
    ""v_gp_gg_professional_offboarding_current1"".""partner_notification_date_completed"" AS ""partner_notification_date_completed"",
    ""v_gp_gg_client_current1"".""partners_referral_id"" AS ""partners_referral_id"",
    ""v_gp_gg_country_current"".""pay_date"" AS ""pay_date (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""pay_date"" AS ""pay_date (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""pay_date"" AS ""pay_date"",
    ""v_gp_gg_professional_offboarding_current1"".""payout_calc_date_approved"" AS ""payout_calc_date_approved"",
    ""v_gp_gg_professional_offboarding_current1"".""payout_calc_date_completed"" AS ""payout_calc_date_completed"",
    ""v_gp_gg_professional_current1"".""payroll_end_date"" AS ""payroll_end_date"",
    ""v_gp_gg_professional_current1"".""payroll_enrollment_form_completed_date"" AS ""payroll_enrollment_form_completed_date"",
    ""v_gp_gg_professional_current1"".""payroll_start_date"" AS ""payroll_start_date"",
    ""v_gp_gg_country_current"".""payslips_delivered"" AS ""payslips_delivered (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""payslips_delivered"" AS ""payslips_delivered (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""payslips_delivered"" AS ""payslips_delivered"",
    ""v_gp_gg_professional_current1"".""personal_email"" AS ""personal_email"",
    ""v_gp_gg_professional_current1"".""po_number"" AS ""po_number"",
    ""v_gp_gg_gp_person_current"".""preferred_pronoun"" AS ""preferred_pronoun (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""preferred_pronoun"" AS ""preferred_pronoun (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""preferred_pronoun"" AS ""preferred_pronoun (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_professional_current1"".""preferred_pronoun"" AS ""preferred_pronoun"",
    ""v_gp_gg_client_current1"".""preferring_billing_currency"" AS ""preferring_billing_currency"",
    ""v_gp_gg_client_current1"".""price_book_id"" AS ""price_book_id"",
    ""v_gp_gg_country_current"".""privacy_policy"" AS ""privacy_policy (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""privacy_policy"" AS ""privacy_policy (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""privacy_policy"" AS ""privacy_policy"",
    ""v_gp_gg_professional_current1"".""professional_in_country_transfer_id"" AS ""professional_in_country_transfer_id"",
    ""v_gp_gg_professional_current1"".""professional_offboarding_id"" AS ""professional_offboarding_id"",
    ""v_gp_gg_professional_current1"".""professional_onboarding_id"" AS ""professional_onboarding_id"",
    ""v_gp_gg_professional_current1"".""pto_days_allotted"" AS ""pto_days_allotted"",
    ""v_gp_gg_professional_current1"".""pto_days_allotted_old"" AS ""pto_days_allotted_old"",
    ""v_gp_gg_professional_current1"".""pto_notes"" AS ""pto_notes"",
    ""v_gp_gg_user_expenses_current1"".""re_exported"" AS ""re_exported"",
    ""v_gp_gg_professional_offboarding_current1"".""reason_type"" AS ""reason_type"",
    ""v_gp_gg_lsp_country_current1"".""recurring_billing"" AS ""recurring_billing"",
    ""v_gp_gg_lsp_country_current1"".""recurring_billing_currency"" AS ""recurring_billing_currency"",
    ""v_gp_gg_lsp_country_current1"".""recurring_billing_notes"" AS ""recurring_billing_notes"",
    ""v_gp_gg_client_current1"".""referred_by"" AS ""referred_by"",
    ""v_gp_gg_professional_offboarding_current1"".""refund_issued_date_completed"" AS ""refund_issued_date_completed"",
    ""v_gp_gg_gp_person_current"".""reports_to_id"" AS ""reports_to_id (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""reports_to_id"" AS ""reports_to_id (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_gp_person_current2"".""reports_to_id"" AS ""reports_to_id"",
    ""v_gp_gg_professional_current1"".""residency_status"" AS ""residency_status"",
    ""v_gp_gg_professional_current1"".""right_to_work_in_work_country"" AS ""right_to_work_in_work_country"",
    ""v_gp_gg_gp_person_current"".""roles"" AS ""roles (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""roles"" AS ""roles (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""roles"" AS ""roles (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_professional_current1"".""roles"" AS ""roles"",
    ""v_gp_gg_lsp_country_current1"".""rp_deposit_held_by"" AS ""rp_deposit_held_by"",
    ""v_gp_gg_lsp_country_current1"".""rp_deposit_held_by_notes"" AS ""rp_deposit_held_by_notes"",
    ""v_gp_gg_lsp_country_current1"".""rp_pto_tracking"" AS ""rp_pto_tracking"",
    ""v_gp_gg_lsp_country_current1"".""rp_pto_tracking_notes"" AS ""rp_pto_tracking_notes"",
    ""v_gp_gg_lsp_country_current1"".""rp_severance_accrual"" AS ""rp_severance_accrual"",
    ""v_gp_gg_lsp_country_current1"".""rp_severance_accrual_notes"" AS ""rp_severance_accrual_notes"",
    ""v_gp_gg_lsp_country_current1"".""rp_thirteenth_month_accrual"" AS ""rp_thirteenth_month_accrual"",
    ""v_gp_gg_lsp_country_current1"".""rp_thirteenth_month_accrual_notes"" AS ""rp_thirteenth_month_accrual_notes"",
    ""v_gp_gg_lsp_country_current1"".""rp_vacation_tracking"" AS ""rp_vacation_tracking"",
    ""v_gp_gg_professional_current1"".""salary_frequency"" AS ""salary_frequency"",
    ""v_gp_gg_client_current1"".""salesforce_account_id"" AS ""salesforce_account_id"",
    ""v_gp_gg_professional_current1"".""security_questions_answered"" AS ""security_questions_answered"",
    ""Contract Signed Date"".""sent_ee_date_signed"" AS ""sent_ee_date_signed"",
    ""v_gp_gg_professional_current1"".""service_class"" AS ""service_class"",
    ""v_gp_gg_country_current"".""services"" AS ""services (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""services"" AS ""services (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""services"" AS ""services"",
    ""v_gp_gg_lsp_country_current1"".""services_engaged"" AS ""services_engaged"",
    ""v_gp_gg_lsp_country_current1"".""services_offered"" AS ""services_offered"",
    ""v_gp_gg_lsp_country_current1"".""setup_cost_amount"" AS ""setup_cost_amount"",
    ""v_gp_gg_lsp_country_current1"".""setup_cost_currency"" AS ""setup_cost_currency"",
    ""v_gp_gg_lsp_country_current1"".""setup_cost_notes"" AS ""setup_cost_notes"",
    ""v_gp_gg_client_current1"".""silo_msa_id"" AS ""silo_msa_id"",
    ""v_gp_gg_professional_current1"".""sponsoring_visa_expire_date"" AS ""sponsoring_visa_expire_date"",
    ""v_gp_gg_professional_current1"".""sponsoring_visa_notes"" AS ""sponsoring_visa_notes"",
    ""v_gp_gg_client_current1"".""status"" AS ""status (v_gp_gg_client_current1)"",
    ""v_gp_gg_lsp_country_current1"".""status"" AS ""status (v_gp_gg_lsp_country_current1)"",
    ""v_gp_gg_lsp_current1"".""status"" AS ""status (v_gp_gg_lsp_current1)"",
    ""v_gp_gg_professional_current1"".""status"" AS ""status"",
    ""v_gp_gg_professional_offboarding_current1"".""termination_reason_details"" AS ""termination_reason_details"",
    ""v_gp_gg_client_current1"".""tier_type"" AS ""tier_type"",
    ""v_gp_gg_gp_person_current"".""title"" AS ""title (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""title"" AS ""title (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""title"" AS ""title (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_professional_current1"".""title"" AS ""title"",
    ""v_gp_gg_professional_offboarding_current1"".""total_payment_for_mutual_agreement"" AS ""total_payment_for_mutual_agreement"",
    ""v_gp_gg_professional_current1"".""travel_insurance_cost_type"" AS ""travel_insurance_cost_type"",
    ""v_gp_gg_professional_current1"".""travel_insurance_notes"" AS ""travel_insurance_notes"",
    ""v_gp_gg_gp_person_current"".""user_id"" AS ""user_id (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""user_id"" AS ""user_id (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""user_id"" AS ""user_id (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_user_expenses_current1"".""user_id"" AS ""user_id (v_gp_gg_user_expenses_current1)"",
    ""v_gp_gg_professional_current1"".""user_id"" AS ""user_id"",
    ""v_gp_gg_lsp_country_current1"".""vacation_tracking_notes"" AS ""vacation_tracking_notes"",
    ""v_gp_gg_client_current1"".""version"" AS ""version (v_gp_gg_client_current1)"",
    ""v_gp_gg_country_current"".""version"" AS ""version (v_gp_gg_country_current)"",
    ""v_gp_gg_country_current2"".""version"" AS ""version (v_gp_gg_country_current2)"",
    ""v_gp_gg_country_current3"".""version"" AS ""version (v_gp_gg_country_current3)"",
    ""v_gp_gg_gp_person_current"".""version"" AS ""version (v_gp_gg_gp_person_current)"",
    ""v_gp_gg_gp_person_current2"".""version"" AS ""version (v_gp_gg_gp_person_current2)"",
    ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""version"" AS ""version (v_gp_gg_gp_person_current3)"",
    ""v_gp_gg_lsp_country_current1"".""version"" AS ""version (v_gp_gg_lsp_country_current1)"",
    ""v_gp_gg_lsp_current1"".""version"" AS ""version (v_gp_gg_lsp_current1)"",
    ""v_gp_gg_professional_offboarding_current1"".""version"" AS ""version (v_gp_gg_professional_offboarding_current1)"",
    ""v_gp_gg_user_expenses_current1"".""version"" AS ""version (v_gp_gg_user_expenses_current1)"",
    ""v_gp_gg_professional_current1"".""version"" AS ""version"",
    ""v_gp_gg_lsp_country_current1"".""visa_notes"" AS ""visa_notes"",
    ""v_gp_gg_lsp_country_current1"".""visa_sponsorship_possible"" AS ""visa_sponsorship_possible"",
    ""v_gp_gg_lsp_country_current1"".""website"" AS ""website (v_gp_gg_lsp_country_current1)"",
    ""v_gp_gg_client_current1"".""website"" AS ""website"",
    ""v_gp_gg_professional_offboarding_current1"".""will_be_backfilling_this_position"" AS ""will_be_backfilling_this_position"",
    ""v_gp_gg_professional_current1"".""work_address_id"" AS ""work_address_id"",
    ""v_gp_gg_professional_current1"".""work_email"" AS ""work_email"",
    master_prof.home_address_1,
    master_prof.home_address_2,
    master_prof.employment_country,
    master_prof.employment_country_region
FROM ""goglobal_gp_goglobal"".""v_gp_gg_professional_current"" ""v_gp_gg_professional_current1""
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_gp_person_current"" ""v_gp_gg_gp_person_current2"" ON (""v_gp_gg_professional_current1"".""gp_offboard_lead_id"" = ""v_gp_gg_gp_person_current2"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_professional_offboarding_current"" ""v_gp_gg_professional_offboarding_current1"" ON (""v_gp_gg_professional_current1"".""professional_offboarding_id"" = ""v_gp_gg_professional_offboarding_current1"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_gp_person_current"" ""v_gp_gg_gp_person_current"" ON (""v_gp_gg_professional_offboarding_current1"".""gp_refund_issued_completed_by"" = ""v_gp_gg_gp_person_current"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_client_current"" ""v_gp_gg_client_current1"" ON (""v_gp_gg_professional_current1"".""client_id"" = ""v_gp_gg_client_current1"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_country_current"" ""v_gp_gg_country_current3"" ON (""v_gp_gg_professional_current1"".""home_country_id"" = ""v_gp_gg_country_current3"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_lsp_country_current"" ""v_gp_gg_lsp_country_current1"" ON (""v_gp_gg_professional_current1"".""lsp_country_id"" = ""v_gp_gg_lsp_country_current1"".""id"")
 LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_client_country_current"" ""v_gp_gg_client_country_current1"" ON (""v_gp_gg_professional_current1"".""client_country_id"" = ""v_gp_gg_client_country_current1"".""id"") 
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_country_current"" ""v_gp_gg_country_current2"" ON (""v_gp_gg_client_country_current1"".""country_id"" = ""v_gp_gg_country_current2"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_gp_person_current"" ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"" ON (""v_gp_gg_client_current1"".""gp_account_manager_id"" = ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_lsp_current"" ""v_gp_gg_lsp_current1"" ON (""v_gp_gg_lsp_country_current1"".""lsp_id"" = ""v_gp_gg_lsp_current1"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_user_expenses_current"" ""v_gp_gg_user_expenses_current1"" ON (""v_gp_gg_professional_current1"".""user_id"" = ""v_gp_gg_user_expenses_current1"".""user_id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_country_current"" ""v_gp_gg_country_current"" ON (""v_gp_gg_professional_current1"".""annual_base_salary_currency"" = ""v_gp_gg_country_current"".""id"")
  LEFT JOIN (
  select id, email  from goglobal_gp_goglobal.v_gp_gg_user_current
) ""Custom SQL Query"" ON (""v_gp_gg_professional_current1"".""user_id"" = ""Custom SQL Query"".""id"")
  LEFT JOIN (
  select 
  id, sent_ee_date_signed
  from goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current
) ""Contract Signed Date"" ON (""v_gp_gg_professional_current1"".""professional_onboarding_id"" = ""Contract Signed Date"".""id"")
left join ""goglobal_gp_goglobal"".""v_gp_gg_master_professional"" as master_prof on master_prof.internal_id::int=""v_gp_gg_professional_current1"".id::int"
82776e1c-b6da-7522-9b72-60ab95304d37,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"SELECT a.id, b.transfer_effective_date
FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_in_country_transfer_current_mat b
ON a.professional_in_country_transfer_id = b.id
ORDER BY 1"
8330eb4e-e78f-6d7c-47bf-7de0231bdbad,Custom SQL Query (gpbidb),,
8483bcc4-a870-1edf-6663-08335f8906bf,Custom SQL Query (gpbidb),postgres,"with a as
		(
			 select distinct t6.id as client_id,
					t6.name as Client,
					T6.MSA_CONTRACT_START_DATE_PEO,
					concat(t9.first_name,' ',t9.last_name) as Acc_Man,
					concat(Z.first_name,' ',Z.last_name) as Account_Executive,
					t4.onboard_start_date as first_onb_start,
					rank()over(partition by t6.name order by t4.onboard_start_date) as rank1
			from goglobal_gp_goglobal.v_gp_gg_professional_current t1
			left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t2 on t1.gp_onboard_lead_id=t2.id
			left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t3 on t1.gp_offboard_lead_id=t3.id
			left join goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current t4 on t1.professional_onboarding_id=t4.id
			left join goglobal_gp_goglobal.v_gp_gg_client_current t6 on t1.client_id=t6.id
			left join GOGLOBAL_gp_GOGLOBAL.v_gp_gg_gp_person_current t9 on t6.gp_account_manager_id=t9.id
			left join GOGLOBAL_gp_GOGLOBAL.v_gp_gg_gp_person_current Z on Z.id = T6.gp_current_sales_rep_id
			where t1.is_failed_to_launch='false' and t6.is_demo_client='false' and onboard_end_date is not null 
			group by 1,2,3,4,5,6
			order by 1
		),
first_onb_start as 
		(
		 select *
		 from a 
		 where rank1='1'
		)
select first_onb_start.*, 
		t7.name as country,
		t1.id,
		t4.onboard_start_date,
		t4.onboard_end_date,
		T1.CONTRACT_START_DATE,
		t1.status,
		rank()over(partition by client,t7.name order by t4.onboard_end_date)
from first_onb_start
left join goglobal_gp_goglobal.v_gp_gg_client_current t6 on first_onb_start.client_id=t6.id
left join goglobal_gp_goglobal.v_gp_gg_professional_current t1 on t1.client_id=t6.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t2
              on t1.gp_onboard_lead_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t3      
              on t1.gp_offboard_lead_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current t4
              on t1.professional_onboarding_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco on t1.client_country_id=cco.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t7 on cco.country_id=t7.id
left join GOGLOBAL_gp_GOGLOBAL.v_gp_gg_gp_person_current t9
		on t6.gp_account_manager_id=t9.id
left join GOGLOBAL_gp_GOGLOBAL.v_gp_gg_gp_person_current Z on Z.id = T6.gp_current_sales_rep_id
where t1.is_failed_to_launch='false' and t6.is_demo_client='false' and onboard_end_date is not null  
group by 1,2,3,4,5,6,7,8,9,10,11,12,13
order by onboard_start_date"
84a3e25d-44ff-45bf-ab04-36b76c8434d8,Contractor Reporting (gpbidb),postgres,"WITH SFDC AS (SELECT account.client_region_billing_country AS client_region,
	account.billing_country AS client_country,
	opps.id AS opp_id,
	opps.lead_source,
	opps.s_a_l_by__sales__c,
	dev_own.name AS partner_development_owner,
	acc_partn.name AS partner,
	--opps.record_type_bi__c AS record_type,
	--opps.partner_acquisition__c AS partner_acq_opps,
	opps.type AS opp_type,
	opps.stage_name,
	opps.created_date,
        opps.close_date,
        opps.sales__accepted__date__c,
			  opps.is_won,
	opps.what_is_your_primary_product_interest__c AS what_ppi,
    sbqq.is_gp_contractor_customer_c AS gp_contractor_customer,
    sbqq.pricing_model_c AS pricing_model_primary_quote,
    sbqq.sbqq_primary_c AS primary_quote
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
LEFT JOIN salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
LEFT JOIN
(SELECT id, sbqq_opportunity_2_c, is_gp_contractor_customer_c, pricing_model_c, sbqq_primary_c
	FROM salesforce.sbqq_quote_c
	WHERE is_deleted = FALSE
	AND sbqq_primary_c = TRUE
) sbqq ON opps.id=sbqq.sbqq_opportunity_2_c
WHERE 
(opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text)),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      created_date::date as Point_time_date,
      *
   From SFDC
   Where --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	opp_id is not null
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      sales__accepted__date__c::date as Point_time_date,
      *
   From SFDC
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	s_a_l_by__sales__c= 'Yes'
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      close_date::date as Point_time_date,
      *
   From SFDC
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	is_won ='true'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
   FULL_UNION as (
	SELECT * FROM MQL_to_SQL
UNION ALL
	SELECT * FROM SQL_to_SAL
UNION ALL
	SELECT * FROM SAL_to_MSA)
SELECT * FROM FULL_UNION"
84a3e25d-44ff-45bf-ab04-36b76c8434d8,NEW View,,
84a3e25d-44ff-45bf-ab04-36b76c8434d8,NEW View,postgres,"SELECT DISTINCT is_gp_recruit_customer_c,
is_gp_contractor_customer_c,
pricing_model_c,
sbqq_primary_c,
is_deleted,
sbqq_opportunity_2_c
FROM salesforce.sbqq_quote_c
WHERE sbqq_primary_c='TRUE'
and is_deleted='FALSE'"
84a3e25d-44ff-45bf-ab04-36b76c8434d8,Custom SQL Query (gpbidb),postgres,"With 
Leads_Opps as ( /*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
				Select Distinct
					CASE
                    	WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    	ELSE date_trunc('month'::text, opps.created_date)
                	END AS MQL_Cohort_Month,
					leads.id as lead_id,
					opps.id as opp_id,
					leads.is_converted,
					leads.converted_opportunity_id,
					CASE
						WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
						WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						ELSE NULL::text
					END AS client_region,
					leads.created_date AS mql_date,
					leads.converted_date,
					leads.partner_acquisition__c AS partner_acq_leads,
					leads_owner.name as leads_owner_name,
					leads_owner_manager.name as leads_owner_manager,
					opps_owner.name as opps_owner_name,
					opps_owner_manager.name as opps_owner_manager, 
					opps.created_date,
					opps.sales__accepted__date__c as SAL_Accepted_Date,
					opps.s_a_l__c,
                    opps.s_a_l_by__sales__c,
					opps.record_type_bi__c,
					opps.close_date AS msa_date,
					opps.stage_name,	
					opps.partner_acquisition__c AS partner_acq_opps,
					opps.type AS opportunity_type,
					opps.is_won AS opp_won, 
					opps.what_is_your_primary_product_interest__c AS what_is_opps,
					opps.record_type_text_id_c AS record_type_opps,
					opps.pricing_model__c AS pricing_model_opps,
					opps.id AS opps_id,
					CASE
                        WHEN leads.lead_source IS NULL THEN opps.lead_source
                        ELSE leads.lead_source
                    END::text as Lead_or_Opp_Source,
					CASE
						WHEN dev_own.name IS NULL THEN 1
						ELSE 0
						END AS Partner_develop_owner_flag,
					CASE
         				WHEN leads.converted_opportunity_id IS NULL THEN leads_owner.name
         				ELSE opps.bdr_owner_name
      					END AS bdr_owner_name,
					CASE
         				WHEN bdr_owner_name IS NULL THEN 1
         				ELSE 0
      					END AS bdr_owner_name_flag,
					CASE
         				WHEN acc_partn.name IS NULL THEN 1
         				ELSE 0
      					END AS Partner_flag,
					CASE
         				WHEN opps.b_d_r__date__c IS NULL THEN 1
         				ELSE 0
      					END AS b_d_r_date_c_flag,
					CASE 
						WHEN (opps.type <<>> 'Existing Business' OR opps.type IS NULL)
					     And (opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
  						 And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
						 And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
					Then 'Non Partner Opp or Existing Business'
					Else 'Partner Opp or Existing Business'
					End as Opp_Go_Flag
				From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             	Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
				Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
				Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner ON opps_owner.id = opps.owner_id
				Left Join salesforce.v_gp_sfdc_user_current leads_owner_manager ON leads_owner_manager.id = leads_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner_manager ON opps_owner_manager.id = opps_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
				LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c = acc_partn.id
				--Where  CASE WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
				--	   ELSE date_trunc('month'::text, opps.created_date)
                --END >>= '2019-01-01'
				), 
     MQL as (
				Select Distinct
					'MQL' as Cohort_Stage, 
		 			lead_id as lead_or_opp_id,
		 			MQL_Date::date as Point_time_date,
		 			leads_owner_name as Lead_or_Opp_Owner_name,
		 			leads_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where (partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) 
		 		And lead_id is not null
				),
MQL_to_SQL as (
				Select Distinct
					'MQL to SQL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					Created_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_id is not null
				),
SQL_to_SAL as (
				Select Distinct
					'SQL to SAL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					SAL_Accepted_Date::date as Point_time_date, 
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And s_a_l_by__sales__c = 'Yes'
				),
SAL_to_MSA as (
				Select Distinct
					'SAL to MSA' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					MSA_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_won ='true'
				AND (pricing_model_opps <<>> 'Contractor Only' OR pricing_model_opps IS NULL)
				),
Full_Union as (
				Select 
					* 
				From MQL
					Union All
				Select 
					* 
				From MQL_to_SQL
					Union AlL
				Select 
					* 
				From SQL_to_SAL
					Union AlL
				Select 
					* 
				From SAL_to_MSA
				),
				--SELECT DISTINCT * FROM Full_Union
				--where lead_or_opp_id in ('0066T000016KebcQAC','0066T000015ryGIQAY','0060W000014Tn0HQAS','0066T000015s5vyQAA','0066T000016Km8fQAC'
										--'0066T000016KsYHQA0','0066T000015rlGgQAI','0066T000016KqClQAK','0066T000015rsKVQAY')
				--where point_time_date between '2021-05-07' AND '2021-07-30'
				--AND cohort_stage='SAL to MSA'
Weekly_Funnel as ( 
				Select Distinct
					Cohort_stage, 
					Client_region,
					Partner_flag,
					Partner_develop_owner_flag,
					b_d_r_date_c_flag,
					bdr_owner_name_flag,
					Coalesce(Lead_or_Opp_Source, 'nulo') as Lead_or_Opp_Source,
					Coalesce(Lead_or_Opp_Owner_Name, 'nulo') as Lead_or_Opp_Owner_Name,
					Coalesce(Lead_or_Opp_Owner_Manager, 'nulo') as Lead_or_Opp_Owner_Manager,
					--point_time_date,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date - '12 weeks'::interval)::date as twelve_weeks_ago, 
					(date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date as Week_at_Friday,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date + '6 days'::interval)::date as Week_at_Next_Thursday,  
					Count(distinct lead_or_opp_id) as Count_Leads_or_opps
					--lead_or_opp_id
				From Full_Union 
				Group by 1,2,3,4,5,6,7,8,9,10,11,12
				Order by cohort_stage, (date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date asc --date_trunc('week', point_time_date + 5)- '5 days'::interval asc
				),
				--select distinct * from Weekly_Funnel 
				--where Week_at_Friday between '2021-05-07' AND '2021-08-05'
				--AND cohort_stage='SAL to MSA'
Date_Catalogue as (
				Select Distinct 
					WAF.Week_at_Friday as Week_at_Friday_C,
					WF.Cohort_stage as Cohort_Stage_c,
					WF.Client_region as Client_region_c,
					WF.Lead_or_Opp_Source as Lead_or_Opp_Source_c,
					WF.Lead_or_Opp_Owner_Name as Lead_or_Opp_Owner_Name_c,
					WF.Lead_or_Opp_Owner_Manager as Lead_or_Opp_Owner_Manager_c,
					WF.Partner_flag as Partner_flag_c,
					WF.Partner_develop_owner_flag as Partner_develop_owner_flag_c,
					WF.b_d_r_date_c_flag as b_d_r_date_c_flag_c,
					WF.bdr_owner_name_flag as bdr_owner_name_flag_c,
					0 as Count_Leads_or_opps_C
				From (Select Distinct Week_at_Friday From Weekly_Funnel) WAF, 
				(Select Distinct Cohort_stage, Client_region, Lead_or_Opp_Source, Lead_or_Opp_Owner_Name, Lead_or_Opp_Owner_Manager, Partner_flag, Partner_develop_owner_flag, b_d_r_date_c_flag, bdr_owner_name_flag from Weekly_funnel) WF 
				Order by WF.Cohort_stage, WAF.Week_at_Friday asc
				), --Select * from Date_Catalogue where cohort_stage_c = 'SAL to MSA' and week_at_friday_c between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC' 
Dates_Aligned as (
				Select Distinct
					DC.*,
					Coalesce(Funnel.twelve_weeks_ago::date, (DC.Week_at_Friday_C - '12 weeks'::interval)::date) as  twelve_weeks_ago,
					Coalesce(Funnel.week_at_next_thursday, (DC.Week_at_Friday_C + '6 days'::interval)::date) as week_at_next_thursday, 
					Coalesce(Funnel.count_leads_or_opps, DC.count_leads_or_opps_c) as Count_leads_or_opps_final
				From Date_Catalogue DC
				Left Join Weekly_funnel Funnel on Funnel.week_at_friday = DC.week_at_friday_c
					and Funnel.cohort_stage = DC.cohort_stage_c
					and Funnel.Client_region = DC.Client_region_c
					and Funnel.Lead_or_Opp_Source = DC.Lead_or_Opp_Source_c
					and Funnel.Lead_or_Opp_Owner_Name = DC.Lead_or_Opp_Owner_Name_C
					and Funnel.Lead_or_Opp_Owner_Manager = DC.Lead_or_Opp_Owner_Manager_C
					and Funnel.Partner_flag = DC.Partner_flag_c
					and Funnel.Partner_develop_owner_flag = DC.Partner_develop_owner_flag_c
					and Funnel.b_d_r_date_c_flag = DC.b_d_r_date_c_flag_c
					and Funnel.bdr_owner_name_flag = DC.bdr_owner_name_flag_c
				) --Select * from Dates_Aligned where Week_at_Friday_C between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC'
Select Distinct 
	WF.Cohort_stage_c,
	WF.Client_region_c,
	WF.Lead_or_Opp_Source_c,
	WF.Lead_or_Opp_Owner_Name_c,
	WF.Lead_or_Opp_Owner_Manager_c,
	WF.Partner_flag_c,
	WF.Partner_develop_owner_flag_c,
	WF.b_d_r_date_c_flag_c,
	WF.bdr_owner_name_flag_c,
	WF.twelve_weeks_ago, 
	WF.Week_at_Friday_c,
	WF.Week_at_Next_Thursday,
	WF.Count_Leads_or_opps_final,
	Sum(L12M.Count_Leads_or_opps_final) as Sum_L12M_Funnel
From Dates_aligned WF
Left Join (select Cohort_stage_c, Client_region_c, Lead_or_Opp_Source_c, Lead_or_Opp_Owner_Name_c, Lead_or_Opp_Owner_Manager_c, Partner_flag_c, Partner_develop_owner_flag_c, b_d_r_date_c_flag_c, bdr_owner_name_flag_c, Week_at_Friday_c, Count_Leads_or_opps_final From Dates_aligned where Count_Leads_or_opps_final<<>> 0) L12M 
	on L12M.Week_at_Friday_c between WF.twelve_weeks_ago and WF.Week_at_Friday_c
	and WF.Cohort_stage_c = L12M.Cohort_stage_c
	and WF.Client_region_c = L12M.Client_region_c
	and WF.Lead_or_Opp_Source_c = L12M.Lead_or_Opp_Source_c
	and WF.Lead_or_Opp_Owner_Name_c = L12M.Lead_or_Opp_Owner_Name_c
	and WF.Lead_or_Opp_Owner_Manager_c = L12M.Lead_or_Opp_Owner_Manager_c
	and WF.Partner_flag_c = L12M.Partner_flag_c
	and WF.Partner_develop_owner_flag_c = L12M.Partner_develop_owner_flag_c
	and WF.b_d_r_date_c_flag_c = L12M.b_d_r_date_c_flag_c
	and WF.bdr_owner_name_flag_c = L12M.bdr_owner_name_flag_c
Group by WF.Cohort_stage_c, WF.Client_region_c, WF.Lead_or_Opp_Source_c, WF.Lead_or_Opp_Owner_Name_c, WF.Lead_or_Opp_Owner_Manager_c, WF.Partner_flag_c, WF.Partner_develop_owner_flag_c, WF.b_d_r_date_c_flag_c, WF.bdr_owner_name_flag_c, WF.twelve_weeks_ago, WF.Week_at_Friday_c, WF.Week_at_Next_Thursday, WF.Count_Leads_or_opps_final
Having  Sum(L12M.Count_Leads_or_opps_final) is not null
Order by WF.Cohort_stage_c, WF.Week_at_Friday_c asc"
84b2dcd3-ab12-d734-c7c2-bc9b217020a4,Custom SQL Query (gpbidb),postgres,"SELECT c.id AS Customer_id, c.name AS customer_name,a.id AS professional_id, CONCAT (a.first_name, ' ', a.last_name) AS professional_name, 
CASE WHEN a.status = '1' THEN 'New'
	 WHEN a.status = '2' THEN 'Onboarding'
	 WHEN a.status = '3' THEN 'Active'
	 WHEN a.status = '4' THEN 'Terminating'
	 WHEN a.status = '5' THEN 'Inactive' END AS professional_status,
a.service_class, 
CONCAT (b.first_name, ' ', b.last_name) AS onboard_lead, e.name AS professional_working_country, a.payroll_start_date, f.postal_code, f.city, 
CASE WHEN f.address2 IS NOT NULL THEN CONCAT (f.address1, ' ', f.address2) 
	 ELSE f.address1
	 END AS home_address,
CASE WHEN l.address2 IS NOT NULL THEN CONCAT (l.address1, ' ', l.address2) 
	 ELSE l.address1
	 END AS work_address,
g.name AS address_country, h.name AS address_province, i.social_security_number, j.rfc, k.curp, a.mobile_phone, a.work_email, a.personal_email
FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS b
ON a.gp_onboard_lead_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS c
ON a.client_id = c.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS d
ON a.lsp_country_id = d.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS e
ON d.country_id = e.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS f
ON a.home_address_id = f.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS g
ON f.country_id = g.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_province_current AS h
ON f.province_id = h.id
LEFT JOIN (SELECT professional_id, country_custom_field_id, value AS social_security_number
	FROM goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current 
	WHERE country_custom_field_id= 49) AS i
	ON a.id = i.professional_id
LEFT JOIN (SELECT professional_id, country_custom_field_id, value AS rfc
	FROM goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current 
	WHERE country_custom_field_id= 50) AS j
	ON a.id = j.professional_id
LEFT JOIN (SELECT professional_id, country_custom_field_id, value AS curp
	FROM goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current 
	WHERE country_custom_field_id= 51) AS k
	ON a.id = k.professional_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS l
	ON a.work_address_id = l.id

WHERE g.name in ('Canada','United States','Pakistan')
      AND c.is_demo_client = false
ORDER BY 1,3"
84ffb4bb-470b-ac55-0465-e64524feebed,Asset Downloaded Report,postgres,"SELECT DISTINCT
            leads.id AS lead_id,
            leads.asset_downloaded_c,
            leads.hot_form_c,
            leads.partner_acquisition__c,
			opps.id AS opp_id,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    ELSE NULL::text
                END AS client_region,
                CASE WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    ELSE date_trunc('month'::text, opps.created_date)
                END AS mql_cohort_month,
			leads.created_date AS mql_date,
            leads.lead_source,
                CASE
                    WHEN leads.lead_source IS NULL THEN opps.lead_source
                    ELSE leads.lead_source
                END::text AS lead_or_opp_source,
			leads.country AS lead_country,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    ELSE NULL::text
                END AS client_country,
				leads.campaign__source__c AS campaign_name,
				leads.website,
                CASE
                    WHEN leads.converted_opportunity_id IS NULL THEN 1::bigint
                    ELSE rank() OVER (PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date)
                END AS row_num
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
			 WHERE (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
			 		AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text)
					AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text)
					--AND leads.website IS NOT NULL
			 --leads.created_date BETWEEN '2022-12-01' AND '2022-12-15'
			 ORDER BY leads.created_date DESC"
85e39a26-bead-ac57-a176-1f2045f93757,Custom SQL Query (gpbidb),postgres,"select distinct cc.id ""Client ID"",
		cc.name ""Client"",
		cc.status ""Client Status"",
		LEAST(CC.MSA_CONTRACT_START_DATE_PEO,CC.MSA_CONTRACT_START_DATE_SERVICES) ""MA Execution Date"",
		co.name ""Country"",
		pc.id as pro_id,
		concat(pc.first_name,' ',pc.last_name) ""Pro"",
		pc.payroll_start_date ""Payroll Start Date"",
		pc.status ""Pro Status"",
		concat(prs.first_name,' ',prs.last_name) as Onboard_Lead, 
		tbm.client_bill_id ""GP Bill Number"",
		tbm.client_invoice_nbr ""Client Invoice Number"",
		tbm.bill_type_name ""Bill Type"",
		tbm.bill_status ""Bill Status"",
		tbm.start_date ""Billing Cycle"",
		tbm.invoice_release_date ""Invoice Release Date"",
		tbm.invoice_date ""Invoice Date"",
		case when pa.role='3' then 'Yes' else 'No' end as ""Has Payroll Approver"",
		pa.user_name ""Payroll Approver"",
		pa.user_email ""Payroll Approver Email"",
		CASE when pa.STATUS='3' THEN 'Invitation Accepted' when pa.STATUS='2' then 'Invitation Sent' 
			 when pa.STATUS='4' then 'Locked' when pa.STATUS='1' then 'New'
        end ""Invitation Status"",
		fbf.first_bill_flag ""First Bill Flag""
from goglobal_gp_goglobal.v_gp_gg_professional_current pc
left join goglobal_gp_goglobal.v_gp_gg_client_current cc on pc.client_id=cc.id
left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco on pc.client_country_id=cco.id
left join goglobal_gp_goglobal.v_gp_gg_country_current co on cco.country_id=co.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current prs on pc.gp_onboard_lead_id=prs.id
left join (select * 
		   from goglobal_gp_goglobal.v_gp_gg_total_bills_mat 
		   where bill_type_name='First Bill') tbm on pc.id=tbm.professional_id
left join (select DISTINCT professional_id, Role, concat(cpc.first_name,' ', cpc.last_name) as User_Name,
		   uc.email as User_EMAIL, cpc.is_no_longer_with_firm, uc.STATUS, cpc.IS_ENABLED
		   from goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current cac
		   inner join goglobal_gp_goglobal.v_gp_gg_client_person_current cpc on cac.client_person_id = cpc.id
		   inner join goglobal_gp_goglobal.v_gp_gg_user_current uc on cpc.user_id = uc.id
		   where role='3' and is_no_longer_with_firm='false') pa on pc.id=pa.professional_id
left join (select payroll_start_date, 
		   CASE WHEN p.payroll_start_date is null THEN 'Pending Payroll Start Date'
		   		WHEN p.id in (
				 			select cb.professional_id from goglobal_gp_goglobal.client_bill cb where cb.bill_type = '3') THEN 'First Bill Generated'
		   		WHEN p.id NOT in (
				 				select professional_id from goglobal_gp_goglobal.professional_client_assignment  where role = '3') THEN 'Pending Payroll Approver'
		   		WHEN p.professional_onboarding_id in(
				 								  select po.id FROM goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current po  where sent_ee_date_signed is null) then 'FALSE -- Pending Contract Signed'
		   		WHEN status in('4','5') THEN 'Terminating or Inactive Professional'
				WHEN ((date_part('year', payroll_start_date) = date_part('year', CURRENT_DATE) AND date_part('month', payroll_start_date) << date_part('month', CURRENT_DATE)) 
					  OR (date_part('year', payroll_start_date) << date_part('year', CURRENT_DATE))) THEN 'First Bill from a previous cycle'
				WHEN ((date_part('year', payroll_start_date) = date_part('year', CURRENT_DATE) AND date_part('month', payroll_start_date) >> date_part('month', CURRENT_DATE)) 
					 OR (date_part('year', payroll_start_date) >> date_part('year', CURRENT_DATE))) THEN concat('First Bill Scheduled for',' ', to_char(p.payroll_start_date, 'YYYY-MM'))
				WHEN (date_part('day', payroll_start_date) >> (select coalesce(min(value)::INTEGER,20) 	from goglobal_gp_goglobal.config where name = 'first.bill.creation.deadline')) 
		   							THEN 'First bill cannot be created after the 20th of the month, please follow up with Finance directly'
				WHEN (select count(*) from goglobal_gp_goglobal.billing_cycle b where start_date = TO_CHAR(payroll_start_date, 'yyyy-mm-01')::date) = 0 THEN 'Pending Open Billing Cycle'
				WHEN TO_CHAR(payroll_start_date, 'yyyy-mm-01')::date IN (select start_date from goglobal_gp_goglobal.billing_cycle b where STATUS <<>> '1' order by start_date ASC LIMIT 1) THEN 'Pending Open Billing Cycle'
				ELSE 'TRUE' 
			END AS first_bill_flag, p.first_name,p.last_name, p.id
		FROM goglobal_gp_goglobal.v_gp_gg_professional_current p) fbf on pc.id=fbf.id		   
where service_class <<>>'4' and pc.is_failed_to_launch='false' and cc.is_demo_client='false'"
8632fe24-2ba4-c7b8-23b5-c1082c3690c2,Custom SQL Query (gpbidb) (2),,
8632fe24-2ba4-c7b8-23b5-c1082c3690c2,Custom SQL Query (gpbidb) (2),postgres,"WITH GPP AS (
SELECT DISTINCT 

	      a.id,
	      a.name,
          a.status as client_status,
          a.pricing_model,
	     CASE WHEN a.msa_contract_start_date_peo IS NOT NULL THEN a.msa_contract_start_date_peo
	     WHEN a.msa_contract_start_date_peo IS NULL AND a.msa_contract_start_date_services IS NOT NULL THEN a.msa_contract_start_date_services
	     WHEN a.msa_contract_start_date_services IS NULL AND a.msa_contract_start_date_sourcing IS NOT NULL THEN a.msa_contract_start_date_sourcing
	     WHEN a.msa_contract_start_date_sourcing IS NULL AND a.msa_contract_start_date_aso IS NOT NULL THEN a.msa_contract_start_date_aso
	     ELSE a.msa_contract_start_date_peo END AS ma_start_date,
	      b.pop_current, 
	      c.pop_to_date,
	      d.min_pay_start,
	      d.max_pay_start,
	      d.min_pay_end,
	      d.max_pay_end
	       
	FROM (SELECT a.id,a.pricing_model,a.name,a.status,a.msa_contract_start_date_services,a.msa_contract_start_date_peo, a.msa_contract_start_date_aso,a.msa_contract_start_date_sourcing
		 FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
		 WHERE a.is_demo_client = false) AS a
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_current
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC ('month', cal_date)= DATE_TRUNC ('month', CURRENT_DATE)
			  GROUP BY 1) AS b
	ON a.id = b.client_id
	
	LEFT JOIN (  SELECT client_id,COUNT(DISTINCT professional_id) pop_to_date
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			   AND DATE_TRUNC ('month', cal_date)<<= DATE_TRUNC ('month', CURRENT_DATE)
			  GROUP BY 1) AS c
	ON a.id = c.client_id
	
	LEFT JOIN (SELECT client_id, MAX(payroll_start_date)AS max_pay_start, MAX (payroll_end_date)AS max_pay_end,
				  MIN(payroll_end_date)AS min_pay_end, MIN(payroll_start_date) AS min_pay_start
				 FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 

				 GROUP BY 1) d
	ON a.id = d.client_id
	

),
FINAL AS(SELECT 
		
     GPP.*,
	
	  
	  	CASE 
		   
			 WHEN (CURRENT_DATE -  GPP.ma_start_date ) <<= 90
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.min_pay_start IS NULL
			 THEN 'Newly Signed'
			 
			 WHEN  GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND date_trunc('month', GPP.min_pay_start) >>= date_trunc('month',CURRENT_DATE) THEN 'Onboarding' 
			  
		    WHEN  GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current >>0  THEN 'Currently Active'
			 
			 WHEN  GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.max_pay_end << CURRENT_DATE OR (date_trunc('month', GPP.max_pay_start) >>= date_trunc('month',CURRENT_DATE) AND GPP.max_pay_end >> CURRENT_DATE)
			 THEN 'Currently Inactive'
			 
			 
			 WHEN ( (CURRENT_DATE -  GPP.ma_start_date )>>90
			 AND GPP.pop_to_date IS NULL)
             THEN 'Never Active' 
		 
		  
			
			 END AS gpp_account_status
		 FROM GPP
)

SELECT * 
FROM FINAL"
8632fe24-2ba4-c7b8-23b5-c1082c3690c2,Custom SQL Query (gpbidb) (2),postgres,"SELECT 
client_id,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('1') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS NEW_STATUS,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('2') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS Onb_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('3') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS ACTIVE_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('4') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS TERM_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('5') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS INACT_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= TRUE AND (service_class IS NULL OR service_class <<>>'4')) AS ftl_prof,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= FALSE AND service_class ='4' AND pro.status IN ('1') ) AS new_contractor,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= FALSE AND service_class ='4' AND pro.status IN ('2') ) AS onboarding_contractor,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= FALSE AND service_class ='4' AND pro.status IN ('3') ) AS active_contractor,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= FALSE AND service_class ='4' AND pro.status IN ('4') ) AS terminating_contractor,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= FALSE AND service_class ='4' AND pro.status IN ('5') ) AS inactive_contractor

FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS pro
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS client ON pro.client_id = client.id
WHERE client.is_demo_client = FALSE
GROUP BY pro.client_id"
86ad3ecc-578f-9d93-9cb4-2ddcc1f313be,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"SELECT ""v_gp_gg_client_current1"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_client_current1)"",
  ""v_gp_gg_country_current"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_country_current3)"",
  ""v_gp_gg_gp_person_current"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_lsp_country_current1"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_lsp_country_current1)"",
  ""v_gp_gg_lsp_current1"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_lsp_current1)"",
  ""v_gp_gg_professional_offboarding_current1"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_professional_offboarding_current1)"",
  ""v_gp_gg_user_expenses_current1"".""_fivetran_deleted"" AS ""_fivetran_deleted (v_gp_gg_user_expenses_current1)"",
  ""v_gp_gg_professional_current1"".""_fivetran_deleted"" AS ""_fivetran_deleted"",
  ""v_gp_gg_client_current1"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_client_current1)"",
  ""v_gp_gg_country_current"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_country_current3)"",
  ""v_gp_gg_gp_person_current"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_lsp_country_current1"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_lsp_country_current1)"",
  ""v_gp_gg_lsp_current1"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_lsp_current1)"",
  ""v_gp_gg_professional_offboarding_current1"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_professional_offboarding_current1)"",
  ""v_gp_gg_user_expenses_current1"".""_fivetran_synced"" AS ""_fivetran_synced (v_gp_gg_user_expenses_current1)"",
  ""v_gp_gg_professional_current1"".""_fivetran_synced"" AS ""_fivetran_synced"",
  ""v_gp_gg_client_current1"".""accounting_id"" AS ""accounting_id (v_gp_gg_client_current1)"",
  ""v_gp_gg_gp_person_current"".""accounting_id"" AS ""accounting_id (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""accounting_id"" AS ""accounting_id (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""accounting_id"" AS ""accounting_id (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_lsp_country_current1"".""accounting_id"" AS ""accounting_id (v_gp_gg_lsp_country_current1)"",
  ""v_gp_gg_lsp_current1"".""accounting_id"" AS ""accounting_id (v_gp_gg_lsp_current1)"",
  ""v_gp_gg_professional_current1"".""accounting_id"" AS ""accounting_id"",
  ""v_gp_gg_client_current1"".""adp_lead_source"" AS ""adp_lead_source"",
  ""v_gp_gg_professional_offboarding_current1"".""agreement_client_sent_date_completed"" AS ""agreement_client_sent_date_completed"",
  ""v_gp_gg_professional_offboarding_current1"".""agreement_professional_approved_date_signed"" AS ""agreement_professional_approved_date_signed"",
  ""v_gp_gg_professional_offboarding_current1"".""agreement_professional_sent_date_completed"" AS ""agreement_professional_sent_date_completed"",
  ""v_gp_gg_professional_current1"".""annual_base_salary"" AS ""annual_base_salary"",
  ""v_gp_gg_professional_current1"".""annual_base_salary_currency"" AS ""annual_base_salary_currency"",
  ""v_gp_gg_lsp_country_current1"".""annual_billing_amount"" AS ""annual_billing_amount"",
  ""v_gp_gg_lsp_country_current1"".""annual_billing_currency"" AS ""annual_billing_currency"",
  ""v_gp_gg_lsp_country_current1"".""annual_billing_notes"" AS ""annual_billing_notes"",
  ""v_gp_gg_client_current1"".""any_specific_terms"" AS ""any_specific_terms"",
  ""v_gp_gg_professional_offboarding_current1"".""applies"" AS ""applies"",
  ""v_gp_gg_professional_offboarding_current1"".""benefits_review_date_completed"" AS ""benefits_review_date_completed"",
  ""v_gp_gg_client_current1"".""bi_monthly_payroll_changes_due_period_one"" AS ""bi_monthly_payroll_changes_due_period_one"",
  ""v_gp_gg_client_current1"".""bi_monthly_payroll_changes_due_period_two"" AS ""bi_monthly_payroll_changes_due_period_two"",
  ""v_gp_gg_client_current1"".""billing_address_id"" AS ""billing_address_id"",
  ""v_gp_gg_professional_current1"".""birth_date"" AS ""birth_date"",
  ""v_gp_gg_gp_person_current"".""bus_phone"" AS ""bus_phone (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""bus_phone"" AS ""bus_phone (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""bus_phone"" AS ""bus_phone (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_professional_current1"".""bus_phone"" AS ""bus_phone"",
  ""v_gp_gg_professional_current1"".""client_country_id"" AS ""client_country_id"",
  ""v_gp_gg_professional_current1"".""client_id"" AS ""client_id"",
  ""v_gp_gg_client_current1"".""client_terms_id"" AS ""client_terms_id"",
  ""v_gp_gg_professional_current1"".""client_thirteenth_month_payment"" AS ""client_thirteenth_month_payment"",
  ""v_gp_gg_professional_current1"".""contract_end_date"" AS ""contract_end_date"",
  ""v_gp_gg_professional_current1"".""contract_notes"" AS ""contract_notes"",
  ""v_gp_gg_professional_current1"".""contract_prob_period_end_date"" AS ""contract_prob_period_end_date"",
  ""v_gp_gg_professional_current1"".""contract_start_date"" AS ""contract_start_date"",
  ""v_gp_gg_professional_current1"".""country_accounting_id"" AS ""country_accounting_id"",
  ""v_gp_gg_country_current"".""country_code"" AS ""country_code (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""country_code"" AS ""country_code (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""country_code"" AS ""country_code"",
  ""v_gp_gg_country_current"".""country_finance_lead"" AS ""country_finance_lead (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""country_finance_lead"" AS ""country_finance_lead (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""country_finance_lead"" AS ""country_finance_lead"",
  ""v_gp_gg_lsp_country_current1"".""country_id"" AS ""country_id"",
  ""v_gp_gg_country_current"".""country_info_link"" AS ""country_info_link (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""country_info_link"" AS ""country_info_link (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""country_info_link"" AS ""country_info_link"",
  ""v_gp_gg_country_current"".""country_ops_associate"" AS ""country_ops_associate (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""country_ops_associate"" AS ""country_ops_associate (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""country_ops_associate"" AS ""country_ops_associate"",
  ""v_gp_gg_country_current"".""country_ops_lead"" AS ""country_ops_lead (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""country_ops_lead"" AS ""country_ops_lead (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""country_ops_lead"" AS ""country_ops_lead"",
  ""v_gp_gg_country_current"".""countrypedia_link"" AS ""countrypedia_link (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""countrypedia_link"" AS ""countrypedia_link (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""countrypedia_link"" AS ""countrypedia_link"",
  ""v_gp_gg_client_current1"".""created_by"" AS ""created_by (v_gp_gg_client_current1)"",
  ""v_gp_gg_country_current"".""created_by"" AS ""created_by (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""created_by"" AS ""created_by (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""created_by"" AS ""created_by (v_gp_gg_country_current3)"",
  ""v_gp_gg_gp_person_current"".""created_by"" AS ""created_by (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""created_by"" AS ""created_by (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""created_by"" AS ""created_by (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_lsp_country_current1"".""created_by"" AS ""created_by (v_gp_gg_lsp_country_current1)"",
  ""v_gp_gg_lsp_current1"".""created_by"" AS ""created_by (v_gp_gg_lsp_current1)"",
  ""v_gp_gg_professional_offboarding_current1"".""created_by"" AS ""created_by (v_gp_gg_professional_offboarding_current1)"",
  ""v_gp_gg_user_expenses_current1"".""created_by"" AS ""created_by (v_gp_gg_user_expenses_current1)"",
  ""v_gp_gg_professional_current1"".""created_by"" AS ""created_by"",
  ""v_gp_gg_country_current"".""currency_code"" AS ""currency_code (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""currency_code"" AS ""currency_code (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""currency_code"" AS ""currency_code"",
  ""v_gp_gg_country_current"".""currency_name"" AS ""currency_name (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""currency_name"" AS ""currency_name (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""currency_name"" AS ""currency_name"",
  ""v_gp_gg_country_current"".""custom_message_for_expenses"" AS ""custom_message_for_expenses (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""custom_message_for_expenses"" AS ""custom_message_for_expenses (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""custom_message_for_expenses"" AS ""custom_message_for_expenses"",
  ""v_gp_gg_professional_current1"".""date_carryover_must_be_taken"" AS ""date_carryover_must_be_taken"",
  ""v_gp_gg_client_current1"".""date_created"" AS ""date_created (v_gp_gg_client_current1)"",
  ""v_gp_gg_country_current"".""date_created"" AS ""date_created (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""date_created"" AS ""date_created (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""date_created"" AS ""date_created (v_gp_gg_country_current3)"",
  ""v_gp_gg_gp_person_current"".""date_created"" AS ""date_created (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""date_created"" AS ""date_created (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""date_created"" AS ""date_created (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_lsp_country_current1"".""date_created"" AS ""date_created (v_gp_gg_lsp_country_current1)"",
  ""v_gp_gg_lsp_current1"".""date_created"" AS ""date_created (v_gp_gg_lsp_current1)"",
  ""v_gp_gg_professional_offboarding_current1"".""date_created"" AS ""date_created (v_gp_gg_professional_offboarding_current1)"",
  ""v_gp_gg_user_expenses_current1"".""date_created"" AS ""date_created (v_gp_gg_user_expenses_current1)"",
  ""v_gp_gg_professional_current1"".""date_created"" AS ""date_created"",
  ""v_gp_gg_client_current1"".""date_modified"" AS ""date_modified (v_gp_gg_client_current1)"",
  ""v_gp_gg_country_current"".""date_modified"" AS ""date_modified (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""date_modified"" AS ""date_modified (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""date_modified"" AS ""date_modified (v_gp_gg_country_current3)"",
  ""v_gp_gg_gp_person_current"".""date_modified"" AS ""date_modified (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""date_modified"" AS ""date_modified (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""date_modified"" AS ""date_modified (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_lsp_country_current1"".""date_modified"" AS ""date_modified (v_gp_gg_lsp_country_current1)"",
  ""v_gp_gg_lsp_current1"".""date_modified"" AS ""date_modified (v_gp_gg_lsp_current1)"",
  ""v_gp_gg_professional_offboarding_current1"".""date_modified"" AS ""date_modified (v_gp_gg_professional_offboarding_current1)"",
  ""v_gp_gg_user_expenses_current1"".""date_modified"" AS ""date_modified (v_gp_gg_user_expenses_current1)"",
  ""v_gp_gg_professional_current1"".""date_modified"" AS ""date_modified"",
  ""v_gp_gg_lsp_country_current1"".""default_invoice_currency"" AS ""default_invoice_currency"",
  ""v_gp_gg_lsp_country_current1"".""default_invoice_type"" AS ""default_invoice_type"",
  ""v_gp_gg_professional_current1"".""deposit_amount"" AS ""deposit_amount"",
  ""v_gp_gg_professional_current1"".""deposit_balance"" AS ""deposit_balance"",
  ""v_gp_gg_professional_current1"".""deposit_billed"" AS ""deposit_billed"",
  ""Custom SQL Query"".""email"" AS ""email"",
  ""v_gp_gg_professional_current1"".""emergency_email"" AS ""emergency_email"",
  ""v_gp_gg_professional_current1"".""emergency_name"" AS ""emergency_name"",
  ""v_gp_gg_professional_current1"".""emergency_phone"" AS ""emergency_phone"",
  ""v_gp_gg_user_expenses_current1"".""employee_id"" AS ""employee_id"",
  ""v_gp_gg_professional_current1"".""employment_contract_reject_count"" AS ""employment_contract_reject_count"",
  ""v_gp_gg_lsp_current1"".""enrollment_date"" AS ""enrollment_date"",
  ""v_gp_gg_lsp_country_current1"".""estimated_time_to_fund"" AS ""estimated_time_to_fund"",
  ""v_gp_gg_professional_current1"".""expense_frequency"" AS ""expense_frequency"",
  ""v_gp_gg_professional_current1"".""expense_method"" AS ""expense_method"",
  ""v_gp_gg_user_expenses_current1"".""exported"" AS ""exported"",
  ""v_gp_gg_gp_person_current"".""first_name"" AS ""first_name (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""first_name"" AS ""first_name (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""first_name"" AS ""first_name (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_professional_current1"".""first_name"" AS ""first_name"",
  ""v_gp_gg_professional_current1"".""forecast_end_date"" AS ""forecast_end_date"",
  ""v_gp_gg_professional_current1"".""forecast_start_date"" AS ""forecast_start_date"",
  ""v_gp_gg_lsp_country_current1"".""fund_by_type"" AS ""fund_by_type"",
  ""v_gp_gg_professional_current1"".""funded_lsp_country_id"" AS ""funded_lsp_country_id"",
  ""v_gp_gg_client_current1"".""go_live_date"" AS ""go_live_date"",
  ""v_gp_gg_gp_person_current"".""goes_by"" AS ""goes_by (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""goes_by"" AS ""goes_by (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""goes_by"" AS ""goes_by (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_professional_current1"".""goes_by"" AS ""goes_by"",
  ""v_gp_gg_client_current1"".""gp_account_manager_id"" AS ""gp_account_manager_id"",
  ""v_gp_gg_professional_offboarding_current1"".""gp_agreement_client_sent_completed_by"" AS ""gp_agreement_client_sent_completed_by"",
  ""v_gp_gg_professional_offboarding_current1"".""gp_agreement_professional_sent_completed_by"" AS ""gp_agreement_professional_sent_completed_by"",
  ""v_gp_gg_professional_offboarding_current1"".""gp_benefits_reviewed_by"" AS ""gp_benefits_reviewed_by"",
  ""v_gp_gg_lsp_country_current1"".""gp_billing_manager_id"" AS ""gp_billing_manager_id"",
  ""v_gp_gg_client_current1"".""gp_current_sales_rep_id"" AS ""gp_current_sales_rep_id"",
  ""v_gp_gg_client_current1"".""gp_executive_sponsor_id"" AS ""gp_executive_sponsor_id"",
  ""v_gp_gg_professional_offboarding_current1"".""gp_lsp_closeout_completed_by"" AS ""gp_lsp_closeout_completed_by"",
  ""v_gp_gg_professional_current1"".""gp_offboard_lead_id"" AS ""gp_offboard_lead_id"",
  ""v_gp_gg_professional_current1"".""gp_onboard_lead_id"" AS ""gp_onboard_lead_id"",
  ""v_gp_gg_client_current1"".""gp_original_sales_rep_id"" AS ""gp_original_sales_rep_id"",
  ""v_gp_gg_professional_offboarding_current1"".""gp_partner_notification_completed_by"" AS ""gp_partner_notification_completed_by"",
  ""v_gp_gg_professional_offboarding_current1"".""gp_payout_calc_completed_by"" AS ""gp_payout_calc_completed_by"",
  ""v_gp_gg_professional_offboarding_current1"".""gp_refund_issued_completed_by"" AS ""gp_refund_issued_completed_by"",
  ""v_gp_gg_country_current"".""gp_region"" AS ""gp_region (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""gp_region"" AS ""gp_region (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""gp_region"" AS ""gp_region"",
  ""v_gp_gg_lsp_country_current1"".""gp_relationship_manager_id"" AS ""gp_relationship_manager_id"",
  ""v_gp_gg_professional_current1"".""home_address_id"" AS ""home_address_id"",
  ""v_gp_gg_professional_current1"".""home_country_id"" AS ""home_country_id"",
  ""Custom SQL Query"".""id"" AS ""id (Custom SQL Query)"",
  ""Contract Signed Date"".""id"" AS ""id (Custom SQL Query1)"",
  ""v_gp_gg_client_current1"".""id"" AS ""id (v_gp_gg_client_current1)"",
  ""v_gp_gg_country_current"".""id"" AS ""id (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""id"" AS ""id (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""id"" AS ""id (v_gp_gg_country_current3)"",
  ""v_gp_gg_gp_person_current"".""id"" AS ""id (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""id"" AS ""id (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""id"" AS ""id (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_lsp_country_current1"".""id"" AS ""id (v_gp_gg_lsp_country_current1)"",
  ""v_gp_gg_lsp_current1"".""id"" AS ""id (v_gp_gg_lsp_current1)"",
  ""v_gp_gg_professional_offboarding_current1"".""id"" AS ""id (v_gp_gg_professional_offboarding_current1)"",
  ""v_gp_gg_user_expenses_current1"".""id"" AS ""id (v_gp_gg_user_expenses_current1)"",
  ""v_gp_gg_professional_current1"".""id"" AS ""id"",
  ""v_gp_gg_professional_current1"".""increment_id"" AS ""increment_id"",
  ""v_gp_gg_client_current1"".""industry_id"" AS ""industry_id"",
  ""v_gp_gg_professional_current1"".""initial_information_collected_date"" AS ""initial_information_collected_date"",
  ""v_gp_gg_client_current1"".""is_bank_info_approved"" AS ""is_bank_info_approved"",
  ""v_gp_gg_client_current1"".""is_confidential"" AS ""is_confidential"",
  ""v_gp_gg_professional_current1"".""is_contract_end_date_manually_set"" AS ""is_contract_end_date_manually_set"",
  ""v_gp_gg_professional_current1"".""is_contract_prob_period_applies"" AS ""is_contract_prob_period_applies"",
  ""v_gp_gg_professional_current1"".""is_country_specific_items_verified"" AS ""is_country_specific_items_verified"",
  ""v_gp_gg_country_current"".""is_currency_only"" AS ""is_currency_only (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""is_currency_only"" AS ""is_currency_only (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""is_currency_only"" AS ""is_currency_only"",
  ""v_gp_gg_professional_current1"".""is_days_carryover_indefinite"" AS ""is_days_carryover_indefinite"",
  ""v_gp_gg_client_current1"".""is_demo_client"" AS ""is_demo_client"",
  ""v_gp_gg_gp_person_current"".""is_enabled"" AS ""is_enabled (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""is_enabled"" AS ""is_enabled (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""is_enabled"" AS ""is_enabled (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_professional_current1"".""is_enabled"" AS ""is_enabled"",
  ""v_gp_gg_lsp_country_current1"".""is_expense_included_in_tax"" AS ""is_expense_included_in_tax"",
  ""v_gp_gg_user_expenses_current1"".""is_exported"" AS ""is_exported"",
  ""v_gp_gg_professional_current1"".""is_failed_to_launch"" AS ""is_failed_to_launch"",
  ""v_gp_gg_professional_current1"".""is_first_time_user"" AS ""is_first_time_user"",
  ""v_gp_gg_professional_current1"".""is_fixed_term_emp_contract"" AS ""is_fixed_term_emp_contract"",
  ""v_gp_gg_lsp_country_current1"".""is_funding_entity"" AS ""is_funding_entity"",
  ""v_gp_gg_client_current1"".""is_goglobal_opt_out"" AS ""is_goglobal_opt_out"",
  ""v_gp_gg_lsp_country_current1"".""is_gp_entity"" AS ""is_gp_entity"",
  ""v_gp_gg_lsp_country_current1"".""is_gp_submit_policies_apply"" AS ""is_gp_submit_policies_apply"",
  ""v_gp_gg_professional_current1"".""is_guaranteed_salary_increase"" AS ""is_guaranteed_salary_increase"",
  ""v_gp_gg_gp_person_current"".""is_no_longer_with_firm"" AS ""is_no_longer_with_firm (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""is_no_longer_with_firm"" AS ""is_no_longer_with_firm (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""is_no_longer_with_firm"" AS ""is_no_longer_with_firm (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_professional_current1"".""is_no_longer_with_firm"" AS ""is_no_longer_with_firm"",
  ""v_gp_gg_professional_current1"".""is_offboardlead_unassigned"" AS ""is_offboardlead_unassigned"",
  ""v_gp_gg_professional_current1"".""is_override_bill_status_check"" AS ""is_override_bill_status_check"",
  ""v_gp_gg_professional_current1"".""is_payroll_enrollment_form_completed"" AS ""is_payroll_enrollment_form_completed"",
  ""v_gp_gg_lsp_country_current1"".""is_preferred_partner"" AS ""is_preferred_partner"",
  ""v_gp_gg_professional_current1"".""is_sponsoring_visa"" AS ""is_sponsoring_visa"",
  ""v_gp_gg_professional_current1"".""is_sponsorship_visa_for_dependants"" AS ""is_sponsorship_visa_for_dependants"",
  ""v_gp_gg_professional_current1"".""is_sponsorship_visa_for_dependants_required"" AS ""is_sponsorship_visa_for_dependants_required"",
  ""v_gp_gg_professional_current1"".""is_thirteenth_month"" AS ""is_thirteenth_month"",
  ""v_gp_gg_professional_current1"".""is_transfer"" AS ""is_transfer"",
  ""v_gp_gg_professional_current1"".""is_visa_sponsorship_required"" AS ""is_visa_sponsorship_required"",
  ""v_gp_gg_country_current"".""is_work_visa_required_block_ecg"" AS ""is_work_visa_required_block_ecg (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""is_work_visa_required_block_ecg"" AS ""is_work_visa_required_block_ecg (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""is_work_visa_required_block_ecg"" AS ""is_work_visa_required_block_ecg"",
  ""v_gp_gg_professional_current1"".""job_category"" AS ""job_category"",
  ""v_gp_gg_gp_person_current"".""last_name"" AS ""last_name (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""last_name"" AS ""last_name (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""last_name"" AS ""last_name (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_professional_current1"".""last_name"" AS ""last_name"",
  ""v_gp_gg_client_current1"".""last_salesforce_sync_date"" AS ""last_salesforce_sync_date"",
  ""v_gp_gg_professional_offboarding_current1"".""legacy_gp_medical_provider_notify_completed_by"" AS ""legacy_gp_medical_provider_notify_completed_by"",
  ""v_gp_gg_professional_offboarding_current1"".""legacy_medical_provider_date_completed"" AS ""legacy_medical_provider_date_completed"",
  ""v_gp_gg_professional_current1"".""legacy_other_insurance_notes"" AS ""legacy_other_insurance_notes"",
  ""v_gp_gg_professional_current1"".""legacy_professional_medical_id"" AS ""legacy_professional_medical_id"",
  ""v_gp_gg_professional_current1"".""legacy_professional_other_insurance_id"" AS ""legacy_professional_other_insurance_id"",
  ""v_gp_gg_professional_current1"".""legacy_professional_pension_id"" AS ""legacy_professional_pension_id"",
  ""v_gp_gg_lsp_current1"".""legal_entity_name"" AS ""legal_entity_name (v_gp_gg_lsp_current1)"",
  ""v_gp_gg_client_current1"".""legal_entity_name"" AS ""legal_entity_name"",
  ""v_gp_gg_professional_current1"".""legal_full_name"" AS ""legal_full_name"",
  ""v_gp_gg_professional_offboarding_current1"".""lsp_closeout_date_completed"" AS ""lsp_closeout_date_completed"",
  ""v_gp_gg_professional_current1"".""lsp_country_id"" AS ""lsp_country_id"",
  ""v_gp_gg_lsp_country_current1"".""lsp_id"" AS ""lsp_id"",
  ""v_gp_gg_professional_current1"".""lsp_professional_id"" AS ""lsp_professional_id"",
  ""v_gp_gg_professional_offboarding_current1"".""method_type"" AS ""method_type"",
  ""v_gp_gg_gp_person_current"".""microsoft_bookings_url"" AS ""microsoft_bookings_url (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""microsoft_bookings_url"" AS ""microsoft_bookings_url (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""microsoft_bookings_url"" AS ""microsoft_bookings_url"",
  ""v_gp_gg_client_current1"".""min_engagement_length"" AS ""min_engagement_length"",
  ""v_gp_gg_client_current1"".""min_engagement_length_type"" AS ""min_engagement_length_type"",
  ""v_gp_gg_gp_person_current"".""mobile_phone"" AS ""mobile_phone (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""mobile_phone"" AS ""mobile_phone (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""mobile_phone"" AS ""mobile_phone (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_professional_current1"".""mobile_phone"" AS ""mobile_phone"",
  ""v_gp_gg_client_current1"".""modified_by"" AS ""modified_by (v_gp_gg_client_current1)"",
  ""v_gp_gg_country_current"".""modified_by"" AS ""modified_by (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""modified_by"" AS ""modified_by (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""modified_by"" AS ""modified_by (v_gp_gg_country_current3)"",
  ""v_gp_gg_gp_person_current"".""modified_by"" AS ""modified_by (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""modified_by"" AS ""modified_by (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""modified_by"" AS ""modified_by (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_lsp_country_current1"".""modified_by"" AS ""modified_by (v_gp_gg_lsp_country_current1)"",
  ""v_gp_gg_lsp_current1"".""modified_by"" AS ""modified_by (v_gp_gg_lsp_current1)"",
  ""v_gp_gg_professional_offboarding_current1"".""modified_by"" AS ""modified_by (v_gp_gg_professional_offboarding_current1)"",
  ""v_gp_gg_user_expenses_current1"".""modified_by"" AS ""modified_by (v_gp_gg_user_expenses_current1)"",
  ""v_gp_gg_professional_current1"".""modified_by"" AS ""modified_by"",
  ""v_gp_gg_client_current1"".""monthly_payroll_changes_due"" AS ""monthly_payroll_changes_due"",
  ""v_gp_gg_client_current1"".""msa_contract_start_date_aso"" AS ""msa_contract_start_date_aso"",
  ""v_gp_gg_client_current1"".""msa_contract_start_date_entitysetup"" AS ""msa_contract_start_date_entitysetup"",
  ""v_gp_gg_client_current1"".""msa_contract_start_date_peo"" AS ""msa_contract_start_date_peo"",
  ""v_gp_gg_client_current1"".""msa_contract_start_date_services"" AS ""msa_contract_start_date_services"",
  ""v_gp_gg_client_current1"".""msa_contract_start_date_sourcing"" AS ""msa_contract_start_date_sourcing"",
  ""v_gp_gg_country_current"".""name"" AS ""name (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""name"" AS ""name (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""name"" AS ""name (v_gp_gg_country_current3)"",
  ""v_gp_gg_lsp_current1"".""name"" AS ""name (v_gp_gg_lsp_current1)"",
  ""v_gp_gg_client_current1"".""name"" AS ""name"",
  ""v_gp_gg_client_current1"".""net_promoter_score"" AS ""net_promoter_score"",
  ""v_gp_gg_client_current1"".""next_quarterly_call_date"" AS ""next_quarterly_call_date"",
  ""v_gp_gg_professional_offboarding_current1"".""offboard_end_date"" AS ""offboard_end_date"",
  ""v_gp_gg_professional_offboarding_current1"".""offboard_start_date"" AS ""offboard_start_date"",
  ""v_gp_gg_professional_offboarding_current1"".""offboarding_notes"" AS ""offboarding_notes"",
  ""v_gp_gg_client_current1"".""onboarding_finished"" AS ""onboarding_finished"",
  ""v_gp_gg_client_current1"".""org_type"" AS ""org_type"",
  ""v_gp_gg_lsp_country_current1"".""other_notes"" AS ""other_notes"",
  ""v_gp_gg_professional_current1"".""other_payroll_notes"" AS ""other_payroll_notes"",
  ""v_gp_gg_lsp_country_current1"".""paid_from"" AS ""paid_from"",
  ""v_gp_gg_professional_current1"".""paid_to_professional_in_month"" AS ""paid_to_professional_in_month"",
  ""v_gp_gg_professional_offboarding_current1"".""partner_notification_date_completed"" AS ""partner_notification_date_completed"",
  ""v_gp_gg_client_current1"".""partners_referral_id"" AS ""partners_referral_id"",
  ""v_gp_gg_country_current"".""pay_date"" AS ""pay_date (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""pay_date"" AS ""pay_date (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""pay_date"" AS ""pay_date"",
  ""v_gp_gg_professional_offboarding_current1"".""payout_calc_date_approved"" AS ""payout_calc_date_approved"",
  ""v_gp_gg_professional_offboarding_current1"".""payout_calc_date_completed"" AS ""payout_calc_date_completed"",
  ""v_gp_gg_professional_current1"".""payroll_end_date"" AS ""payroll_end_date"",
  ""v_gp_gg_professional_current1"".""payroll_enrollment_form_completed_date"" AS ""payroll_enrollment_form_completed_date"",
  ""v_gp_gg_professional_current1"".""payroll_start_date"" AS ""payroll_start_date"",
  ""v_gp_gg_country_current"".""payslips_delivered"" AS ""payslips_delivered (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""payslips_delivered"" AS ""payslips_delivered (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""payslips_delivered"" AS ""payslips_delivered"",
  ""v_gp_gg_professional_current1"".""personal_email"" AS ""personal_email"",
  ""v_gp_gg_professional_current1"".""po_number"" AS ""po_number"",
  ""v_gp_gg_gp_person_current"".""preferred_pronoun"" AS ""preferred_pronoun (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""preferred_pronoun"" AS ""preferred_pronoun (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""preferred_pronoun"" AS ""preferred_pronoun (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_professional_current1"".""preferred_pronoun"" AS ""preferred_pronoun"",
  ""v_gp_gg_client_current1"".""preferring_billing_currency"" AS ""preferring_billing_currency"",
  ""v_gp_gg_client_current1"".""price_book_id"" AS ""price_book_id"",
  ""v_gp_gg_country_current"".""privacy_policy"" AS ""privacy_policy (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""privacy_policy"" AS ""privacy_policy (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""privacy_policy"" AS ""privacy_policy"",
  ""v_gp_gg_professional_current1"".""professional_in_country_transfer_id"" AS ""professional_in_country_transfer_id"",
  ""v_gp_gg_professional_current1"".""professional_offboarding_id"" AS ""professional_offboarding_id"",
  ""v_gp_gg_professional_current1"".""professional_onboarding_id"" AS ""professional_onboarding_id"",
  ""v_gp_gg_professional_current1"".""pto_days_allotted"" AS ""pto_days_allotted"",
  ""v_gp_gg_professional_current1"".""pto_days_allotted_old"" AS ""pto_days_allotted_old"",
  ""v_gp_gg_professional_current1"".""pto_notes"" AS ""pto_notes"",
  ""v_gp_gg_user_expenses_current1"".""re_exported"" AS ""re_exported"",
  ""v_gp_gg_professional_offboarding_current1"".""reason_type"" AS ""reason_type"",
  ""v_gp_gg_lsp_country_current1"".""recurring_billing"" AS ""recurring_billing"",
  ""v_gp_gg_lsp_country_current1"".""recurring_billing_currency"" AS ""recurring_billing_currency"",
  ""v_gp_gg_lsp_country_current1"".""recurring_billing_notes"" AS ""recurring_billing_notes"",
  ""v_gp_gg_client_current1"".""referred_by"" AS ""referred_by"",
  ""v_gp_gg_professional_offboarding_current1"".""refund_issued_date_completed"" AS ""refund_issued_date_completed"",
  ""v_gp_gg_gp_person_current"".""reports_to_id"" AS ""reports_to_id (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""reports_to_id"" AS ""reports_to_id (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_gp_person_current2"".""reports_to_id"" AS ""reports_to_id"",
  ""v_gp_gg_professional_current1"".""residency_status"" AS ""residency_status"",
  ""v_gp_gg_professional_current1"".""right_to_work_in_work_country"" AS ""right_to_work_in_work_country"",
  ""v_gp_gg_gp_person_current"".""roles"" AS ""roles (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""roles"" AS ""roles (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""roles"" AS ""roles (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_professional_current1"".""roles"" AS ""roles"",
  ""v_gp_gg_lsp_country_current1"".""rp_deposit_held_by"" AS ""rp_deposit_held_by"",
  ""v_gp_gg_lsp_country_current1"".""rp_deposit_held_by_notes"" AS ""rp_deposit_held_by_notes"",
  ""v_gp_gg_lsp_country_current1"".""rp_pto_tracking"" AS ""rp_pto_tracking"",
  ""v_gp_gg_lsp_country_current1"".""rp_pto_tracking_notes"" AS ""rp_pto_tracking_notes"",
  ""v_gp_gg_lsp_country_current1"".""rp_severance_accrual"" AS ""rp_severance_accrual"",
  ""v_gp_gg_lsp_country_current1"".""rp_severance_accrual_notes"" AS ""rp_severance_accrual_notes"",
  ""v_gp_gg_lsp_country_current1"".""rp_thirteenth_month_accrual"" AS ""rp_thirteenth_month_accrual"",
  ""v_gp_gg_lsp_country_current1"".""rp_thirteenth_month_accrual_notes"" AS ""rp_thirteenth_month_accrual_notes"",
  ""v_gp_gg_lsp_country_current1"".""rp_vacation_tracking"" AS ""rp_vacation_tracking"",
  ""v_gp_gg_professional_current1"".""salary_frequency"" AS ""salary_frequency"",
  ""v_gp_gg_client_current1"".""salesforce_account_id"" AS ""salesforce_account_id"",
  ""v_gp_gg_professional_current1"".""security_questions_answered"" AS ""security_questions_answered"",
  ""Contract Signed Date"".""sent_ee_date_signed"" AS ""sent_ee_date_signed"",
  ""v_gp_gg_professional_current1"".""service_class"" AS ""service_class"",
  ""v_gp_gg_country_current"".""services"" AS ""services (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""services"" AS ""services (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""services"" AS ""services"",
  ""v_gp_gg_lsp_country_current1"".""services_engaged"" AS ""services_engaged"",
  ""v_gp_gg_lsp_country_current1"".""services_offered"" AS ""services_offered"",
  ""v_gp_gg_lsp_country_current1"".""setup_cost_amount"" AS ""setup_cost_amount"",
  ""v_gp_gg_lsp_country_current1"".""setup_cost_currency"" AS ""setup_cost_currency"",
  ""v_gp_gg_lsp_country_current1"".""setup_cost_notes"" AS ""setup_cost_notes"",
  ""v_gp_gg_client_current1"".""silo_msa_id"" AS ""silo_msa_id"",
  ""v_gp_gg_professional_current1"".""sponsoring_visa_expire_date"" AS ""sponsoring_visa_expire_date"",
  ""v_gp_gg_professional_current1"".""sponsoring_visa_notes"" AS ""sponsoring_visa_notes"",
  ""v_gp_gg_client_current1"".""status"" AS ""status (v_gp_gg_client_current1)"",
  ""v_gp_gg_lsp_country_current1"".""status"" AS ""status (v_gp_gg_lsp_country_current1)"",
  ""v_gp_gg_lsp_current1"".""status"" AS ""status (v_gp_gg_lsp_current1)"",
  ""v_gp_gg_professional_current1"".""status"" AS ""status"",
  ""v_gp_gg_professional_offboarding_current1"".""termination_reason_details"" AS ""termination_reason_details"",
  ""v_gp_gg_client_current1"".""tier_type"" AS ""tier_type"",
  ""v_gp_gg_gp_person_current"".""title"" AS ""title (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""title"" AS ""title (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""title"" AS ""title (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_professional_current1"".""title"" AS ""title"",
  ""v_gp_gg_professional_offboarding_current1"".""total_payment_for_mutual_agreement"" AS ""total_payment_for_mutual_agreement"",
  ""v_gp_gg_professional_current1"".""travel_insurance_cost_type"" AS ""travel_insurance_cost_type"",
  ""v_gp_gg_professional_current1"".""travel_insurance_notes"" AS ""travel_insurance_notes"",
  ""v_gp_gg_gp_person_current"".""user_id"" AS ""user_id (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""user_id"" AS ""user_id (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""user_id"" AS ""user_id (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_user_expenses_current1"".""user_id"" AS ""user_id (v_gp_gg_user_expenses_current1)"",
  ""v_gp_gg_professional_current1"".""user_id"" AS ""user_id"",
  ""v_gp_gg_lsp_country_current1"".""vacation_tracking_notes"" AS ""vacation_tracking_notes"",
  ""v_gp_gg_client_current1"".""version"" AS ""version (v_gp_gg_client_current1)"",
  ""v_gp_gg_country_current"".""version"" AS ""version (v_gp_gg_country_current)"",
  ""v_gp_gg_country_current2"".""version"" AS ""version (v_gp_gg_country_current2)"",
  ""v_gp_gg_country_current3"".""version"" AS ""version (v_gp_gg_country_current3)"",
  ""v_gp_gg_gp_person_current"".""version"" AS ""version (v_gp_gg_gp_person_current)"",
  ""v_gp_gg_gp_person_current2"".""version"" AS ""version (v_gp_gg_gp_person_current2)"",
  ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""version"" AS ""version (v_gp_gg_gp_person_current3)"",
  ""v_gp_gg_lsp_country_current1"".""version"" AS ""version (v_gp_gg_lsp_country_current1)"",
  ""v_gp_gg_lsp_current1"".""version"" AS ""version (v_gp_gg_lsp_current1)"",
  ""v_gp_gg_professional_offboarding_current1"".""version"" AS ""version (v_gp_gg_professional_offboarding_current1)"",
  ""v_gp_gg_user_expenses_current1"".""version"" AS ""version (v_gp_gg_user_expenses_current1)"",
  ""v_gp_gg_professional_current1"".""version"" AS ""version"",
  ""v_gp_gg_lsp_country_current1"".""visa_notes"" AS ""visa_notes"",
  ""v_gp_gg_lsp_country_current1"".""visa_sponsorship_possible"" AS ""visa_sponsorship_possible"",
  ""v_gp_gg_lsp_country_current1"".""website"" AS ""website (v_gp_gg_lsp_country_current1)"",
  ""v_gp_gg_client_current1"".""website"" AS ""website"",
  ""v_gp_gg_professional_offboarding_current1"".""will_be_backfilling_this_position"" AS ""will_be_backfilling_this_position"",
  ""v_gp_gg_professional_current1"".""work_address_id"" AS ""work_address_id"",
  ""v_gp_gg_professional_current1"".""work_email"" AS ""work_email""
FROM ""goglobal_gp_goglobal"".""v_gp_gg_professional_current"" ""v_gp_gg_professional_current1""
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_gp_person_current"" ""v_gp_gg_gp_person_current2"" ON (""v_gp_gg_professional_current1"".""gp_offboard_lead_id"" = ""v_gp_gg_gp_person_current2"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_professional_offboarding_current"" ""v_gp_gg_professional_offboarding_current1"" ON (""v_gp_gg_professional_current1"".""professional_offboarding_id"" = ""v_gp_gg_professional_offboarding_current1"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_gp_person_current"" ""v_gp_gg_gp_person_current"" ON (""v_gp_gg_professional_offboarding_current1"".""gp_refund_issued_completed_by"" = ""v_gp_gg_gp_person_current"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_client_current"" ""v_gp_gg_client_current1"" ON (""v_gp_gg_professional_current1"".""client_id"" = ""v_gp_gg_client_current1"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_country_current"" ""v_gp_gg_country_current3"" ON (""v_gp_gg_professional_current1"".""home_country_id"" = ""v_gp_gg_country_current3"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_lsp_country_current"" ""v_gp_gg_lsp_country_current1"" ON (""v_gp_gg_professional_current1"".""lsp_country_id"" = ""v_gp_gg_lsp_country_current1"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_client_country_current"" ""v_gp_gg_client_country_current1"" ON (""v_gp_gg_professional_current1"".""client_country_id"" = ""v_gp_gg_client_country_current1"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_country_current"" ""v_gp_gg_country_current2"" ON (""v_gp_gg_client_country_current1"".""country_id"" = ""v_gp_gg_country_current2"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_gp_person_current"" ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"" ON (""v_gp_gg_client_current1"".""gp_account_manager_id"" = ""v_gp_gg_gp_person_current (goglobal_gp_goglobal.v_gp_gg_gp_person_current)"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_lsp_current"" ""v_gp_gg_lsp_current1"" ON (""v_gp_gg_lsp_country_current1"".""lsp_id"" = ""v_gp_gg_lsp_current1"".""id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_user_expenses_current"" ""v_gp_gg_user_expenses_current1"" ON (""v_gp_gg_professional_current1"".""user_id"" = ""v_gp_gg_user_expenses_current1"".""user_id"")
  LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_country_current"" ""v_gp_gg_country_current"" ON (""v_gp_gg_professional_current1"".""annual_base_salary_currency"" = ""v_gp_gg_country_current"".""id"")
  LEFT JOIN (
  select id, email  from goglobal_gp_goglobal.v_gp_gg_user_current
) ""Custom SQL Query"" ON (""v_gp_gg_professional_current1"".""user_id"" = ""Custom SQL Query"".""id"")
  LEFT JOIN (
  select 
  id, sent_ee_date_signed
  from goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current
) ""Contract Signed Date"" ON (""v_gp_gg_professional_current1"".""professional_onboarding_id"" = ""Contract Signed Date"".""id"")"
86ad3ecc-578f-9d93-9cb4-2ddcc1f313be,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"SELECT t1.id,
	t2.value AS highest_qualification,
	t22.value AS specialization,
	b.transfer_effective_date
FROM  goglobal_gp_goglobal.v_gp_gg_professional_current t1
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current t2 
	ON t1.id=t2.professional_id AND t2.country_custom_field_id = 183
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current t22
	ON t1.id=t22.professional_id AND t22.country_custom_field_id = 184
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current t4 
	ON t1.home_country_id=t4.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current t5 
	ON t1.client_id=t5.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_in_country_transfer_current_mat b
ON t1.professional_in_country_transfer_id = b.id"
7ad3efab-130d-178f-5cae-e9d95d6a6e80,DB - GPP,databricks,"SELECT
date_trunc('month', period_date)::date AS period_date,
--gp_customer_internal_id,
partners_referral_name,
gp_customer_accounting_id,
sfdc_account,
SUM(total_eor_recurring_fee_billing_value) AS eor_recurring_fee,
COUNT(DISTINCT(project_id)) as active_professional_eor_count
FROM
(
SELECT CONCAT(RIGHT(b.accounting_period,4),'-',LEFT(b.accounting_period,2),'-01')::date AS period_date,
b.project_id,
b.gp_customer_accounting_id,
--b.gp_customer_internal_id,
c.partners_referral_name,
c.sfdc_account,
-- EOR sum
(
  SUM(
    CASE 
      WHEN b.recurring_category IN (""Recurring Fees and Mark-ups"") 
      AND (service_class = 'EOR' OR service_class = 'EOR (Services)' OR service_class IS NULL OR service_class == 'Grow Global') 
      AND (b.transaction_type= 'INV' OR b.transaction_type= 'DBM')
      THEN b.extended_amount_in_company_base_currency 
      ELSE 0 END)
  -
  sum(
    case 
    WHEN b.recurring_category IN (""Recurring Fees and Mark-ups"") 
    AND (service_class = 'EOR' OR service_class = 'EOR (Services)' OR service_class IS NULL OR service_class == 'Grow Global') 
    AND b.transaction_type= 'CRM' 
    THEN b.extended_amount_in_company_base_currency 
    ELSE 0 END) 
) AS total_eor_recurring_fee_billing_value
FROM gold_kpi.billing_kpi_view b
LEFT JOIN gold_kpi.customer_kpi_view c ON b.gp_customer_internal_id = c.customer_internal_id
GROUP BY 1, 2, 3, 4, 5
) 
WHERE total_eor_recurring_fee_billing_value >> 0
AND partners_referral_name IS NOT NULL
GROUP BY 1, 2, 3, 4
ORDER BY 1, 2"
7ad3efab-130d-178f-5cae-e9d95d6a6e80,DB - GPP,postgres,"SELECT a.id, a.partner__c, b.name, b.vital_few__c
FROM salesforce.v_gp_sfdc_account_current AS a
LEFT JOIN salesforce.v_gp_sfdc_account_current AS b ON a.partner__c = b.id"
7ad3efab-130d-178f-5cae-e9d95d6a6e80,DW - SFDC,postgres,"SELECT acc_partn.name AS partner,
account.id AS account_id,
account.name AS account_name,
date_trunc('month', oc.close_date)::date AS close_date,
oc.id AS opp_id,
oc.update_time AS fivetran_synced_opps,
dev_own.name AS partner_dev_owner
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time oc
LEFT JOIN salesforce.v_gp_sfdc_account_current account ON oc.account_id::text = account.id::text
LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON oc.partner2__c::text = acc_partn.id::text
LEFT JOIN salesforce.v_gp_sfdc_user_current dev_own ON oc.partner_development_owner_lookup__c::text = dev_own.id::text
WHERE (oc.type::text <<>> 'Existing Business'::text OR oc.type IS NULL) 
AND (oc.record_type_bi__c IS NULL OR oc.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
AND (oc.partner_acquisition__c IS NULL OR oc.partner_acquisition__c::text <<>> 'Yes'::text)
AND oc.is_won = TRUE AND (oc.pricing_model__c <<>> 'Contractor only' OR oc.pricing_model__c IS NULL)
AND acc_partn.vital_few__c = true
ORDER BY oc.close_date DESC"
7aa062a8-e3b9-64e0-977f-e662680da76a,Custom SQL Query (gpbidb),postgres,"Select 
	issue.id,
	project.name as Project,
	issue.key as Key,
	epic.name as Epic_Name,
	epic.key as Epic,
	issue.summary as Milestone ,
	status_M.name as Milestone_Phase,
	due_date.value as Phase_Target_End_Date,
	last_comment.body as Comment, 
	issue.start_date as Milestone_Start_Date, 
	issue.real_close_date as Milestone_End_Date ,
	status_P.name as Project_Phase,
	priority.name as Milestone_Priority ,
	username1.name as Project_Manger, 
	username2.name as Business_Owner, 
	username3.name as Product_Manager
	
From jira.issue as issue
left join jira.project as project on issue.project= project.id
left join jira.epic as epic on issue.id= epic.id
left join jira.user as username1 on issue.creator = username1.id
left join jira.user as username2 on issue.assignee = username2.id
left join jira.user as username3 on issue.reporter = username3.id
left join ( select issue_id, max(created) as created from jira.comment group by issue_id ) as tm on  issue.id = tm.issue_id
left join jira.comment as last_comment on issue.id= last_comment.issue_id and tm.created =last_comment.created
left join jira.status as status_M on issue.status = status_M.id
left join jira.status as status_P on issue.status = status_P.id
left join jira.priority as priority on issue.priority = priority.id
left join ( select issue_id, max(value) as value from jira.issue_due_date_history group by issue_id ) as due_date on  issue.id = due_date.issue_id



ORDER BY   project.name,epic.key"
780fb373-08d9-532e-82b4-8804e70ac26e,All Partners Data,postgres,"SELECT
	CAST(""partner_opportunity_scoring_latest"".""deployment_id"" AS TEXT)  AS ""deployment_id""
  , ""partner_opportunity_scoring_latest"".""update_time""                  AS ""update_time""
  , ""partner_opportunity_scoring_latest"".""use_case""                     AS ""use_case""
  , CAST(""partner_opportunity_scoring_latest"".""opportunity_id"" AS                      TEXT) AS ""opportunity_id (partner_opportunity_scoring_latest)""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_10_ACTUAL_VALUE"" AS         TEXT) AS ""EXPLANATION_10_ACTUAL_VALUE""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_10_FEATURE_NAME"" AS         TEXT) AS ""EXPLANATION_10_FEATURE_NAME""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_10_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_10_QUALITATIVE_STRENGTH""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""EXPLANATION_10_STRENGTH"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_10_STRENGTH"" AS NUMERIC)
	END                                                                             AS ""EXPLANATION_10_STRENGTH""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_1_ACTUAL_VALUE"" AS         TEXT) AS ""EXPLANATION_1_ACTUAL_VALUE""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_1_FEATURE_NAME"" AS         TEXT) AS ""EXPLANATION_1_FEATURE_NAME""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_1_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_1_QUALITATIVE_STRENGTH""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""EXPLANATION_1_STRENGTH"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_1_STRENGTH"" AS NUMERIC)
	END                                                                             AS ""EXPLANATION_1_STRENGTH""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_2_ACTUAL_VALUE"" AS         TEXT) AS ""EXPLANATION_2_ACTUAL_VALUE""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_2_FEATURE_NAME"" AS         TEXT) AS ""EXPLANATION_2_FEATURE_NAME""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_2_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_2_QUALITATIVE_STRENGTH""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""EXPLANATION_2_STRENGTH"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_2_STRENGTH"" AS NUMERIC)
	END                                                                             AS ""EXPLANATION_2_STRENGTH""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_3_ACTUAL_VALUE"" AS         TEXT) AS ""EXPLANATION_3_ACTUAL_VALUE""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_3_FEATURE_NAME"" AS         TEXT) AS ""EXPLANATION_3_FEATURE_NAME""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_3_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_3_QUALITATIVE_STRENGTH""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""EXPLANATION_3_STRENGTH"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_3_STRENGTH"" AS NUMERIC)
	END                                                                             AS ""EXPLANATION_3_STRENGTH""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_4_ACTUAL_VALUE"" AS         TEXT) AS ""EXPLANATION_4_ACTUAL_VALUE""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_4_FEATURE_NAME"" AS         TEXT) AS ""EXPLANATION_4_FEATURE_NAME""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_4_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_4_QUALITATIVE_STRENGTH""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""EXPLANATION_4_STRENGTH"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_4_STRENGTH"" AS NUMERIC)
	END                                                                             AS ""EXPLANATION_4_STRENGTH""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_5_ACTUAL_VALUE"" AS         TEXT) AS ""EXPLANATION_5_ACTUAL_VALUE""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_5_FEATURE_NAME"" AS         TEXT) AS ""EXPLANATION_5_FEATURE_NAME""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_5_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_5_QUALITATIVE_STRENGTH""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""EXPLANATION_5_STRENGTH"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_5_STRENGTH"" AS NUMERIC)
	END                                                                             AS ""EXPLANATION_5_STRENGTH""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_6_ACTUAL_VALUE"" AS         TEXT) AS ""EXPLANATION_6_ACTUAL_VALUE""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_6_FEATURE_NAME"" AS         TEXT) AS ""EXPLANATION_6_FEATURE_NAME""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_6_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_6_QUALITATIVE_STRENGTH""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""EXPLANATION_6_STRENGTH"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_6_STRENGTH"" AS NUMERIC)
	END                                                                             AS ""EXPLANATION_6_STRENGTH""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_7_ACTUAL_VALUE"" AS         TEXT) AS ""EXPLANATION_7_ACTUAL_VALUE""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_7_FEATURE_NAME"" AS         TEXT) AS ""EXPLANATION_7_FEATURE_NAME""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_7_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_7_QUALITATIVE_STRENGTH""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""EXPLANATION_7_STRENGTH"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_7_STRENGTH"" AS NUMERIC)
	END                                                                             AS ""EXPLANATION_7_STRENGTH""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_8_ACTUAL_VALUE"" AS         TEXT) AS ""EXPLANATION_8_ACTUAL_VALUE""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_8_FEATURE_NAME"" AS         TEXT) AS ""EXPLANATION_8_FEATURE_NAME""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_8_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_8_QUALITATIVE_STRENGTH""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""EXPLANATION_8_STRENGTH"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_8_STRENGTH"" AS NUMERIC)
	END                                                                             AS ""EXPLANATION_8_STRENGTH""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_9_ACTUAL_VALUE"" AS         TEXT) AS ""EXPLANATION_9_ACTUAL_VALUE""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_9_FEATURE_NAME"" AS         TEXT) AS ""EXPLANATION_9_FEATURE_NAME""
  , CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_9_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_9_QUALITATIVE_STRENGTH""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""EXPLANATION_9_STRENGTH"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""EXPLANATION_9_STRENGTH"" AS NUMERIC)
	END                                                                 AS ""EXPLANATION_9_STRENGTH""
  , CAST(""partner_opportunity_scoring_latest"".""POSITIVE_CLASS"" AS TEXT) AS ""POSITIVE_CLASS""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""THRESHOLD"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""THRESHOLD"" AS NUMERIC)
	END AS ""THRESHOLD""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""is_won_False_PREDICTION"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""is_won_False_PREDICTION"" AS NUMERIC)
	END                                                                       AS ""is_won_False_PREDICTION""
  , CAST(""partner_opportunity_scoring_latest"".""is_won_PREDICTION"" AS BOOLEAN) AS ""is_won_PREDICTION""
  , CASE
		WHEN ""partner_opportunity_scoring_latest"".""is_won_True_PREDICTION"" = ''
			THEN NULL
			ELSE CAST(""partner_opportunity_scoring_latest"".""is_won_True_PREDICTION"" AS NUMERIC)
	END                                                                    AS ""is_won_True_PREDICTION""
  , CAST(""partner_opportunity_scoring_latest"".""prediction_status"" AS TEXT) AS ""prediction_status""
FROM
	""datarobot_predictions"".""partner_opportunity_scoring_latest"" ""partner_opportunity_scoring_latest"""
780fb373-08d9-532e-82b4-8804e70ac26e,All Partners Data,postgres,"WITH client_prof_data AS
	(
		SELECT
			cl_country.client_id
		  , country_c.name        as client_country_name
		  , MAX(payroll_end_date) AS max_pay_end
		  , COUNT(cl_country.id)  AS total_professionals
		  , SUM
				(
					CASE
						WHEN (
								is_failed_to_launch='true'
							)
							THEN 1
							ELSE NULL
					END
				)
			AS Failed
		  , SUM
				(
					CASE
						WHEN (
								status= '1'
							)
							AND is_failed_to_launch = 'false'
							THEN 1
							ELSE NULL
					END
				)
			AS New
		  , SUM
				(
					CASE
						WHEN (
								status= '2'
							)
							AND is_failed_to_launch = 'false'
							THEN 1
							ELSE NULL
					END
				)
			AS Onboarding
		  , SUM
				(
					CASE
						WHEN (
								status= '3'
							)
							AND is_failed_to_launch = 'false'
							THEN 1
							ELSE NULL
					END
				)
			AS Active
		  , SUM
				(
					CASE
						WHEN (
								status= '4'
							)
							AND is_failed_to_launch = 'false'
							THEN 1
							ELSE NULL
					END
				)
			AS Terminating
		  , SUM
				(
					CASE
						WHEN (
								status='5'
							)
							AND is_failed_to_launch = 'false'
							THEN 1
							ELSE NULL
					END
				)
			AS Inactive
		FROM
			goglobal_gp_goglobal.v_gp_gg_professional_current cl_country
			LEFT JOIN
				goglobal_gp_goglobal.v_gp_gg_client_country_current_mat cc
				ON
					cl_country.client_country_id = cc.id
			LEFT JOIN
				goglobal_gp_goglobal.v_gp_gg_country_current_mat country_c
				ON
					cc.country_id = country_c.id
		GROUP BY
			cl_country.client_id
		  , country_c.name
	)
  , client_first_hire AS
	(
		SELECT
			cl_country.client_id
		  , country_c.name          as client_country_name
		  , MIN(payroll_start_date) AS first_hire
		FROM
			goglobal_gp_goglobal.v_gp_gg_professional_current cl_country
			LEFT JOIN
				goglobal_gp_goglobal.v_gp_gg_client_country_current_mat cc
				ON
					cl_country.client_country_id = cc.id
			LEFT JOIN
				goglobal_gp_goglobal.v_gp_gg_country_current_mat country_c
				ON
					cc.country_id = country_c.id
		WHERE
			is_failed_to_launch = 'false'
		GROUP BY
			cl_country.client_id
		  , country_c.name
	)
  , client_country as
	(
		select
			cl_country.client_id
		  , country_c.name as client_country_name
		  , country_c.country_code
		from
			goglobal_gp_goglobal.v_gp_gg_professional_current_mat cl_country
			LEFT JOIN
				goglobal_gp_goglobal.v_gp_gg_client_country_current_mat cc
				ON
					cl_country.client_country_id = cc.id
			LEFT JOIN
				goglobal_gp_goglobal.v_gp_gg_country_current_mat country_c
				ON
					cc.country_id = country_c.id
		group by
			cl_country.client_id
		  , country_c.name
		  , country_c.country_code
	)
  , gg_client AS
	(
		SELECT
			a.id   AS client_id
		  , a.name AS client_name
		  , a.gp_account_manager_id
		  , CONCAT(b.first_name,' ', b.last_name) AS account_manager
		  , a.gp_current_sales_rep_id
		  , CONCAT(c.first_name,' ', c.last_name) AS account_executive
		  , d.name                                AS referral_name
		  , cl_country.client_country_name        AS country_name
		  , cl_country.country_code               AS client_country_code
		  , ind.name                              as industry_name
		  , a.msa_contract_start_date_peo
		  , a.org_type
		  , a.tier_type
		  , f.first_hire
		  , e.total_professionals
		  , e.max_pay_end
		  , e.Failed
		  , e.New
		  , e.Onboarding
		  , e.Active
		  , e.Terminating
		  , e.Inactive
		FROM
			goglobal_gp_goglobal.v_gp_gg_client_current AS a
			LEFT JOIN
				goglobal_gp_goglobal.v_gp_gg_gp_person_current AS b
				ON
					a.gp_account_manager_id = b.id
			LEFT JOIN
				goglobal_gp_goglobal.v_gp_gg_gp_person_current AS c
				ON
					a.gp_current_sales_rep_id = c.id
			LEFT JOIN
				goglobal_gp_goglobal.v_gp_gg_partners_referral_current AS d
				ON
					a.partners_referral_id = d.id
			LEFT JOIN
				client_country cl_country
				ON
					a.id = cl_country.client_id
			LEFT JOIN
				client_prof_data AS e
				ON
					cl_country.client_id               = e.client_id
					AND cl_country.client_country_name = e.client_country_name
			LEFT JOIN
				client_first_hire AS f
				ON
					cl_country.client_id               = f.client_id
					AND cl_country.client_country_name = f.client_country_name
			LEFT JOIN
				goglobal_gp_goglobal.v_gp_gg_industry_current_mat ind
				ON
					a.industry_id = ind.id
		WHERE
			a.partners_referral_id notnull
	)
  , opp_contact_role AS
	(
		SELECT
			opportunity_id
		  , contact_id
		FROM
			salesforce.opportunity_contact_role
		where
			is_primary=true
	)
  , salesforce_all AS
	(
		SELECT
			g.id   AS opportunity_id
		  , g.type AS opportunity_type
		  , g.lead_source
		  , g.is_won
		  , g.adp_lead_source__c
		  , g.created_date
		  , g.close_date
		  , g.s_a_l__c                 AS is_sales_accespted
		  , g.sales__accepted__date__c AS sales_accepted_date
		  , g.closed__lost__c
		  , g.partner_vertical__c
		  , g.iso_code_2_digit__c
		  , g.region_iso__c
		  , g.reason_for__win__loss_vs__competitor_s__c
		  , g.competitors__involved__c
		  , g.client_region_opportunity__c
		  , cont.name                       as primary_contact_name
		  , cont.candidate__country__c      as primary_contact_candidate_country_c
		  , cont.mailing_country            as primary_contact_candidate_country_m
		  , h1.name                         AS partner_name
		  , h1.type                         AS partner_type
		  , h1.partner_vertical__c          AS partner_vertical
		  , h1.partner_level__c             AS partner_level
		  , CONCAT (b.first_name, ' ', b.last_name) AS partner_owner_name
		  , g.name                          AS opportunity_name
		  , g.stage_name
		  , mdm.source       AS mdm_source
		  , mdm.parent_name  AS mdm_parent
		  , mdm.child_name   AS mdm_child_name
		  , mdm_GG.source    AS MDM_GG_Source
		  , mdm_GG.source_id AS MDM_GG_Client_Id
		  , g_t.partner_lead_source__c AS partner_lead_source
		  , g.pricing_model__c AS opp_pricing_model
		  , h.pricing_model__c AS acc_pricing_model
		FROM
			salesforce.v_gp_sfdc_opportunity_current_pacific_time AS g
			LEFT JOIN salesforce.v_gp_sfdc_user_current AS b
			ON g.partner_development_owner_lookup__c = b.id
			LEFT JOIN
			salesforce.v_gp_sfdc_opportunity_current AS g_t
				ON 
					g.id = g_t.id
			LEFT JOIN
				salesforce.v_gp_sfdc_account_current AS h
				ON
					g.account_id = h.id
			LEFT JOIN
				salesforce.v_gp_sfdc_account_current AS h1
				ON
					g.partner2__c::text = h1.id::text
			LEFT JOIN
				opp_contact_role ocr
				ON
					ocr.opportunity_id = g.id
			LEFT JOIN
				salesforce.v_gp_sfdc_contact_current cont
				ON
					cont.id = ocr.contact_id
			LEFT JOIN
				repo.v_gp_mdm_customer AS mdm
				ON
					h.id = mdm.source_id
			LEFT JOIN
				(
					SELECT *
					FROM
						repo.v_gp_mdm_customer
					WHERE
						source = 'GoGlobal Client'
				)
				AS mdm_GG
				ON
					mdm.parent_name = mdm_GG.parent_name
		WHERE
			g.type            = 'New Business'
			AND g.lead_source = 'Partner'
	)
  , salesforce_won AS
	(
		SELECT    *
		FROM
			salesforce_all
		WHERE
			stage_name = 'Closed Won'
	)
  , salesforce_not_won AS
	(
		SELECT    *
		FROM
			salesforce_all
		WHERE
			stage_name != 'Closed Won'
	)
  , SF_GG_WON AS
	(
		SELECT
			salesforce_won.*
		  , gg_client.*
		  , CASE
				WHEN gg_client.onboarding     IS NULL
					AND gg_client.active      IS NULL
					and gg_client.terminating IS NULL
					AND gg_client.inactive    IS NULL
					AND (
						current_date::DATE- gg_client.msa_contract_start_date_peo::DATE
					)
					<<90
					THEN 'Newly Signed'
				WHEN (
						gg_client.active IS NOT NULL
					)
					OR (
						gg_client.terminating IS NOT NULL
						AND gg_client.active      is NULL
						AND gg_client.max_pay_end       >> current_date
					)
					OR (
						gg_client.terminating IS NOT NULL
						AND gg_client.active      is NULL
						AND gg_client.max_pay_end IS NULL
					)
					THEN 'Active'
				WHEN gg_client.onboarding IS NOT NULL
					AND gg_client.active      IS NULL
					AND gg_client.terminating IS NULL
					AND gg_client.inactive    IS NULL
					THEN 'Onboarding'
				WHEN (
						gg_client.active           IS NULL
						AND gg_client.inactive IS NOT NULL
					)
					OR (
						gg_client.active              IS NULL
						AND gg_client.terminating IS NOT NULL
						AND gg_client.max_pay_end           << current_date
					)
					THEN 'Inactive'
				WHEN gg_client.onboarding     IS NULL
					AND active                IS NULL
					and gg_client.terminating IS NULL
					AND gg_client.inactive    IS NULL
					AND (
						current_date::DATE- gg_client.msa_contract_start_date_peo::DATE
					)
					>>90
					THEN 'Stalled'
				WHEN salesforce_won.stage_name = 'Closed Lost'
					THEN 'Lost'
				WHEN salesforce_won.stage_name != 'Closed Won'
					THEN 'Pre-Sale'
			END AS status
		FROM
			salesforce_won
			FULL JOIN
				gg_client
				ON
					salesforce_won.MDM_GG_Client_Id::INT = gg_client.client_id
	)
  , SF_GG_LOST AS
	(
		SELECT
			salesforce_not_won.*
		  , gg.*
		  , NULL AS status
		FROM
			salesforce_not_won
			LEFT JOIN
				(
					select *
					from
						gg_client
					where
						client_id='100000000'
				)
				as gg
				ON
					salesforce_not_won.MDM_GG_Client_Id::INT = gg.client_id
	)
  , SF_GG_UNION AS
	(
		select *
		from
			(
				select *
				from
					SF_GG_LOST
				UNION ALL
				select *
				from
					SF_GG_WON
			)
			uni
	)
SELECT *
FROM
	SF_GG_UNION"
780fb373-08d9-532e-82b4-8804e70ac26e,All Partners Data,,
780fb373-08d9-532e-82b4-8804e70ac26e,Toggle (Orange),,
780fb373-08d9-532e-82b4-8804e70ac26e,Toggle (Green),,
780fb373-08d9-532e-82b4-8804e70ac26e,CW_TS_Data_Prediction_input+,postgres,"SELECT
	deployment_id
  , update_time :: DATE
  , use_case :: TEXT
  , m_close_date :: DATE
  , ""FORECAST_DISTANCE"" :: INT
  , ""FORECAST_POINT"" :: DATE
  , ""PREDICTION_70_PERCENTILE_HIGH"" :: FLOAT
  , ""PREDICTION_70_PERCENTILE_LOW"" :: FLOAT
  , ""opp_count (actual)_PREDICTION"" :: FLOAT
  , partner_flag
  , prediction_status
FROM
	datarobot_predictions.cw_opp_ts_latest"
780fb373-08d9-532e-82b4-8804e70ac26e,CW_TS_Data_Prediction_input+,postgres,"SELECT
	m_close_date :: DATE
  , CASE 
  WHEN opp_count = '' THEN null
  ELSE opp_count :: INT
  END AS opp_count
  , partner_flag
FROM
	preprocessed_data.closed_won_ts_processed_data"
6a278c31-6acb-a53c-1a93-eeaad697ce18,Polaris KPIs - Phase 1,databricks,"SELECT CONCAT(RIGHT(capm.accounting_period,4),'-',LEFT(capm.accounting_period,2),'-01')::date AS period_date,
capm.gp_customer_accounting_id,
capm.active_product_mix,
capm.new_eor,
capm.customer_reactivation,
capm.pricing_model
FROM gp_prod.gold_kpi.customer_active_product_mix_view as capm"
6a278c31-6acb-a53c-1a93-eeaad697ce18,Polaris KPIs - Phase 1,postgres,"SELECT a.cal_date::date,a.professional_id,
a.payroll_start_date::date,
a.payroll_end_date::date,
a.country_name,a.active_flag,a.termination_flag,a.new_flag,
b.accounting_id,b.internal_id,b.external_id
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard as a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_professional as b
ON a.professional_id=b.internal_id
WHERE a.active_flag = 'Active' AND (a.service_class IS NULL OR a.service_class <<>> '4')
AND  a.cal_date BETWEEN '2020-01-01'::date AND current_date"
6a278c31-6acb-a53c-1a93-eeaad697ce18,Polaris KPIs - Phase 1,databricks,"SELECT 
CONCAT(RIGHT(billing.accounting_period,4),'-',LEFT(billing.accounting_period,2),'-01')::date AS period_date,
billing.accounting_period,
billing.project_id,
billing.transaction_type,
billing.customer_id,
billing.gp_customer_accounting_id,
billing.service_class,
billing.pricing_model,
billing.employment_country,
billing.invoice_type,
billing.transaction_fee_type,
billing.gaap_reporting_region,
billing.billing_region,
billing.is_gp_recruit_customer,
billing.is_gp_contractor_customer,
billing.customer_name,
billing.is_demo_client,
billing.professional_employed_region,
billing.msa_contract_start_date_eor,
billing.employment_country_iso_code_2,
billing.base_currency,
billing.invoice_line_currency,
billing.recurring_category,
billing.recurring_detailed_category,
CASE WHEN billing.transaction_type='CRM' THEN -billing.extended_amount_in_company_base_currency ELSE billing.extended_amount_in_company_base_currency end as Extended_amount_USD,
CASE WHEN billing.transaction_type='CRM' THEN -billing.gross_billings_value ELSE billing.gross_billings_value end as Gross_Billings_Value,
CASE WHEN billing.transaction_type='CRM' THEN -billing.gaap_revenue_value else billing.gaap_revenue_value end as gaap_revenue_value ,
CASE WHEN billing.transaction_type='CRM' THEN -billing.recurring_eor_platform_fee_billing_value ELSE billing.recurring_eor_platform_fee_billing_value end as recurring_eor_platform_fee_billing_value ,
CASE WHEN billing.transaction_type='CRM' THEN -billing.recurring_eor_transaction_fee_billing_value ELSE billing.recurring_eor_transaction_fee_billing_value end as recurring_eor_transaction_fee_billing_value,
CASE WHEN billing.transaction_type='CRM' THEN -billing.total_eor_recurring_fee_billing_value ELSE billing.total_eor_recurring_fee_billing_value end as total_eor_recurring_fee_billing_value,
CASE WHEN billing.transaction_type='CRM' THEN -billing.recurring_eor_billings_value ELSE billing.recurring_eor_billings_value end as recurring_eor_billings_value,
CASE WHEN billing.transaction_type='CRM' THEN -billing.recurring_contractor_revenue ELSE billing.recurring_contractor_revenue end as recurring_contractor_revenue
FROM gp_prod.gold_kpi.billing_kpi_view as billing
WHERE billing.accounting_period is not null
ORDER BY 1"
6a278c31-6acb-a53c-1a93-eeaad697ce18,Polaris KPIs - Phase 1,databricks,"--4.1 Active Prof Recurring Fees
WITH billings as (
SELECT  
CONCAT(RIGHT(b.accounting_period,4),'-',LEFT(b.accounting_period,2),'-01')::date AS period_date,
b.project_id,
b.customer_name as Client_Name,


CASE WHEN b.transaction_type ='CRM' THEN 
CASE WHEN b.recurring_detailed_category IN ('Fees EOR MGMT FEE') 
and (b.service_class == ""EOR"" or b.service_class is null)
THEN -b.extended_amount_in_company_base_currency else 0  end 
ELSE
CASE WHEN b.recurring_detailed_category IN ('Fees EOR MGMT FEE') 
and (b.service_class == ""EOR"" or b.service_class is null)
THEN b.extended_amount_in_company_base_currency else 0 end end
as Recurring_EOR_Platform_Fee_Billings_USD,


CASE WHEN b.transaction_type ='CRM' THEN
CASE WHEN b.recurring_detailed_category IN ('Fee EOR CURRENCY TRANSACTION FEE','Fees EOR OTHER FEES',
'Fee EOR EMPLOYER BURDEN MARK-UP','Fee EOR INSURANCE MARK-UP') 
and (b.service_class == ""EOR"" or b.service_class is null)
THEN -b.extended_amount_in_company_base_currency else 0 end
ELSE
CASE WHEN b.recurring_detailed_category IN ('Fee EOR CURRENCY TRANSACTION FEE','Fees EOR OTHER FEES',
'Fee EOR EMPLOYER BURDEN MARK-UP','Fee EOR INSURANCE MARK-UP') 
and (b.service_class == ""EOR"" or b.service_class is null)
THEN b.extended_amount_in_company_base_currency else 0 end end
as Recurring_EOR_Transaction_Fee_Billings_USD,

CASE WHEN b.transaction_type ='CRM' THEN 
CASE WHEN b.recurring_category in (""Recurring Fees and Mark-ups"")  
THEN -b.extended_amount_in_company_base_currency else 0 end 
ELSE
CASE WHEN b.recurring_category in (""Recurring Fees and Mark-ups"")
THEN b.extended_amount_in_company_base_currency else 0 end end
as Total_Recurring_Fees_USD

FROM gp_prod.gold_kpi.billing_kpi_view  as b
WHERE b.accounting_period is not null
--where accounting_period='04-2023' 
--GROUP BY 1,2,3,4
ORDER BY 1,2)

SELECT 
period_date,
project_id,
Client_Name,

SUM(Recurring_EOR_Platform_Fee_Billings_USD) as Recurring_EOR_Platform_Fee_Billings_USD,
SUM(Recurring_EOR_Transaction_Fee_Billings_USD) as Recurring_EOR_Transaction_Fee_Billings_USD,
SUM(Total_Recurring_Fees_USD) as Total_Recurring_Fees_USD,
CASE WHEN SUM(Recurring_EOR_Platform_Fee_Billings_USD) + SUM(Recurring_EOR_Transaction_Fee_Billings_USD) >>0 THEN 1 else 0 end as Active_EOR_Professional
FROM billings
WHERE period_date>>='2020-01-01'
GROUP BY 1,2,3
ORDER BY 1"
6a278c31-6acb-a53c-1a93-eeaad697ce18,Polaris KPIs - Phase 1,databricks,"--Retention
SELECT CONCAT(RIGHT(cr.accounting_period,4),'-',LEFT(cr.accounting_period,2),'-01')::date AS period_date,
cr.useful_life,
cr.churn as customer_churn,
cr.annual_gross_revenue_churn,
churn_c.churn_count,
cr.retention as customer_retention,
pr.retention as professional_retention,
try_divide(pr.active_now_and_year_ago, cr.active_now_and_year_ago) AS profs_per_customer
FROM gp_prod.gold_kpi.eor_customer_retention_rate_summary_view as cr
LEFT JOIN
(
SELECT accounting_period, COUNT(*)::int AS churn_count
FROM gp_prod.gold_kpi.customer_active_product_mix_view 
WHERE last_month_active='true'
GROUP BY accounting_period
ORDER BY 1
) AS churn_c USING(accounting_period)
LEFT JOIN gp_prod.gold_kpi.professional_retention_rate_summary_view as pr
ON cr.accounting_period=pr.accounting_period"
6a278c31-6acb-a53c-1a93-eeaad697ce18,Polaris KPIs - Phase 1,databricks,"--Marketing
SELECT CONCAT(RIGHT(mfv.month_period,4),'-',LEFT(mfv.month_period,2),'-01')::date AS period_date,
mfv.MSA_count,mfv.SAL_count,mfv.SQL_count,mfv.MQL_count,
mfv.avg_MQL_MSA,
mfv.avg_MQL_SQL,
mfv.avg_SQL_SAL,
mfv.avg_SAL_MSA,
mfc.MQL_SQL_conversion_rate,mfc.SQL_SAL_conversion_rate,mfc.SAL_MSA_conversion_rate
FROM gp_prod.gold_marketing.marketing_funnel_view as mfv
LEFT JOIN gp_prod.gold_marketing.funnel_conversion_view mfc
ON mfv.month_period=mfc.month_period"
6a278c31-6acb-a53c-1a93-eeaad697ce18,Polaris KPIs - Phase 1,databricks,"WITH p AS (
SELECT ps.accounting_period, ps.gp_customer_accounting_id,
COUNT (distinct ps.project_id) AS active_professional_count
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view AS ps
WHERE total >> 0
GROUP BY ps.accounting_period, ps.gp_customer_accounting_id
)
,
A AS(
SELECT b.accounting_period,
--CONCAT(right(b.accounting_period,4),'-',left(b.accounting_period,2),'-01')::date AS period_date,
--datediff(MONTH, c.first_fee_paid_date, CONCAT(right(b.accounting_period,4),'-',left(b.accounting_period,2),'-01')::date) AS months,
b.gp_customer_accounting_id,
b.total AS month_revenue,
--c.first_fee_paid_date,
p.active_professional_count
FROM gp_prod.gold_kpi.customer_monthly_billing_summary_view AS b
LEFT JOIN gp_prod.gold_kpi.customer_kpi_view AS c USING (gp_customer_accounting_id)
LEFT JOIN p ON p.gp_customer_accounting_id = b.gp_customer_accounting_id AND p.accounting_period = b.accounting_period
WHERE 
datediff(MONTH, c.first_fee_paid_date, CONCAT(right(b.accounting_period,4),'-',left(b.accounting_period,2),'-01')::date) >>= 12

)
,
B AS(
SELECT A.accounting_period,
count(DISTINCT gp_customer_accounting_id) AS customer_count,
sum(month_revenue) AS revenue,
sum(active_professional_count) AS professionals
FROM A
GROUP BY A.accounting_period
)


SELECT
CONCAT(RIGHT(B.accounting_period,4),'-',LEFT(B.accounting_period,2),'-01')::date AS period_date,
B.customer_count,
B.revenue,
B.professionals,
B.professionals/B.customer_count AS prof_per_cust,
B.revenue/B.customer_count AS revenue_per_cust,
B.revenue/B.professionals AS revenue_per_prof
FROM B

ORDER BY 1"
6a278c31-6acb-a53c-1a93-eeaad697ce18,Polaris KPIs - Phase 1,databricks,"SELECT pmbs.period_date,fkpi.ledger_revenue,
pmbs.total_billing_value,pmbs.total_eor_billing_value,
pmbs.total_contractor_billing_value,
cmbs.take_rate,
cmbs_uat.total_setup_fees_revenue
FROM(
   SELECT
    CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
    sum(total) AS total_billing_value, 
    sum(total_eor_recurring_fee_billing_value) AS total_eor_billing_value,
    sum(total_recurring_contractor_revenue) AS total_contractor_billing_value
    FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view
    GROUP BY period_date) as pmbs
LEFT JOIN(
    SELECT 
    CONCAT(RIGHT(ledger_period,4),'-',LEFT(ledger_period,2),'-01')::date AS period_date,
    value AS ledger_revenue
    FROM gp_prod.gold_kpi.finance_gl_kpi_aggregate_view
    WHERE finance_kpi = 'revenue') as fkpi
ON fkpi.period_date=pmbs.period_date
LEFT JOIN (
    SELECT CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
    AVG(take_rate) as take_rate
    FROM gp_prod.gold_kpi.customer_monthly_billing_summary_view
    GROUP BY 1
    ORDER BY 1
    ) as cmbs
ON cmbs.period_date=pmbs.period_date
LEFT JOIN (
    SELECT CONCAT(RIGHT(a.accounting_period,4),'-',LEFT(a.accounting_period,2),'-01')::date AS period_date,
    SUM(a.total_setup_fees_revenue) as total_setup_fees_revenue
    FROM gp_uat.gold_kpi.customer_monthly_billing_summary_view as a
    LEFT JOIN gp_prod.gold_kpi.customer_active_product_mix_view as b
    ON (a.accounting_period=b.accounting_period and a.gp_customer_accounting_id=b.gp_customer_accounting_id)
    WHERE b.new_eor=True
    GROUP BY 1
    ORDER BY 1
    ) as cmbs_uat
ON cmbs_uat.period_date=pmbs.period_date
WHERE pmbs.period_date is not null
ORDER BY 1"
6a278c31-6acb-a53c-1a93-eeaad697ce18,Polaris KPIs - Phase 1,databricks,"--------Counts
WITH eor_prof as (
--eor professionals
SELECT 
CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,accounting_period,
COUNT(DISTINCT(project_id)) as active_professional_eor_count
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view 
WHERE total_eor_recurring_fee_billing_value >> 0 
GROUP BY 1,2
ORDER BY 1),

--contractor
contractor as(
SELECT 
CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,accounting_period,
COUNT(DISTINCT(project_id)) as active_professional_contracted_count
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view
WHERE total_recurring_contractor_revenue  >> 0 
GROUP BY 1,2
ORDER BY 1),

total_prof as (
--total
SELECT 
CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,accounting_period,
COUNT(DISTINCT(project_id)) as active_professional_count
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view
WHERE total  >> 0 
GROUP BY 1,2
ORDER BY 1)

SELECT
CONCAT(RIGHT(cmbc.accounting_period,4),'-',LEFT(cmbc.accounting_period,2),'-01')::date AS period_date,
cmbc.active_customer_eor_count,
cmbc.active_customer_count,
cmbc.TTM_average_recurring_revenue,
a.active_professional_count,
b.active_professional_eor_count,
c.active_professional_contracted_count,
pmbc.failed_to_launch_volume
FROM gp_prod.gold_kpi.customer_monthly_billing_counts_view as cmbc
LEFT JOIN total_prof as a
ON cmbc.accounting_period=a.accounting_period
LEFT JOIN eor_prof as b
ON cmbc.accounting_period=b.accounting_period
LEFT JOIN contractor as c
ON cmbc.accounting_period=c.accounting_period
LEFT JOIN gp_prod.gold_kpi.professional_monthly_billing_counts_view as pmbc
ON cmbc.accounting_period=pmbc.accounting_period
ORDER BY 1"
6a278c31-6acb-a53c-1a93-eeaad697ce18,Polaris KPIs - Phase 1,databricks,"--Employees
SELECT CONCAT(RIGHT(hc.accounting_period,4),'-',LEFT(hc.accounting_period,2),'-01')::date AS period_date,
hc.worker_headcount,
hc.employee_headcount
FROM gp_prod.gold_kpi.employee_monthly_headcount_view as hc"
6add65f6-74dc-ae6b-1a2b-5ab4d8b5e46e,Custom SQL Query (gpbidb),postgres,"WITH 

CR AS (
	SELECT 
		a.professional_id, a.client_person_id, CONCAT (b.first_name, ' ', b.last_name)AS user_name, c.email,
    CASE 
		WHEN a.role='6' THEN 'AccountsPayable'
		WHEN a.role='1' THEN 'Client Admin'
		WHEN a.role='4' THEN'Expense Approver 1'
		WHEN a.role='10' THEN 'Expense Approver 2'
		WHEN a.role='13' THEN 'GP Submit Repor Administrator'
		WHEN a.role='2' THEN'Human Resources'
		WHEN a.role='12' THEN 'Invoice Details'
		WHEN a.role='3' THEN 'Payroll Approver'
		WHEN a.role='5' THEN 'PTO Approver'
		WHEN a.role='11' THEN 'RECRUITGLOBAL'
		WHEN a.role='7' THEN 'Stakeholder'
		WHEN a.role='8' THEN 'Supervisor Manager'
		WHEN a.role='9' THEN 'Unassigned'
	END AS Role
	FROM goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current AS a
	INNER JOIN goglobal_gp_goglobal.v_gp_gg_client_person_current AS b
	ON a.client_person_id = b.id
	INNER JOIN goglobal_gp_goglobal.v_gp_gg_user_current AS c
	ON b.user_id = c.id
	ORDER BY a.professional_id
)

,benefit as	(
	SELECT 
		b.id,
		c.name as Country, 
		customer_benefit_offering_id , 
		professional_external_id, 
		bt.name as Benefit_type,
		b.name as plan_name,
		btp.status,
		bct.mandatory as plan_type,
		b.active,
		bp.name,
		bp.contact_person,
		bp.email,
		bb.name as broker,
		bb.contact_person as broker_contact,
		bb.email as broker_contact_email,
		btp.enrollment_date,
		btp.unenrollment_date,
		bt.billing_transaction_type_external_id

	FROM benefits_gp_benefits.v_benefits_professional_benefit_enrollment_current btp
	LEFT JOIN benefits_gp_benefits.v_benefits_country_benefit_type_current as bct
	on btp.country_benefit_type_id= bct.id
	left join goglobal_gp_goglobal.v_gp_gg_country_current c
	on bct.country_external_id::integer = c.id
	left join benefits_gp_benefits.v_benefits_benefit_type_current bt
	on bt.id=bct.benefit_type_id
	left join benefits_gp_benefits.v_benefits_benefit_current b
	on btp.benefit_id = b.id
	left join benefits_gp_benefits.v_benefits_benefit_provider_current bp
	on b.benefit_provider_id = bp.id
	left join benefits_gp_benefits.v_benefits_benefit_broker_current bb
	on b.benefit_broker_id = bb.id	
)

-- ,workday as (
-- 	select 
-- 		gp_users.id as gp_id
-- 		--,gp_users.*
-- 		--,correo.email
-- 		,workday.*
-- 	from goglobal_gp_goglobal.v_gp_gg_gp_person_current gp_users
-- 	left join goglobal_gp_goglobal.v_gp_gg_user_current correo on gp_users.id=correo.id
-- 	left join workday_hris.v_non_sensitive_workday_data workday on workday.""Work Contact: Work Email""=correo.email
-- )

SELECT 
	professionals.client_id
	,professionals.internal_id AS professional_id
	,professionals.external_id
	,CASE
        WHEN  professionals.goes_by is null then CONCAT(professionals.first_name, ' ',professionals.last_name)
	    ELSE CONCAT(professionals.first_name, ' ',professionals.last_name,' (',professionals.goes_by,')') 
    END AS professional_name
	
	,professionals.first_name
	,professionals.last_name
	,professionals.goes_by
	,professionals.accounting_id
	,professionals.job_category
	,professionals.title
	,professionals.birth_date
	,professionals.contract_start_date
	,professionals.contract_end_date
	,AGE(professionals.contract_end_date, professionals.contract_start_date) AS contract_duration
	,professionals.payroll_start_date
	,professionals.payroll_end_date
	,professionals.is_contract_prob_period_applies
	,professionals.contract_prob_period_end_date
	,AGE (professionals.contract_prob_period_end_date, professionals.contract_start_date) AS probation_duration
	,professionals.is_fixed_term_emp_contract
	,professionals.status
	,professionals.is_failed_to_launch
	,professionals.pto_days_allotted
	,professionals.residency_status
	,professionals.contract_notes
	,professionals.right_to_work_in_work_country
	,professionals.is_visa_sponsorship_required
	,professionals.is_sponsorship_visa_for_dependants_required
	,professionals.is_sponsoring_visa
	,professionals.is_sponsorship_visa_for_dependants
	,professionals.sponsoring_visa_notes
	,professionals.po_number
	,professionals.sponsoring_visa_expire_date
	,professionals.work_email
	,professionals.personal_email
	,professionals.is_gp_recruit
	,professionals.initial_information_collected_date
	,professionals.emergency_email
	,professionals.emergency_name
	,professionals.emergency_phone
	,professionals.mobile_phone
	,professionals.service_class
	,professionals.preferred_pronoun
	,professionals.lsp_professional_id

	-- en master_profs usando: goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current UNIENDO CON id
	,professionals.offboard_start_date
	,professionals.offboard_end_date
	,professionals.offboarding_notes
	,professionals.offboard_method_type as method_type
	,professionals.offboard_reason_type as reason_type
	,professionals.will_be_backfilling_this_position

	-- en master_profs usando: goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current UNIENDO CON id
	,professionals.onboard_start_date
	,professionals.onboard_end_date
	,professionals.ofac_date_completed
	,professionals.sent_ee_date_signed
	,professionals.sent_client_date_approved

	-- en master_profs usando: address_current, country_current y province_current
	,professionals.home_address_1
	,professionals.home_address_2
	,professionals.home_address_3
    ,professionals.home_city
    ,professionals.home_postalcode
	,professionals.home_country
	,professionals.home_state_province AS home_province

	-- en master_profs
    ,professionals.billing_manager
    ,professionals.offboard_lead
    ,professionals.onboard_lead
    ,professionals.LSP_status
	,professionals.related_lsp AS Lsp --- SE CONSTRUYE DE professionals.lsp_status EL PRIMER ELEMENTO DE SPLIT(' - ')
	,professionals.related_lsp
	,professionals.employment_country as professional_working_country
	,professionals.employment_country_region as professional_working_region
	,professionals.work_address_1
	,professionals.work_address_2
	,professionals.work_address_3
	,professionals.work_city
	,professionals.work_postalcode
	,professionals.work_address_country as work_country
	,professionals.work_state_province AS work_province
	,professionals.citizenship
	,professionals.personal_email AS prof_user_email
	,professionals.email_preferred_for_login
	,professionals.client
	,professionals.onboard_person_id
	,professionals.offboard_person_id
	
	------------------------------
	,p.work_address_id
	,p.home_address_id
	,p.gp_onboard_lead_id
        ,p.gp_offboard_lead_id

	------------------------------
	,concat(person_current.first_name,' ',person_current.last_name) AS OFAC_completed_by

	,Supervisor.user_name as Supervisor
	,Supervisor.email as Supervisor_Email

	------------------------------
	,HR.user_name as Human_Resorces
	,HR.email as HR_Email
	
	------------------------------
	,EA1.user_name as Expense_Approver1
	,EA1.email as EA_Email
	
	------------------------------
	,EA2.user_name as Expense_Approver2
	,EA2.email as EA2_Email
	
	------------------------------
	,PA.user_name as Payroll_Approver
	,PA.email as Payroll_Email

	------------------------------
	,PTO.user_name as PTO_Approver
	,PTO.email as PTO_Email
	
	------------------------------
	,benefit.id as benefit_id
	,benefit.Country as benefit_country
	,benefit.Benefit_type
	,benefit.plan_name
	,benefit.plan_type
	,benefit.status as benefit_status
	,benefit.active as Benefit_is_active
	,benefit.name as Benefit_Provider
	,benefit.contact_person as Benefit_provider_contact
	,benefit.email as B_provider_email
	,benefit.name as B_broker
	,benefit.contact_person as B_broker_contact
	,benefit.email as B_broker_contact_email
	,benefit.enrollment_date as Benefit_enrollment_date
	,benefit.unenrollment_date as Benefit_unenrollment_date

	------------------------------
	,concat(p20.name,' - ', p21.name) as funded_lsp
	
	------------------------------
	,date_modified.min as Moved_to_status_date
	
	------------------------------
	,gender.value AS gender


	----------- WORKDAY ONBOARD LEAD
	-- ,workday_onboard_lead.""Associate ID"" as workday_onboard_lead__associate_id
	-- ,workday_onboard_lead.""Payroll Name"" as workday_onboard_lead__payroll_name
	-- ,workday_onboard_lead.""Business Unit Description"" as workday_onboard_lead__business_unit_description
	-- ,workday_onboard_lead.""Home Department Description"" as workday_onboard_lead__home_department_description
	-- ,workday_onboard_lead.""Job Title Description"" as workday_onboard_lead__job_title_description
	-- ,workday_onboard_lead.""Worked In Country"" as workday_onboard_lead__worked_in_country
	-- ,workday_onboard_lead.""region"" as workday_onboard_lead__region
	-- ,workday_onboard_lead.""Status"" as workday_onboard_lead__status
	-- ,workday_onboard_lead.""Hire Date"" as workday_onboard_lead__hire_date
	-- ,workday_onboard_lead.""Reports To Name"" as workday_onboard_lead__reports_to_name
	-- ,workday_onboard_lead.""Reports To Associate ID"" as workday_onboard_lead__reports_to_associate_id
	-- ,workday_onboard_lead.""Work Contact: Work Email"" as workday_onboard_lead__work_contact_work_email

	----------- WORKDAY OFFBOARD LEAD
	-- ,workday_offboard_lead.""Associate ID"" as workday_offboard_lead__associate_id
	-- ,workday_offboard_lead.""Payroll Name"" as workday_offboard_lead__payroll_name
	-- ,workday_offboard_lead.""Business Unit Description"" as workday_offboard_lead__business_unit_description
	-- ,workday_offboard_lead.""Home Department Description"" as workday_offboard_lead__home_department_description
	-- ,workday_offboard_lead.""Job Title Description"" as workday_offboard_lead__job_title_description
	-- ,workday_offboard_lead.""Worked In Country"" as workday_offboard_lead__worked_in_country
	-- ,workday_offboard_lead.""region"" as workday_offboard_lead__region
	-- ,workday_offboard_lead.""Status"" as workday_offboard_lead__status
	-- ,workday_offboard_lead.""Hire Date"" as workday_offboard_lead__hire_date
	-- ,workday_offboard_lead.""Reports To Name"" as workday_offboard_lead__reports_to_name
	-- ,workday_offboard_lead.""Reports To Associate ID"" as workday_offboard_lead__reports_to_associate_id
	-- ,workday_offboard_lead.""Work Contact: Work Email"" as workday_offboard_lead__work_contact_work_email
	


FROM goglobal_gp_goglobal.v_gp_gg_master_professional AS professionals -- 22,475
left join goglobal_gp_goglobal.v_gp_gg_professional_current AS p 
on p.id=professionals.internal_id -- 22,475

-------- UNIONES NECESARIAS 
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current AS onboard
ON p.professional_onboarding_id = onboard.id -- 22,475
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_gp_person_current person_current
on onboard.gp_ofac_completed_by = person_current.id -- 22,475

-------- PARA HACER EL funded_lsp
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_lsp_country_current p19
on p.funded_lsp_country_id = p19.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_current p20
on p19.lsp_id=p20.id 
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_country_current as p21
on p19.country_id = p21.id

--------------------------------------------------------------------------------
LEFT JOIN benefit 
on p.id = benefit.professional_external_id::integer 

LEFT JOIN (
	Select * FROM CR
	WHERE Role = 'Supervisor Manager'
) as Supervisor on p.id = Supervisor.professional_id

LEFT JOIN (
	Select * FROM CR
	WHERE Role = 'Human Resources'
) as HR on  HR.professional_id = p.id

LEFT JOIN (
	Select * FROM CR
	WHERE Role = 'Expense Approver 1'
) as EA1 on EA1.professional_id= p.id

LEFT JOIN (
	Select * FROM CR
	WHERE Role = 'Expense Approver 2'
) as EA2 on  EA2.professional_id= p.id
	
LEFT JOIN (
	Select * FROM CR
	WHERE Role = 'Payroll Approver'
) as PA on  PA.professional_id	= p.id

LEFT JOIN (
Select * FROM CR
	WHERE Role = 'PTO Approver'
) as PTO on PTO.professional_id	= p.id

LEFT JOIN (
	SELECT  id, status, MIN(date_modified)
	FROM goglobal_gp_goglobal.professional_aud
	group by 1,2
) as date_modified on p.id = date_modified.id and p.status = date_modified.status

LEFT JOIN
(
	SELECT professional_id, country_custom_field_id, value
	FROM goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current
	WHERE country_custom_field_id IN (180,181,107,141)
) AS gender 
ON p.id = gender.professional_id

-- left join workday as workday_onboard_lead on workday_onboard_lead.gp_id=professionals.onboard_person_id
-- left join workday as workday_offboard_lead on workday_onboard_lead.gp_id=professionals.offboard_person_id"
6add65f6-74dc-ae6b-1a2b-5ab4d8b5e46e,Custom SQL Query (gpbidb),postgres,"WITH
cc_role as (
	SELECT  
        distinct t2.id as client_id
        ,t2.name as client
        ,a.id as client_user_id
        ,is_no_longer_with_firm
        ,first_name
        ,last_name
        ,concat(first_name,' ', last_name) as user
        ,title
        ,regexp_split_to_table(a.roles, ',') AS roles
        ,case 
            when (a.roles LIKE '1%' and a.roles LIKE '%1' and a.roles not LIKE '%11' and a.roles not LIKE '%1_' and a.roles not like '%,%' ) then 'only_company_admin'
	        when (roles not LIKE '%1,%' and roles not LIKE '%,1') then 'not_company_admins'
	        else 'company_admin' 
        end as c_a_ind
        ,t3.email as User_EMAIL
        ,t3.status
        ,A.IS_ENABLED
        ,T3.LAST_LOGIN_DATE
        ,a.date_created
	from goglobal_gp_goglobal.v_gp_gg_client_person_current  a
    left join goglobal_gp_goglobal.v_gp_gg_client_current t2
    on a.client_id = t2.id
    left join goglobal_gp_goglobal.v_gp_gg_user_current t3
    on a.user_id = t3.id where t2.is_demo_client='false' 
)

,DnB as  (
    Select Distinct 
        Customer_Base.""GPP Customer ID"" as DnB_GPP_Customer_id, 
        Customer_Base.""GPP Customer Name"" as DnB_GPP_Customer_Name, 
        Customer_Base.""DUNS Number"" as Duns_number,
        Yearly_Revenue.""financials_yearlyRevenue_value"" as DnB_Yearly_Revenue_USD,
        Customer_Base.run_date as DnB_run_date, 
        First.""numberOfEmployees_value"" as DnB_Individual_HC, 
        Second.""numberOfEmployees_value"" as DnB_Consolidated_HC,
        Third.""numberOfEmployees_value"" as DnB_HQ_Only_Employs_Here
    From dnb.gpp_clients_duns_numbers Customer_Base
    Left Join dnb.""ci_financials_yearlyRevenue"" Yearly_Revenue on Customer_Base.""DUNS Number"" = Yearly_Revenue.Duns_number and Yearly_Revenue.""financials_yearlyRevenue_currency"" = 'USD'
    Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9066 ) First  on Customer_Base.""DUNS Number"" = First.Duns_number
    Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9067 ) Second on Customer_Base.""DUNS Number"" = Second.Duns_number
    Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9068 ) Third  on Customer_Base.""DUNS Number"" = Third.Duns_number
    Order by Customer_Base.""GPP Customer ID"" asc
),

historic_client_users as (
	With client_users as
	(
		select DISTINCT cpa.ID,
			   cpa.user_id,
			   regexp_split_to_table(cpa.roles, ',') AS rol,
			   cpa.MODIFIED_BY,
			   CASE WHEN cp.USER_ID IS NULL THEN concat(gpp.first_name,' ',gpp.last_name)
					ELSE concat(cp.first_name,' ',cp.last_name)
			   END AS Modified,
			   CASE WHEN cp.USER_ID IS NULL and gpp.user_id is not null THEN 'GP Person'
					WHEN gpp.USER_ID IS NULL and cp.user_id is not null THEN 'Client Person'
					WHEN gpp.USER_ID IS not NULL and cp.user_id is not null THEN 'Both'
					ELSE 'None'
			   END AS Modified_person,
			   CASE WHEN cp.USER_ID IS NULL and gpp.user_id is not null THEN gpp.is_enabled
					WHEN gpp.USER_ID IS NULL and cp.user_id is not null THEN cp.is_enabled
					WHEN gpp.USER_ID IS not NULL and cp.user_id is not null THEN gpp.is_enabled
			   END AS Modifier_is_enabled,
			   cpa.DATE_MODIFIED,
			   row_number()over (partition by cpa.id,regexp_split_to_table(cpa.roles, ',') order by cpa.date_modified) as Row
		from goglobal_gp_goglobal.client_person_aud cpa
		left join (SELECT *
				   FROM goglobal_gp_goglobal.V_GP_GG_client_person_CURRENT) cp on cpa.modified_by=cp.user_id
		left join (SELECT *
				   FROM goglobal_gp_goglobal.V_GP_GG_gp_person_CURRENT) gpp on cpa.modified_by=gpp.user_id
		)
	select *
	from client_users where row='1'		
)
	
SELECT 
	master_client.id AS customer_id
	,master_client.name AS customer_name
	,master_client.pricing_model
	,master_client.status as customer_status
	,master_client.accumatica_id AS customer_accumaticaid
	,master_client.msa_contract_start_date_peo AS msa_contract_start_date_peo 
    ,master_client.msa_contract_start_date_services AS service_contract_date
    ,master_client.msa_contract_start_date_aso AS aso_contract_date  
	,master_client.is_demo_client
	,master_client.is_gp_contractor_customer
	,master_client.ma_contract_country AS client_msa_contract_country -- REGION DEL MSA
	,master_client.legal_entity_name 
	,master_client.partner_referral as partner_referral_name
	,master_client.billing_city as customer_city
	,master_client.billing_address1 as customer_address1
	,master_client.billing_address2 as customer_address2
	,master_client.billing_address3 as customer_address3
	,master_client.billing_country as customer_country
	,master_client.billing_region as customer_region
	,master_client.billing_province as customer_province
	,master_client.industry AS customer_industry
	,master_client.account_manager
	,master_client.account_executive as current_sales_rep
	,master_client.original_sales_rep
	,master_client.payment_method
	,master_client.term_days
	,master_client.term_calendar
    ,master_client.monthly_payroll_changes_due
    ,master_client.bimonthly_payroll_changes_due_one
    ,master_client.bimonthly_payroll_changes_due_two

	------------- POR AGREGAR A master_client
	,cc.tier_type AS customer_gpp_tier
	,cc.website

	------------- COMBINACION DE current_client y otras tablas
	,case 
		when cc.price_book_id is null then 'Pricebook 2020'
		else pb.name
	end as Pricebook

	
	
	------------- SE PUEDEN AGREGAR CON LOS JOINS DE master_client
	----------------------------------------
	,cc3.country_code AS customer_country_code
	----------------------------------------
	,cc11.gp_region AS Working_region
	,cc11.name as working_country
	
	----------------------------------------
	,cc10.country_id
	,cc10.addendum_enrollment_date
	,cc10.is_original_msa
	,cc10.original_forecast

	----------------------------------------
	,hd.Current_Month_PoP

	----------------------------------------
	,markup_premium.markup_transaction_amt as markup_premium_amount

	----------------------------------------
	,currency.currency_name AS customer_billing_currency
	
	----------- CAMPOS QUE VIENEN DE RESIDENTES
	----------------------------------------
	,cc_role.client_user_id
	,cc_role.first_name as client_user_first_name
	,cc_role.last_name as client_user_last_name
	,cc_role.user as client_user
	,cc_role.is_no_longer_with_firm
	,cc_role.date_created as date_created_client_user
	,cc_role.c_a_ind
	,cc_role.title as client_user_title
	,cc_role.User_EMAIL as client_user_email
	,cc_role.status
	,CC_ROLE.IS_ENABLED
	,CC_ROLE.LAST_LOGIN_DATE
	,CASE 
		WHEN cc_role.roles='6' THEN 'AccountsPayable'
		WHEN cc_role.roles='1' THEN 'Client Admin'
		WHEN cc_role.roles='4' THEN'Expense Approver 1'
		WHEN cc_role.roles='10' THEN 'Expense Approver 2'
		WHEN cc_role.roles='13' THEN 'GP Submit Repor Administrator'
		WHEN cc_role.roles='2' THEN'Human Resources'
		WHEN cc_role.roles='12' THEN 'Invoice Details'
		WHEN cc_role.roles='3' THEN 'Payroll Approver'
		WHEN cc_role.roles='5' THEN 'PTO Approver'
		WHEN cc_role.roles='11' THEN 'RECRUITGLOBAL'
		WHEN cc_role.roles='7' THEN 'Stakeholder'
		WHEN cc_role.roles='8' THEN 'Supervisor Manager'
		WHEN cc_role.roles='9' THEN 'Unassigned'
		WHEN cc_role.roles = '14' THEN 'Time - Proxy Approver'
		WHEN cc_role.roles = '15' THEN 'Expense - Proxy Approver'
		WHEN cc_role.roles = '17' THEN 'Time and Expense Report Admin'
	END AS Role

	----------------------------------------
	,historic_client_users.date_modified as date_created_role
	,historic_client_users.modified role_modified_by
	,historic_client_users.modified_person
	,historic_client_users.Modifier_is_enabled

	----------------------------------------
	,DnB.*
	,user_current.email as current_sales_rep_email
        ,cc.salesforce_account_id

--- master client y lo que falte agregar de v_gp_gg_client_current
FROM goglobal_gp_goglobal.v_gp_gg_master_client AS master_client
left join goglobal_gp_goglobal.v_gp_gg_client_current AS cc on cc.id=master_client.id
left join goglobal_gp_goglobal.price_books pb on cc.price_book_id=pb.id

LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS currency ON cc.preferring_billing_currency = currency.id

LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current AS cc10 on cc.id = cc10.client_id
left join (
	select * from goglobal_gp_goglobal.v_gp_gg_client_country_markup_transaction_current
	where markup_transaction_id='1'
) markup_premium on cc10.id = markup_premium.client_country_id

---- JOINS NECESARIOS
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS cc2 ON cc.billing_address_id = cc2.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS cc3 ON cc2.country_id=cc3.id


LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_country_current AS cc11 on cc10.country_id = cc11.id
LEFT JOIN (
	SELECT client_id, country_name, COUNT(DISTINCT professional_id)AS Current_Month_PoP
	FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard hd
	WHERE active_flag = 'Active'
	AND DATE_TRUNC ('month', hd.cal_date) = DATE_TRUNC ('month', CURRENT_DATE)
	GROUP BY 1,2
) AS hd ON cc10.client_id = hd.client_id AND cc11.name = hd.country_name

---- JOINS CON RESIDENTES
LEFT JOIN cc_role on cc.id = cc_role.client_id
left join historic_client_users on cc_role.client_user_id=historic_client_users.id and cc_role.roles=historic_client_users.rol
Left Join DnB on DnB.DnB_GPP_Customer_id = CC.id


--- PARA AGREGAR EMAIL DE ACCOUNT EXECUTIVE
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current customer_csr ON cc.gp_current_sales_rep_id = customer_csr.id
left join goglobal_gp_goglobal.v_gp_gg_user_current user_current on user_current.id=customer_csr.user_id"
6add65f6-74dc-ae6b-1a2b-5ab4d8b5e46e,Custom SQL Query (gpbidb),postgres,"WITH GPP AS (
	SELECT DISTINCT 
	   mp.onboard_lead,
	   mp.onboard_person_id,
	   person.first_name,
	   person.last_name,
	   person.user_id,
	   users.email,
	   split_part(LOWER(users.email), '@', 1) AS split_email
	FROM goglobal_gp_goglobal.v_gp_gg_master_professional AS mp
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current As person ON mp.onboard_person_id = person.id
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_user_current AS users On person.user_id = users.id
	WHERE 
		mp.is_demo_client= FALSE
		AND mp.is_failed_to_launch = FALSE
		AND mp.onboard_person_id IS NOT NULL
	ORDER BY 1
)

,WORKDAY AS (
	SELECT 
		wd.*
		,split_part(LOWER(""Work Contact: Work Email""), '@', 1) AS SPLIT_EMAIL
	FROM workday_hris.v_non_sensitive_workday_data AS wd
)

SELECT 
	gpp.onboard_person_id as onboard_person_id
	--,gpp.onboard_lead 
	,workday.""Work Contact: Work Email"" as workday_onboard_lead__work_contact_work_email
	,workday.""Associate ID"" as workday_onboard_lead__associate_id
	,workday.""Payroll Name"" as workday_onboard_lead__payroll_name
	,workday.""Business Unit Description"" as workday_onboard_lead__business_unit_description
	,workday.""Home Department Description"" as workday_onboard_lead__home_department_description
	,workday.""Job Title Description"" as workday_onboard_lead__job_title_description
	,workday.""Worked In Country"" as workday_onboard_lead__worked_in_country
	,workday.""region"" as workday_onboard_lead__region
	,workday.""Status"" as workday_onboard_lead__status
	,workday.""Hire Date"" as workday_onboard_lead__hire_date
	,workday.""Reports To Name"" as workday_onboard_lead__reports_to_name
	,workday.""Reports To Associate ID"" as workday_onboard_lead__reports_to_associate_id
FROM GPP
LEFT JOIN WORKDAY ON GPP.SPLIT_EMAIL= WORKDAY.SPLIT_EMAIL
--WHERE ""Associate ID"" IS NULL
order by gpp.onboard_person_id desc"
6add65f6-74dc-ae6b-1a2b-5ab4d8b5e46e,Custom SQL Query (gpbidb),postgres,"WITH GPP AS (
	SELECT DISTINCT 
	   mp.offboard_lead,
	   mp.offboard_person_id,
	   person.first_name,
	   person.last_name,
	   person.user_id,
	   users.email,
	   split_part(LOWER(users.email), '@', 1) AS split_email
	FROM goglobal_gp_goglobal.v_gp_gg_master_professional AS mp
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current As person ON mp.offboard_person_id = person.id
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_user_current AS users On person.user_id = users.id
	WHERE 
		mp.is_demo_client= FALSE
		AND mp.is_failed_to_launch = FALSE
		AND mp.offboard_person_id IS NOT NULL
	ORDER BY 1
)

,WORKDAY AS (
	SELECT 
		wd.*
		,split_part(LOWER(""Work Contact: Work Email""), '@', 1) AS SPLIT_EMAIL
	FROM workday_hris.v_non_sensitive_workday_data AS wd
)

SELECT 
	gpp.offboard_person_id as offboard_person_id
	--,gpp.offboard_lead 
	,workday.""Work Contact: Work Email"" as workday_offboard_lead__work_contact_work_email
	,workday.""Associate ID"" as workday_offboard_lead__associate_id
	,workday.""Payroll Name"" as workday_offboard_lead__payroll_name
	,workday.""Business Unit Description"" as workday_offboard_lead__business_unit_description
	,workday.""Home Department Description"" as workday_offboard_lead__home_department_description
	,workday.""Job Title Description"" as workday_offboard_lead__job_title_description
	,workday.""Worked In Country"" as workday_offboard_lead__worked_in_country
	,workday.""region"" as workday_offboard_lead__region
	,workday.""Status"" as workday_offboard_lead__status
	,workday.""Hire Date"" as workday_offboard_lead__hire_date
	,workday.""Reports To Name"" as workday_offboard_lead__reports_to_name
	,workday.""Reports To Associate ID"" as workday_offboard_lead__reports_to_associate_id
FROM GPP
LEFT JOIN WORKDAY ON GPP.SPLIT_EMAIL= WORKDAY.SPLIT_EMAIL
--WHERE ""Associate ID"" IS NULL
order by gpp.offboard_person_id desc"
6add65f6-74dc-ae6b-1a2b-5ab4d8b5e46e,Custom SQL Query (gpbidb),postgres,"select distinct id as client_person_id, client_id, is_no_longer_with_firm, min(date_modified)
from goglobal_gp_goglobal.client_person_aud
where  is_no_longer_with_firm='true' 
group by 1,2,3"
6add65f6-74dc-ae6b-1a2b-5ab4d8b5e46e,Custom SQL Query (gpbidb),postgres,"SELECT cal_date,
       client_id,
       professional_id,
	   active_flag
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
WHERE cal_date >>= '2022-09-01'
AND cal_date <<= CURRENT_DATE"
6b937802-ac55-9fa0-ed2f-427628ad0bb9,Client Churn,postgres,"WITH client_churn AS(SELECT a.cal_date,
       a.client_id,
	   a.client_name,
	   master.name AS partner_referral_name,			 
	   master.status,
	   master.billing_region AS customer_region,
	   master.billing_country AS customer_country,
	   master.accumatica_id AS acumatica_id,
	   CASE WHEN first_active.client_first_active_flag IS NOT NULL THEN 'Client First Active' END AS client_first_active_flag,
	   CASE WHEN
	     (COUNT(a.active_flag)>>0 AND COUNT(a.active_flag) = COUNT(DISTINCT CASE WHEN a.active_flag IS NOT NULL AND a.termination_flag IS NOT NULL THEN a.professional_id END))
		 THEN 'Client Becoming Inactive' END AS client_becoming_inactive_flag,
	   CASE WHEN (COUNT(a.active_flag))>>0
				  AND (LAG(COUNT(a.termination_flag),1) OVER (PARTITION BY a.client_id ORDER BY a.client_id, a.cal_date)) =
				      (LAG(COUNT(a.professional_id),1)  OVER (PARTITION BY a.client_id ORDER BY a.client_id, a.cal_date))
		THEN 'Became Active Again' END AS client_active_again_flag,
	CASE WHEN COUNT(a.active_flag)>>0 THEN 'Active' END AS client_active

FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_client AS master ON a.client_id = master.id

LEFT JOIN (SELECT 	
		   a.client_id,
		   MIN(a.cal_date) AS client_first_active_flag
		   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS a
		   WHERE a.active_flag IS NOT NULL
		   AND (service_class IS NULL OR service_class <<>> '4')
		   GROUP BY a.client_id)AS first_active
ON a.client_id = first_active.client_id
AND a.cal_date = first_active.client_first_active_flag
	
WHERE (a.new_flag IS NOT NULL
OR a.termination_flag IS NOT NULL
OR a.active_flag IS NOT NULL)
AND a.cal_date <<= CURRENT_DATE					 
AND (a.service_class IS NULL OR a.service_class <<>> '4')
GROUP BY 1,2,3,4,5,6,7,8,9
ORDER BY  a.cal_date)

SELECT *
FROM client_churn
ORDER BY client_id, cal_date"
6b937802-ac55-9fa0-ed2f-427628ad0bb9,Professional Churn,postgres,"WITH title_group AS(SELECT a.id, a.title,
CASE WHEN title ILIKE ('%sales%') THEN 'Sales'
     WHEN title ILIKE ANY (ARRAY['%marketing%', '%Media%', '%Campaign%', '%Communication%', '%Brand%', '%Influencer%','%Growth Market%']) THEN 'Marketing'
     WHEN title ILIKE ANY (ARRAY['%finance%', '%Accounting%', '%Payable%', '%Payments%', '%Tax%', '%financial%']) THEN 'Finance'
	 WHEN title ILIKE ANY(ARRAY['%Business Development%', '%Development Representative%', '%Channel Development%']) THEN 'Business Development'
	 WHEN title ILIKE ANY (ARRAY ['%Solutions Architect%', '%System%', '%IT%', '%Software%', '%Developer%', '%Computer%', '%Technical%','%Technology%', '%Android%', '%Application%','%Test%', '%I.T.%', '%Data Centre Technician%', '%Backend%', '%QA%', '%Tech%', '%Network%', '%DevOps%', '%Engineer%', '%Programmer%']) THEN 'Tech/Engineering'
	 WHEN title ILIKE ANY (ARRAY ['%Consultant%', '%Consulting%']) THEN 'Consulting'

	 WHEN title ILIKE ANY (ARRAY ['%Project Management%', '%Project Manager%']) THEN 'Project Management'
	 WHEN title ILIKE ANY (ARRAY ['%Account Manager%', '%Account Executive%']) THEN 'Account Management'
     WHEN title ILIKE ANY (ARRAY ['%Product Manager%', 'Product']) THEN 'Product'
     WHEN title ILIKE ANY (ARRAY ['%HR%', '%People%', '%Payroll%','%Onboarding%']) THEN 'HR'
	 WHEN title ILIKE ANY (ARRAY ['%legal%', '%counsel%']) THEN 'Legal'
	 WHEN title ILIKE ANY (ARRAY ['%Operations%', '%Customer Success%', '%Manager%', '%Client%']) THEN 'Operations'
	 WHEN title ILIKE ANY (ARRAY ['%Clinical%', '%COVID%', '%Medical%', '%SmileGuide%', '%Health%', '%Wellness%','%Smile%']) THEN 'Clinical/Health Care'
	 WHEN title ILIKE ANY (ARRAY ['%Applied Data%', '%Business Analyst%', '%Business Intelligence%', '%Business Insights%', '%Data Scientist%', '%BI%', '%Data Intelligence%','%Data Analyst%', '%Analyst%']) THEN 'BI'
	 WHEN title ILIKE ANY (ARRAY ['%Customer Service%', '%Customer Support Specialist%', '%Customer Support%', '%Customer Care%', '%Customer Advocate%','%Executive Assistant%', 'Account']) THEN 'Customer Service'
	 WHEN title ILIKE ANY (ARRAY ['%Vice President%', '%VP%', '%CCO%', '%CEO%', '%CFO%', '%Chief%', '%CTO%', '%CPO%', '%President%', '%Head%']) THEN 'C-Suite/Executives'	 
					END AS Job_title_area
FROM goglobal_gp_goglobal.v_gp_gg_professional_current a
		  LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current b
		  ON a.client_id = b.id
WHERE a.service_class <<>> '4'
AND a.is_failed_to_launch = false
AND a.status IN ('4','5')
AND b.is_demo_client = false
ORDER BY 1)

SELECT distinct  a.cal_date, 
       a.client_id,
	   a.client_name,
	   a.client_status_id,
	   cc1.name AS partner_referral_name,
	   a.industry_name,
      a.accounting_id as Pro_Accounting_id,
     cc.accounting_id as Customer_Accounting_id,
       a.professional_id, 
	   CONCAT(a.first_name, ' ', a.last_name)AS prof_name, 
	   b.is_failed_to_launch,
	   a.new_flag,
	   a.active_flag,
	   a.termination_flag,
	   a.payroll_start_date,
	   a.payroll_end_date,
	   a.tenure_months,
	   b.job_category,
	   a.title AS prof_title,
	   a.professional_status_desc,
	   a.country_name AS prof_country,
	   a.region AS professional_working_region,
	   a.annual_base_salary,
	   b.is_guaranteed_salary_increase,
	   b.salary_frequency,
	   a.local_salary_currency_code,
	   a.exchange_rate,
	   a.birth_date,
	   DATE_PART('year', CURRENT_DATE::date) - DATE_PART('year', a.birth_date::date)AS prof_age,
	   b.pto_days_allotted,
	   b.residency_status,	
	   a.offboard_start_date,
	   a.offboard_end_date,
       AGE(a.offboard_end_date, a.offboard_start_date) as offboard_duration,
	   a.reason_type,
	   c.method_type,
	   CASE WHEN a.termination_flag IS NOT NULL THEN a.reason_type END AS termination_reason,
	   c.termination_reason_details,
	   c.will_be_backfilling_this_position,
	   a.offboarding_notes	 ,
	   title_group.job_title_area,
	   python_group_title.""new_title""
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_current AS b
ON a.professional_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current AS c
ON b.professional_offboarding_id=c.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS cc
ON a.client_id = cc.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current AS cc1
ON cc.partners_referral_id = cc1.id
LEFT JOIN title_group
on a.title = title_group.title
LEFT JOIN ""goglobal_gp_goglobal"".""professional_job_title_cleaned"" as python_group_title on a.professional_id = python_group_title.""id""

WHERE (a.new_flag IS NOT NULL
OR a.termination_flag IS NOT NULL
OR a.active_flag IS NOT NULL)
AND a.cal_date <<= CURRENT_DATE
AND b.service_class <<>> '4'
ORDER BY  a.professional_id, a.cal_date"
6bbf7218-e4bb-b57a-1230-8eb6be042f10,Custom SQL Query (gpbidb),postgres,"WITH sfdc as (
			  SELECT customer.id,
					 customer.name,
					 CASE WHEN Customer.salesforce_account_id IS NOT NULL AND mdm2.source_id IS NOT NULL THEN Customer.salesforce_account_id::TEXT
						  WHEN Customer.salesforce_account_id IS NULL AND mdm2.source_id IS NOT NULL THEN mdm2.source_id::TEXT
						  WHEN Customer.salesforce_account_id IS NOT NULL AND mdm2.source_id IS NULL THEN Customer.salesforce_account_id::TEXT
					 END as id_match
			 FROM goglobal_gp_goglobal.v_gp_gg_client_current customer
			 LEFT JOIN repo.v_gp_mdm_customer AS mdm ON customer.id::VARCHAR = mdm.source_id
			 LEFT JOIN (
				 		SELECT *
				 		FROM repo.v_gp_mdm_customer
				 		WHERE source = 'SFDC Customer'
						) AS mdm2 ON mdm.parent_name = mdm2.parent_name
			WHERE customer.is_demo_client = false
			),
sfdc_health as (
				select sfdc.*,
					   sfdc_ac.client_health__c
				from sfdc
				left join salesforce.v_gp_sfdc_account_current sfdc_ac on sfdc.id_match=sfdc_ac.id),
satisfaction AS (
				SELECT id,
					   s.ticket_id,
					   score, created_at, last_date,comment,reason
				FROM ""zendesk"".""satisfaction_rating"" AS s
				INNER JOIN (
							SELECT ticket_id, 
								   MAX(created_at) AS last_date
							FROM ""zendesk"".""satisfaction_rating""
							GROUP BY ticket_id
							) AS m ON (s.ticket_id = m.ticket_id AND created_at = last_date)
				),
gpp_zendesk as (
				SELECT t.id AS ticket_id_ZENDESK,
					   t.id::TEXT as ticket_id_zendesk_text,
						CASE WHEN O.CUSTOM_CUSTOMER_ID IS NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
							 WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NULL THEN O.CUSTOM_CUSTOMER_ID
                             WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
							 WHEN O.CUSTOM_CUSTOMER_ID = zendesk_org.CUSTOM_CUSTOMER_ID THEN zendesk_org.CUSTOM_CUSTOMER_ID
                                                         ELSE NULL
						END AS zendesk_gpp_client_id_match,
						CASE WHEN cc.name IS NULL AND cc2.name IS NOT NULL THEN cc2.name
							 WHEN cc.name IS NOT NULL AND cc2.name IS NULL THEN cc.name
							 WHEN cc.name IS NOT NULL AND cc2.name IS not NULL THEN cc2.name
							 WHEN cc.name = cc2.name THEN cc2.name
							 else null 
						END AS zendesk_gpp_client_name_match, 
						CASE WHEN O.NAME IS NULL AND zendesk_org.name IS NOT NULL THEN zendesk_org.name
							 WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NULL THEN O.NAME
							 WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NOT NULL THEN ZENDESK_ORG.NAME
							 WHEN O.NAME = zendesk_org.name THEN ZENDESK_ORG.NAME
							 ELSE NULL 
						END AS Zendesk_client_org,
						t.created_at,
						t.created_at::date as date,	
						t.created_at::time as time,
						t.organization_id AS customer_id,
						g.name AS group,
						t.requester_id,
						t.submitter_id,
						t.assignee_id,
						u4.name as assignee,
	                    split_part(LOWER(u4.email), '@', 1) AS assignee_email,
						u.name AS requester,
						U.ROLE AS requester_ROLE,
						t.status,
						T.PRIORITY,	
						case when t.priority='urgent' then 60
							else 2400 
						end as target_sla,
						T.CUSTOM_CATEGORY,
						CASE WHEN t_form.ticket_form='Shared Services' THEN concat('Shared Services -',' ',t.custom_SSC_Action)
							WHEN t_form.ticket_form='Internal Request' AND t.CUSTOM_INTERNAL_REQUEST_TYPE='Zendesk Support' THEN concat('Internal -',' ',t.custom_Internal_Request_Type)
							WHEN t.custom_category='expenses' THEN concat('Expense -',' ',t.custom_Expenses)
							WHEN t.custom_category='benefits' THEN concat('Benefits -',' ',t.custom_Benefits)
							WHEN t.custom_category='employee_onboarding' THEN concat('Employee Onboarding -',' ', t.custom_Employee_Onboarding)
							WHEN t.custom_category='invoicing' THEN CONCAT('Invoicing -',' ', t.custom_Invoicing)
							WHEN t.custom_category='time_off' THEN concat('Time Off -',' ',t.custom_Time_Off)
							WHEN t.custom_category='zoho' THEN concat('Zoho -',' ', t.custom_Zoho_Sub_Category)
							WHEN t.custom_category='time_tracking' THEN CONCAT('Time Tracking -',' ',t.custom_Time_Tracking)
							WHEN t.custom_category='hr_support' THEN CONCAT('HR Support -',' ',t.custom_HR_Support)
							WHEN t.custom_category='payroll' THEN concat('Payroll -',' ',t.custom_Payroll)
							WHEN t.custom_category='tech_support' THEN CONCAT('Tech Support -',' ',t.custom_Tech_Support)
							WHEN t.custom_category is not NULL THEN t.custom_category
							ELSE 'No Category'
						end as sub_category,	
						U.organization_id AS USER_ORGANIZATION_ID,
						T.organization_id,	
						U3.NAME AS SUBMITTER,
						U3.ROLE AS SUBMITTER_ROLE,
						t.via_channel,
						t.custom_customer_satisfaction,						
                                                zendesk_tm.assignee_updated_at,
						zendesk_tm.replies, 
						zendesk_tm.full_resolution_time_in_minutes_business, 
						zendesk_tm.reply_time_in_minutes_business,
						zendesk_tm.full_resolution_time_in_minutes_calendar, 
						zendesk_tm.reply_time_in_minutes_calendar,
						zendesk_tm.solved_at,
						zendesk_tm.requester_wait_time_in_minutes_calendar,
	                    zendesk_tm.initially_assigned_at,
						s.score,
						t.custom_region,
						u.custom_country,	
						Case when ZENDESK_TM.full_resolution_time_in_minutes_business <<=7200 then '0 - 5 days'
							 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>7200 and ZENDESK_TM.full_resolution_time_in_minutes_business<<=43200) then '5 - 30 days'
							 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>43200) then '+30 days'
						end as resolution_time,
						case when ZENDESK_TM.replies =0 then '0 touches'
							 when (ZENDESK_TM.replies>>0 and ZENDESK_TM.replies<<3) then '1 to 2 touches'
							 when (ZENDESK_TM.replies>>2 and ZENDESK_TM.replies<<6) then '3 to 5 touches'
							 when (ZENDESK_TM.replies>>5) then '+5 touches'
						end as replies_touches,
		case when score='good' then '1' 
							 when custom_customer_SATISFACTION='csat_rating_3' then '1'
							 when custom_customer_SATISFACTION='csat_rating_4' then '1'
							 when custom_customer_SATISFACTION='csat_rating_5' then '1'
							 else 0 
						end as CSAT_1,
						case when score='bad' then '1' 
							 when custom_customer_SATISFACTION='csat_rating_1' then '1'
							 when custom_customer_SATISFACTION='csat_rating_2' then '1'
							 else 0 
						end as CSAT_2,
						ticket_merge.tag as closed_by_merge
	
				FROM ""zendesk"".""ticket"" AS t
				LEFT JOIN ""zendesk"".""user"" AS u ON t.requester_id = u.id
				LEFT JOIN ""zendesk"".""group"" AS g ON t.group_id = g.id
				LEFT JOIN ""zendesk"".""organization"" AS org ON t.organization_id = org.id
				LEFT JOIN ""zendesk"".""user"" AS u3 ON t.SUBMITTER_ID = u3.id
				LEFT JOIN ""zendesk"".""user"" AS u4 ON t.assignee_id = u4.id
				LEFT JOIN ZENDESK.TICKET_METRICS AS ZENDESK_TM ON t.id=ZENDESK_TM.TICKET_ID
				LEFT JOIN ""satisfaction"" AS s ON t.id = s.ticket_id
				left join zendesk.organization o on o.id=U.organization_id
				left join zendesk.organization zendesk_org on zendesk_org.id=T.organization_id
				left join goglobal_gp_goglobal.v_gp_gg_client_current cc on cc.id=o.custom_customer_id	
				left join goglobal_gp_goglobal.v_gp_gg_client_current cc2 on cc2.id=zendesk_org.custom_customer_id
				left join (
							select distinct id,
								   name as ticket_form
							from  zendesk.ticket_form_history t2
							where name in ('Shared Services','Internal Request') and active='true'
							) t_form on t_form.id=t.ticket_form_id
				left join (
							SELECT *
							FROM zendesk.ticket_tag
							WHERE tag = 'closed_by_merge'
							) ticket_merge on t.id=ticket_merge.ticket_id
			)
select distinct gpp_zendesk.*, tme.type,
	  	(reply_time_in_minutes_business- target_sla) AS TIME_DIF,
		case
			when (reply_time_in_minutes_business- target_sla)>>0 then 'Breach'
			when (reply_time_in_minutes_business- target_sla)<<=0 then 'Within'
			ELSE NULL 
		end as SLA_performance,
		case 
			when (reply_time_in_minutes_business- target_sla)>>0 THEN 1
		end as SLA_performance_BREACH,
		case
			when (reply_time_in_minutes_business- target_sla)<<=0 THEN 1
		end as SLA_performance_WITHIN,
		case
			when reply_time_in_minutes_business is null then 1
		end as first_reply_ind,
	   client.accounting_id,
           client.status as client_status, 
	   client.tier_type, 
	   	CASE 
			WHEN client.pricing_model = 0 THEN 'Enterprise'::text
			WHEN client.pricing_model = 1 THEN 'Standard'::text
			ELSE 'Verify Pricing Model'::text
		END AS pricing_model,
		sfdc_health.client_health__c  ""SFDC Client Health"",
		concat(gpp_am.first_name,' ',gpp_am.last_name) AS Account_Manager,
		concat(gpp_ae.first_name,' ',gpp_ae.last_name)  AS Account_Executive,
		client.msa_contract_start_date_peo,
		idr.name as industry
from gpp_zendesk
left join goglobal_gp_goglobal.v_gp_gg_client_current client on client.id=gpp_zendesk.zendesk_gpp_client_id_match
left join (select * 
		   from zendesk.ticket_metric_events 
		   where type='apply_sla') TME on gpp_zendesk.ticket_id_zendesk_text=TME.ticket_id
LEFT JOIN sfdc_health ON sfdc_health.ID=client.ID
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current gpp_am on gpp_am.id = client.gp_account_manager_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current gpp_ae on gpp_ae.id = client.gp_current_sales_rep_id
left join goglobal_gp_goglobal.v_gp_gg_industry_current idr on idr.id = client.industry_id"
6bbf7218-e4bb-b57a-1230-8eb6be042f10,Custom SQL Query (gpbidb),postgres,"SELECT wd.*, split_part(LOWER(""Work Contact: Work Email""), '@', 1) AS lower_case_email
FROM workday_hris.v_non_sensitive_workday_data AS wd"
6bbf7218-e4bb-b57a-1230-8eb6be042f10,GPP + Workday,postgres,"SELECT mp.*,
       u_onb.email AS onb_lead_email,
	   split_part(LOWER(u_onb.email), '@', 1) AS onb_lead_email_split,
	   u_off.email AS off_lead_email,
	   split_part(LOWER(u_off.email), '@', 1) AS off_lead_email_split
FROM goglobal_gp_goglobal.v_gp_gg_master_professional AS mp
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS p_onb ON mp.onboard_person_id = p_onb.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_user_current AS u_onb ON p_onb.user_id = u_onb.id

LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS p_off ON mp.offboard_person_id = p_off.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_user_current AS u_off ON p_off.user_id = u_off.id"
6bbf7218-e4bb-b57a-1230-8eb6be042f10,GPP + Workday,,
6bbf7218-e4bb-b57a-1230-8eb6be042f10,GPP + Workday,postgres,"SELECT wd.*, split_part(LOWER(wd.""Work Contact: Work Email""), '@', 1) AS email_split
FROM workday_hris.v_non_sensitive_workday_data AS wd"
6c2344c7-2afe-4e7a-f38d-338e15396f56,Fees transpose+ (Template Calculator v2),,
6c2344c7-2afe-4e7a-f38d-338e15396f56,Fees transpose+ (Template Calculator v2),postgres,"select distinct client as ""Customer POP"",
		start_date as ""Date POP"",
		country as ""Country POP"",
		count(distinct professional_id) ""POP COUNT""
from goglobal_gp_goglobal.v_gp_gg_total_bills_mat
where type in ('Management Fee',
'Employer Burden Markup',
'Currency Transaction Fee',
'Insurance Premium Markup',
'Wiring Fee',
'Travel Insurance',
'Annual Fee',
'Medical Insurance Markup',
'Banking Fee',
'Professional Costs',
'Transaction Fee',
'G-P Contractor Fee',
'Discount',
'fxRate Variance')
and  start_date>>='2022-01-01' 
--and client_id in ('1272','2766','329','786','1518','1651','2565','528')
group by 1,2,3"
6c2344c7-2afe-4e7a-f38d-338e15396f56,Fees transpose+ (Template Calculator v2),postgres,"with calendar as 
			(
				select distinct date_trunc('month',cal.cal_date)::date as start_date,
						cc.id as client_id,
						cc.name as client
				from repo.gp_calendar cal,
					 goglobal_gp_goglobal.v_gp_gg_client_current cc 
				where cal_date<<=(date_trunc('month',current_date)::date + INTERVAL '12 months') 
						and cal_date>>='01-01-2022'

			),
mat as 
		(			
			select mat.start_date,
					mat.client_id,
					cc.accounting_id,
					mat.client,
					mat.type,
					mat.billing_currency,
					sum(mat.billing_amount) as bill_amount
			from goglobal_gp_goglobal.v_gp_gg_total_bills_mat mat
			left join goglobal_gp_goglobal.v_gp_gg_client_current cc on mat.client_id=cc.id
			where start_date>>='2022-01-01' 
			group by 1,2,3,4,5,6
		)
select distinct cal.start_date,
					cal.client_id,
					mat.accounting_id,
					cal.client,
					mat.type,
					mat.billing_currency,
					mat.bill_amount
from calendar cal
left join mat ON CAL.START_DATE=MAT.STARt_Date AND CAL.CLIENT_ID=MAT.CLIENT_ID"
6c446bee-bbbd-89b9-f33a-fc68964f933b,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT podname, site_luid, u.site_name, site_create_date, site_creator_capacity, site_explorer_capacity, site_user_quota, site_viewer_capacity, user_id, user_luid, user_email, created_at, user_account_age, last_login_date, days_since_last_login, license_type, site_role, owned_projects, owned_data_sources, owned_certified_data_sources, owned_data_sources_size, owned_workbooks, owned_workbooks_size, owned_views, access_data_source_events_count, access_view_events, publish_data_source_events, publish_workbook_events, last_datasource_access_date, last_datasource_publish_date, last_view_access_date, last_workbook_publish_date, data_source_access_count_total, data_source_access_count_unique_users, view_access_count_total, view_access_count_unique_users, run_date,
	COUNT_TOTAL_USERS.count_t_users
	FROM tableau.ts_users u
	LEFT JOIN (SELECT site_name, COUNT(DISTINCT user_email) as count_t_users
			  FROM tableau.ts_users group by 1) COUNT_TOTAL_USERS on u.site_name = COUNT_TOTAL_USERS.site_name"
6c446bee-bbbd-89b9-f33a-fc68964f933b,ts_users (tableau.ts_users)+ (gpbidb),,
6c446bee-bbbd-89b9-f33a-fc68964f933b,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT project_name, site_name, actor_user_id, actor_user_name, e.event_name, event_type, event_id, event_date, actor_license_role, actor_site_role, item_type, e.item_id, e.item_name, workbook_name, historical_item_name, item_owner_email, item_repository_url, historical_item_repository_url, run_date,
	suspend.event_name as suspended, md.max_date
	FROM tableau.ts_events e

	left join (select item_id, event_name from tableau.ts_events WHERE event_name = 'Suspend Extract Refresh Due to Inactivity' ) suspend on
	e.item_id = suspend.item_id
	
	left join (SELECT  item_id, item_name, event_name , MAX(event_date) as max_event_date, 1 as max_date
	FROM tableau.ts_events
	where event_name = 'Publish Workbook'
	group by 1,2,3) as md on (e.item_id = md.item_id and e.event_name = md.event_name and e.event_date = md.max_event_date)"
6c446bee-bbbd-89b9-f33a-fc68964f933b,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT ""Payroll Name"", ""Job Title Description"", ""Business Unit Description"", ""Home Department Description"", ""Worked In Country"", ""Status"", ""Hire Date"", LOWER(""Work Contact: Work Email"") AS ""Work Contact: Work Email""
	FROM workday_hris.v_non_sensitive_workday_data"
6fc371a5-d32a-bf49-92ea-083d0161be99,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),,
6fc371a5-d32a-bf49-92ea-083d0161be99,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"select distinct id as professional_id, accounting_id as accounting_id_HISTO
			  from goglobal_gp_goglobal.professional_aud
			  where ACCOUNtING_ID IS NOT NULL"
70535be5-cb60-15c5-c587-a7688c4db49a,Custom SQL Query (gpbidb) (2),,
70535be5-cb60-15c5-c587-a7688c4db49a,Custom SQL Query (gpbidb) (2),postgres,"WITH SALESFORCE AS
( SELECT opp.id As opp_id,
         opp.close_date AS msa_date,
         opp.type AS opp_type,
         opp.name AS opp_name,
         opp.account_id,
         acc.name AS acc_name,
         opp.client_region_opportunity__c,
		 us.name AS opp_owner
	
         
 
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time AS opp
 LEFT JOIN salesforce.v_gp_sfdc_account_current  AS acc ON opp.account_id = acc.id
 LEFT JOIN salesforce.v_gp_sfdc_user_current AS us ON opp.owner_id = us.id
WHERE (opp.type <<>> 'Existing Business' OR opp.type IS NULL)
AND   (opp.partner_acquisition__c IS NULL OR opp.partner_acquisition__c <<>> 'Yes')
AND   (opp.is_won= 'TRUE')
AND   (opp.record_type_bi__c IS NULL OR opp.record_type_bi__c <<>> 'Potential Partner Opportunity')
AND   ( opp.pricing_model__c <<>> 'Contractor only' OR opp.pricing_model__c is NULL)
),

GPP AS (
SELECT DISTINCT 
	  
a.salesforce_account_id,
	      a.id,
	      a.name,
          a.pricing_model,
	     CASE WHEN a.msa_contract_start_date_peo IS NOT NULL THEN a.msa_contract_start_date_peo
	    WHEN a.msa_contract_start_date_peo IS NULL AND a.msa_contract_start_date_services IS NOT NULL THEN a.msa_contract_start_date_services
	    WHEN a.msa_contract_start_date_services IS NULL AND a.msa_contract_start_date_sourcing IS NOT NULL THEN a.msa_contract_start_date_sourcing
	    WHEN a.msa_contract_start_date_sourcing IS NULL AND a.msa_contract_start_date_aso IS NOT NULL THEN a.msa_contract_start_date_aso
	  ELSE a.msa_contract_start_date_peo END AS ma_start_date,
	      b.pop_current, 
	      c.pop_to_date,
	      d.min_pay_start,
	      d.max_pay_start,
	      d.min_pay_end,
	      d.max_pay_end
	       
	FROM (SELECT a.id, a.salesforce_account_id,a.pricing_model,a.name,a.msa_contract_start_date_services,a.msa_contract_start_date_peo, a.msa_contract_start_date_aso,a.msa_contract_start_date_sourcing
		 FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
		 WHERE a.is_demo_client = false) AS a
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_current
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC ('month', cal_date)= DATE_TRUNC ('month', CURRENT_DATE)
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS b
	ON a.id = b.client_id
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_to_date
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC('month',payroll_start_date) <<=DATE_TRUNC ('month', CURRENT_DATE)
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS c
	ON a.id = c.client_id
	
	LEFT JOIN (SELECT client_id, MAX(payroll_start_date)AS max_pay_start, MAX (payroll_end_date)AS max_pay_end,
				  MIN(payroll_end_date)AS min_pay_end, MIN(payroll_start_date) AS min_pay_start
				 FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			   WHERE (product_type_id <<>> '4' OR product_type_id IS NULL)
				 GROUP BY 1) d
	ON a.id = d.client_id
	
	
	
),
FINAL AS(SELECT 
		 SALESFORCE.*,
     GPP.*,
	
	  
	  	CASE 
		   
			 WHEN GPP.id IS NOT NULL AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) <<= 90
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.min_pay_start IS NULL
			 THEN 'Newly Signed'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND date_trunc('month', GPP.min_pay_start) >>= date_trunc('month',CURRENT_DATE) THEN 'Onboarding' 
			  
		   WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current >>0  THEN 'Currently Active'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current IS NULL
			 AND (GPP.max_pay_end << CURRENT_DATE OR (date_trunc('month', GPP.max_pay_start) >>= date_trunc('month',CURRENT_DATE) AND GPP.max_pay_end >> CURRENT_DATE))
			 THEN 'Currently Inactive'
			 
			 
			 WHEN (GPP.id IS NOT NULL 
			 AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) >>90
			 AND GPP.pop_to_date IS NULL)
		   OR (GPP.id IS NOT NULL AND GPP.ma_start_date IS NULL AND SALESFORCE.msa_date IS NULL )
       THEN 'Never Active' 
		 
		   WHEN (GPP. id IS NULL
		)
				 THEN 'Unknown'
			
			 END AS gpp_account_status
			
FROM SALESFORCE
LEFT JOIN GPP
ON SALESFORCE.account_id = GPP.salesforce_account_id

		 )
SELECT *
FROM FINAL"
70535be5-cb60-15c5-c587-a7688c4db49a,Custom SQL Query (gpbidb) (2),postgres,"SELECT 
client_id,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('1') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS NEW_STATUS,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('2') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS Onb_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('3') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS ACTIVE_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('4') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS TERM_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('5') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS INACT_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= TRUE AND (service_class IS NULL OR service_class <<>>'4')) AS ftl

FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS pro
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS client ON pro.client_id = client.id
WHERE client.is_demo_client = FALSE
GROUP BY pro.client_id"
4c7276e6-4853-8a53-c13b-4c8018fc0894,Custom SQL Query (gpbidb),postgres,"WITH gg_client AS(
	   SELECT
	   a.id AS client_id,
	   a.name AS client_name,
	   a.gp_account_manager_id,
	   CONCAT(b.first_name,' ', b.last_name) AS account_manager,
	   a.gp_current_sales_rep_id,
	   CONCAT(c.first_name,' ', c.last_name) AS account_executive,
	   d.name AS referral_name,
	   a.msa_contract_start_date_peo,
	   f.first_hire,
	   e.max_pay_end,
	   e.Failed,
	   e.New,
	   e.Onboarding,
	   e.Active,
	   e.Terminating,
	   e.Inactive,
	   a.salesforce_account_id
	   /*CASE WHEN a.salesforce_account_id IS NOT NULL THEN a.salesforce_account_id
	   ELSE mdm_GG.source_id
	   END as gpp_id_match*/
	   FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
	   LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS b
	   ON a.gp_account_manager_id = b.id
	   LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS c
	   ON a.gp_current_sales_rep_id = c.id
	   LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current AS d
	   ON a.partners_referral_id = d.id
	   LEFT JOIN (SELECT
	   	client_id, MAX(payroll_end_date) AS max_pay_end,
	   	SUM(CASE WHEN (is_failed_to_launch='true')THEN 1 ELSE NULL END) AS Failed,
	   	SUM(CASE WHEN (status= '1') AND (service_class IS NULL OR service_class <<>> '4') AND is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS New,
	   	SUM(CASE WHEN (status= '2') AND (service_class IS NULL OR service_class <<>> '4') AND is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS Onboarding,
	   	SUM(CASE WHEN (status= '3')AND (service_class IS NULL OR service_class <<>> '4') AND is_failed_to_launch = 'false'  THEN 1 ELSE NULL END) AS Active,
	   	SUM(CASE WHEN (status= '4') AND (service_class IS NULL OR service_class <<>> '4') AND is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS Terminating,
	   	SUM(CASE WHEN (status='5') AND (service_class IS NULL OR service_class <<>> '4') AND is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS Inactive
	   FROM goglobal_gp_goglobal.v_gp_gg_professional_current
	   GROUP BY client_id) AS e
	   ON a.id = e.client_id
	   LEFT JOIN (
	   	SELECT client_id, MIN(payroll_start_date) AS first_hire
	   	FROM goglobal_gp_goglobal.v_gp_gg_professional_current
	   	WHERE is_failed_to_launch = 'false'
	   	AND (service_class IS NULL OR service_class <<>> '4')
	   	GROUP BY client_id) AS f
	   ON a.id = f.client_id
	   /*LEFT JOIN repo.v_gp_mdm_customer AS g
	   ON a.id::VARCHAR = g.source_id
	   LEFT JOIN (SELECT *
	   	FROM repo.v_gp_mdm_customer
	   	WHERE source = 'SFDC Customer') AS mdm_GG
	   ON g.parent_name = mdm_GG.parent_name*/
	   WHERE a.msa_contract_start_date_peo >>= '2019-01-01'
	   AND d.name ILIKE('%ADP%')
	   OR a.id = 622),
salesforce AS(
	   SELECT
	   g.id AS opportunity_id,
	   g.type AS opportunity_type,
	   g.account_id,
	   g.lead_source,
	   g.is_won,
	   g.adp_lead_source__c,
	   g.close_date,
	   h1.name AS partner_name,
	   g.name AS opportunity_name,
	   g.stage_name,
	   h.pricing_model__c AS acc_pricing_model,
	   g.pricing_model__c AS opp_pricing_model,
	   partner_name.lead_source_defined_c AS opp_partner_name,
	   g.s_a_l_by__sales__c
	   FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time AS g
	   LEFT JOIN salesforce.v_gp_sfdc_account_current AS h
	   ON g.account_id = h.id
	   LEFT JOIN salesforce.v_gp_sfdc_account_current AS h1
	   ON g.partner2__c::text = h1.id::text
	   LEFT JOIN (
	   	SELECT id, lead_source_defined_c
	   	FROM salesforce.opportunity
	   	WHERE is_deleted IS FALSE) partner_name
	   ON g.id = partner_name.id
	   WHERE g.type = 'New Business'
	   AND  (LOWER(h1.name) = 'adp' OR g.name IN('Inspire Brands-4/29-19', 'AudioEye, Inc. 9/23/2020'))
	   AND (g.stage_name != 'Closed Lost' OR g.name = 'KMG Travel and Vacations - 08/31/20')
	   AND g.close_date >>= '2019-01-01'
	   AND (g.record_type_bi__c IS NULL OR g.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
	   AND (g.partner_acquisition__c IS NULL OR g.partner_acquisition__c::text <<>> 'Yes'::text)
	   AND (g.pricing_model__c IS NULL OR g.pricing_model__c::text <<>> 'Contractor only'::text)
	 ),
Final AS(
	   SELECT salesforce.*, gg_client.*,
	   CASE
	   	WHEN gg_client.onboarding IS NULL AND gg_client.active IS NULL and gg_client.terminating IS NULL AND gg_client.inactive IS NULL AND (current_date::DATE- gg_client.msa_contract_start_date_peo::DATE)<<90 THEN 'Newly Signed'
	   	WHEN (gg_client.active IS NOT NULL) OR (gg_client.terminating IS NOT NULL AND gg_client.active is NULL AND gg_client.max_pay_end >> current_date) OR (gg_client.terminating IS NOT NULL AND gg_client.active is NULL AND gg_client.max_pay_end IS NULL) THEN 'Active'
	   	WHEN gg_client.onboarding IS NOT NULL AND gg_client.active IS NULL AND gg_client.terminating IS NULL AND gg_client.inactive IS NULL THEN 'Onboarding'
	   	WHEN (gg_client.active IS NULL AND gg_client.inactive IS NOT NULL) OR (gg_client.active IS NULL AND gg_client.terminating IS NOT NULL AND gg_client.max_pay_end << current_date)THEN 'Inactive'
	   	WHEN gg_client.onboarding IS NULL AND active IS NULL and gg_client.terminating IS NULL AND gg_client.inactive IS NULL AND (current_date::DATE- gg_client.msa_contract_start_date_peo::DATE)>>90 THEN 'Stalled'
	   	WHEN salesforce.stage_name != 'Closed Won' THEN 'Pre-Sale'
	   END AS status
FROM salesforce
FULL JOIN gg_client
ON salesforce.account_id = gg_client.salesforce_account_id)
SELECT *
FROM FINAL"
707774ce-3bca-1e4c-58ba-c05b4d5e2e5f,Custom SQL Query (gpbidb),postgres,"With 
Leads_Opps as ( /*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
				Select Distinct
					CASE
                    	WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    	ELSE date_trunc('month'::text, opps.created_date)
                	END AS MQL_Cohort_Month,
					leads.id as lead_id,
					opps.id as opp_id,
					leads.is_converted,
					leads.converted_opportunity_id,
					CASE
						WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
						WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						ELSE NULL::text
					END AS client_region,
					leads.created_date AS mql_date,
					leads.converted_date,
					leads.partner_acquisition__c AS partner_acq_leads,
					leads_owner.name as leads_owner_name,
					leads_owner_manager.name as leads_owner_manager,
					opps_owner.name as opps_owner_name,
					opps_owner_manager.name as opps_owner_manager, 
					opps.created_date,
					opps.sales__accepted__date__c as SAL_Accepted_Date,
					opps.s_a_l__c,
                    opps.s_a_l_by__sales__c,
					opps.record_type_bi__c,
					opps.close_date AS msa_date,
					opps.stage_name,	
					opps.partner_acquisition__c AS partner_acq_opps,
					opps.type AS opportunity_type,
					opps.is_won AS opp_won, 
					opps.what_is_your_primary_product_interest__c AS what_is_opps,
					opps.record_type_text_id_c AS record_type_opps,
					opps.pricing_model__c AS pricing_model_opps,
					opps.id AS opps_id,
					CASE
                        WHEN leads.lead_source IS NULL THEN opps.lead_source
                        ELSE leads.lead_source
                    END::text as Lead_or_Opp_Source,
					CASE
						WHEN dev_own.name IS NULL THEN 1
						ELSE 0
						END AS Partner_develop_owner_flag,
					CASE
         				WHEN leads.converted_opportunity_id IS NULL THEN leads_owner.name
         				ELSE opps.bdr_owner_name
      					END AS bdr_owner_name,
					CASE
         				WHEN bdr_owner_name IS NULL THEN 1
         				ELSE 0
      					END AS bdr_owner_name_flag,
					CASE
         				WHEN acc_partn.name IS NULL THEN 1
         				ELSE 0
      					END AS Partner_flag,
					CASE
         				WHEN opps.b_d_r__date__c IS NULL THEN 1
         				ELSE 0
      					END AS b_d_r_date_c_flag,
					CASE 
						WHEN (opps.type <<>> 'Existing Business' OR opps.type IS NULL)
					     And (opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
  						 And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
						 And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
					Then 'Non Partner Opp or Existing Business'
					Else 'Partner Opp or Existing Business'
					End as Opp_Go_Flag
				From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             	Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
				Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
				Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner ON opps_owner.id = opps.owner_id
				Left Join salesforce.v_gp_sfdc_user_current leads_owner_manager ON leads_owner_manager.id = leads_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner_manager ON opps_owner_manager.id = opps_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
				LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c = acc_partn.id
				--Where  CASE WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
				--	   ELSE date_trunc('month'::text, opps.created_date)
                --END >>= '2019-01-01'
				), 
     MQL as (
				Select Distinct
					'MQL' as Cohort_Stage, 
		 			lead_id as lead_or_opp_id,
		 			MQL_Date::date as Point_time_date,
		 			leads_owner_name as Lead_or_Opp_Owner_name,
		 			leads_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where (partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) 
		 		And lead_id is not null
				),
MQL_to_SQL as (
				Select Distinct
					'MQL to SQL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					Created_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_id is not null
				),
SQL_to_SAL as (
				Select Distinct
					'SQL to SAL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					SAL_Accepted_Date::date as Point_time_date, 
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And s_a_l_by__sales__c = 'Yes'
				),
SAL_to_MSA as (
				Select Distinct
					'SAL to MSA' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					MSA_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_won ='true'
				AND (pricing_model_opps <<>> 'Contractor Only' OR pricing_model_opps IS NULL)
				),
Full_Union as (
				Select 
					* 
				From MQL
					Union All
				Select 
					* 
				From MQL_to_SQL
					Union AlL
				Select 
					* 
				From SQL_to_SAL
					Union AlL
				Select 
					* 
				From SAL_to_MSA
				),
				--SELECT DISTINCT * FROM Full_Union
				--where lead_or_opp_id in ('0066T000016KebcQAC','0066T000015ryGIQAY','0060W000014Tn0HQAS','0066T000015s5vyQAA','0066T000016Km8fQAC'
										--'0066T000016KsYHQA0','0066T000015rlGgQAI','0066T000016KqClQAK','0066T000015rsKVQAY')
				--where point_time_date between '2021-05-07' AND '2021-07-30'
				--AND cohort_stage='SAL to MSA'
Weekly_Funnel as ( 
				Select Distinct
					Cohort_stage, 
					Client_region,
					Partner_flag,
					Partner_develop_owner_flag,
					b_d_r_date_c_flag,
					bdr_owner_name_flag,
					Coalesce(Lead_or_Opp_Source, 'nulo') as Lead_or_Opp_Source,
					Coalesce(Lead_or_Opp_Owner_Name, 'nulo') as Lead_or_Opp_Owner_Name,
					Coalesce(Lead_or_Opp_Owner_Manager, 'nulo') as Lead_or_Opp_Owner_Manager,
					--point_time_date,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date - '12 weeks'::interval)::date as twelve_weeks_ago, 
					(date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date as Week_at_Friday,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date + '6 days'::interval)::date as Week_at_Next_Thursday,  
					Count(distinct lead_or_opp_id) as Count_Leads_or_opps
					--lead_or_opp_id
				From Full_Union 
				Group by 1,2,3,4,5,6,7,8,9,10,11,12
				Order by cohort_stage, (date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date asc --date_trunc('week', point_time_date + 5)- '5 days'::interval asc
				),
				--select distinct * from Weekly_Funnel 
				--where Week_at_Friday between '2021-05-07' AND '2021-08-05'
				--AND cohort_stage='SAL to MSA'
Date_Catalogue as (
				Select Distinct 
					WAF.Week_at_Friday as Week_at_Friday_C,
					WF.Cohort_stage as Cohort_Stage_c,
					WF.Client_region as Client_region_c,
					WF.Lead_or_Opp_Source as Lead_or_Opp_Source_c,
					WF.Lead_or_Opp_Owner_Name as Lead_or_Opp_Owner_Name_c,
					WF.Lead_or_Opp_Owner_Manager as Lead_or_Opp_Owner_Manager_c,
					WF.Partner_flag as Partner_flag_c,
					WF.Partner_develop_owner_flag as Partner_develop_owner_flag_c,
					WF.b_d_r_date_c_flag as b_d_r_date_c_flag_c,
					WF.bdr_owner_name_flag as bdr_owner_name_flag_c,
					0 as Count_Leads_or_opps_C
				From (Select Distinct Week_at_Friday From Weekly_Funnel) WAF, 
				(Select Distinct Cohort_stage, Client_region, Lead_or_Opp_Source, Lead_or_Opp_Owner_Name, Lead_or_Opp_Owner_Manager, Partner_flag, Partner_develop_owner_flag, b_d_r_date_c_flag, bdr_owner_name_flag from Weekly_funnel) WF 
				Order by WF.Cohort_stage, WAF.Week_at_Friday asc
				), --Select * from Date_Catalogue where cohort_stage_c = 'SAL to MSA' and week_at_friday_c between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC' 
Dates_Aligned as (
				Select Distinct
					DC.*,
					Coalesce(Funnel.twelve_weeks_ago::date, (DC.Week_at_Friday_C - '12 weeks'::interval)::date) as  twelve_weeks_ago,
					Coalesce(Funnel.week_at_next_thursday, (DC.Week_at_Friday_C + '6 days'::interval)::date) as week_at_next_thursday, 
					Coalesce(Funnel.count_leads_or_opps, DC.count_leads_or_opps_c) as Count_leads_or_opps_final
				From Date_Catalogue DC
				Left Join Weekly_funnel Funnel on Funnel.week_at_friday = DC.week_at_friday_c
					and Funnel.cohort_stage = DC.cohort_stage_c
					and Funnel.Client_region = DC.Client_region_c
					and Funnel.Lead_or_Opp_Source = DC.Lead_or_Opp_Source_c
					and Funnel.Lead_or_Opp_Owner_Name = DC.Lead_or_Opp_Owner_Name_C
					and Funnel.Lead_or_Opp_Owner_Manager = DC.Lead_or_Opp_Owner_Manager_C
					and Funnel.Partner_flag = DC.Partner_flag_c
					and Funnel.Partner_develop_owner_flag = DC.Partner_develop_owner_flag_c
					and Funnel.b_d_r_date_c_flag = DC.b_d_r_date_c_flag_c
					and Funnel.bdr_owner_name_flag = DC.bdr_owner_name_flag_c
				) --Select * from Dates_Aligned where Week_at_Friday_C between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC'
Select Distinct 
	WF.Cohort_stage_c,
	WF.Client_region_c,
	WF.Lead_or_Opp_Source_c,
	WF.Lead_or_Opp_Owner_Name_c,
	WF.Lead_or_Opp_Owner_Manager_c,
	WF.Partner_flag_c,
	WF.Partner_develop_owner_flag_c,
	WF.b_d_r_date_c_flag_c,
	WF.bdr_owner_name_flag_c,
	WF.twelve_weeks_ago, 
	WF.Week_at_Friday_c,
	WF.Week_at_Next_Thursday,
	WF.Count_Leads_or_opps_final,
	Sum(L12M.Count_Leads_or_opps_final) as Sum_L12M_Funnel
From Dates_aligned WF
Left Join (select Cohort_stage_c, Client_region_c, Lead_or_Opp_Source_c, Lead_or_Opp_Owner_Name_c, Lead_or_Opp_Owner_Manager_c, Partner_flag_c, Partner_develop_owner_flag_c, b_d_r_date_c_flag_c, bdr_owner_name_flag_c, Week_at_Friday_c, Count_Leads_or_opps_final From Dates_aligned where Count_Leads_or_opps_final<<>> 0) L12M 
	on L12M.Week_at_Friday_c between WF.twelve_weeks_ago and WF.Week_at_Friday_c
	and WF.Cohort_stage_c = L12M.Cohort_stage_c
	and WF.Client_region_c = L12M.Client_region_c
	and WF.Lead_or_Opp_Source_c = L12M.Lead_or_Opp_Source_c
	and WF.Lead_or_Opp_Owner_Name_c = L12M.Lead_or_Opp_Owner_Name_c
	and WF.Lead_or_Opp_Owner_Manager_c = L12M.Lead_or_Opp_Owner_Manager_c
	and WF.Partner_flag_c = L12M.Partner_flag_c
	and WF.Partner_develop_owner_flag_c = L12M.Partner_develop_owner_flag_c
	and WF.b_d_r_date_c_flag_c = L12M.b_d_r_date_c_flag_c
	and WF.bdr_owner_name_flag_c = L12M.bdr_owner_name_flag_c
Group by WF.Cohort_stage_c, WF.Client_region_c, WF.Lead_or_Opp_Source_c, WF.Lead_or_Opp_Owner_Name_c, WF.Lead_or_Opp_Owner_Manager_c, WF.Partner_flag_c, WF.Partner_develop_owner_flag_c, WF.b_d_r_date_c_flag_c, WF.bdr_owner_name_flag_c, WF.twelve_weeks_ago, WF.Week_at_Friday_c, WF.Week_at_Next_Thursday, WF.Count_Leads_or_opps_final
Having  Sum(L12M.Count_Leads_or_opps_final) is not null
Order by WF.Cohort_stage_c, WF.Week_at_Friday_c asc"
707774ce-3bca-1e4c-58ba-c05b4d5e2e5f,Contractor Reporting (gpbidb),postgres,"WITH SFDC AS (SELECT account.client_region_billing_country AS client_region,
	account.billing_country AS client_country,
	opps.id AS opp_id,
	opps.lead_source,
	opps.s_a_l_by__sales__c,
	dev_own.name AS partner_development_owner,
	acc_partn.name AS partner,
	--opps.record_type_bi__c AS record_type,
	--opps.partner_acquisition__c AS partner_acq_opps,
	opps.type AS opp_type,
	opps.stage_name,
	opps.created_date,
        opps.close_date,
        opps.sales__accepted__date__c,
			  opps.is_won,
	opps.what_is_your_primary_product_interest__c AS what_ppi,
    sbqq.is_gp_contractor_customer_c AS gp_contractor_customer,
    sbqq.pricing_model_c AS pricing_model_primary_quote,
    sbqq.sbqq_primary_c AS primary_quote
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
LEFT JOIN salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
LEFT JOIN
(SELECT id, sbqq_opportunity_2_c, is_gp_contractor_customer_c, pricing_model_c, sbqq_primary_c
	FROM salesforce.sbqq_quote_c
	WHERE is_deleted = FALSE
	AND sbqq_primary_c = TRUE
) sbqq ON opps.id=sbqq.sbqq_opportunity_2_c
WHERE 
(opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text)),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      created_date::date as Point_time_date,
      *
   From SFDC
   Where --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	opp_id is not null
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      sales__accepted__date__c::date as Point_time_date,
      *
   From SFDC
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	s_a_l_by__sales__c= 'Yes'
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      close_date::date as Point_time_date,
      *
   From SFDC
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	is_won ='true'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
   FULL_UNION as (
	SELECT * FROM MQL_to_SQL
UNION ALL
	SELECT * FROM SQL_to_SAL
UNION ALL
	SELECT * FROM SAL_to_MSA)
SELECT * FROM FULL_UNION"
707774ce-3bca-1e4c-58ba-c05b4d5e2e5f,NEW View,,
707774ce-3bca-1e4c-58ba-c05b4d5e2e5f,NEW View,postgres,"SELECT DISTINCT is_gp_recruit_customer_c,
is_gp_contractor_customer_c,
pricing_model_c,
sbqq_primary_c,
is_deleted,
sbqq_opportunity_2_c
FROM salesforce.sbqq_quote_c
WHERE sbqq_primary_c='TRUE'
and is_deleted='FALSE'"
7159fedd-8f24-9f06-4df8-7db7c2677435,Custom SQL Query+ (gpbidb),postgres,"with 
	cc_role as(
	SELECT  distinct t2.id as client_id,t2.name as client,
						 concat(first_name,' ', last_name) as user, title,
						 regexp_split_to_table(a.roles, ',') AS roles,
						 t3.email as User_EMAIL,
						 t3.status,
                         A.IS_ENABLED,
						T3.LAST_LOGIN_DATE,
						a.date_created
					from goglobal_gp_goglobal.v_gp_gg_client_person_current  a
					left join goglobal_gp_goglobal.v_gp_gg_client_current t2
						 on a.client_id = t2.id
					left join goglobal_gp_goglobal.v_gp_gg_user_current t3
						on a.user_id = t3.id where t2.is_demo_client='false' and a.is_no_longer_with_firm='false')
						

SELECT cc.id AS customer_id,
       cc.name AS customer_name,
	   Case When cc.pricing_model = 0 then 'Enterprise' 
 	  	When cc.pricing_model = 1 then 'Standard'
 		Else 'Verify Pricing Model' end as Pricing_Model,
	   cc.status AS customer_status,
	   cc.accounting_id AS customer_accumaticaid,
	   cc.tier_type AS customer_gpp_tier,
	   cc.msa_contract_start_date_peo as msa_contract_start_date_peo,
	   cc.msa_contract_start_date_services as service_contract_date,
	   cc.msa_contract_start_date_aso as aso_contract_date,  
	   cc.is_demo_client,
	   cc.website,
	   cc.legal_entity_name,
	   cc1.name AS partner_referral_name,
	   cc2.city AS customer_city,
	   cc2.address1 AS customer_address1,
	   cc2.address2 AS customer_address2,
	   cc2.address3 AS customer_address3,
	   cc3.name AS customer_country,
	   cc3.country_code AS customer_country_code,
	   cc4.name AS customer_province,	   
	   cc5.name AS customer_industry,
       cc9.region AS customer_region,
	   cc12.region AS Working_region,
	   CONCAT (cc6.first_name, ' ', cc6.last_name)AS account_manager,
	   CONCAT (cc7.first_name, ' ', cc7.last_name)AS current_sales_rep,
	   CONCAT (cc8.first_name, ' ', cc8.last_name)AS original_sales_rep,
	   cc_role.user as client_user,
	   cc_role.title as client_user_title,
	   cc_role.User_EMAIL as client_user_email,
	   cc_role.status,
   	   CC_ROLE.IS_ENABLED,
	   CC_ROLE.LAST_LOGIN_DATE,
	   CASE WHEN cc_role.roles='6' THEN 'AccountsPayable'
     WHEN cc_role.roles='1' THEN 'Client Admin'
	 WHEN cc_role.roles='4' THEN'Expense Approver 1'
     WHEN cc_role.roles='10' THEN 'Expense Approver 2'
	 WHEN cc_role.roles='13' THEN 'GP Submit Repor Administrator'
	 WHEN cc_role.roles='2' THEN'Human Resources'
     WHEN cc_role.roles='12' THEN 'Invoice Details'
	 WHEN cc_role.roles='3' THEN 'Payroll Approver'
	 WHEN cc_role.roles='5' THEN 'PTO Approver'
     WHEN cc_role.roles='11' THEN 'RECRUITGLOBAL'
	 WHEN cc_role.roles='7' THEN 'Stakeholder'
	 WHEN cc_role.roles='8' THEN 'Supervisor Manager'
     WHEN cc_role.roles='9' THEN 'Unassigned'
    WHEN cc_role.roles = '14' THEN 'Time - Proxy Approver'
	WHEN cc_role.roles = '15' THEN 'Expense - Proxy Approver'
	WHEN cc_role.roles = '17' THEN 'Time and Expense Report Admin'
	 END AS Role,
	 cc_role.date_created as date_created_role,
	 cc10.country_id,
	 cc11.name as working_country,
	 cc10.addendum_enrollment_date, 
	 cc10.is_original_msa,
	 cc10.original_forecast,
	 hd.Current_Month_PoP,
	 markup_premium.markup_transaction_amt as markup_premium_amount
	   

FROM goglobal_gp_goglobal.v_gp_gg_client_current AS cc
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current AS cc1
ON cc.partners_referral_id = cc1.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS cc2
ON cc.billing_address_id = cc2.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS cc3
ON cc2.country_id=cc3.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_province_current AS cc4
ON cc2.province_id=cc4.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_industry_current AS cc5
ON cc.industry_id= cc5.id
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_gp_person_current AS cc6
ON  cc.gp_account_manager_id = cc6.id
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_gp_person_current AS cc7
ON    cc.gp_current_sales_rep_id = cc7.id
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_gp_person_current AS cc8
ON     cc.gp_original_sales_rep_id = cc8.id
LEFT JOIN repo.v_gp_mdm_region AS cc9
ON cc3.country_code = cc9.country_code
LEFT JOIN cc_role on cc.id = cc_role.client_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current AS cc10
on cc.id = cc10.client_id
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_country_current AS cc11
on cc10.country_id = cc11.id
LEFT JOIN repo.v_gp_mdm_region AS cc12
ON cc11.country_code = cc12.country_code

left join (select * from goglobal_gp_goglobal.v_gp_gg_client_country_markup_transaction_current
		  where markup_transaction_id='1') markup_premium on cc10.id = markup_premium.client_country_id

LEFT JOIN (SELECT client_id, country_name, COUNT(DISTINCT professional_id)AS Current_Month_PoP
		  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard hd
		  WHERE active_flag = 'Active'
		  AND DATE_TRUNC ('month', hd.cal_date) = DATE_TRUNC ('month', CURRENT_DATE)
		  GROUP BY 1,2)AS hd
		  ON cc10.client_id = hd.client_id
		  AND cc11.name = hd.country_name"
7159fedd-8f24-9f06-4df8-7db7c2677435,Custom SQL Query+ (gpbidb),postgres,"SELECT p.client_id,
       p.id AS professional_id,
	   CASE WHEN  p.goes_by is null then CONCAT(p.first_name, ' ',p.last_name)
	   ELSE CONCAT(p.first_name, ' ',p.last_name,' (',p.goes_by,')') END AS professional_name,
       p.accounting_id,
	   p.job_category,
	   p.title,
       p.birth_date,
	   p.contract_start_date,
	   p.contract_end_date,
       AGE(p.contract_end_date, p.contract_start_date) AS contract_duration,
	   p.payroll_start_date,
	   p.payroll_end_date,	
	   p.is_contract_prob_period_applies,
	   p.contract_prob_period_end_date,
       AGE (p.contract_prob_period_end_date, p.contract_start_date) AS probation_duration,
	   p.is_fixed_term_emp_contract,
	   p.status,
	   p.is_failed_to_launch,
	   p.pto_days_allotted,
	   p.residency_status,
	   p.contract_notes,
       p.right_to_work_in_work_country,
       p.is_visa_sponsorship_required,
       p.is_sponsorship_visa_for_dependants_required,
       p.is_sponsoring_visa,
       p.is_sponsorship_visa_for_dependants,
       p.sponsoring_visa_notes,
       p.po_number,
	   p.sponsoring_visa_expire_date,
	   p1.offboarding_notes,
	   p1.method_type,
	   p1.reason_type,
	   p1.will_be_backfilling_this_position,
	
	master.employment_country AS professional_working_country,
	 master.employment_country_region AS professional_working_region,
	   p.work_address_id,
	   p.home_address_id,
	   p5.address1 AS home_address_1,
	   p5.address2 AS home_address_2,
	   p5.address3 AS home_address_3,
	   p5.city AS home_city,
	   p5.postal_code AS home_postalcode,
	   p6.name AS home_country,
	   p7.name AS home_province,
	   p16.address1 AS work_address_1,
	   p16.address2 AS work_address_2,
	   p16.address3 AS work_address_3,
	   p16.city AS work_city,
	   p16.postal_code AS work_postalcode,
	   p17.name AS work_country,
	   p18.name AS work_province,
	   p.service_class,
	   p.preferred_pronoun,
	   p.lsp_professional_id,
	   p.date_created as professional_date_created,
	   Dep_Flag.deposit_flag,
	   date_onboard.onboard_date,
	   last_date_modified.last_modified_date
	   
FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS p
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_professional AS master ON p.id = master.internal_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current AS p1
ON p.professional_offboarding_id = p1.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current AS p2
ON p.professional_onboarding_id = p2.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS p3
ON p.lsp_country_id=p3.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS p5
ON p.home_address_id = p5.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS p6
ON p5.country_id = p6.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_province_current AS p7
ON p5.province_id = p7.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS p9
on p.lsp_country_id=p9.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_current AS p10
on p9.lsp_id=p10.id

LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_gp_person_current p12 on p3.gp_billing_manager_id=p12.id
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_gp_person_current p13 on p.gp_offboard_lead_id=p13.id

LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_gp_person_current p15 on p.gp_onboard_lead_id=p15.id

LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS p16
ON p.work_address_id = p16.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS p17
ON p16.country_id = p17.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_province_current AS p18
ON p16.province_id = p18.id
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_lsp_country_current p19 
on p.funded_lsp_country_id = p19.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_current p20  
on p19.lsp_id=p20.id 
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_country_current as p21
on p19.country_id = p21.id
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_country_current as p22 
on p9.country_id = p22.id

LEFT JOIN (
SELECT
        professional_id,
	1 AS deposit_flag
	FROM goglobal_gp_goglobal.v_gp_gg_total_bills_mat as bill
        WHERE bill_type_name = 'Deposit'

) as Dep_Flag on p.id = Dep_Flag.professional_id

LEFT JOIN (
SELECT  id, status, MIN(date_modified) as onboard_date
	FROM goglobal_gp_goglobal.professional_aud
	where status = '2'
	group by 1,2
) as date_onboard on p.id = date_onboard.id 

LEFT JOIN (
SELECT  id, status, MIN(date_modified) as last_modified_date
	FROM goglobal_gp_goglobal.professional_aud
	group by 1,2
) as last_date_modified on p.id = last_date_modified.id and p.status = last_date_modified.status

where CONCAT(p.first_name, ' ',p.last_name) NOT LIKE '%Professional%'  
	AND CONCAT(p.first_name, ' ',p.last_name) NOT LIKE '%professional%'  
	AND CONCAT(p.first_name, ' ',p.last_name) NOT LIKE '%test%'  
	AND CONCAT(p.first_name, ' ',p.last_name) NOT LIKE '%Test%'
	AND CONCAT(p.first_name, ' ',p.last_name) NOT LIKE '%TBD%'
	AND CONCAT(p.first_name, ' ',p.last_name) NOT LIKE 'DO NOT USE'
	AND CONCAT(p.first_name, ' ',p.last_name) NOT LIKE 'Fake'
	AND CONCAT(p.first_name, ' ',p.last_name) NOT LIKE 'DUPLICATE'
	AND  (p.service_class IS NULL OR p.service_class <<>> '4' )

ORDER BY 2"
7159fedd-8f24-9f06-4df8-7db7c2677435,Custom SQL Query+ (gpbidb),postgres,"select cal_date,
	client_id,
		professional_id,
		active_flag
		from goglobal_gp_goglobal.v_tableau_headcount_dashboard
		where  to_char(cal_date, 'YYYY-MM') = to_char(Current_date, 'YYYY-MM')"
717483bd-39a8-9862-7fea-98cdedcdec8d,Custom SQL Query (gpbidb),postgres,"select pro.id as pro_id,
			onb.new_hire_date_completed as ""ECG Started On"",
			onbt.egc_started_by as ""ECG Started By"",
			onb.gp_empl_contract_prepared_by as ""Prepared By"",
			sent_client_date_approved ""Date Client Approved"",
			sent_client_approved_by as ""Approved By"",
			sent_client_date_completed ""Contract sent to Client on"",
			sent_ee_date_completed ""CONTRACT SENT TO PROFESSIONAL FOR ACCEPTANCE ON"",
			sent_ee_date_accepted ""CONTRACT ACCEPTED BY PROFESSIONAL ON"",
			sent_ee_date_rejected ""CONTRACT REJECTED BY PROFESSIONAL ON"",
			sent_ee_date_notified ""CONTRACT SENT FOR PROFESSIONAL SIGNATURE ON"",
			sent_ee_date_signed ""DATE PROFESSIONAL SIGNED"",
			onb.is_professional_ecg,
			onbt.is_qmf_ecg,
			onbt.is_next_gen_ecg
	from goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current onb
	left join goglobal_gp_goglobal.v_gp_gg_professional_current pro on pro.professional_onboarding_id=onb.id
	left join (select distinct onbt.id,
				concat(gpp.first_name,' ',gpp.last_name) egc_started_by,
			    is_qmf_ecg,is_next_gen_ecg
				from goglobal_gp_goglobal.professional_onboarding onbt 
				left join goglobal_gp_goglobal.v_gp_gg_client_person_current gpp on onbt.ecg_started_by=gpp.user_id
			   ) onbt on onb.id=onbt.id"
717483bd-39a8-9862-7fea-98cdedcdec8d,Custom SQL Query (gpbidb),,
717483bd-39a8-9862-7fea-98cdedcdec8d,Custom SQL Query (gpbidb),postgres,"with a as
	(select t2.id as pro_id,
	 t2.first_name, t2.last_name,
	 t16.email,
	 t2.payroll_start_date,
	 t2.payroll_end_date,
	 t2.status as PRO_STATUS,
	 t11.name as country,
	 t2.contract_start_date, 
	 case when payroll_enrollment_form_completed_date is NULL then 'No'
	 	ELSE 'Yes'
	 end as payroll_enrollment_form_completed_date,
	 concat(t12.first_name,' ',t12.last_name)as country_ops_lead, 
	 concat(t13.first_name,' ',t13.last_name)as country_ops_associate,
	 t3.name,
	 t4.name as status,
	 t7.id as client_id,
	 t7.name as Client,
	concat(t5.first_name,' ',t5.last_name) as Onboard_Lead, 
	concat(t6.first_name, ' ', t6.last_name) as Offboard_Lead,
	concat(t8.first_name, ' ', t8.last_name) as Requested_by_name_client,
	concat(t9.first_name, ' ', t9.last_name) as Requested_by_name_person,
	 	concat(t14.first_name, ' ', t14.last_name) as Requested_by_name_client_lb,
	concat(t15.first_name, ' ', t15.last_name) as Requested_by_name_person_lb,
	date(requested_date),t17.date_modified as pending,
t1.*
from goglobal_gp_goglobal.v_gp_gg_professional_current t2
left join goglobal_gp_goglobal.v_gp_gg_change_request_current t1
	on t1.professional_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_change_request_type_current t3
	on t1.change_request_type_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_change_request_status_current t4
	on t1.change_request_status_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t5
              on t2.gp_onboard_lead_id=t5.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t6      
              on t2.gp_offboard_lead_id=t6.id
left join goglobal_gp_goglobal.v_gp_gg_client_current t7
		on t2.client_id=t7.id
left join goglobal_gp_goglobal.v_gp_gg_client_person_current t8      
              on t1.requested_by=t8.user_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9      
              on t1.requested_by=t9.user_id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t10 
		on t2.lsp_country_id=t10.id
left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco  on t2.client_country_id=cco.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t11  on cco.country_id=t11.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t12
	on t11.country_ops_lead=t12.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t13
	on t11.country_ops_associate=t13.id
left join goglobal_gp_goglobal.v_gp_gg_client_person_current t14      
              on t1.modified_by=t14.user_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t15      
              on t1.modified_by=t15.user_id
left join goglobal_gp_goglobal.v_gp_gg_user_current t16      
              on t16.id=t2.user_id
left join goglobal_gp_goglobal.v_date_modified_change_request_new_to_pending t17
	 on t1.id=t17.id
where T2.IS_FAILED_TO_LAUNCH='false' and t7.is_demo_client='false')

select distinct  a.*,
case when (Requested_by_name_client=' ' and Requested_by_name_person!=' ') then Requested_by_name_person
		when (Requested_by_name_client!=' ' and Requested_by_name_person=' ') then Requested_by_name_client
		when (Requested_by_name_client=' ' and Requested_by_name_person=' ') then 'NULL'
		when (Requested_by_name_client!=' ' and Requested_by_name_person!=' ') then 'ERROR'
		END AS REQUESTED_BY_END,

		case when (Requested_by_name_client_lb=' ' and Requested_by_name_person_lb!=' ') then Requested_by_name_person_lb
		when (Requested_by_name_client_lb!=' ' and Requested_by_name_person_lb=' ') then Requested_by_name_client_lb
		when (Requested_by_name_client_lb=' ' and Requested_by_name_person_lb=' ') then 'NULL'
		when (Requested_by_name_client_lb!=' ' and Requested_by_name_person_lb!=' ') then 'ERROR'
		END AS last_updated_by,
		REPLACE(REPLACE (ticket.url, '.json', ''), 'api/v2', 'agent') as ticket_url,
		split_part(LOWER(usr.email), '@', 1) AS lower_case_email,
		usr.name as assignee,
		wkd.""Home Department Description""
		
		FROM A
		LEFT JOIN zendesk.ticket ticket on a.zendesk_ticket_id = ticket.id
		left join zendesk.user usr on ticket.assignee_id=usr.id
		left join (
					select *,
							split_part(LOWER(""Work Contact: Work Email""), '@', 1) AS lower_case_email_wkd		
					from workday_hris.v_non_sensitive_workday_data
					) wkd on wkd.lower_case_email_wkd=split_part(LOWER(usr.email), '@', 1)"
717483bd-39a8-9862-7fea-98cdedcdec8d,Custom SQL Query (gpbidb),postgres,"WITH A AS (select t0.id as pro_id, t1.id AS A_ID,t2.user_id AS ZOHO_USER_ID, t1.email as user_mail,
case when t2.status='0' then 'Pending' 
		when t2.status='1' then 'Invitation Sent'
		when t2.status='2' then 'Active'
		when t2.status='3' then 'Invitation Rejected'
		when t2.status='4' then 'Inactive'
		when t2.status='5' then 'Error' 
		when t2.status='6' then 'Deleted'
		when t2.status='7' then 'Pending on Client User Creation'
		when t2.status='8' then 'Error Client User Creation'
		when t2.status='9' then 'Pending Inactive'
		when t2.status='10' then 'Error on Required on Mandatory Approver'
		when t2.status='11' then 'Error Client User Creation Stuck on Pending'
		end as zoho_status, T2.*
from goglobal_gp_goglobal.v_gp_gg_professional_current t0
left join goglobal_gp_goglobal.v_gp_gg_user_current t1 on t0.user_id=t1.id
left join goglobal_gp_goglobal.v_gp_gg_zoho_person_current t2 on t1.id=t2.user_id)

SELECT a.pro_id, A.A_id AS ID,
A.ZOHO_USER_ID,a.professional_id,a.status, A.ZOHO_STATUS, a.client_person_id, a.zoho_person_id,a.gp_person_id,a.user_mail,
case when (A.ZOHO_user_id is null) then 'User not sent to Zoho'
when (A.professional_id is not null AND A.status='4') then concat('In-active',' ',A.inactive_timestamp)
when (A.status='1' or A.status='2') then concat(A.ZOHO_STATUS,' ','GPP-',A.ZOHO_USER_ID)
when (A.status='5') then concat('Error: ',A.zoho_response)
ELSE A.ZOHO_STATUS
END AS TIME_EXP_SYST
FROM A"
717483bd-39a8-9862-7fea-98cdedcdec8d,Custom SQL Query (gpbidb),postgres,"select  t10.id, concat(t10.first_name,' ',t10.last_name) as Professional,t10.is_failed_to_launch,t10.status as Pro_Status, t20.name as Client, t20.status as Client_status,
case when fb.first_bill_date is null then null else'First Bill' end as Type,
 fb.first_bill_date, fb.first_bill_client_invoice, fb.ind,fb.status as fb_status
FROM goglobal_gp_goglobal.v_gp_gg_professional_current t10
											left join (select t1.id as pro_id,t1.is_failed_to_launch,t1.status as Pro_Status, 
															case when t3.name is null then null 	
														   		 else'First Bill'
														   		 end as Type,
															 t3.name as First_Bill_Date,
															 cb.accounting_id as First_Bill_Client_Invoice,
															 row_number() over(partition by t1.id ORDER BY t3.NAME DESC) as IND,
															 case when cb.status='1' then 'Draft' when cb.status='2' then 'Client Approval' when cb.status='3' then 'Submitted'
																  when cb.status='4' then 'LSP Approval' when cb.status='5' then 'LSP Submitted' when cb.status='6' then 'Ready to Validate'
																  when cb.status='7' then 'Preparing Bill' when cb.status='8' then 'Verify Management Fee' when cb.status='9' then 'Ready to Send'
																  when cb.status='10' then 'Billed' when cb.status='11' then 'Paid'
																  end as status
																FROM goglobal_gp_goglobal.v_gp_gg_professional_current t1
																left join goglobal_gp_goglobal.V_GP_GG_client_bill_CURRENT cb on cb.professional_id= t1.id
																left join goglobal_gp_goglobal.v_gp_gg_billing_cycle_current t3 on cb.billing_cycle_id = t3.id
																where cb.bill_type='3' ) fb on t10.id=fb.pro_id
left join goglobal_gp_goglobal.v_gp_gg_client_current t20 on t10.client_id=t20.id
where t10.is_failed_to_launch='false' and t20.is_demo_client='false'"
72b2d10e-32fb-483f-1836-1142dc67c030,SFDC Only,postgres,"SELECT id,
                      name, 
	              type, 
	              referral_fee_currency__c, 
	              enterprise_eor_referral_fee__c, 
	              payment_timing_partners__c,
	              standard_eor_referral_fee__c,
	              referral_structure_partners__c,
	              contractor_eor_referral_fee__c,
	              partner_agreement_status__c,
	              partner_referral__c,
	              partner_agreement_effective_date__c,
	              partner_referral_contact__c,
	              third_party_partner_agree_effective_date__c,
                      partner_level__c
FROM salesforce.v_gp_sfdc_account_current
WHERE type = 'Partner'
ORDER BY name"
72b2d10e-32fb-483f-1836-1142dc67c030,GPP +SFDC,postgres,"WITH th AS(
SELECT *,
RANK() OVER (
    PARTITION BY professional_id
    ORDER BY cal_date 
) AS month_pop,

EXTRACT (MONTH FROM cal_date )AS month_cal_date,

CASE WHEN EXTRACT (MONTH FROM cal_date ) IN (3,6,9,12) THEN TRUE END AS quarter_year

FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
WHERE active_flag = 'Active'
AND DATE_TRUNC('month',cal_date) <<= DATE_TRUNC('month', CURRENT_DATE)
ORDER BY professional_id, cal_date),

th_2 AS(SELECT th.*, CASE WHEN quarter_year IS NOT NULL AND month_pop <<= 12 THEN TRUE END AS quarter_pop
FROM th)

SELECT th_2.*, 
LAG(quarter_pop,1)
OVER (PARTITION BY professional_id 
    ORDER BY cal_date) AS quater_pop_plus_one

FROM th_2"
72b2d10e-32fb-483f-1836-1142dc67c030,GPP +SFDC,postgres,"-- We start with a subquery on GPP's Customers and their sfdc_integration_id, as well as their mdm_sfdc_id to create an id match to SFDC
WITH GPP AS (
	   SELECT customer.id AS gpp_id,
       customer.name AS gpp_customer,
	   gpp_partner.name AS gpp_partner,
	   customer.salesforce_account_id,
	   mdm_match.source_id AS mdm_account_id,
	   CASE WHEN customer.salesforce_account_id  IS NOT NULL THEN customer.salesforce_account_id 
       ELSE mdm_match.source_id END AS id_match
	   
	   
FROM goglobal_gp_goglobal.v_gp_gg_client_current AS customer
LEFT JOIN repo.v_gp_mdm_customer AS mdm
ON customer.id::VARCHAR = mdm.source_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current AS gpp_partner
	ON customer.partners_referral_id = gpp_partner.id
LEFT JOIN (SELECT *
    FROM repo.v_gp_mdm_customer
    WHERE source = 'SFDC Customer'
    ) AS mdm_match
    ON mdm.parent_name = mdm_match.parent_name

WHERE customer.is_demo_client = FALSE
ORDER BY customer.id),

-- We continue by creating a query with all accounts in SFDC and their partner referral from the Opp, if there are more than 1 opps with MA's characteristics 
-- we proceed to consider the oldest one.
SFDC AS (SELECT 
	   sfdc_client.id AS sfdc_client_id,
       sfdc_client.name AS sfdc_client_name,
	   sfdc_client.type AS sfdc_client_type,
	   sfdc_partner.opp_close_date AS sfdc_opp_close_date,
	   sfdc_partner.opp_id AS sfdc_opp_id,
	   sfdc_partner.partner_name AS sfdc_partner_name,
	   sfdc_partner.referral_fee_currency__c, 
	   sfdc_partner.enterprise_eor_referral_fee__c, 
	   sfdc_partner.payment_timing_partners__c,
	   sfdc_partner.standard_eor_referral_fee__c,
	   sfdc_partner.referral_structure_partners__c,
	   sfdc_partner.contractor_eor_referral_fee__c,
	   sfdc_partner.partner_agreement_status__c,
	   sfdc_partner.partner_referral__c,
	   sfdc_partner.partner_agreement_effective_date__c,
	   sfdc_partner.partner_referral_contact__c,
	   sfdc_partner.third_party_partner_agree_effective_date__c,
	   sfdc_partner.partner_level__c,
		 sfdc_partner.type AS partner_account_type,
sfdc_partner.client_region_billing_country,
	   RANK() OVER (
       PARTITION BY sfdc_client.id
       ORDER BY sfdc_partner.opp_close_date) AS opp_close_date_rank
FROM salesforce.v_gp_sfdc_account_current AS sfdc_client
LEFT JOIN (SELECT 
      opp.id             AS opp_id,
      opp.close_date     AS opp_close_date,
	  opp.name           AS opp_name,
	  opp.account_id     AS account_id,
	  opp.type           AS opp_type,
	  partner.name       AS partner_name,
	  partner.type, 
	  partner.referral_fee_currency__c, 
	  partner.enterprise_eor_referral_fee__c, 
	  partner.payment_timing_partners__c,
	  partner.standard_eor_referral_fee__c,
	  partner.referral_structure_partners__c,
	  partner.contractor_eor_referral_fee__c,
	  partner.partner_agreement_status__c,
	  partner.partner_referral__c,
	  partner.partner_agreement_effective_date__c,
	  partner.partner_referral_contact__c,
	  partner.third_party_partner_agree_effective_date__c,
	  partner.partner_level__c,
          partner.client_region_billing_country
	 
	    
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time AS opp
LEFT JOIN salesforce.v_gp_sfdc_account_current             AS partner ON  opp.partner2__c = partner.id

WHERE (opp.type IS NULL OR opp.type <<>> 'Existing Business')
AND   (opp.partner_acquisition__c IS NULL OR opp.partner_acquisition__c  <<>> 'Yes')
AND    opp.stage_name = 'Closed Won'
AND   (opp.record_type_bi__c IS NULL OR opp.record_type_bi__c <<>>'Potential Partner Opportunity')
AND   (opp.pricing_model__c IS NULL OR opp.pricing_model__c  <<>> 'Contractor only')

ORDER BY 4


) sfdc_partner
ON sfdc_client.id = sfdc_partner.account_id
		
      )
-- We match GPP to SFDC

	  SELECT GPP.*, SFDC.*
	  FROM GPP
	  LEFT JOIN SFDC ON GPP.id_match = SFDC.sfdc_client_id
      WHERE (sfdc.opp_close_date_rank = 1 OR sfdc.opp_close_date_rank IS NULL)
	  ORDER BY 1"
72b2d10e-32fb-483f-1836-1142dc67c030,GPP +SFDC,,
72dc45d0-fe9b-f568-8498-f7669ddd84b9,Marketing View (gpbidb),postgres,"WITH members AS(
	SELECT mc.campaign_id, count(distinct mc.id) AS number_of_members
 	FROM salesforce.v_gp_sfdc_campaign_member_current mc
	LEFT JOIN  salesforce.v_gp_sfdc_lead_current_pacific_time leads ON mc.lead_id = leads.id
 	--WHERE leads.partner_acquisition__c <<>> 'Yes' OR leads.partner_acquisition__c IS NULL
 	GROUP BY mc.campaign_id
	ORDER BY 1
)
,

leadnum AS (SELECT mc.campaign_id, count(distinct mc.lead_id) AS number_of_leads
 	FROM salesforce.v_gp_sfdc_campaign_member_current mc
	LEFT JOIN  salesforce.v_gp_sfdc_lead_current_pacific_time leads ON mc.lead_id = leads.id
 	WHERE --(leads.partner_acquisition__c <<>> 'Yes' OR leads.partner_acquisition__c IS NULL) AND
	type = 'Lead'
 	GROUP BY campaign_id
	ORDER BY 1)
,

contactnum AS (SELECT mc.campaign_id, count(distinct mc.id) AS number_of_contacts
 	FROM salesforce.v_gp_sfdc_campaign_member_current mc
	LEFT JOIN  salesforce.v_gp_sfdc_lead_current_pacific_time leads ON mc.lead_id = leads.id
 	WHERE --(leads.partner_acquisition__c <<>> 'Yes' OR leads.partner_acquisition__c IS NULL) AND
	type = 'Contact'
 	GROUP BY campaign_id
	ORDER BY 1)
,

opps AS(
SELECT mc.campaign_id, 
CASE
         WHEN mc.contact_id IS NOT NULL AND oc.id IS NOT NULL THEN oc.id
         WHEN mc.contact_id IS NOT NULL AND oc.id IS NULL THEN leads.converted_opportunity_id
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NULL AND leads.converted_opportunity_id IS NOT NULL THEN leads.converted_opportunity_id
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NOT NULL AND leads.converted_opportunity_id IS NULL THEN mc.lead_id
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NOT NULL AND leads.converted_opportunity_id IS NOT NULL THEN leads.converted_opportunity_id
         ELSE NULL
      END AS lead_or_opp_id,
CASE
         WHEN mc.contact_id IS NOT NULL AND oc.id IS NOT NULL THEN 'Opp contact'
         WHEN mc.contact_id IS NOT NULL AND oc.id IS NULL THEN 'Opp'
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NULL AND leads.converted_opportunity_id IS NOT NULL THEN 'Opp'
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NOT NULL AND leads.converted_opportunity_id IS NULL THEN 'Lead'
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NOT NULL AND leads.converted_opportunity_id IS NOT NULL THEN 'Opp'     
	     ELSE 'Nothing'
      END AS lead_or_opp,
	CASE 
	WHEN mc.has_responded = false THEN 'Never responded'
	WHEN mc.has_responded = true AND mc.first_responded_date <<= COALESCE(oc.close_date, oc2.close_date) THEN 'In time'
	WHEN mc.has_responded = true AND mc.first_responded_date >> COALESCE(oc.close_date, oc2.close_date) THEN 'Too late'
	WHEN COALESCE(oc.close_date, oc2.close_date) IS NULL THEN 'Not closed'
    ELSE NULL::text
END AS response_member_time_flag

FROM salesforce.v_gp_sfdc_campaign_member_current mc
	LEFT JOIN salesforce.v_gp_sfdc_campaign_current ca ON mc.campaign_id = ca.id
	LEFT JOIN salesforce.v_gp_sfdc_opportunity_current_pacific_time  oc ON oc.contact_id = mc.contact_id
	LEFT JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON mc.lead_id = leads.id
	LEFT JOIN salesforce.v_gp_sfdc_opportunity_current_pacific_time  oc2 ON oc2.id = leads.converted_opportunity_id
        WHERE (oc.type <<>> 'Existing Business' OR oc.type IS NULL)
)
,
spend_info AS(	
SELECT ""Marketing Teams"" AS teams, 
""Campaign Name"" AS campaign, 
CONCAT(""Period"",'-01')::date AS dates, 
""Value"" AS spend, 
run_date
	FROM anaplan.marketing_spend_by_campaign_anaplan
	WHERE ""Campaign Name"" IS NOT NULL AND ""Period"" NOT ILIKE 'FY%'
	AND ""Line Item"" = 'Spend  $'
	),
campaign_spend AS(
SELECT campaign, SUM(spend) AS total_spend
FROM spend_info AS s
WHERE dates <<= date_trunc('month', now())::date - 1
GROUP BY campaign)


SELECT ca.id AS campaign_id, ca.name AS campaign, ca.type AS campaign_type, ca.status AS campaign_status,
ca.owner_id, ow.name AS campaign_owner, ow.title AS owner_title, ow.company_name AS owner_company,
 CASE
         WHEN ca2.geo_c IS NULL AND ca2.campaign_country_c IS NOT NULL THEN ca2.campaign_country_c
         WHEN ca2.geo_c IS NOT NULL AND ca2.campaign_country_c IS NULL THEN ca2.geo_c
         WHEN ca2.geo_c IS NOT NULL AND ca2.campaign_country_c IS NOT NULL THEN ca2.geo_c
         ELSE NULL::text
      END AS campaign_region,
ca.start_date as campaign_start, ca.end_date AS campaign_end, 
ca.is_active, ca.description, 
cs.total_spend,
CASE
	WHEN me.number_of_members IS NULL THEN 0
	ELSE me.number_of_members
END AS number_of_members,
CASE
	WHEN le.number_of_leads IS NULL THEN 0
	ELSE le.number_of_leads
END AS number_of_leads_no_contact,
CASE
	WHEN cn.number_of_contacts IS NULL THEN 0
	ELSE cn.number_of_contacts
END AS number_of_contacts_no_partner,
ca.number_of_leads, ca.number_of_converted_leads, ca.number_of_contacts, 
ca.number_of_responses, ca.number_of_opportunities, ca.number_of_won_opportunities,
opps.lead_or_opp_id,
opps.lead_or_opp,
opps.response_member_time_flag,
ca2.campaign_type_specific_c, 
ca2.audience_c,
ca2.fcrm_fcr_campaign_sourced_by_c
FROM salesforce.v_gp_sfdc_campaign_current ca
LEFT JOIN salesforce.v_gp_sfdc_user_current ow ON ow.id = ca.owner_id
LEFT JOIN salesforce.campaign ca2 ON ca.id = ca2.id
LEFT JOIN members me ON me.campaign_id = ca.id
LEFT JOIN leadnum le ON le.campaign_id = ca.id
LEFT JOIN contactnum cn ON cn.campaign_id = ca.id
LEFT JOIN campaign_spend cs ON cs.campaign = ca.name
LEFT JOIN opps ON opps.campaign_id = ca.id"
72dc45d0-fe9b-f568-8498-f7669ddd84b9,Marketing View (gpbidb),postgres,"WITH 
max_dates AS(
	SELECT opportunity_id,
		   MAX(rank) AS latest	
FROM salesforce.v_gp_sfdc_opportunity_stage_duration
WHERE NOT(prev_stage_name = to_stage_name AND to_stage_name = 'Closed Lost')
GROUP BY opportunity_id),
opp_history AS(
SELECT DISTINCT opportunity_id, 
		prev_stage_name AS prev_stage, 
		to_stage_name AS final_stage,
		stage_last_modified AS last_mod_date
FROM salesforce.v_gp_sfdc_opportunity_stage_duration osd
LEFT JOIN max_dates mx USING(opportunity_id)
WHERE rank = latest
),
Leads_Opps as ( /*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
   Select Distinct
      CASE
         WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
         ELSE date_trunc('month'::text, opps.created_date)
      END AS MQL_Cohort_Month,
      leads.id as lead_id,
      opps.id as opp_id,
      leads.is_converted,
      leads.converted_opportunity_id,
      leads.country as lead_country,
      leads.campaign__source__c as campaign_name,
					--opps.bdr_owner__c as bdr_owner_test,
					--opps_bdr_manager.manager_id as bdr_manager_id_test,
					--bdr_manager.name as bdr_manager_test,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_disqualified_reason__c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c
         ELSE NULL::text
      END AS lead_disqualified_reason,
       opps.closed__lost__c,
      leads.status AS lead_status,
      leads.country_code AS lead_country_code,
       CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_source_tier_c
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_tier_c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_source_tier_c
         ELSE NULL::text
      END AS tier,
      --leads.lead_disqualified_reason__c as lead_disqualified_reason,
      leads.bdr_unqualified_reason__c as bdr_unqualified_reason,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
         ELSE NULL::text
      END AS client_region,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country_code
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country_code
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country_code
         ELSE NULL::text
      END AS country_code,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
         ELSE NULL::text
                END AS client_country,
      leads.created_date AS mql_date,
      leads.converted_date,
      leads.partner_acquisition__c AS partner_acq_leads,
      --leads_owner.name as leads_owner_name,
      --leads_owner_manager.name as leads_owner_manager,
      opps.created_date AS opp_created_date,
	  opps.last_modified_date AS opp_last_modified_date,
      opps.created_date,
	  opps.potential_partner_lead__c,
      opps.sales__accepted__date__c as SAL_Accepted_Date,
      opps.s_a_l__c,
      opps.s_a_l_by__sales__c,
      opps.record_type_bi__c,
      opps.is_closed AS opp_closed,
      opps.close_date AS msa_date,
      opps.stage_name,
      opps.partner_acquisition__c AS partner_acq_opps,
      opps.type AS opportunity_type,
      opps.is_won AS opp_won,
      opps.what_is_your_primary_product_interest__c AS what_is_opps,
      opps.record_type_text_id_c AS record_type_opps,
      opps.pricing_model__c AS pricing_model_opps,
      --opps_owner.name as opps_owner_name,
      --opps_owner_manager.name as opps_owner_manager,
      opps.name AS opp_name,
	sfdc_opp.closed_lost_competitor_name_c AS lost_to_competitor,
		leads.hot_form_c AS hot_form_leads,
	opps.hot_form_c AS hot_form_opps,
	CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.b_d_r__date__c::date
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN sfdc_lead.bdr_date_c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.b_d_r__date__c::date
         ELSE NULL
      END AS b_d_r__date__c,
     -- opps.b_d_r__date__c,
      opps.type AS opp_type,
      opps.is_won AS won_flag,
      opps.partner_level__c AS partner_level,
      opps.update_time AS fivetran_synced_opps,
      --opps.lead_disqualified_reason__c AS lead_disqualified_reason,
      opps.pricing_model__c AS opp_pricing_model,
	/*CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps_owner_role.name
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner_role.name
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps_owner_role.name
         ELSE NULL::text
      END AS owner_role,*/
	/*CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps_owner.title
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner.title
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN leads_owner.title
         ELSE NULL::text
      END AS leads_owner_title,*/
	  leads_owner.title AS leads_owner_title,
 	  CASE
		WHEN leads_owner.title IN ('BDR','Business Development Manager',
			'Business Development Representative','Busines Development Representative',
			'Business Development Team Lead', 'Director of Business Development',
			'Senior Business Development Representative','Senior Business Development Trainer',
			'Senior Manager, Business Development','Vice President, Global Outbound'
		) THEN 'BDR lead'
		ELSE 'Non-BDR lead'
		END AS lead_owner_title_flag,
      CASE
         WHEN leads.lead_source IS NULL THEN opps.lead_source
         ELSE leads.lead_source
      END::text as Lead_or_Opp_Source,
      --dev_own.name AS partner_development_owner,
      /*CASE
      WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN 
      opps.bdr_owner_name
      WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner.name
      WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN 
      opps.bdr_owner_name
      END AS bdr_owner_name,*/
      acc_partn.name AS partner,
      acc_partn.client_region_billing_country AS partner_region,
      account.type AS account_type,
      account.pricing_model__c AS acc_pricing_model,
      CASE
         WHEN 
			--(opps.type <<>> 'Existing Business' OR opps.type IS NULL)
         --And 
			(opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
         And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
         --And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
         And (opps.pricing_model__c IS NULL OR opps.pricing_model__c  <<>> 'Contractor only')
	  Then 'Non Partner Opp or Existing Business'
      Else 'Partner Opp or Existing Business'
      End as Opp_Go_Flag,
	  opp_history.prev_stage, 
	  opp_history.final_stage,
	  opp_history.last_mod_date,
	  CASE
         WHEN opp_history.final_stage = 'Closed Lost' THEN opp_history.prev_stage
         ELSE NULL
      END AS lost_from_stage,
/*camp_memb.id AS member_id,
	camp_memb.name AS member_name,
    camp_memb.fcrm_fcr_admin_response_day_c AS member_response_date,
CASE 
	WHEN camp_memb.fcrm_fcr_admin_response_day_c <<= opps.close_date THEN 'In time'
	WHEN camp_memb.fcrm_fcr_admin_response_day_c >> opps.close_date THEN 'Too late'
	WHEN opps.close_date IS NULL THEN 'Not closed'
    ELSE NULL::text
END AS response_time_flag*/
mc.type AS member_type,
            usr_lead_opp.leads_owner_name,
            usr_lead_opp.leads_owner_manager,
            usr_lead_opp.opps_owner_name,
            usr_lead_opp.opps_owner_manager,
            usr_lead_opp.partner_development_owner,
            usr_lead_opp.bdr_owner_name,
            usr_lead_opp.bdr_manager_name

	
	
   From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
   Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
   Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
   LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c = acc_partn.id
   Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
   LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_or_opp_id::text =
                CASE
                    WHEN leads.id IS NULL THEN opps.id
                    ELSE leads.id
                END::text
   LEFT JOIN salesforce.lead sfdc_lead ON sfdc_lead.id = leads.id
   LEFT JOIN salesforce.opportunity sfdc_opp ON sfdc_opp.id = opps.id 
   LEFT JOIN opp_history ON opps.id = opp_history.opportunity_id
  -- LEFT JOIN salesforce.v_gp_sfdc_campaign_member_current camp_memb
   --ON (opps.contact_id = camp_memb.contact_id AND opps.campaign_id = camp_memb.campaign_id)
   LEFT JOIN salesforce.v_gp_sfdc_campaign_member_current mc ON mc.lead_id = leads.id
WHERE (leads.created_date::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())
OR (opps.created_date::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())
OR (opps.sales__accepted__date__c::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())
OR (opps.close_date::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())

), 
MQL as (
   Select Distinct
      'MQL' as Cohort_Stage,
      lead_id as lead_or_opp_id,
      MQL_Date::date as Point_time_date,
      *
   From Leads_Opps 
   Where --(partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) And 
	lead_id is not null
	--AND lead_owner_title_flag = 'BDR lead'
   ),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      Created_date::date as Point_time_date,
      *
   From Leads_Opps lo
   Where --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	opp_id is not null
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	s_a_l_by__sales__c = 'Yes'
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	opp_won ='true'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
Opp_lost as (
   Select Distinct
      'Opp lost' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      --last_mod_date::date as Point_time_date,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	final_stage = 'Closed Lost'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
   L1 as (
	 Select Distinct
      'Negotiations L1' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	   s_a_l_by__sales__c = 'Yes' 
		  AND (stage_name IN ('Negotiations L1','Negotiations L2','Contract','Closed Won') OR
		   lost_from_stage IN ('Negotiations L1','NegotiationsL1','Negotiations L2','NegotiationsL2','Contract'))
   ),
    L2 as (
	 Select Distinct
      'Negotiations L2' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
		s_a_l_by__sales__c = 'Yes' 
	 			  AND (stage_name IN ('Negotiations L2','Contract','Closed Won') OR
		   lost_from_stage IN ('Negotiations L2','NegotiationsL2','Contract'))
   ),
   Contract as (
	 Select Distinct
      'Contract' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	   s_a_l_by__sales__c = 'Yes' 
	   	  AND (stage_name IN ('Contract','Closed Won') OR
		   lost_from_stage IN ('Contract'))
   ),
Full_Union as (
   Select *
   From MQL
   Union All
   Select *
   From MQL_to_SQL
   Union AlL
   Select *
   From SQL_to_SAL
   Union AlL
   Select *
   From SAL_to_MSA
   Union All
   Select *
   From L1
   Union All
   Select *
   From L2
   Union All
   Select *
   From Contract
	Union All
   Select *
   From Opp_Lost
   )
SELECT * 
FROM Full_Union"
72dc45d0-fe9b-f568-8498-f7669ddd84b9,Marketing View (gpbidb),postgres,"WITH overallscores AS (
	SELECT q.""callId"", ROUND(AVG(q.score),1) AS score
	FROM gong.scorecards_details as q
	WHERE q.""isOverall"" = true 
	GROUP BY q.""callId""
	ORDER BY 1), 
	selfscores AS (
	SELECT q.""callId"", ROUND(AVG(q.score),1) AS score
	FROM gong.scorecards_details as q
	WHERE q.""isOverall"" = true 
	AND q.""callId"" IN (SELECT ""callId"" 
						FROM gong.scorecards_calls
						WHERE ""reviewedUserId"" = ""reviewerUserId"")
	GROUP BY q.""callId""
	ORDER BY 1), 
	oppo AS (
	SELECT call_id, soc.id, 
	soc.name AS opportunity_name
	FROM gong.lz_calls_context cco
	LEFT JOIN salesforce.v_gp_sfdc_opportunity_current soc
	ON soc.id = cco.id
	WHERE cco.type = 'Opportunity' AND is_deleted = false
	)

SELECT DISTINCT c.id AS call_id,  CAST(duration AS integer),
	
	CONCAT(u1.first_name, ' ', u1.last_name) AS caller_name, u1.email_address AS caller_mail, u1.title AS caller_title,
	started AS call_date, c.title AS call_title, 
	s1.score AS overall_call_score,
	s2.score AS self_call_score,
	oppo.id AS opportunity_id, opportunity_name
	FROM gong.calls c
	LEFT JOIN gong.users AS u1
	ON c.""primaryUserId"" = u1.id
	LEFT JOIN oppo
	ON c.id = oppo.""call_id""
	LEFT JOIN overallscores as s1
	ON c.id = s1.""callId""
	LEFT JOIN selfscores as s2
	ON c.id = s2.""callId""
	WHERE oppo.id IS NOT NULL"
72dc45d0-fe9b-f568-8498-f7669ddd84b9,Marketing View (gpbidb),postgres,"SELECT DISTINCT u.name AS user_name,  
CASE
         WHEN m.name IS NULL AND ""Reports To Name"" IS NOT NULL THEN ""Reports To Name""
         WHEN m.name IS NOT NULL AND ""Reports To Name"" IS NULL THEN m.name
         WHEN m.name IS NOT NULL AND ""Reports To Name"" IS NOT NULL THEN m.name
         ELSE NULL::text
      END AS manager_name
FROM salesforce.v_gp_sfdc_user_current u
LEFT JOIN workday_hris.v_non_sensitive_workday_data wd ON wd.""Work Contact: Work Email"" = u.email
LEFT JOIN salesforce.v_gp_sfdc_user_current m ON u.manager_id = m.id"
73265f6b-820c-6618-6d2e-748733c2f95b,Custom SQL Query+ (gpbidb) (2),postgres,"WITH Leads_Opps AS (
         SELECT DISTINCT 
                         CASE
                             WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                             ELSE date_trunc('month'::text, opps.created_date)
                             END                                 AS mql_cohort_month,
                         leads.id                                AS lead_id,
                         opps.b_d_r__date__c,
                         leads.is_converted,
                         opps.id                                 AS opp_id,
                         leads.converted_opportunity_id,
                         leads.country                           AS lead_country,
                         leads.status                            AS lead_status,
                         opps.opportunity__status__c             AS opp_status,
                         leads.country_code                      AS lead_country_code,
                         leads.lead_tier_c,
                         opps.lead_source_tier_c,
                         CASE
                             WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                             WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                             WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                             ELSE NULL::text
                             END                                 AS client_country,
                         CASE
                             WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                             WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                             WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL
                                 THEN account.client_region_billing_country
                             ELSE NULL::text
                             END                                 AS client_region,
                         leads.created_date                      AS mql_date,
                         leads.converted_date,
                         leads.partner_acquisition__c            AS partner_acq_leads,
                          usr_lead_opp.leads_owner_name,
                         usr_lead_opp.leads_owner_manager,
                         opps.created_date,
                         opps.sales__accepted__date__c           AS sal_accepted_date,
                         opps.s_a_l__c,
                         opps.s_a_l_by__sales__c,
                         opps.record_type_bi__c,
                         opps.close_date                         AS msa_date,
                         opps.stage_name,
                         opps.partner_acquisition__c             AS partner_acq_opps,
                         opps.is_won                             AS opp_won,
                         opps.record_type_text_id_c              AS record_type_opps,
                         usr_lead_opp.opps_owner_name,
                         usr_lead_opp.opps_owner_manager,
                         opps.name                               AS opp_name,
                         opps.type                               AS opp_type,
                         acc_partn.partner_level__c              AS partner_level,
                         opps.pricing_model__c                   AS pricing_model_opps,
			opps.hot_form_c                        AS hot_form_c_opps,
			leads.hot_form_c                       AS hot_form_c_leas,
                         CASE
                            WHEN leads.lead_source IS NULL THEN opps.lead_source
                            ELSE leads.lead_source
                            END::text                           AS lead_or_opp_source,
                        usr_lead_opp.partner_development_owner,
                        usr_lead_opp.bdr_owner_name,
                        usr_lead_opp.bdr_manager_name,
                         acc_partn.name                          AS partner,
                         acc_partn.client_region_billing_country AS partner_region,
                         account.type                            AS account_type,
                         account.pricing_model__c                AS acc_pricing_model,
                         CASE
                             WHEN (opps.record_type_bi__c IS NULL OR
                                   opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) AND
                                  (opps.partner_acquisition__c IS NULL OR
                                   opps.partner_acquisition__c::text <<>> 'Yes'::text) AND
                                  (opps.pricing_model__c IS NULL OR
                                   opps.pricing_model__c::text <<>> 'Contractor only'::text)
                                 THEN 'Non Partner Opp or Existing Business'::text
                             ELSE 'Partner Opp or Existing Business'::text
                             END                                 AS opp_go_flag,
                         opps.update_time                        AS fivetran_synced_opps,
                         acc_partn.billing_country               AS partner_country,
		 				 CASE 
							WHEN leads.converted_opportunity_id IS NULL THEN 1
	 					 	ELSE RANK()  OVER(PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date) END AS row_num
         FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
                  FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
                  LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
                  LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
		 		  --LEFT JOIN salesforce.v_gp_sfdc_user_current users ON users.id::text = opps.owner_id::text
                  --LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_id::text = leads.id::text OR usr_lead_opp.opp_id::text = opps.id::text
		 		  LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp on usr_lead_opp.lead_or_opp_id::text = CASE WHEN leads.id IS NULL 
	THEN opps.id ELSE leads.id END
     ),
	 
MQL as (
   Select Distinct
      'MQL' as Cohort_Stage,
      lead_id as lead_or_opp_id,
      MQL_Date::date as Point_time_date,
      *
   From Leads_Opps 
    WHERE (Leads_Opps.partner_acq_leads::text <<>> 'Yes'::text OR Leads_Opps.partner_acq_leads IS NULL) 
	AND Leads_Opps.lead_id IS NOT NULL
   ),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      Created_date::date as Point_time_date,
      *
   From Leads_Opps 
  WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.opp_id IS NOT NULL
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.s_a_l_by__sales__c::text = 'Yes'::text
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.opp_won = true
   ),
Opp_lost as (
   Select Distinct
      'Opp lost' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      --last_mod_date::date as Point_time_date,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
     WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.opp_won = false
   ),

Full_Union as (
   Select *
   From MQL
   Union All
   Select *
   From MQL_to_SQL
   Union AlL
   Select *
   From SQL_to_SAL
   Union AlL
   Select *
   From SAL_to_MSA
	Union All
   Select *
   From Opp_Lost
   )
SELECT * 
FROM Full_Union"
73265f6b-820c-6618-6d2e-748733c2f95b,Custom SQL Query+ (gpbidb) (2),postgres,"SELECT lead.id, lh.max AS lead_status_last_updated
   FROM salesforce.v_gp_sfdc_lead_current_pacific_time lead
     LEFT JOIN ( SELECT DISTINCT t1.lead_id,
            max(t1.created_date) AS max
           FROM salesforce.lead_history t1
          WHERE t1.is_deleted = false AND t1.field::text = 'Status'::text AND (t1.new_value::text = 'Disqualified'::text OR t1.new_value::text = 'Nurture'::text) AND t1.created_date = (( SELECT max(tmax.created_date) AS max
                   FROM salesforce.lead_history tmax
                  WHERE t1.id::text = tmax.id::text))
          GROUP BY t1.lead_id) lh ON lh.lead_id::text = lead.id::text
  WHERE lead.created_date BETWEEN NOW() - INTERVAL '2 YEARS' AND NOW()
  --lead.is_deleted IS FALSE"
73265f6b-820c-6618-6d2e-748733c2f95b,Custom SQL Query+ (gpbidb) (2),postgres,"SELECT opportunity.id, ofh.max AS opp_status_last_updated
   FROM salesforce.opportunity
     LEFT JOIN (SELECT DISTINCT t1.opportunity_id,
            max(t1.created_date) AS max
           FROM salesforce.opportunity_field_history t1
          WHERE t1.is_deleted = false AND t1.field::text = 'Opportunity_Status__c'::text AND t1.new_value::text = 'BDR Requalify'::text AND t1.created_date = (( SELECT max(tmax.created_date) AS max
                   FROM salesforce.opportunity_field_history tmax
                  WHERE t1.id::text = tmax.id::text))
          GROUP BY t1.opportunity_id) ofh ON ofh.opportunity_id::text = opportunity.id::text
  WHERE opportunity.is_deleted IS FALSE"
7536ef4c-7810-0cac-89a5-f9bb54956428,Opportunities (Salesforce),,
76e6d45d-173c-ac65-9268-0f47ce28f140,Custom SQL Query (gpbidb),postgres,"WITH MFA AS
	(
		SELECT DISTINCT gen_client
	 	FROM goglobal_gp_goglobal.mfa_rule
	),
cc_role as
	(
		SELECT  distinct cc.id as client_id,
			concat(first_name,' ', last_name) ""Client User"", 
			title ""Title"",
		 	is_no_longer_with_firm ""Is no Longer With Firm"",
			regexp_split_to_table(cp.roles, ',') AS roles,
			usr.email ""User Email"",
			case when usr.status='1' then 'New'
				 when usr.status='2' then 'Invitation Sent'
				 when usr.status='3' then 'Invitation Accepted'
				 when usr.status='4' then 'Locked'
				 when usr.status='5' then 'Accepted'
			end ""GG Invitation Status"",
            cp.IS_ENABLED ""Is Enabled"",
			usr.LAST_LOGIN_DATE ""Last login Date"",
			cp.date_created
		from goglobal_gp_goglobal.v_gp_gg_client_person_current  cp
		left join goglobal_gp_goglobal.v_gp_gg_client_current cc on cp.client_id = cc.id
		left join goglobal_gp_goglobal.v_gp_gg_user_current usr on cp.user_id = usr.id 
		where cc.is_demo_client='false' 
	),
client_users as
		(
			select *, 
				case when roles='1'then 'Company Admin'
				end ""Role""
			from cc_role
			where roles='1'
		)
SELECT DISTINCT client.id, 
       client.name ""Client"", 
	   case when client.status='1' then 'Active'
			 when client.status='2' then 'Inactive'
		end ""Status"",
	   CASE WHEN gen_client IS NOT NULL THEN 'Yes'
	   		ELSE 'No'
		END ""MFA Enabled"",
		CLIENT_USERS.*
FROM goglobal_gp_goglobal.v_gp_gg_client_current AS client
LEFT JOIN MFA on MFA.gen_client = client.id
LEFT JOIN CLIENT_USERS on CLIENT_USERS.CLIENT_ID = client.id
WHERE client.is_demo_client = FALSE"
774b0443-ad0c-c72a-3b66-8dd1aef0a34e,Severance Accrual,,
774b0443-ad0c-c72a-3b66-8dd1aef0a34e,Severance Accrual,postgres,"SELECT gl.*,tn.name 
FROM acumatica_integration.gp_acumatica_gl_transaction gl
left join acumatica_integration.tenant tn on gl.tenant_id::text=tn.id::text
WHERE ACCOUNT in('21090','50085','40085')"
774b0443-ad0c-c72a-3b66-8dd1aef0a34e,Severance Accrual,postgres,"select distinct id as professional_id, accounting_id as accounting_id_HISTO
			  from goglobal_gp_goglobal.professional_aud
			  where ACCOUNtING_ID IS NOT NULL"
4c2e4206-3622-e009-c300-632524a869ed,Custom SQL Query (gpbidb),postgres,"with roles as (
				select distinct
					concat(t2.first_name,' ', t2.last_name) as User_Name, 
					t3.email as User_EMAIL, 
					case when role='4' then 'Expense Approver 1' 
						 when role='10' then 'Expense Approver 2' 
					end  as roles, 
					t1.*
				from goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current t1
				left join goglobal_gp_goglobal.v_gp_gg_client_person_current t2  on t1.client_person_id = t2.id
				left join goglobal_gp_goglobal.v_gp_gg_user_current t3 on t2.user_id = t3.id
				where role in ('4','10')),
		EA_2 AS (SELECT Distinct * FROM ROLES WHERE ROLE='10'),
		EA_1 AS (SELECT Distinct * FROM ROLES WHERE ROLE='4'),
		Final_Roles as (
				Select Distinct
					t1.id as Professional_id, concat(t1.first_name,' ',t1.last_name) as professional,
					EA_1.USER_NAME AS Expense_approver, EA_1.user_email as EA_1_EMAIL,
					EA_2.USER_NAME AS Expense_approver_2, EA_2.user_email as EA_2_EMAIL
				From goglobal_gp_goglobal.v_gp_gg_professional_current t1
				Left Join EA_2 ON T1.ID=EA_2.PROFESSIONAL_ID
				Left Join EA_1 ON T1.ID=EA_1.PROFESSIONAL_ID
				where t1.is_failed_to_launch='false'), 
		Expenses_Zoho as (
				Select Distinct 
					a.id as Professional_id, 
					concat(a.first_name, ' ' , a.last_name) as Pro_Name, 
					a.is_failed_to_launch,
					c.name as Customer_Name, 
					C.id as Customer_id, 
					p4.name AS professional_working_country,
					b.date_created as zoho_expense_date_created, 
					b.report_status, 
					b.Zoho_expense_status, 
					b.id as zoho_report_id,
					b.is_expense_approved, 
					b.description,
					b.currency_code,
					b.total_amount as Zoho_total_amount, 
					b.report_number as Zoho_report_number, 
					b.Zoho_response, 
					b.user_id,
					lsp.legal_entity_name, 
					CBC.Accounting_id, 
					CASE when CBC.Bill_type='9' then 'Expense' else CBC.Bill_type
					end as GPP_Bill_type, 
					CBC.billing_cycle_id, 
					CBT.Client_Bill_id, 
					CASE WHEN CBC.status='1' THEN 'Draft'
						 WHEN CBC.status='2' THEN 'Client Approval'
						 WHEN CBC.status='3' THEN 'Submitted'
						 WHEN CBC.status='4' THEN 'LSP Approval'
						 WHEN CBC.status='5' THEN 'LSP Submitted'
						 WHEN CBC.status='6' THEN 'Ready to Validate'
						 WHEN CBC.status='7' THEN 'Preparing Bill'
						 WHEN CBC.status='8' THEN 'Generate Invoice'
						 WHEN CBC.status='9' THEN 'Ready to Send'
						 WHEN CBC.status='10' THEN 'Billed'
						 WHEN CBC.status='11' THEN 'Paid'
						 WHEN CBC.status='12' THEN 'Invoice in Progress'
						 WHEN CBC.status='13' THEN 'Invoice Error'
				  END as bill_status_GPP,
						   i.name AS customer_industry,
					CBT.Description as CBT_Description, 
					CBT.Notes 
				From goglobal_gp_goglobal.v_gp_gg_zoho_pre_approved_report_current b
				Left Join goglobal_gp_goglobal.v_gp_gg_professional_current a on a.id = b.professional_id
				Left Join goglobal_gp_goglobal.v_gp_gg_client_current c on b.client_id = c.id
				Left Join goglobal_gp_goglobal.v_gp_gg_zoho_expense_report_summary_current ZES on ZES.report_number = b.report_number
				Left Join goglobal_gp_goglobal.v_gp_gg_client_bill_transaction_current CBT on CBT.id = ZES.client_bill_transaction_id  
				Left Join goglobal_gp_goglobal.v_gp_gg_client_bill_current CBC on CBC.id = CBT.client_bill_id
				Left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current l ON a.lsp_country_id = l.id
				Left join goglobal_gp_goglobal.v_gp_gg_lsp_current lsp ON l.lsp_id = lsp.id
                                LEFT JOIN goglobal_gp_goglobal.v_gp_gg_industry_current AS i ON c.industry_id= i.id
				LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS p4 ON l.country_id=p4.id
				Where C.is_demo_client = false
		)
Select Distinct 
	Expenses_Zoho.*, 
	Final_Roles.Expense_approver,
	Final_Roles.EA_1_EMAIL,
	Final_Roles.Expense_approver_2, 
	Final_Roles.EA_2_EMAIL
From Expenses_Zoho 
Left Join Final_Roles on Expenses_Zoho.Professional_id = Final_Roles.Professional_id"
49fb086c-8387-c7e0-7aec-83b3752bc3ed,general_report (google_analytics.general_report) (gpbidb),,
49fb086c-8387-c7e0-7aec-83b3752bc3ed,general_report (google_analytics.general_report) (gpbidb),postgres,"SELECT date, goal_completion_location, SUM(goal_completions_all) AS goal_completions_all
FROM google_analytics.conversions_locations_report
WHERE date BETWEEN NOW() - INTERVAL '2 YEARS' AND NOW()
GROUP BY 1, 2
ORDER BY 1 DESC"
13cb3e17-051e-0bb9-4235-9474312b8074,Custom SQL Query (gpbidb),postgres,"SELECT DISTINCT a.*, 
				b.name as account_name2, 
				b.billing_country,
				b.professional_account_manager__c,
				c.name as account_name_manager,
				b.owner_id as account_name_id,
				d.is_it_a_partner_referal_c,
				d.required_detail_on_win_loss_c,
				d.m_a_c as M_A,
				f.name as account_name_full,
				b.is_gp_contractor_customer_c
FROM salesforce.v_gp_sfdc_marketing_mat_view AS A
LEFT JOIN salesforce.v_gp_sfdc_account_current_pacific_time AS B
ON a.account_id=b.id
LEFT JOIN salesforce.v_gp_sfdc_user_current AS C
ON b.professional_account_manager__c=c.id
LEFT JOIN salesforce.opportunity AS D
ON a.lead_or_opp_id=d.id
LEFT JOIN salesforce.v_gp_sfdc_user_current as F
ON b.owner_id=f.id"
14128445-553b-b1c6-1a20-2f7de4cf56ec,v_tableau_headcount_dashboard (goglobal_gp_goglobal.v_tableau_headcount_dashboard) (gpbidb),,
15dba4e9-274f-7bf3-75e9-195546fa0fd3,Custom SQL Query (gpbidb),postgres,"WITH Region AS (
SELECT
	ra.response_id,
	qo.text as Region
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310236566' and q.subtype <<>> 'descriptive_text' and q.id='690234916'
	GROUP BY 1,2
),
Department AS (
SELECT
	ra.response_id,
	qo.text as Department
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310236566' and q.subtype <<>> 'descriptive_text' and q.id='690236885'
	GROUP BY 1,2
),
Age AS (
SELECT
	ra.response_id,
	qo.text as Age
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310236566' and q.subtype <<>> 'descriptive_text' and q.id='690236033'
	GROUP BY 1,2
),
Gender AS (
SELECT
	ra.response_id,
	qo.text as Gender
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310236566' and q.subtype <<>> 'descriptive_text' and q.id='690240493'
	GROUP BY 1,2
)
SELECT
	sh.id,
	rh.response_status,
	Region.Region,
	Department.Department,
	Age.Age,
	Gender.Gender,
	ra.response_id,
	q.id as question_id,
	CASE WHEN q.id = '690242612' THEN 'Relevance of Information' ELSE qh.heading END AS Heading,
	sq.text as subquestion,
	ra.choice_id,
	qo.text,
	rh.total_time as total_time,
	rh.created_at as Start_Date,
	rh.updated_at as End_Date,
	q.family,
	q.subtype,
	q.required_text,
	rh.collector_id,
	cl.name,
	MAX(ra._fivetran_synced)
	FROM survey_monkey.survey_history sh
	LEFT JOIN  survey_monkey.survey_page sp
	ON sh.id = sp.survey_id
	LEFT JOIN survey_monkey.question q
	on sp.id = q.survey_page_id
	LEFT JOIN survey_monkey.question_heading qh
	on q.id = qh.question_id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.sub_question sq
 	on ra.row_id = sq.id
	LEFT JOIN survey_monkey.response_page rp
	on ra.response_page_id = rp.id
	LEFT JOIN survey_monkey.response_history rh
	on ra.response_id = rh.id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	LEFT JOIN Region
	on ra.response_id = Region.response_id
	LEFT JOIN Department
	on ra.response_id = Department.response_id
	LEFT JOIN Age
	on ra.response_id = Age.response_id
	LEFT JOIN Gender
	on ra.response_id = Gender.response_id
	LEFT JOIN survey_monkey.collector cl
	ON rh.collector_id=cl.id
	
WHERE sh._fivetran_active = true and q.subtype <<>> 'descriptive_text'  and sh.id = '310236566' and q.id not in ('690234916','690236885','690236033','690240493')
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
ORDER BY ra.response_id"
16d3f59e-9de9-cb0f-e1a0-31fd8f68ae87,gp_tableau_ltv_monthly_client_only (ltv.gp_tableau_ltv_monthly_client_only) (gpbidb),,
16d3f59e-9de9-cb0f-e1a0-31fd8f68ae87,v_tableau_client_revenue_combined (repo.v_tableau_client_revenue_combined) (gpbidb),,
16d3f59e-9de9-cb0f-e1a0-31fd8f68ae87,v_tableau_ltv_monthly_client_agg (ltv.v_tableau_ltv_monthly_client_agg) (gpbidb),,
16d3f59e-9de9-cb0f-e1a0-31fd8f68ae87,v_tableau_pvm_historical_wip (goglobal_goglobal.v_tableau_pvm_historical_wip) (gpbidb),,
188599e5-f3ca-fba9-56f1-f20c97329e9d,Custom SQL Query (gpbidb),postgres,"select 
subaccount ,
count(*) as records_count
from gp_acumatica_gl_transaction g
left outer join v_gp_mdm_dept m
on m.department_id = g.subaccount
where m.department_id is null
group by 
subaccount"
1ba7c224-d62d-7411-e8ed-8568fc3abaad,Table 1 + (All Dept - Tech Stack Tracker - BI Team (1)),,
1c90ca85-7acc-1305-1e9f-a208253ea97d,Addendums,,
1cb8a9b2-24a4-ec30-00f2-6038595ff0a6,v_gp_sfdc_master_marketing_dashboard (salesforce.v_gp_sfdc_master_marketing_dashboard) (gpbidb),,
1d3df948-753e-538b-6789-a5d69769ca9a,Case (Salesforce),,
1d8269ef-5d44-8557-843e-27051d9959a1,Oracle Eloqua,,
1e8956bf-e4cf-8edb-2d54-ebb54ace5b2c,Custom SQL Query+ (gpbidb),,
1e8956bf-e4cf-8edb-2d54-ebb54ace5b2c,Custom SQL Query+ (gpbidb),postgres,"select distinct client as ""Customer POP"",
		start_date as ""Date POP"",
		count(distinct professional_id) ""POP COUNT""
from goglobal_gp_goglobal.v_gp_gg_total_bills_mat
where type in ('Management Fee',
'Employer Burden Markup',
'Currency Transaction Fee',
'Insurance Premium Markup',
'Wiring Fee',
'Travel Insurance',
'Annual Fee',
'Medical Insurance Markup',
'Banking Fee',
'Professional Costs',
'Transaction Fee',
'G-P Contractor Fee',
'Discount',
'fxRate Variance')
and  start_date>>='2022-01-01' 
group by 1,2"
1f3ae973-c6e4-f936-7026-2024bcb030a0,Custom SQL Query+ (gpbidb),postgres,"WITH sfdc as ( WITH v_gp_sfdc_leads_and_opportunities AS (
         SELECT DISTINCT account.id AS account_id,
            account.name AS account_name,
                CASE
                    WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    ELSE date_trunc('month'::text, opps.created_date)
                END AS mql_cohort_month,
            leads.id AS lead_id,
            opps.b_d_r__date__c,
            opps.id AS opp_id,
            opps.amount,
            opps.engagement__type__c,
            leads.is_converted,
            leads.converted_opportunity_id,
            leads.country AS lead_country,
            leads.campaign__source__c AS campaign_name,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    ELSE NULL::text
                END AS lead_disqualified_reason,
            leads.status AS lead_status,
            opps.opportunity__status__c AS opp_status,
            opps.closed__lost__c,
            leads.country_code AS lead_country_code,
            leads.lead_tier_c,
            opps.lead_source_tier_c,
            leads.bdr_unqualified_reason__c AS bdr_unqualified_reason,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    ELSE NULL::text
                END AS country_code,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    ELSE NULL::text
                END AS client_country,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    ELSE NULL::text
                END AS client_region,
            leads.created_date AS mql_date,
            leads.converted_date,
            leads.partner_acquisition__c AS partner_acq_leads,
            usr_lead_opp.leads_owner_name,
            usr_lead_opp.leads_owner_manager,
            opps.created_date,
            opps.sales__accepted__date__c AS sal_accepted_date,
            opps.s_a_l__c,
            opps.s_a_l_by__sales__c,
            opps.record_type_bi__c,
            opps.close_date AS msa_date,
            opps.stage_name,
            opps.partner_acquisition__c AS partner_acq_opps,
            opps.is_won AS opp_won,
            opps.record_type_text_id_c AS record_type_opps,
            usr_lead_opp.opps_owner_name,
            usr_lead_opp.opps_owner_manager,
            opps.name AS opp_name,
            opps.type AS opp_type,
            acc_partn.partner_level__c AS partner_level,
            opps.pricing_model__c AS pricing_model_opps,
                CASE
                    WHEN leads.lead_source IS NULL THEN opps.lead_source
                    ELSE leads.lead_source
                END::text AS lead_or_opp_source,
            usr_lead_opp.partner_development_owner,
            usr_lead_opp.bdr_owner_name,
            usr_lead_opp.bdr_manager_name,
            acc_partn.name AS partner,
            acc_partn.client_region_billing_country AS partner_region,
            account.type AS account_type,
            account.pricing_model__c AS acc_pricing_model,
                CASE
                    WHEN (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text) THEN 'Non Partner Opp or Existing Business'::text
                    ELSE 'Partner Opp or Existing Business'::text
                END AS opp_go_flag,
            opps.immediate_headcount_c,
            opps.headcount_c,
            opps.de_country_c,
            opps.closed_lost_category_detail_c,
            opps.incumbent_solution_c,
            opps.competitorsthatare_involved_c,
            opps.contact_id,
            opps.primary_quotes_pricing_model_c,
            opps.competitors__involved__c,
            opps.other__competitor__c,
            opps.update_time AS fivetran_synced_opps,
            opps.total_professionals_c,
            leads.update_time AS fivetran_synced_leads,
            leads.company,
            leads.name,
            leads.email,
            acc_partn.billing_country AS partner_country,
            opps.existing_business_deal_classification_c,
            opps.existing_business_opp_type_c,
            opps.existing_business_opp_type_detail_c,
            users.name AS opp_owner_name,
            acc_partn.partner_agreement_effective_date__c AS partner_agreement_effective_date_c,
                CASE
                    WHEN leads.converted_opportunity_id IS NULL THEN 1::bigint
                    ELSE rank() OVER (PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date)
                END AS row_num,
            acc_partn.partner_vertical__c,
            acc_partn.vital_few__c,
            opps.utm_campaign_c AS utm_campaign_c_opps,
            leads.utm_campaign__c AS utm_campaign_c_leads,
            opps.hot_form_c AS hot_form_opps,
            leads.hot_form_c AS hot_form_leads,
	 		opps.closed_lost_competitor_name_c,
	 		opps.required_detail_on_win_loss_c
             FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
             LEFT JOIN salesforce.v_gp_sfdc_user_current users ON users.id::text = opps.owner_id::text
             LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_or_opp_id::text =
                CASE
                    WHEN leads.id IS NULL THEN opps.id
                    ELSE leads.id
                END::text
        ), mql AS (
         SELECT DISTINCT 'MQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.lead_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.mql_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.amount,
            v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few__c,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.utm_campaign_c_opps,
            v_gp_sfdc_leads_and_opportunities.utm_campaign_c_leads,
            v_gp_sfdc_leads_and_opportunities.hot_form_opps,
            v_gp_sfdc_leads_and_opportunities.hot_form_leads,
			v_gp_sfdc_leads_and_opportunities.closed_lost_competitor_name_c,
	 		v_gp_sfdc_leads_and_opportunities.required_detail_on_win_loss_c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE (v_gp_sfdc_leads_and_opportunities.partner_acq_leads::text <<>> 'Yes'::text OR v_gp_sfdc_leads_and_opportunities.partner_acq_leads IS NULL) AND v_gp_sfdc_leads_and_opportunities.lead_id IS NOT NULL
        ), mql_to_sql AS (
         SELECT DISTINCT 'MQL to SQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.created_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.amount,
            v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few__c,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.utm_campaign_c_opps,
            v_gp_sfdc_leads_and_opportunities.utm_campaign_c_leads,
            v_gp_sfdc_leads_and_opportunities.hot_form_opps,
            v_gp_sfdc_leads_and_opportunities.hot_form_leads,
			v_gp_sfdc_leads_and_opportunities.closed_lost_competitor_name_c,
	 		v_gp_sfdc_leads_and_opportunities.required_detail_on_win_loss_c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_id IS NOT NULL
        ), sql_to_sal AS (
         SELECT DISTINCT 'SQL to SAL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.amount,
            v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few__c,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.utm_campaign_c_opps,
            v_gp_sfdc_leads_and_opportunities.utm_campaign_c_leads,
            v_gp_sfdc_leads_and_opportunities.hot_form_opps,
            v_gp_sfdc_leads_and_opportunities.hot_form_leads,
			v_gp_sfdc_leads_and_opportunities.closed_lost_competitor_name_c,
	 		v_gp_sfdc_leads_and_opportunities.required_detail_on_win_loss_c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c::text = 'Yes'::text
        ), sal_to_msa AS (
         SELECT DISTINCT 'SAL to MSA'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.amount,
            v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few__c,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.utm_campaign_c_opps,
            v_gp_sfdc_leads_and_opportunities.utm_campaign_c_leads,
            v_gp_sfdc_leads_and_opportunities.hot_form_opps,
            v_gp_sfdc_leads_and_opportunities.hot_form_leads,
			v_gp_sfdc_leads_and_opportunities.closed_lost_competitor_name_c,
	 		v_gp_sfdc_leads_and_opportunities.required_detail_on_win_loss_c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = true
        ), closed_lost AS (
         SELECT DISTINCT 'Closed Lost'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.amount,
            v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few__c,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.utm_campaign_c_opps,
            v_gp_sfdc_leads_and_opportunities.utm_campaign_c_leads,
            v_gp_sfdc_leads_and_opportunities.hot_form_opps,
            v_gp_sfdc_leads_and_opportunities.hot_form_leads,
			v_gp_sfdc_leads_and_opportunities.closed_lost_competitor_name_c,
	 		v_gp_sfdc_leads_and_opportunities.required_detail_on_win_loss_c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = false AND v_gp_sfdc_leads_and_opportunities.stage_name::text = 'Closed Lost'::text
        ), full_union AS (
         SELECT mql.cohort_stage,
            mql.account_id,
            mql.account_name,
            mql.b_d_r__date__c,
            mql.lead_or_opp_id,
            mql.point_time_date,
            mql.mql_cohort_month,
            mql.lead_id,
            mql.opp_id,
            mql.is_converted,
            mql.converted_opportunity_id,
            mql.lead_country,
            mql.campaign_name,
            mql.lead_disqualified_reason,
            mql.lead_status,
            mql.amount,
            mql.engagement__type__c,
            mql.opp_status,
            mql.closed__lost__c,
            mql.lead_country_code,
            mql.country_code,
            mql.tier,
            mql.bdr_unqualified_reason,
            mql.client_region,
            mql.client_country,
            mql.mql_date,
            mql.converted_date,
            mql.partner_acq_leads,
            mql.leads_owner_name,
            mql.leads_owner_manager,
            mql.created_date,
            mql.sal_accepted_date,
            mql.s_a_l__c,
            mql.s_a_l_by__sales__c,
            mql.record_type_bi__c,
            mql.msa_date,
            mql.stage_name,
            mql.partner_acq_opps,
            mql.opp_won,
            mql.record_type_opps,
            mql.pricing_model_opps,
            mql.opps_owner_name,
            mql.opps_owner_manager,
            mql.opp_name,
            mql.opp_type,
            mql.partner_level,
            mql.lead_or_opp_source,
            mql.partner_development_owner,
            mql.bdr_owner_name,
            mql.bdr_manager_name,
            mql.partner,
            mql.partner_region,
            mql.account_type,
            mql.acc_pricing_model,
            mql.opp_go_flag,
            mql.immediate_headcount_c,
            mql.headcount_c,
            mql.de_country_c,
            mql.closed_lost_category_detail_c,
            mql.incumbent_solution_c,
            mql.competitorsthatare_involved_c,
            mql.contact_id,
            mql.primary_quotes_pricing_model_c,
            mql.competitors__involved__c,
            mql.other__competitor__c,
            mql.fivetran_synced_opps,
            mql.fivetran_synced_leads,
            mql.partner_country,
            mql.existing_business_deal_classification_c,
            mql.existing_business_opp_type_c,
            mql.existing_business_opp_type_detail_c,
            mql.opp_owner_name,
            mql.row_num,
            mql.partner_vertical__c,
            mql.vital_few__c,
            mql.partner_agreement_effective_date_c,
            mql.utm_campaign_c_opps,
            mql.utm_campaign_c_leads,
            mql.hot_form_opps,
            mql.hot_form_leads,
			mql.closed_lost_competitor_name_c,
	 		mql.required_detail_on_win_loss_c
           FROM mql
        UNION ALL
         SELECT mql_to_sql.cohort_stage,
            mql_to_sql.account_id,
            mql_to_sql.account_name,
            mql_to_sql.b_d_r__date__c,
            mql_to_sql.lead_or_opp_id,
            mql_to_sql.point_time_date,
            mql_to_sql.mql_cohort_month,
            mql_to_sql.lead_id,
            mql_to_sql.opp_id,
            mql_to_sql.is_converted,
            mql_to_sql.converted_opportunity_id,
            mql_to_sql.lead_country,
            mql_to_sql.campaign_name,
            mql_to_sql.lead_disqualified_reason,
            mql_to_sql.lead_status,
            mql_to_sql.amount,
            mql_to_sql.engagement__type__c,
            mql_to_sql.opp_status,
            mql_to_sql.closed__lost__c,
            mql_to_sql.lead_country_code,
            mql_to_sql.country_code,
            mql_to_sql.tier,
            mql_to_sql.bdr_unqualified_reason,
            mql_to_sql.client_region,
            mql_to_sql.client_country,
            mql_to_sql.mql_date,
            mql_to_sql.converted_date,
            mql_to_sql.partner_acq_leads,
            mql_to_sql.leads_owner_name,
            mql_to_sql.leads_owner_manager,
            mql_to_sql.created_date,
            mql_to_sql.sal_accepted_date,
            mql_to_sql.s_a_l__c,
            mql_to_sql.s_a_l_by__sales__c,
            mql_to_sql.record_type_bi__c,
            mql_to_sql.msa_date,
            mql_to_sql.stage_name,
            mql_to_sql.partner_acq_opps,
            mql_to_sql.opp_won,
            mql_to_sql.record_type_opps,
            mql_to_sql.pricing_model_opps,
            mql_to_sql.opps_owner_name,
            mql_to_sql.opps_owner_manager,
            mql_to_sql.opp_name,
            mql_to_sql.opp_type,
            mql_to_sql.partner_level,
            mql_to_sql.lead_or_opp_source,
            mql_to_sql.partner_development_owner,
            mql_to_sql.bdr_owner_name,
            mql_to_sql.bdr_manager_name,
            mql_to_sql.partner,
            mql_to_sql.partner_region,
            mql_to_sql.account_type,
            mql_to_sql.acc_pricing_model,
            mql_to_sql.opp_go_flag,
            mql_to_sql.immediate_headcount_c,
            mql_to_sql.headcount_c,
            mql_to_sql.de_country_c,
            mql_to_sql.closed_lost_category_detail_c,
            mql_to_sql.incumbent_solution_c,
            mql_to_sql.competitorsthatare_involved_c,
            mql_to_sql.contact_id,
            mql_to_sql.primary_quotes_pricing_model_c,
            mql_to_sql.competitors__involved__c,
            mql_to_sql.other__competitor__c,
            mql_to_sql.fivetran_synced_opps,
            mql_to_sql.fivetran_synced_leads,
            mql_to_sql.partner_country,
            mql_to_sql.existing_business_deal_classification_c,
            mql_to_sql.existing_business_opp_type_c,
            mql_to_sql.existing_business_opp_type_detail_c,
            mql_to_sql.opp_owner_name,
            mql_to_sql.row_num,
            mql_to_sql.partner_vertical__c,
            mql_to_sql.vital_few__c,
            mql_to_sql.partner_agreement_effective_date_c,
            mql_to_sql.utm_campaign_c_opps,
            mql_to_sql.utm_campaign_c_leads,
            mql_to_sql.hot_form_opps,
            mql_to_sql.hot_form_leads,
			mql_to_sql.closed_lost_competitor_name_c,
	 		mql_to_sql.required_detail_on_win_loss_c
           FROM mql_to_sql
        UNION ALL
         SELECT sql_to_sal.cohort_stage,
            sql_to_sal.account_id,
            sql_to_sal.account_name,
            sql_to_sal.b_d_r__date__c,
            sql_to_sal.lead_or_opp_id,
            sql_to_sal.point_time_date,
            sql_to_sal.mql_cohort_month,
            sql_to_sal.lead_id,
            sql_to_sal.opp_id,
            sql_to_sal.is_converted,
            sql_to_sal.converted_opportunity_id,
            sql_to_sal.lead_country,
            sql_to_sal.campaign_name,
            sql_to_sal.lead_disqualified_reason,
            sql_to_sal.lead_status,
            sql_to_sal.amount,
            sql_to_sal.engagement__type__c,
            sql_to_sal.opp_status,
            sql_to_sal.closed__lost__c,
            sql_to_sal.lead_country_code,
            sql_to_sal.country_code,
            sql_to_sal.tier,
            sql_to_sal.bdr_unqualified_reason,
            sql_to_sal.client_region,
            sql_to_sal.client_country,
            sql_to_sal.mql_date,
            sql_to_sal.converted_date,
            sql_to_sal.partner_acq_leads,
            sql_to_sal.leads_owner_name,
            sql_to_sal.leads_owner_manager,
            sql_to_sal.created_date,
            sql_to_sal.sal_accepted_date,
            sql_to_sal.s_a_l__c,
            sql_to_sal.s_a_l_by__sales__c,
            sql_to_sal.record_type_bi__c,
            sql_to_sal.msa_date,
            sql_to_sal.stage_name,
            sql_to_sal.partner_acq_opps,
            sql_to_sal.opp_won,
            sql_to_sal.record_type_opps,
            sql_to_sal.pricing_model_opps,
            sql_to_sal.opps_owner_name,
            sql_to_sal.opps_owner_manager,
            sql_to_sal.opp_name,
            sql_to_sal.opp_type,
            sql_to_sal.partner_level,
            sql_to_sal.lead_or_opp_source,
            sql_to_sal.partner_development_owner,
            sql_to_sal.bdr_owner_name,
            sql_to_sal.bdr_manager_name,
            sql_to_sal.partner,
            sql_to_sal.partner_region,
            sql_to_sal.account_type,
            sql_to_sal.acc_pricing_model,
            sql_to_sal.opp_go_flag,
            sql_to_sal.immediate_headcount_c,
            sql_to_sal.headcount_c,
            sql_to_sal.de_country_c,
            sql_to_sal.closed_lost_category_detail_c,
            sql_to_sal.incumbent_solution_c,
            sql_to_sal.competitorsthatare_involved_c,
            sql_to_sal.contact_id,
            sql_to_sal.primary_quotes_pricing_model_c,
            sql_to_sal.competitors__involved__c,
            sql_to_sal.other__competitor__c,
            sql_to_sal.fivetran_synced_opps,
            sql_to_sal.fivetran_synced_leads,
            sql_to_sal.partner_country,
            sql_to_sal.existing_business_deal_classification_c,
            sql_to_sal.existing_business_opp_type_c,
            sql_to_sal.existing_business_opp_type_detail_c,
            sql_to_sal.opp_owner_name,
            sql_to_sal.row_num,
            sql_to_sal.partner_vertical__c,
            sql_to_sal.vital_few__c,
            sql_to_sal.partner_agreement_effective_date_c,
            sql_to_sal.utm_campaign_c_opps,
            sql_to_sal.utm_campaign_c_leads,
            sql_to_sal.hot_form_opps,
            sql_to_sal.hot_form_leads,
			sql_to_sal.closed_lost_competitor_name_c,
	 		sql_to_sal.required_detail_on_win_loss_c
           FROM sql_to_sal
        UNION ALL
         SELECT sal_to_msa.cohort_stage,
            sal_to_msa.account_id,
            sal_to_msa.account_name,
            sal_to_msa.b_d_r__date__c,
            sal_to_msa.lead_or_opp_id,
            sal_to_msa.point_time_date,
            sal_to_msa.mql_cohort_month,
            sal_to_msa.lead_id,
            sal_to_msa.opp_id,
            sal_to_msa.is_converted,
            sal_to_msa.converted_opportunity_id,
            sal_to_msa.lead_country,
            sal_to_msa.campaign_name,
            sal_to_msa.lead_disqualified_reason,
            sal_to_msa.lead_status,
            sal_to_msa.amount,
            sal_to_msa.engagement__type__c,
            sal_to_msa.opp_status,
            sal_to_msa.closed__lost__c,
            sal_to_msa.lead_country_code,
            sal_to_msa.country_code,
            sal_to_msa.tier,
            sal_to_msa.bdr_unqualified_reason,
            sal_to_msa.client_region,
            sal_to_msa.client_country,
            sal_to_msa.mql_date,
            sal_to_msa.converted_date,
            sal_to_msa.partner_acq_leads,
            sal_to_msa.leads_owner_name,
            sal_to_msa.leads_owner_manager,
            sal_to_msa.created_date,
            sal_to_msa.sal_accepted_date,
            sal_to_msa.s_a_l__c,
            sal_to_msa.s_a_l_by__sales__c,
            sal_to_msa.record_type_bi__c,
            sal_to_msa.msa_date,
            sal_to_msa.stage_name,
            sal_to_msa.partner_acq_opps,
            sal_to_msa.opp_won,
            sal_to_msa.record_type_opps,
            sal_to_msa.pricing_model_opps,
            sal_to_msa.opps_owner_name,
            sal_to_msa.opps_owner_manager,
            sal_to_msa.opp_name,
            sal_to_msa.opp_type,
            sal_to_msa.partner_level,
            sal_to_msa.lead_or_opp_source,
            sal_to_msa.partner_development_owner,
            sal_to_msa.bdr_owner_name,
            sal_to_msa.bdr_manager_name,
            sal_to_msa.partner,
            sal_to_msa.partner_region,
            sal_to_msa.account_type,
            sal_to_msa.acc_pricing_model,
            sal_to_msa.opp_go_flag,
            sal_to_msa.immediate_headcount_c,
            sal_to_msa.headcount_c,
            sal_to_msa.de_country_c,
            sal_to_msa.closed_lost_category_detail_c,
            sal_to_msa.incumbent_solution_c,
            sal_to_msa.competitorsthatare_involved_c,
            sal_to_msa.contact_id,
            sal_to_msa.primary_quotes_pricing_model_c,
            sal_to_msa.competitors__involved__c,
            sal_to_msa.other__competitor__c,
            sal_to_msa.fivetran_synced_opps,
            sal_to_msa.fivetran_synced_leads,
            sal_to_msa.partner_country,
            sal_to_msa.existing_business_deal_classification_c,
            sal_to_msa.existing_business_opp_type_c,
            sal_to_msa.existing_business_opp_type_detail_c,
            sal_to_msa.opp_owner_name,
            sal_to_msa.row_num,
            sal_to_msa.partner_vertical__c,
            sal_to_msa.vital_few__c,
            sal_to_msa.partner_agreement_effective_date_c,
            sal_to_msa.utm_campaign_c_opps,
            sal_to_msa.utm_campaign_c_leads,
            sal_to_msa.hot_form_opps,
            sal_to_msa.hot_form_leads,
			sal_to_msa.closed_lost_competitor_name_c,
	 		sal_to_msa.required_detail_on_win_loss_c
           FROM sal_to_msa
        UNION ALL
         SELECT closed_lost.cohort_stage,
            closed_lost.account_id,
            closed_lost.account_name,
            closed_lost.b_d_r__date__c,
            closed_lost.lead_or_opp_id,
            closed_lost.point_time_date,
            closed_lost.mql_cohort_month,
            closed_lost.lead_id,
            closed_lost.opp_id,
            closed_lost.is_converted,
            closed_lost.converted_opportunity_id,
            closed_lost.lead_country,
            closed_lost.campaign_name,
            closed_lost.lead_disqualified_reason,
            closed_lost.lead_status,
            closed_lost.amount,
            closed_lost.engagement__type__c,
            closed_lost.opp_status,
            closed_lost.closed__lost__c,
            closed_lost.lead_country_code,
            closed_lost.country_code,
            closed_lost.tier,
            closed_lost.bdr_unqualified_reason,
            closed_lost.client_region,
            closed_lost.client_country,
            closed_lost.mql_date,
            closed_lost.converted_date,
            closed_lost.partner_acq_leads,
            closed_lost.leads_owner_name,
            closed_lost.leads_owner_manager,
            closed_lost.created_date,
            closed_lost.sal_accepted_date,
            closed_lost.s_a_l__c,
            closed_lost.s_a_l_by__sales__c,
            closed_lost.record_type_bi__c,
            closed_lost.msa_date,
            closed_lost.stage_name,
            closed_lost.partner_acq_opps,
            closed_lost.opp_won,
            closed_lost.record_type_opps,
            closed_lost.pricing_model_opps,
            closed_lost.opps_owner_name,
            closed_lost.opps_owner_manager,
            closed_lost.opp_name,
            closed_lost.opp_type,
            closed_lost.partner_level,
            closed_lost.lead_or_opp_source,
            closed_lost.partner_development_owner,
            closed_lost.bdr_owner_name,
            closed_lost.bdr_manager_name,
            closed_lost.partner,
            closed_lost.partner_region,
            closed_lost.account_type,
            closed_lost.acc_pricing_model,
            closed_lost.opp_go_flag,
            closed_lost.immediate_headcount_c,
            closed_lost.headcount_c,
            closed_lost.de_country_c,
            closed_lost.closed_lost_category_detail_c,
            closed_lost.incumbent_solution_c,
            closed_lost.competitorsthatare_involved_c,
            closed_lost.contact_id,
            closed_lost.primary_quotes_pricing_model_c,
            closed_lost.competitors__involved__c,
            closed_lost.other__competitor__c,
            closed_lost.fivetran_synced_opps,
            closed_lost.fivetran_synced_leads,
            closed_lost.partner_country,
            closed_lost.existing_business_deal_classification_c,
            closed_lost.existing_business_opp_type_c,
            closed_lost.existing_business_opp_type_detail_c,
            closed_lost.opp_owner_name,
            closed_lost.row_num,
            closed_lost.partner_vertical__c,
            closed_lost.vital_few__c,
            closed_lost.partner_agreement_effective_date_c,
            closed_lost.utm_campaign_c_opps,
            closed_lost.utm_campaign_c_leads,
            closed_lost.hot_form_opps,
            closed_lost.hot_form_leads,
			closed_lost.closed_lost_competitor_name_c,
	 		closed_lost.required_detail_on_win_loss_c
           FROM closed_lost
        )
 SELECT DISTINCT full_union.cohort_stage,
    full_union.account_id,
    full_union.account_name,
    full_union.b_d_r__date__c,
    full_union.lead_or_opp_id,
    full_union.point_time_date,
    full_union.mql_cohort_month,
    full_union.lead_id,
    full_union.opp_id,
    full_union.is_converted,
    full_union.converted_opportunity_id,
    full_union.lead_country,
    full_union.campaign_name,
    full_union.lead_disqualified_reason,
    full_union.lead_status,
    full_union.amount,
    full_union.engagement__type__c,
    full_union.opp_status,
    full_union.closed__lost__c,
    full_union.lead_country_code,
    full_union.country_code,
    full_union.tier,
    full_union.bdr_unqualified_reason,
    full_union.client_region,
    full_union.client_country,
    full_union.mql_date,
    full_union.converted_date,
    full_union.partner_acq_leads,
    full_union.leads_owner_name,
    full_union.leads_owner_manager,
    full_union.created_date,
    full_union.sal_accepted_date,
    full_union.s_a_l__c,
    full_union.s_a_l_by__sales__c,
    full_union.record_type_bi__c,
    full_union.msa_date,
    full_union.stage_name,
    full_union.partner_acq_opps,
    full_union.opp_won,
    full_union.record_type_opps,
    full_union.pricing_model_opps,
    full_union.opps_owner_name,
    full_union.opps_owner_manager,
    full_union.opp_name,
    full_union.opp_type,
    full_union.partner_level,
    full_union.lead_or_opp_source,
    full_union.partner_development_owner,
    full_union.bdr_owner_name,
    full_union.bdr_manager_name,
    full_union.partner,
    full_union.partner_region,
    full_union.account_type,
    full_union.acc_pricing_model,
    full_union.opp_go_flag,
    full_union.immediate_headcount_c,
    full_union.headcount_c,
    full_union.de_country_c,
    full_union.closed_lost_category_detail_c,
    full_union.incumbent_solution_c,
    full_union.competitorsthatare_involved_c,
    full_union.contact_id,
    full_union.primary_quotes_pricing_model_c,
    full_union.competitors__involved__c,
    full_union.other__competitor__c,
    full_union.fivetran_synced_opps,
    full_union.fivetran_synced_leads,
    full_union.partner_country,
    full_union.existing_business_deal_classification_c,
    full_union.existing_business_opp_type_c,
    full_union.existing_business_opp_type_detail_c,
    full_union.opp_owner_name,
    full_union.row_num,
    full_union.partner_vertical__c,
    full_union.vital_few__c,
    full_union.partner_agreement_effective_date_c,
    full_union.utm_campaign_c_opps,
    full_union.utm_campaign_c_leads,
    full_union.hot_form_opps,
    full_union.hot_form_leads,
	full_union.closed_lost_competitor_name_c,
	full_union.required_detail_on_win_loss_c
   FROM full_union
  WHERE full_union.row_num = 1 AND full_union.point_time_date >>= '2021-01-01'::date
  AND full_union.cohort_stage in ('SAL to MSA','Closed Lost')),
sbqq_1 AS ( SELECT DISTINCT 
			   	sbqq_1.id as quote_id,
				sbqq_1.created_date as created_date_quote,
				sbqq_1.name as quote_name,
				sbqq_1.owner_id as owner_id_quote,
				sbqq_1.last_modified_date as last_modified_date_quote,
		        sbqq_1.sbqq_status_c,
		        sbqq_1.sbqq_billing_name_c,
		   		sbqq_1.sbqq_opportunity_2_c,
				sbqq_1.approval_status_c,
		        sbqq_1.approval_indicator_c,
				sbqq_1.last_modified_by_id,
				sbqq_1.sbqq_account_c,
				sbqq_1.sbqq_days_quote_open_c,
				sbqq_1.sbqq_primary_c,
				sbqq_1.number_of_professionals_on_quote_c,
				sbqq_1.pricing_model_c,
                sbqq_1.sbqq_net_amount_c as net_amount_total,
                sbqq_1.pre_approved_minimum_fee_c,
				sbqq_1.currency_symbol_alike_quote_line_c,
				sbqq_1.is_gp_recruit_customer_c,
				sbqq_1.is_gp_contractor_customer_c,
				sbqq_1.complete_price_book_name_c,
				sbqq_1.estimated_monthly_cost_c,
                --sbqq_1.sum_of_gp_fees_c,
                sbqq_1.monthly_sum_of_salary_c as monthly_sum,
				sbqq_1.currency_iso_code,
				sbqq_1.test_group_c
FROM salesforce.sbqq_quote_c as sbqq_1
WHERE sbqq_1.is_deleted='FALSE'),
first_table as ( SELECT DISTINCT 
			   		sfdc.*, 
					sbqq_1.quote_id,
					sbqq_1.created_date_quote,
					sbqq_1.quote_name,
					sbqq_1.owner_id_quote,
					sbqq_1.last_modified_date_quote,
					sbqq_1.sbqq_status_c,
					sbqq_1.sbqq_billing_name_c,
					sbqq_1.approval_status_c,
		       		sbqq_1.approval_indicator_c,
					sbqq_1.last_modified_by_id,
					sbqq_1.sbqq_account_c,
					sbqq_1.sbqq_days_quote_open_c,
					sbqq_1.sbqq_primary_c,
					sbqq_1.number_of_professionals_on_quote_c,
					sbqq_1.pricing_model_c,
                    sbqq_1.net_amount_total,
                    sbqq_1.pre_approved_minimum_fee_c,
					sbqq_1.currency_symbol_alike_quote_line_c,
					sbqq_1.is_gp_recruit_customer_c,
					sbqq_1.is_gp_contractor_customer_c,
					sbqq_1.complete_price_book_name_c,
					sbqq_1.estimated_monthly_cost_c,
                    --sbqq_1.sum_of_gp_fees_c,
                    sbqq_1.monthly_sum,
					sbqq_1.test_group_c,
rate.conversion_rate,
			users.name as last_modified_name
FROM sfdc
LEFT JOIN sbqq_1
ON sfdc.lead_or_opp_id=sbqq_1.sbqq_opportunity_2_c
LEFT JOIN salesforce.currency_type as rate
ON sbqq_1.currency_iso_code=rate.iso_code
LEFT JOIN salesforce.v_gp_sfdc_user_current as users
ON sbqq_1.last_modified_by_id=users.id),
sbqq_2 as ( SELECT DISTINCT
		        sbqq_2.id AS quote_line_id, 
				sbqq_2.name AS quote_line_name, 
				sbqq_2.is_deleted,
				sbqq_2.currency_iso_code, 
				sbqq_2.created_date as created_date_line, 
				sbqq_2.last_modified_date, 
				sbqq_2.sbqq_quote_c, 
				sbqq_2.sbqq_additional_discount_c , 
				sbqq_2.sbqq_component_list_total_c , 
				sbqq_2.sbqq_component_total_c , 
				sbqq_2.sbqq_customer_price_c , 
				sbqq_2.sbqq_customer_total_c , 
				sbqq_2.sbqq_list_price_c , 
				sbqq_2.sbqq_list_total_c , 
				sbqq_2.sbqq_net_price_c , 
				sbqq_2.sbqq_net_total_c , 
				sbqq_2.sbqq_number_c , 
				sbqq_2.sbqq_original_price_c , 
				sbqq_2.sbqq_package_list_total_c , 
				sbqq_2.sbqq_package_total_c , 
				sbqq_2.sbqq_partner_price_c , 
				sbqq_2.sbqq_partner_total_c , 
				sbqq_2.sbqq_product_code_c , 
				sbqq_2.sbqq_product_name_c , 
				sbqq_2.sbqq_prorated_list_price_c , 
				sbqq_2.sbqq_prorated_price_c , 
				sbqq_2.sbqq_regular_price_c , 
				sbqq_2.sbqq_regular_total_c , 
				sbqq_2.sbqq_special_price_c , 
				sbqq_2.sbqq_total_discount_amount_c , 
				sbqq_2.sbqq_total_discount_rate_c , 
				sbqq_2.accruing_statutory_severance_c , 
				sbqq_2.additional_month_payment_c , 
				sbqq_2.x_13_th_month_payment_notes_c , 
				sbqq_2.estimated_social_charges_c , 
				sbqq_2.markup_on_expenses_c , 
				sbqq_2.monthly_service_fee_c , 
				sbqq_2.setup_fee_professional_c , 
				sbqq_2.vat_gst_c , 
				sbqq_2.base_c , 
				sbqq_2.variable_c , 
				sbqq_2.monthly_service_fee_calculated_c , 
				sbqq_2.setup_fee_per_additional_professional_c , 
				sbqq_2.minimum_monthly_service_fee_c , 
				sbqq_2.salary_bonus_c , 
				sbqq_2.minimum_monthly_service_fee_calculated_c , 
				sbqq_2.setup_total_all_hc_c , 
				sbqq_2.addendum_monthly_service_fee_original_c , 
				sbqq_2.estimated_employer_social_charges_on_bas_c , 
				sbqq_2.gp_fee_base_per_hc_c , 
				sbqq_2.estimated_employer_social_charges_on_var_c , 
				sbqq_2.gp_fee_variable_per_hc_c , 
				sbqq_2.fee_structure_c , 
				sbqq_2.monthly_fee_total_c , 
				sbqq_2.country_product_c , 
				sbqq_2.total_social_charges_hc_c , 
				sbqq_2.footnote_c , 
				sbqq_2.markup_on_expenses_notes_c , 
				sbqq_2.monthly_fee_variable_c , 
				sbqq_2.vat_per_hc_c , 
				sbqq_2.currency_transaction_and_wiring_c , 
				sbqq_2.total_monthly_cost_c , 
				sbqq_2.monthly_cost_of_doing_all_hc_c , 
				sbqq_2.product_name_text_c , 
				sbqq_2.monthly_currency_fee_c , 
				sbqq_2.currency_symbol_c , 
				sbqq_2.unique_identifier_c , 
				sbqq_2.x_13_th_14_th_month_addendum_notes_c , 
				sbqq_2.severance_addendum_notes_c , 
				sbqq_2.setup_fee_addendum_notes_c , 
				sbqq_2.vacation_pay_c , 
				sbqq_2.estimated_provident_fund_contribution_c , 
				sbqq_2.statutory_vacation_allowance_c , 
				sbqq_2.mandatory_pension_contribution_c , 
				sbqq_2.disability_insurance_per_professional_c , 
				sbqq_2.statutory_vacation_pay_bonus_c , 
				sbqq_2.statutory_unemployment_fund_cts_c , 
				sbqq_2.social_charges_addendum_notes_c , 
				sbqq_2.mandatory_financial_reserve_accrual_c , 
				sbqq_2.statutory_vacation_bonus_c , 
				sbqq_2.statutory_transient_bonus_c , 
				sbqq_2.monthly_service_fee_total_disc_c , 
				sbqq_2.monthly_service_fee_final_c , 
				sbqq_2.min_service_fee_total_disc_c , 
				sbqq_2.min_monthly_service_fee_final_c , 
				sbqq_2.total_discount_amount_c , 
				sbqq_2.statutory_vacation_pay_c , 
				sbqq_2.mandatory_medical_insurance_c , 
				sbqq_2.proposal_footnotes_c , 
				sbqq_2.base_monthly_c , 
				sbqq_2.variable_monthly_c , 
				sbqq_2.currency_transaction_and_wiring_monthly_c , 
				sbqq_2.mandatory_free_trade_zone_office_space_c , 
				sbqq_2.discount_tiers_applied_c , 
				sbqq_2.refundable_deposit_in_months_c , 
				sbqq_2.invoices_withdrawal_type_c , 
				sbqq_2.markup_on_expenses_amount_c , 
				sbqq_2.discount_tier_text_c , 
				sbqq_2.monthly_service_fee_discount_c , 
				sbqq_2.min_monthly_service_fee_discount_c , 
				sbqq_2.total_rep_s_discount_c , 
				sbqq_2.se_allowable_discount_c , 
				sbqq_2.rsd_discount_c , 
				sbqq_2.vp_discount_c , 
				sbqq_2.c_level_discount_c , 
				sbqq_2.need_rsd_approval_c , 
				sbqq_2.need_vp_approval_c , 
				sbqq_2.need_c_level_approval_c , 
				sbqq_2.estimated_social_charges_override_c , 
				sbqq_2.addendum_template_id_c , 
				sbqq_2.country_product_name_text_c , 
				sbqq_2.visa_fee_per_prof_including_g_l_fees_c , 
				sbqq_2.visa_fee_ren_per_prof_incl_g_l_fees_c , 
				sbqq_2.visa_renwl_fee_for_spouse_dependents_c , 
				sbqq_2.visa_fee_for_spouse_dependents_c , 
				sbqq_2.employment_pass_if_applicable_c , 
				sbqq_2.employment_pass_per_dependent_c , 
				sbqq_2.renewal_every_2_years_c , 
				sbqq_2.renewal_every_2_years_per_dependent_c , 
				sbqq_2.stat_employer_healthcare_contrib_c , 
				sbqq_2.foreign_worker_epi_c , 
				sbqq_2.issuance_of_req_letters_and_or_noc_s_c , 
				sbqq_2.if_required_arabic_translation_e_m_bc_c , 
				sbqq_2.x_1_time_3_rd_party_fees_for_pension_plan_c , 
				sbqq_2.statutory_pre_employment_medical_check_c , 
				sbqq_2.estimated_social_charges_ref_c , 
				sbqq_2.proposal_accrued_statory_severance_c , 
				sbqq_2.proposal_estimated_social_charges_c , 
				sbqq_2.proposal_indirect_tax_c , 
				sbqq_2.proposal_estimated_social_charges_in_c , 
				sbqq_2.monthly_service_fee_original_c , 
				sbqq_2.addendum_monthly_service_fee_c , 
				sbqq_2.addendum_estimated_social_charges_c , 
				sbqq_2.addendum_accrued_severance_c , 
				sbqq_2.addendum_markup_on_expenses_c , 
				sbqq_2.addendum_monthly_currency_transaction_c , 
				sbqq_2.addendum_indirect_tax_c , 
				sbqq_2.addendum_vacation_allowance_c , 
				sbqq_2.addendum_vacation_pay_c , 
				sbqq_2.addendum_financial_reserve_c , 
				sbqq_2.addendum_provident_fund_c , 
				sbqq_2.discounted_to_netprice_c , 
				sbqq_2.ann_tax_filling_fee_list_price_child_c , 
				sbqq_2.ann_tax_filling_fee_net_price_child_c , 
				sbqq_2.wiring_fee_list_price_child_c , 
				sbqq_2.wiring_fee_net_price_child_c , 
				sbqq_2.tran_admin_fee_list_price_child_c , 
				sbqq_2.tran_admin_fee_net_price_child_c , 
				sbqq_2.travel_fee_list_price_child_c , 
				sbqq_2.travel_fee_net_price_child_c , 
				sbqq_2.addendum_monthly_service_fee_initial_c , 
				sbqq_2.discounted_to_monthly_service_fee_c , 
				sbqq_2.discounted_to_minimum_monthly_service_c , 
				sbqq_2.discounted_to_social_charges_c , 
				sbqq_2.discounted_to_annual_tx_c , 
				sbqq_2.discounted_to_wiring_fee_c , 
				sbqq_2.discounted_to_one_time_trans_c , 
				sbqq_2.discounted_to_travel_insurance_c , 
				sbqq_2.switzerlandtext_1_c , 
				sbqq_2.switzerlandtext_2_c , 
				sbqq_2.monthly_fee_variable_original_c , 
				sbqq_2.addendum_net_price_c , 
				sbqq_2.monthly_service_overriding_disc_c , 
				sbqq_2.additional_month_payment_proposal_c , 
				sbqq_2.set_up_fee_currency_symbol_c , 
				sbqq_2.min_month_ser_fee_currency_symbol_c , 
				sbqq_2.annual_tax_currency_symbol_c , 
				sbqq_2.wiring_fee_currency_symbol_c , 
				sbqq_2.trans_fee_currency_symbol_c , 
				sbqq_2.travel_fee_currency_symbol_c , 
				sbqq_2.addendum_min_monthly_service_fee_c , 
				sbqq_2.addendum_annual_tax_fee_c , 
				sbqq_2.addendum_trans_fee_c , 
				sbqq_2.addendum_wiring_fee_c , 
				sbqq_2.addendum_travel_fee_c , 
				sbqq_2.markup_currency_symbol_c , 
				sbqq_2.monthly_service_fee_tier_notes_c , 
				sbqq_2.minimum_monthly_service_fee_tier_notes_c , 
				sbqq_2.monthly_service_fee_tier_c , 
				sbqq_2.minimum_monthly_service_fee_tier_c , 
				sbqq_2.additional_professional_checkbox_c , 
				sbqq_2.setup_fee_additional_professional_label_c , 
				sbqq_2.setup_fee_additional_professional_value_c , 
				sbqq_2.monthly_variable_overriding_disc_c , 
				sbqq_2.addendum_monthly_fee_variable_c , 
				sbqq_2.discounted_to_monthly_serv_fee_variable_c , 
				sbqq_2.additional_professional_currency_symbol_c , 
				sbqq_2.price_info_populated_c , 
				sbqq_2.country_number_c , 
				sbqq_2.proposal_total_monthly_cost_c , 
				sbqq_2.monthly_fee_variable_discount_c , 
				sbqq_2.monthly_fee_variable_final_c , 
				sbqq_2.estimated_social_charges_from_pbe_c , 
				sbqq_2.min_monthly_service_fee_original_c , 
				sbqq_2.monthly_service_variable_actual_disc_c , 
				sbqq_2.min_monthly_service_overriding_disc_c , 
				sbqq_2.original_monthly_total_fee_c , 
				sbqq_2.addendum_monthly_service_fee_variable_og_c , 
				sbqq_2.monthly_total_fee_discount_c , 
				sbqq_2.primary_product_c , 
				sbqq_2.ann_13_14_th_month_billed_amount_all_hc_c , 
				sbqq_2.ann_tax_trav_ins_all_hc_c , 
				sbqq_2.year_1_cost_c , 
				sbqq_2.subsequent_years_total_c , 
				sbqq_2.accruing_statutory_severance_currency_c , 
				sbqq_2.monthly_sum_of_salary_c , 
				sbqq_2.uae_office_space_fee_c , 
				sbqq_2.usa_state_c , 
				sbqq_2.usa_state_attrib_c , 
				sbqq_2.estimated_social_charges_from_pbe_value_c , 
				sbqq_2.x_14_th_month_note_c , 
				sbqq_2.custom_product_name_c , 
				sbqq_2.visa_cost_new_hire_1_year_lp_c , 
				sbqq_2.visa_cost_dependent_renewal_lp_c , 
				sbqq_2.visa_cost_other_resident_renewal_lp_c , 
				sbqq_2.visa_cost_new_hire_and_renewal_c , 
				sbqq_2.visa_cost_other_eu_eea_swiss_lp_c , 
				sbqq_2.visa_cost_new_hire_lp_c , 
				sbqq_2.visa_cost_renewal_lp_c , 
				sbqq_2.visa_cost_new_hire_2_year_lp_c , 
				sbqq_2.visa_cost_dependent_lp_c , 
				sbqq_2.visa_cost_other_eu_eea_swiss_natio_lp_c , 
				sbqq_2.adjusted_discount_c , 
				sbqq_2.visa_product_name_c , 
				sbqq_2.product_pricing_model_c , 
				sbqq_2.discount_beyond_preapproved_mgmt_fee_c , 
				sbqq_2.discount_beyond_preapproved_one_time_fee_c , 
				sbqq_2.pre_approved_management_fee_percentage_c , 
				sbqq_2.discount_beyond_preapproved_minimum_fee_c , 
				sbqq_2.country_product_iso_c
FROM salesforce.sbqq_quote_line_c AS sbqq_2
WHERE sbqq_2.is_deleted='FALSE')
SELECT DISTINCT 
first_table.*,
sbqq_2.*
FROM first_table
LEFT JOIN sbqq_2
ON first_table.quote_id=sbqq_2.sbqq_quote_c"
1f3ae973-c6e4-f936-7026-2024bcb030a0,Custom SQL Query+ (gpbidb),postgres,"WITH platform_match AS(
SELECT      sfdc.id AS sfdc_account_id,
            mdm_match.source_id AS mdm_match,
			gpp.id AS integration_match,
			CASE WHEN gpp.id::VARCHAR IS NOT NULL THEN gpp.id::VARCHAR
            ELSE mdm_match.source_id END AS id_match

FROM salesforce.v_gp_sfdc_account_current AS sfdc
LEFT JOIN repo.v_gp_mdm_customer AS mdm ON sfdc.id = mdm.source_id
LEFT JOIN (SELECT *
    FROM repo.v_gp_mdm_customer
    WHERE source = 'GoGlobal Client'
    ) AS mdm_match
    ON mdm.parent_name = mdm_match.parent_name	
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS gpp
			  ON sfdc.id = gpp.salesforce_account_id)

SELECT platform_match.*,gpp.id as gpp_id,gpp.name, gpp.accounting_id AS accumatica_id
FROM platform_match
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS gpp ON platform_match.id_match = gpp.id::VARCHAR"
1f4bd73e-06c1-81eb-22e3-f2438b71d081,Clients,postgres,"WITH A AS(select	t1.id, t1.status, t1.date_created,t1.date_modified,t1.modified_by,t1.version,t1.name, t1.accounting_id,
		t1.gp_account_manager_id, concat(t9.first_name,' ',t9.last_name) as Acc_Man_GG,
		ROW_NUMBER () OVER (partition by T1.ID ORDER BY T1.DATE_MODIFIED DESC) as row_number
FROM goglobal_gp_goglobal.client t1
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9 on t1.gp_account_manager_id=t9.id
where is_demo_client='false'
		  order by ROW_NUMBER),
B AS(SELECT A.* FROM A WHERE ROW_NUMBER='1'),
C AS(SELECT id AS ID2, status AS STATUS2, date_created AS DATE_CREATED2,date_modified AS DATE_MODIFIED2,modified_by AS MODIFIED_BY_2,
	 		version AS VERSION2,name AS NAME2,accounting_id AS ACCOUNTING_ID2,
		gp_account_manager_id AS gp_account_manager_id2 , Acc_Man_GG AS Acc_Man_GG2,
		row_number AS row_number2 
	 FROM A WHERE ROW_NUMBER='2')
SELECT B.*,C.*, 
		CASE WHEN B.DATE_CREATED >> current_date - interval '120 days' THEN 'NEW' ELSE 'REMAIN' END AS NEW,
		CASE WHEN B.NAME<<>>C.NAME2 THEN 'CHANGE' ELSE 'REMAIN'END AS NAME_C,
		CASE WHEN B.ACCOUNTING_ID<<>>C.ACCOUNTING_ID2 THEN 'CHANGE' ELSE 'REMAIN'END AS ACCOUNTING_ID_C,
		CASE WHEN B.ACC_MAN_GG<<>>C.ACC_MAN_GG2 THEN 'CHANGE' ELSE 'REMAIN'END AS ACC_MAN_CN
FROM B left join C on b.id=c.id2
order by b.id"
1f4bd73e-06c1-81eb-22e3-f2438b71d081,Countries (gpbidb),postgres,"with a as(select t1.id,t1.name as Country,t1.date_modified,t1.current_flag,t1.version_num, t1.country_ops_lead,Concat(t5.first_name,' ',t5.last_name) as country_ops_lead_n,
ROW_NUMBER () OVER (partition by T1.ID ORDER BY T1.version_num DESC) as row_number
from repo.gp_gg_country t1
left join repo.v_gp_gg_gp_person_current t5 on T1.country_ops_lead=t5.id
where is_currency_only='false'
order by id,version_num),
b as(select a.* from a where row_number='1'  order by Country),
c as(select a.id as id2,
	 a.country as country2,a.DATE_MODIFIED as DATE_MODIFIED2,
	 a.current_flag as current_flag2,
	 a.version_num as version_num2,	
	 a.country_ops_lead as country_ops_lead_2,
	 a.country_ops_lead_n as country_ops_lead_n2,
	 a.row_number as row_number2
	 from a where row_number='2'  order by Country)
SELECT B.*,C.*,
case when b.country_ops_lead_n<<>>c.country_ops_lead_n2 then 'CHANGE' ELSE 'REMAIN' END AS country_ops_lead_n_C
from b left join c on b.id=c.id2"
1f4bd73e-06c1-81eb-22e3-f2438b71d081,Billing Manager y HR SPe (gpbidb),postgres,"WITH A AS(SELECT LSP_ID,T3.NAME,T1.DATE_MODIFIED,T1.COUNTRY_ID, t4.name as Country,T1.VERSION_NUM,GP_BILLING_MANAGER_ID, 
	concat(t2.first_name,' ',t2.last_name) as billing_manager,
	Concat(t5.first_name,' ',t5.last_name) as country_ops_lead_n,
ROW_NUMBER () OVER (partition by T1.ID,COUNTRY_ID ORDER BY T1.version_num DESC) as row_number
FROM repo.gp_gg_lsp_country  T1
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t2	on t1.gp_billing_manager_id=t2.id
LEFT JOIN goglobal_gp_goglobal.V_GP_GG_LSP_CURRENT T3 ON T1.LSP_ID=T3.ID
LEFT JOIN goglobal_gp_goglobal.V_gp_GG_COUNTRY_CURRENT T4 ON T4.ID=T1.COUNTRY_ID
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t5 on T4.country_ops_lead=t5.id
ORDER BY LSP_ID,COUNTRY_ID,T1.VERSION_NUM),
b as(select a.* from a where row_number='1'  order by LSP_id,COUNTRY_ID),
c as(select a.LSP_id as LSP_id2,a.name as name2,a.DATE_MODIFIED as DATE_MODIFIED2,
	 A.COUNTRY_ID AS COUNTRY_ID2,
	 a.country as country2,
	 A.VERSION_NUM AS VERSION_NUM2,
	a.billing_manager as billing_manager2,
	 a.country_ops_lead_n as country_ops_lead_n2,
	 a.row_number as row_number2
	 from a where row_number='2'  order by LSP_id,COUNTRY_ID)
SELECT B.*,C.*,
case when b.billing_manager<<>>c.billing_manager2 then 'CHANGE' ELSE 'REMAIN' END AS bILLIN_MAN_C,
case when b.country_ops_lead_n<<>>c.country_ops_lead_n2 then 'CHANGE' ELSE 'REMAIN' END AS country_ops_lead_C
FROM B left join C on b.LSP_id=c.LSP_id2 and b.country_ID=c.country_ID2
order by LSP_ID, COUNTRY_ID"
1f4bd73e-06c1-81eb-22e3-f2438b71d081,ACC MAN,postgres,"WITH A AS(select	t1.id, t1.status, t1.date_created,t1.date_modified,t1.modified_by,t1.version,t1.name, t1.accounting_id,
		t1.gp_account_manager_id, concat(t9.first_name,' ',t9.last_name) as Acc_Man_GG,
	dense_rank () OVER (partition by T1.ID ORDER BY T1.DATE_MODIFIED DESC) as row_number
FROM goglobal_gp_goglobal.client t1
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9 on t1.gp_account_manager_id=t9.id
where is_demo_client='false' 
		  order by ROW_NUMBER),
B AS(SELECT A.* FROM A WHERE ROW_NUMBER='1'),
C AS(SELECT id AS ID2, status AS STATUS2, date_created AS DATE_CREATED2,date_modified AS DATE_MODIFIED2,modified_by AS MODIFIED_BY_2,
	 		version AS VERSION2,name AS NAME2,accounting_id AS ACCOUNTING_ID2,
		gp_account_manager_id AS gp_account_manager_id2 , Acc_Man_GG AS Acc_Man_GG2,
		row_number AS row_number2 
	 FROM A WHERE ROW_NUMBER='2')
select distinct b.name,b.acc_man_gg,min(b.date_modified), c.acc_man_gg2 	
from b left join C on b.id=c.id2
group by 1,2,4"
23de2b92-729c-acab-15a5-d2248eb18c31,promoted_tweet_locations_report (twitter_ads.promoted_tweet_locations_report) (gpbidb),postgres,"SELECT camp.*
FROM
	twitter_ads.campaign_history camp
	INNER JOIN
		(
			SELECT
				id
			  , max(updated_at) AS updated_at
			FROM
				twitter_ads.campaign_history
			group by
				id
		)
		camp1
		ON
			camp.id            =camp1.id
			AND camp.updated_at=camp1.updated_at
WHERE
	deleted <<>> true"
23de2b92-729c-acab-15a5-d2248eb18c31,promoted_tweet_locations_report (twitter_ads.promoted_tweet_locations_report) (gpbidb),postgres,"SELECT line.*
FROM
	twitter_ads.line_item_history line
	INNER JOIN
		(
			SELECT
				id
			  , max(updated_at) AS updated_at
			FROM
				twitter_ads.line_item_history
			group by
				id
		)
		line1
		ON
			line.id            =line1.id
			AND line.updated_at=line1.updated_at
WHERE
	deleted <<>> true"
23de2b92-729c-acab-15a5-d2248eb18c31,promoted_tweet_locations_report (twitter_ads.promoted_tweet_locations_report) (gpbidb),postgres,"SELECT
	account_id
  , date
  , placement
  , promoted_tweet_id as id
  , CASE WHEN segment = 'Hong Kong SAR China'
  	THEN 'Hong Kong'
	ELSE segment END AS segment
  , billed_charge_local_micro
  , impressions
  , video_content_starts
  , engagements
  , clicks
  , video_views_25
  , media_views
  , video_total_views
  , video_views_50
  , video_6_s_views
  , video_3_s_100_pct_views
  , video_views_75
  , billed_engagements
  , video_views_100
  , follows
  , url_clicks
  , likes
  , unfollows
  , retweets
  , media_engagements
  , replies
  , card_engagements
  , 'tweet' as promoted_tweet_or_account
FROM
	twitter_ads.promoted_tweet_locations_report
UNION ALL
SELECT
	account_id
  , date
  , placement
  , promoted_account_id as id
  , CASE WHEN segment = 'Hong Kong SAR China'
  	THEN 'Hong Kong'
	ELSE segment END AS segment
  , billed_charge_local_micro
  , impressions
  , video_content_starts
  , engagements
  , clicks
  , video_views_25
  , media_views
  , video_total_views
  , video_views_50
  , video_6_s_views
  , video_3_s_100_pct_views
  , video_views_75
  , billed_engagements
  , video_views_100
  , follows
  , url_clicks
  , likes
  , unfollows
  , retweets
  , media_engagements
  , replies
  , card_engagements
  , 'account' as promoted_tweet_or_account
FROM
	twitter_ads.promoted_account_locations_report"
23de2b92-729c-acab-15a5-d2248eb18c31,promoted_tweet_locations_report (twitter_ads.promoted_tweet_locations_report) (gpbidb),postgres,"SELECT
	prt.id
  , prt.updated_at
  , prt.line_item_id
  , prt.tweet_id AS tweet_or_user_id
  , prt.entity_status
  , prt.created_at
  , prt.approval_status
  , 'tweet' as promoted_tweet_or_account_history
FROM
	twitter_ads.promoted_tweet_history prt
	INNER JOIN
		(
			SELECT
				id
			  , max(updated_at) AS updated_at
			FROM
				twitter_ads.promoted_tweet_history
			group by
				id
		)
		prt1
		ON
			prt.id            =prt1.id
			AND prt.updated_at=prt1.updated_at
WHERE
	deleted <<>> true
UNION ALL
SELECT
	pra.id
  , pra.updated_at
  , pra.line_item_id
  , pra.user_id AS tweet_or_user_id
  , pra.entity_status
  , pra.created_at
  , pra.approval_status
  , 'account' as promoted_tweet_or_account_history
FROM
	twitter_ads.promoted_account_history pra
	INNER JOIN
		(
			SELECT
				id
			  , max(updated_at) AS updated_at
			FROM
				twitter_ads.promoted_account_history
			group by
				id
		)
		pra1
		ON
			pra.id            =pra1.id
			AND pra.updated_at=pra1.updated_at
WHERE
	deleted <<>> true"
23de2b92-729c-acab-15a5-d2248eb18c31,promoted_tweet_locations_report (twitter_ads.promoted_tweet_locations_report) (gpbidb),,
1341aa65-d589-3d44-f2a2-afd7ff6e7979,Marketing View (gpbidb),postgres,"WITH members AS(
	SELECT mc.campaign_id, count(distinct mc.id) AS number_of_members
 	FROM salesforce.v_gp_sfdc_campaign_member_current mc
	LEFT JOIN  salesforce.v_gp_sfdc_lead_current_pacific_time leads ON mc.lead_id = leads.id
 	--WHERE leads.partner_acquisition__c <<>> 'Yes' OR leads.partner_acquisition__c IS NULL
 	GROUP BY mc.campaign_id
	ORDER BY 1
)
,

leadnum AS (SELECT mc.campaign_id, count(distinct mc.lead_id) AS number_of_leads
 	FROM salesforce.v_gp_sfdc_campaign_member_current mc
	LEFT JOIN  salesforce.v_gp_sfdc_lead_current_pacific_time leads ON mc.lead_id = leads.id
 	WHERE --(leads.partner_acquisition__c <<>> 'Yes' OR leads.partner_acquisition__c IS NULL) AND
	type = 'Lead'
 	GROUP BY campaign_id
	ORDER BY 1)
,

contactnum AS (SELECT mc.campaign_id, count(distinct mc.id) AS number_of_contacts
 	FROM salesforce.v_gp_sfdc_campaign_member_current mc
	LEFT JOIN  salesforce.v_gp_sfdc_lead_current_pacific_time leads ON mc.lead_id = leads.id
 	WHERE --(leads.partner_acquisition__c <<>> 'Yes' OR leads.partner_acquisition__c IS NULL) AND
	type = 'Contact'
 	GROUP BY campaign_id
	ORDER BY 1)
,

opps AS(
SELECT mc.campaign_id, 
CASE
         WHEN mc.contact_id IS NOT NULL AND oc.id IS NOT NULL THEN oc.id
         WHEN mc.contact_id IS NOT NULL AND oc.id IS NULL THEN leads.converted_opportunity_id
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NULL AND leads.converted_opportunity_id IS NOT NULL THEN leads.converted_opportunity_id
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NOT NULL AND leads.converted_opportunity_id IS NULL THEN mc.lead_id
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NOT NULL AND leads.converted_opportunity_id IS NOT NULL THEN leads.converted_opportunity_id
         ELSE NULL
      END AS lead_or_opp_id,
CASE
         WHEN mc.contact_id IS NOT NULL AND oc.id IS NOT NULL THEN 'Opp contact'
         WHEN mc.contact_id IS NOT NULL AND oc.id IS NULL THEN 'Opp'
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NULL AND leads.converted_opportunity_id IS NOT NULL THEN 'Opp'
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NOT NULL AND leads.converted_opportunity_id IS NULL THEN 'Lead'
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NOT NULL AND leads.converted_opportunity_id IS NOT NULL THEN 'Opp'     
	     ELSE 'Nothing'
      END AS lead_or_opp,
	CASE 
	WHEN mc.has_responded = false THEN 'Never responded'
	WHEN mc.has_responded = true AND mc.first_responded_date <<= COALESCE(oc.close_date, oc2.close_date) THEN 'In time'
	WHEN mc.has_responded = true AND mc.first_responded_date >> COALESCE(oc.close_date, oc2.close_date) THEN 'Too late'
	WHEN COALESCE(oc.close_date, oc2.close_date) IS NULL THEN 'Not closed'
    ELSE NULL::text
END AS response_member_time_flag

FROM salesforce.v_gp_sfdc_campaign_member_current mc
	LEFT JOIN salesforce.v_gp_sfdc_campaign_current ca ON mc.campaign_id = ca.id
	LEFT JOIN salesforce.v_gp_sfdc_opportunity_current_pacific_time  oc ON oc.contact_id = mc.contact_id
	LEFT JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON mc.lead_id = leads.id
	LEFT JOIN salesforce.v_gp_sfdc_opportunity_current_pacific_time  oc2 ON oc2.id = leads.converted_opportunity_id
        WHERE (oc.type <<>> 'Existing Business' OR oc.type IS NULL)
)
,
spend_info AS(	
SELECT ""Marketing Teams"" AS teams, 
""Campaign Name"" AS campaign, 
CONCAT(""Period"",'-01')::date AS dates, 
""Value"" AS spend, 
run_date
	FROM anaplan.marketing_spend_by_campaign_anaplan
	WHERE ""Campaign Name"" IS NOT NULL AND ""Period"" NOT ILIKE 'FY%'
	AND ""Line Item"" = 'Spend  $'
	),
campaign_spend AS(
SELECT campaign, SUM(spend) AS total_spend
FROM spend_info AS s
WHERE dates <<= date_trunc('month', now())::date - 1
GROUP BY campaign)


SELECT ca.id AS campaign_id, ca.name AS campaign, ca.type AS campaign_type, ca.status AS campaign_status,
ca.owner_id, ow.name AS campaign_owner, ow.title AS owner_title, ow.company_name AS owner_company,
 CASE
         WHEN ca2.geo_c IS NULL AND ca2.campaign_country_c IS NOT NULL THEN ca2.campaign_country_c
         WHEN ca2.geo_c IS NOT NULL AND ca2.campaign_country_c IS NULL THEN ca2.geo_c
         WHEN ca2.geo_c IS NOT NULL AND ca2.campaign_country_c IS NOT NULL THEN ca2.geo_c
         ELSE NULL::text
      END AS campaign_region,
ca.start_date as campaign_start, ca.end_date AS campaign_end, 
ca.is_active, ca.description, 
cs.total_spend,
CASE
	WHEN me.number_of_members IS NULL THEN 0
	ELSE me.number_of_members
END AS number_of_members,
CASE
	WHEN le.number_of_leads IS NULL THEN 0
	ELSE le.number_of_leads
END AS number_of_leads_no_contact,
CASE
	WHEN cn.number_of_contacts IS NULL THEN 0
	ELSE cn.number_of_contacts
END AS number_of_contacts_no_partner,
ca.number_of_leads, ca.number_of_converted_leads, ca.number_of_contacts, 
ca.number_of_responses, ca.number_of_opportunities, ca.number_of_won_opportunities,
opps.lead_or_opp_id,
opps.lead_or_opp,
opps.response_member_time_flag,
ca2.campaign_type_specific_c, 
ca2.audience_c,
ca2.fcrm_fcr_campaign_sourced_by_c
FROM salesforce.v_gp_sfdc_campaign_current ca
LEFT JOIN salesforce.v_gp_sfdc_user_current ow ON ow.id = ca.owner_id
LEFT JOIN salesforce.campaign ca2 ON ca.id = ca2.id
LEFT JOIN members me ON me.campaign_id = ca.id
LEFT JOIN leadnum le ON le.campaign_id = ca.id
LEFT JOIN contactnum cn ON cn.campaign_id = ca.id
LEFT JOIN campaign_spend cs ON cs.campaign = ca.name
LEFT JOIN opps ON opps.campaign_id = ca.id"
1341aa65-d589-3d44-f2a2-afd7ff6e7979,Marketing View (gpbidb),postgres,"WITH 
max_dates AS(
	SELECT opportunity_id,
		   MAX(rank) AS latest	
FROM salesforce.v_gp_sfdc_opportunity_stage_duration
WHERE NOT(prev_stage_name = to_stage_name AND to_stage_name = 'Closed Lost')
GROUP BY opportunity_id),
opp_history AS(
SELECT DISTINCT opportunity_id, 
		prev_stage_name AS prev_stage, 
		to_stage_name AS final_stage,
		stage_last_modified AS last_mod_date
FROM salesforce.v_gp_sfdc_opportunity_stage_duration osd
LEFT JOIN max_dates mx USING(opportunity_id)
WHERE rank = latest
),
Leads_Opps as ( /*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
   Select Distinct
      CASE
         WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
         ELSE date_trunc('month'::text, opps.created_date)
      END AS MQL_Cohort_Month,
      leads.id as lead_id,
      opps.id as opp_id,
      leads.is_converted,
      leads.converted_opportunity_id,
      leads.country as lead_country,
      leads.campaign__source__c as campaign_name,
					--opps.bdr_owner__c as bdr_owner_test,
					--opps_bdr_manager.manager_id as bdr_manager_id_test,
					--bdr_manager.name as bdr_manager_test,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_disqualified_reason__c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c
         ELSE NULL::text
      END AS lead_disqualified_reason,
       opps.closed__lost__c,
      leads.status AS lead_status,
      leads.country_code AS lead_country_code,
       CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_source_tier_c
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_tier_c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_source_tier_c
         ELSE NULL::text
      END AS tier,
      --leads.lead_disqualified_reason__c as lead_disqualified_reason,
      leads.bdr_unqualified_reason__c as bdr_unqualified_reason,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
         ELSE NULL::text
      END AS client_region,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country_code
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country_code
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country_code
         ELSE NULL::text
      END AS country_code,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
         ELSE NULL::text
                END AS client_country,
      leads.created_date AS mql_date,
      leads.converted_date,
      leads.partner_acquisition__c AS partner_acq_leads,
      --leads_owner.name as leads_owner_name,
      --leads_owner_manager.name as leads_owner_manager,
      opps.created_date AS opp_created_date,
	  opps.last_modified_date AS opp_last_modified_date,
      opps.created_date,
	  opps.potential_partner_lead__c,
      opps.sales__accepted__date__c as SAL_Accepted_Date,
      opps.s_a_l__c,
      opps.s_a_l_by__sales__c,
      opps.record_type_bi__c,
      opps.is_closed AS opp_closed,
      opps.close_date AS msa_date,
      opps.stage_name,
      opps.partner_acquisition__c AS partner_acq_opps,
      opps.type AS opportunity_type,
      opps.is_won AS opp_won,
      opps.what_is_your_primary_product_interest__c AS what_is_opps,
      opps.record_type_text_id_c AS record_type_opps,
      opps.pricing_model__c AS pricing_model_opps,
      --opps_owner.name as opps_owner_name,
      --opps_owner_manager.name as opps_owner_manager,
      opps.name AS opp_name,
	sfdc_opp.closed_lost_competitor_name_c AS lost_to_competitor,
		leads.hot_form_c AS hot_form_leads,
	opps.hot_form_c AS hot_form_opps,
	CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.b_d_r__date__c::date
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN sfdc_lead.bdr_date_c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.b_d_r__date__c::date
         ELSE NULL
      END AS b_d_r__date__c,
     -- opps.b_d_r__date__c,
      opps.type AS opp_type,
      opps.is_won AS won_flag,
      opps.partner_level__c AS partner_level,
      opps.update_time AS fivetran_synced_opps,
      --opps.lead_disqualified_reason__c AS lead_disqualified_reason,
      opps.pricing_model__c AS opp_pricing_model,
	/*CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps_owner_role.name
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner_role.name
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps_owner_role.name
         ELSE NULL::text
      END AS owner_role,*/
	/*CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps_owner.title
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner.title
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN leads_owner.title
         ELSE NULL::text
      END AS leads_owner_title,*/
	  leads_owner.title AS leads_owner_title,
 	  CASE
		WHEN leads_owner.title IN ('BDR','Business Development Manager',
			'Business Development Representative','Busines Development Representative',
			'Business Development Team Lead', 'Director of Business Development',
			'Senior Business Development Representative','Senior Business Development Trainer',
			'Senior Manager, Business Development','Vice President, Global Outbound'
		) THEN 'BDR lead'
		ELSE 'Non-BDR lead'
		END AS lead_owner_title_flag,
      CASE
         WHEN leads.lead_source IS NULL THEN opps.lead_source
         ELSE leads.lead_source
      END::text as Lead_or_Opp_Source,
      --dev_own.name AS partner_development_owner,
      /*CASE
      WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN 
      opps.bdr_owner_name
      WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner.name
      WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN 
      opps.bdr_owner_name
      END AS bdr_owner_name,*/
      acc_partn.name AS partner,
      acc_partn.client_region_billing_country AS partner_region,
      account.type AS account_type,
      account.pricing_model__c AS acc_pricing_model,
      CASE
         WHEN 
			--(opps.type <<>> 'Existing Business' OR opps.type IS NULL)
         --And 
			(opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
         And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
         --And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
         And (opps.pricing_model__c IS NULL OR opps.pricing_model__c  <<>> 'Contractor only')
	  Then 'Non Partner Opp or Existing Business'
      Else 'Partner Opp or Existing Business'
      End as Opp_Go_Flag,
	  opp_history.prev_stage, 
	  opp_history.final_stage,
	  opp_history.last_mod_date,
	  CASE
         WHEN opp_history.final_stage = 'Closed Lost' THEN opp_history.prev_stage
         ELSE NULL
      END AS lost_from_stage,
/*camp_memb.id AS member_id,
	camp_memb.name AS member_name,
    camp_memb.fcrm_fcr_admin_response_day_c AS member_response_date,
CASE 
	WHEN camp_memb.fcrm_fcr_admin_response_day_c <<= opps.close_date THEN 'In time'
	WHEN camp_memb.fcrm_fcr_admin_response_day_c >> opps.close_date THEN 'Too late'
	WHEN opps.close_date IS NULL THEN 'Not closed'
    ELSE NULL::text
END AS response_time_flag*/
mc.type AS member_type,
            usr_lead_opp.leads_owner_name,
            usr_lead_opp.leads_owner_manager,
            usr_lead_opp.opps_owner_name,
            usr_lead_opp.opps_owner_manager,
            usr_lead_opp.partner_development_owner,
            usr_lead_opp.bdr_owner_name,
            usr_lead_opp.bdr_manager_name

	
	
   From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
   Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
   Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
   LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c = acc_partn.id
   Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
   LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_or_opp_id::text =
                CASE
                    WHEN leads.id IS NULL THEN opps.id
                    ELSE leads.id
                END::text
   LEFT JOIN salesforce.lead sfdc_lead ON sfdc_lead.id = leads.id
   LEFT JOIN salesforce.opportunity sfdc_opp ON sfdc_opp.id = opps.id 
   LEFT JOIN opp_history ON opps.id = opp_history.opportunity_id
  -- LEFT JOIN salesforce.v_gp_sfdc_campaign_member_current camp_memb
   --ON (opps.contact_id = camp_memb.contact_id AND opps.campaign_id = camp_memb.campaign_id)
   LEFT JOIN salesforce.v_gp_sfdc_campaign_member_current mc ON mc.lead_id = leads.id
WHERE (leads.created_date::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())
OR (opps.created_date::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())
OR (opps.sales__accepted__date__c::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())
OR (opps.close_date::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())

), 
MQL as (
   Select Distinct
      'MQL' as Cohort_Stage,
      lead_id as lead_or_opp_id,
      MQL_Date::date as Point_time_date,
      *
   From Leads_Opps 
   Where --(partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) And 
	lead_id is not null
	--AND lead_owner_title_flag = 'BDR lead'
   ),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      Created_date::date as Point_time_date,
      *
   From Leads_Opps lo
   Where --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	opp_id is not null
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	s_a_l_by__sales__c = 'Yes'
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	opp_won ='true'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
Opp_lost as (
   Select Distinct
      'Opp lost' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      --last_mod_date::date as Point_time_date,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	final_stage = 'Closed Lost'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
   L1 as (
	 Select Distinct
      'Negotiations L1' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	   s_a_l_by__sales__c = 'Yes' 
		  AND (stage_name IN ('Negotiations L1','Negotiations L2','Contract','Closed Won') OR
		   lost_from_stage IN ('Negotiations L1','NegotiationsL1','Negotiations L2','NegotiationsL2','Contract'))
   ),
    L2 as (
	 Select Distinct
      'Negotiations L2' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
		s_a_l_by__sales__c = 'Yes' 
	 			  AND (stage_name IN ('Negotiations L2','Contract','Closed Won') OR
		   lost_from_stage IN ('Negotiations L2','NegotiationsL2','Contract'))
   ),
   Contract as (
	 Select Distinct
      'Contract' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	   s_a_l_by__sales__c = 'Yes' 
	   	  AND (stage_name IN ('Contract','Closed Won') OR
		   lost_from_stage IN ('Contract'))
   ),
Full_Union as (
   Select *
   From MQL
   Union All
   Select *
   From MQL_to_SQL
   Union AlL
   Select *
   From SQL_to_SAL
   Union AlL
   Select *
   From SAL_to_MSA
   Union All
   Select *
   From L1
   Union All
   Select *
   From L2
   Union All
   Select *
   From Contract
	Union All
   Select *
   From Opp_Lost
   )
SELECT * 
FROM Full_Union"
1341aa65-d589-3d44-f2a2-afd7ff6e7979,Marketing View (gpbidb),postgres,"WITH overallscores AS (
	SELECT q.""callId"", ROUND(AVG(q.score),1) AS score
	FROM gong.scorecards_details as q
	WHERE q.""isOverall"" = true 
	GROUP BY q.""callId""
	ORDER BY 1), 
	selfscores AS (
	SELECT q.""callId"", ROUND(AVG(q.score),1) AS score
	FROM gong.scorecards_details as q
	WHERE q.""isOverall"" = true 
	AND q.""callId"" IN (SELECT ""callId"" 
						FROM gong.scorecards_calls
						WHERE ""reviewedUserId"" = ""reviewerUserId"")
	GROUP BY q.""callId""
	ORDER BY 1), 
	oppo AS (
	SELECT call_id, soc.id, 
	soc.name AS opportunity_name
	FROM gong.lz_calls_context cco
	LEFT JOIN salesforce.v_gp_sfdc_opportunity_current soc
	ON soc.id = cco.id
	WHERE cco.type = 'Opportunity' AND is_deleted = false
	)

SELECT DISTINCT c.id AS call_id,  CAST(duration AS integer),
	
	CONCAT(u1.first_name, ' ', u1.last_name) AS caller_name, u1.email_address AS caller_mail, u1.title AS caller_title,
	started AS call_date, c.title AS call_title, 
	s1.score AS overall_call_score,
	s2.score AS self_call_score,
	oppo.id AS opportunity_id, opportunity_name
	FROM gong.calls c
	LEFT JOIN gong.users AS u1
	ON c.""primaryUserId"" = u1.id
	LEFT JOIN oppo
	ON c.id = oppo.""call_id""
	LEFT JOIN overallscores as s1
	ON c.id = s1.""callId""
	LEFT JOIN selfscores as s2
	ON c.id = s2.""callId""
	WHERE oppo.id IS NOT NULL"
1341aa65-d589-3d44-f2a2-afd7ff6e7979,Marketing View (gpbidb),postgres,"SELECT DISTINCT u.name AS user_name,  
CASE
         WHEN m.name IS NULL AND ""Reports To Name"" IS NOT NULL THEN ""Reports To Name""
         WHEN m.name IS NOT NULL AND ""Reports To Name"" IS NULL THEN m.name
         WHEN m.name IS NOT NULL AND ""Reports To Name"" IS NOT NULL THEN m.name
         ELSE NULL::text
      END AS manager_name
FROM salesforce.v_gp_sfdc_user_current u
LEFT JOIN workday_hris.v_non_sensitive_workday_data wd ON wd.""Work Contact: Work Email"" = u.email
LEFT JOIN salesforce.v_gp_sfdc_user_current m ON u.manager_id = m.id"
115b618e-1fdd-89d1-4856-d2388aafc33b,Globalization Partners Inc - FP&A - GP - TALENT ACQUISITION [PROD],postgres,"SELECT DISTINCT a.requisition_id,a.name, a.department_name,a.custom_region,
b.custom_sub_department,b.custom_hiring_manager,a.office_name,
b.custom_new_position_,b.custom_backfill_name,
a.base_budgeted_hire_date,
b.custom_base_salary ->>>> 'value' as ""Salary"",
b.custom_commission,
b.custom_bonus/100 as ""Bonus"",
ROUND(CAST(b.custom_ote ->>>> 'value' AS FLOAT)) as ""OTE""
FROM greenhouse.v_gp_greenhouse_jobs_all_current as a
LEFT JOIN greenhouse.job as b
ON a.requisition_id=b.requisition_id
WHERE a.status='open' and a.department_name NOT IN ('Test_Anaplan')"
1106ec5a-77e7-accb-7d46-53d911c93f90,Custom SQL Query (gpbidb),postgres,"With
Master_Marketing as (
        Select Distinct 
            Extract(year from MQL_Cohort_Month) as MQL_Cohort_Year, 
            Extract(quarter from MQL_Cohort_Month) as MQL_Cohort_Quarter, 
            MQL_Cohort_Month,
            (DATE_PART('year', Point_time_date) - DATE_PART('year', MQL_Cohort_Month::date)) * 12 +
            (DATE_PART('month', Point_time_date) - DATE_PART('month', MQL_Cohort_Month::date)) as Month_Difference,
            Cohort_stage,
            Tier,
            lead_or_opp_id
        From salesforce.v_gp_sfdc_marketing_dashboard
        Where MQL_Cohort_Month >>= '2019-01-01'
        AND (opp_type::text <<>> 'Existing Business'::text OR opp_type IS NULL)
        order by Cohort_stage, MQL_Cohort_Month, Extract(quarter from MQL_Cohort_Month) asc
        ),
Year_Quarter_Cohorts as (
        Select Distinct 
            Extract(year from MQL_Cohort_Month) as MQL_Cohort_Year, 
            Extract(quarter from MQL_Cohort_Month) as MQL_Cohort_Quarter, 
            Cohort_stage, 
            Case 
                When cohort_stage = 'MQL' then 'MQL to SQL'
                When cohort_stage = 'MQL to SQL' then 'SQL to SAL'
                When cohort_stage = 'SQL to SAL' then 'SAL to MSA'
            End as Previous_Stage_Count,
            Tier,
            count(distinct lead_or_opp_id) as Unique_Leads_or_Opps
        From salesforce.v_gp_sfdc_marketing_dashboard
        Where MQL_Cohort_Month >>= '2019-01-01'
        AND (opp_type::text <<>> 'Existing Business'::text OR opp_type IS NULL)
        group by 1,2,3,4,5
        order by Cohort_stage, Extract(year from MQL_Cohort_Month), Extract(quarter from MQL_Cohort_Month) asc
        ) 
Select Distinct 
    Master_Marketing.*,
    Year_Cohort.Unique_Leads_or_Opps as Year_Cohort_Count, 
    Quarter_Cohort.Unique_Leads_or_Opps as Quarter_Cohort_Count
From Master_Marketing
Left Join Year_Quarter_Cohorts Quarter_Cohort on Master_Marketing.MQL_Cohort_Year = Quarter_Cohort.MQL_Cohort_Year and Master_Marketing.MQL_Cohort_Quarter = Quarter_Cohort.MQL_Cohort_Quarter and Master_Marketing.Cohort_Stage = Quarter_Cohort.Previous_Stage_Count and Master_Marketing.Tier = Quarter_Cohort.Tier
Left Join (Select Distinct MQL_Cohort_Year, Previous_Stage_Count, Tier, Sum(Unique_Leads_or_Opps) as Unique_Leads_or_Opps From Year_Quarter_Cohorts Group by 1,2,3 ) Year_Cohort on Master_Marketing.MQL_Cohort_Year = Year_Cohort.MQL_Cohort_Year and Master_Marketing.Cohort_Stage = Year_Cohort.Previous_Stage_Count and Master_Marketing.Tier = Year_Cohort.Tier
Order by Master_Marketing.Cohort_Stage, Master_Marketing.MQL_Cohort_Month, Master_Marketing.Month_Difference asc"
01bedd2d-9d21-f11f-2f81-f9b62cf01d6d,Custom SQL Query (gpbidb),postgres,"WITH A AS (SELECT T1.id AS A_ID,
		   		  T2.user_id AS ZOHO_USER_ID,
		   		  CASE WHEN t2.status='0' THEN 'Pending'
		   			   WHEN t2.status='1' THEN 'Invitation Sent'
		   			   WHEN t2.status='2' THEN 'Active'
		   			   WHEN t2.status='3' THEN 'Invitation Rejected'
		   			   WHEN t2.status='4' THEN 'Inactive'
		   			   WHEN t2.status='5' THEN 'Error'
		   			   WHEN t2.status='6' THEN 'Deleted'
		   			   WHEN t2.status='7' THEN 'Pending on Client User Creation'
		   			   WHEN t2.status='8' THEN 'Error Client User Creation'
		   			   WHEN t2.status='9' THEN 'Pending Inactive'
		   			   WHEN t2.status='10' THEN 'Error on Required on Mandatory Approver'
		   			   WHEN t2.status='11' THEN 'Error Client User Creation Stuck on Pending'
		   		  END AS zoho_status,
		   		  T2.*
		   FROM goglobal_gp_goglobal.v_gp_gg_user_current T1
		   LEFT OUTER JOIN goglobal_gp_goglobal.v_gp_gg_zoho_person_current T2
		   ON T1.id = T2.user_id
		  )
SELECT DISTINCT CONCAT(T1.FIRST_NAME,' ',T1.LAST_NAME) AS Professional, t1.status, t2.name as Client, t4.name as Country,
					   zth.changes AS ""CHANGE"",
	   zth.previous_annual_leave AS ""PREVIOUS VALUE"",
	   zth.annual_leave AS ""NEW VALUE"",
	   zth.reason_annual_leave AS ""REASON"",
	   CONCAT(gpp.first_name, ' ', gpp.last_name) AS ""UPDATED BY"",
	   zth.update_date AS ""UPDATE DATE"",
	   zth.effective_date_change AS ""EFFECTIVE DATE"",
	   CASE WHEN (A.ZOHO_user_id IS NULL) THEN 'User not sent to Zoho'
	   		WHEN (A.professional_id IS NOT NULL AND A.status='4') THEN concat('In-active',' ', A.inactive_timestamp)
			WHEN (A.status='1' OR A.status='2') THEN concat(A.ZOHO_STATUS,' ','GPP-', A.ZOHO_USER_ID)
			WHEN (A.status='5') THEN concat('Error: ',A.zoho_response)
	   ELSE A.ZOHO_STATUS
	   END AS ""STATUS""
FROM goglobal_gp_goglobal.V_GP_GG_PROFESSIONAL_CURRENT T1
LEFT JOIN goglobal_gp_goglobal.V_GP_GG_CLIENT_CURRENT T2 ON T1.CLIENT_ID=T2.ID
LEFT JOIN goglobal_gp_goglobal.V_GP_GG_LSP_COUNTRY_CURRENT T3 ON T1.LSP_COUNTRY_ID=T3.ID
LEFT JOIN goglobal_gp_goglobal.V_GP_GG_COUNTRY_CURRENT T4 ON T3.COUNTRY_ID=T4.ID
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_zoho_transfer_history_current zth ON T1.ID=ZTH.PROFESSIONAL_ID
LEFT OUTER JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current gpp
ON zth.updated_by = gpp.user_id
LEFT OUTER JOIN A
ON gpp.user_id = A.A_ID
where t1.is_failed_to_launch='false' and t2.is_demo_client='false'"
03dfd105-98b9-cc64-bbf0-b2c887b96759,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT *
FROM tableau.site_content
WHERE top_parent_project_name='Polaris'"
03dfd105-98b9-cc64-bbf0-b2c887b96759,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT podname, site_luid, u.site_name, site_create_date, site_creator_capacity, site_explorer_capacity, site_user_quota, site_viewer_capacity, user_id, user_luid, user_email, created_at, user_account_age, last_login_date, days_since_last_login, license_type, site_role, owned_projects, owned_data_sources, owned_certified_data_sources, owned_data_sources_size, owned_workbooks, owned_workbooks_size, owned_views, access_data_source_events_count, access_view_events, publish_data_source_events, publish_workbook_events, last_datasource_access_date, last_datasource_publish_date, last_view_access_date, last_workbook_publish_date, data_source_access_count_total, data_source_access_count_unique_users, view_access_count_total, view_access_count_unique_users, run_date,
	COUNT_TOTAL_USERS.count_t_users
	FROM tableau.ts_users u
	LEFT JOIN (SELECT site_name, COUNT(DISTINCT user_email) as count_t_users
			  FROM tableau.ts_users group by 1) COUNT_TOTAL_USERS on u.site_name = COUNT_TOTAL_USERS.site_name"
03dfd105-98b9-cc64-bbf0-b2c887b96759,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT ""Payroll Name"", ""Job Title Description"", ""Business Unit Description"", ""Home Department Description"", ""Worked In Country"", ""Status"", ""Hire Date"", LOWER(""Work Contact: Work Email"") AS ""Work Contact: Work Email""
	FROM workday_hris.v_non_sensitive_workday_data"
03dfd105-98b9-cc64-bbf0-b2c887b96759,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT *
FROM tableau.ts_events
WHERE event_name='Access View' AND project_name='Polaris'"
04f20fbb-2dd9-7604-429a-e8350567266c,Prof Growth,postgres,"SELECT client,is_demo_client,accounting_id,external_id,status,payroll_start_date,payroll_end_date,contract_start_date
FROM goglobal_gp_goglobal.v_gp_gg_master_professional"
04f20fbb-2dd9-7604-429a-e8350567266c,Prof Growth,postgres,"SELECT a.cal_date::date,a.professional_id,
a.payroll_start_date::date,
a.payroll_end_date::date,
a.country_name,a.active_flag,a.termination_flag,a.new_flag,
b.accounting_id,b.internal_id,b.external_id
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard as a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_professional as b
ON a.professional_id=b.internal_id
WHERE a.active_flag = 'Active' AND (a.service_class IS NULL OR a.service_class <<>> '4')
AND  a.cal_date BETWEEN '2022-01-01'::date AND current_date"
04f20fbb-2dd9-7604-429a-e8350567266c,Prof Growth,postgres,"SELECT a.cal_date,a.professional_id,a.payroll_start_date,a.payroll_end_date,
a.msa_contract_start_date_aso,
a.country_name,a.active_flag,a.termination_flag,a.new_flag,
b.accounting_id,b.internal_id,b.external_id
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard as a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_professional as b
ON a.professional_id=b.internal_id
WHERE a.active_flag = 'Active' AND (a.service_class IS NULL OR a.service_class <<>> '4')
AND  a.cal_date BETWEEN '2022-01-01'::date AND current_date"
04f20fbb-2dd9-7604-429a-e8350567266c,Prof Growth,databricks,"---4.1 Active Prof Recurring Fees
WITH billings as (
SELECT  
CONCAT(RIGHT(b.accounting_period,4),'-',LEFT(b.accounting_period,2),'-01')::date AS period_date,
b.project_id,
b.customer_name as Client_Name,


CASE WHEN b.transaction_type ='CRM' THEN 
CASE WHEN b.recurring_detailed_category IN ('Fees EOR MGMT FEE') 
and (b.service_class == ""EOR"" or b.service_class is null OR service_class = 'EOR (Services)'OR service_class == 'Grow Global')
THEN -b.extended_amount_in_company_base_currency else 0  end 
ELSE
CASE WHEN b.recurring_detailed_category IN ('Fees EOR MGMT FEE') 
and (b.service_class == ""EOR"" or b.service_class is null OR service_class = 'EOR (Services)'OR service_class == 'Grow Global')
THEN b.extended_amount_in_company_base_currency else 0 end end
as Recurring_EOR_Platform_Fee_Billings_USD,


CASE WHEN b.transaction_type ='CRM' THEN
CASE WHEN b.recurring_detailed_category IN ('Fee EOR CURRENCY TRANSACTION FEE','Fees EOR OTHER FEES',
'Fee EOR EMPLOYER BURDEN MARK-UP','Fee EOR INSURANCE MARK-UP') 
and (b.service_class == ""EOR"" or b.service_class is null OR service_class = 'EOR (Services)'OR service_class == 'Grow Global')
THEN -b.extended_amount_in_company_base_currency else 0 end
ELSE
CASE WHEN b.recurring_detailed_category IN ('Fee EOR CURRENCY TRANSACTION FEE','Fees EOR OTHER FEES',
'Fee EOR EMPLOYER BURDEN MARK-UP','Fee EOR INSURANCE MARK-UP') 
and (b.service_class == ""EOR"" or b.service_class is null OR service_class = 'EOR (Services)'OR service_class == 'Grow Global')
THEN b.extended_amount_in_company_base_currency else 0 end end
as Recurring_EOR_Transaction_Fee_Billings_USD,

CASE WHEN b.transaction_type ='CRM' THEN 
CASE WHEN b.recurring_category in (""Recurring Fees and Mark-ups"")  
THEN -b.extended_amount_in_company_base_currency else 0 end 
ELSE
CASE WHEN b.recurring_category in (""Recurring Fees and Mark-ups"")
THEN b.extended_amount_in_company_base_currency else 0 end end
as Total_Recurring_Fees_USD

FROM gp_prod.gold_kpi.billing_kpi_view  as b
WHERE b.accounting_period is not null
--where accounting_period='04-2023' 
--GROUP BY 1,2,3,4
ORDER BY 1,2)

SELECT 
period_date,
project_id,
Client_Name,

SUM(Recurring_EOR_Platform_Fee_Billings_USD) as Recurring_EOR_Platform_Fee_Billings_USD,
SUM(Recurring_EOR_Transaction_Fee_Billings_USD) as Recurring_EOR_Transaction_Fee_Billings_USD,
SUM(Total_Recurring_Fees_USD) as Total_Recurring_Fees_USD,
CASE WHEN SUM(Recurring_EOR_Platform_Fee_Billings_USD) + SUM(Recurring_EOR_Transaction_Fee_Billings_USD) >>0 THEN 1 else 0 end as Active_EOR_Professional
FROM billings
WHERE period_date>>='2022-01-01'
GROUP BY 1,2,3
ORDER BY 1"
04f20fbb-2dd9-7604-429a-e8350567266c,Prof Growth,databricks,"SELECT CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
project_id,MIN(invoice_date)
FROM gp_prod.gold_kpi.billing_kpi_view
GROUP BY 1,2
ORDER BY 1"
04f20fbb-2dd9-7604-429a-e8350567266c,Prof Growth,postgres,"SELECT cal_date,year
FROM repo.gp_calendar
WHERE cal_date BETWEEN '2022-01-01' AND current_date AND day=1"
0532748c-a46b-493b-cd85-a248116cd67e,Custom SQL Query (gpbidb),postgres,"with gp_person as 
(
	select gpp.id ""GP Person ID"",
	   USR.ID ""User Id"",
	   concat(gpp.first_name,' ',gpp.last_name) ""GP Person"",
	   wk.""Job Title Description"",
	   gpp.is_no_longer_with_firm ""Is no longer with firm"",
	   gpp.is_enabled ""Is Enabled"",
	   usr.last_login_date ""Last Login Date"",
	   usr.email ""Email"",
	   usr.date_created ""Date Created User"",
		CASE WHEN usr.STATUS='3' THEN 'Invitation Accepted'
				when usr.STATUS='2' then 'Invitation Sent'
				when usr.STATUS='4' then 'Locked'
				when usr.STATUS='1' then 'New'
				else usr.status
		end as ""Invitation_Status"",
	   regexp_split_to_table(gpp.ROLES, E',') AS ROLe
	from goglobal_gp_goglobal.v_gp_gg_gp_person_current gpp
	left join goglobal_gp_goglobal.v_gp_gg_user_current usr on gpp.user_id=usr.id
	left join workday_hris.v_non_sensitive_workday_data wk on wk.""Work Contact: Work Email""=usr.email
)
select *,
	  case when gp_person.role='1' then 'System'
	  	   when gp_person.role='2' then 'Admin'
		   when gp_person.role='3' then 'Account Manager'
		   when gp_person.role='5' then 'Onboarding Lead'
		   when gp_person.role='6' then 'Offboarding Lead'
		   when gp_person.role='7' then 'Sales'
		   when gp_person.role='8' then 'Marketing'
		   when gp_person.role='11' then 'Client Services'
		   when gp_person.role='12' then 'Finance'
		   when gp_person.role='13' then 'Management'
		   when gp_person.role='14' then 'Unassigned'
		   when gp_person.role='15' then 'LPP Relationship Manager'
		   when gp_person.role='16' then 'Benefits Admin'
		   when gp_person.role='17' then 'Executive Sponsor'
		   when gp_person.role='18' then 'Billing Manager'
		   when gp_person.role='19' then 'Sales Manager'
		   when gp_person.role='20' then 'Client Services Manager'
		   when gp_person.role='21' then 'ACH Controller'
		   when gp_person.role='23' then 'HR Specialist'
		   when gp_person.role='24' then 'Regional Sales Director'
		   when gp_person.role='25' then 'Account Executive'
		   when gp_person.role='26' then 'Legal Representative'
		   when gp_person.role='27' then 'Contract Signatory'
		   when gp_person.role='28' then 'Expense Task Force' 
		   when gp_person.role='29' then 'Billing Admin'
		   when gp_person.role='30' then 'Salesforce Admin'
	  else gp_person.role
	  end as gp_person_role
from gp_person"
05492d65-248f-50e4-85d6-16d983f6b5a3,Lessonly,postgres,"With lessons_table as (	SELECT DISTINCT a.*,b.title
						FROM lessonly.assignments as a
						LEFT JOIN lessonly.lessons as b
						ON a.assignable_id=b.id
						WHERE assignable_type='Lesson'
						UNION
						SELECT DISTINCT c.*,d.title
						FROM lessonly.assignments as c
						LEFT JOIN lessonly.paths as d
						ON c.assignable_id=d.id
						WHERE assignable_type='LearningPaths::Path')

SELECT DISTINCT a.id,a.assignable_type,a.title,a.status,a.due_by,a.started_at,a.completed_at,
				CASE WHEN a.reassigned_at IS NULL THEN a.assigned_at ELSE a.reassigned_at END as ""Assigned At"",a.updated_at,a.
				score,c.""Associate ID"",c.""Payroll Name"",c.""Business Unit Description"",c.""Home Department Description"",c.""Job Title Description"",
				c.""Reports To Name"",c.""Worked In Country"",c.region,c.""Work Contact: Work Email"",c.""Status""
FROM lessons_table as a
LEFT JOIN lessonly.users as b
ON a.assignee_id=b.id
LEFT JOIN workday_hris.v_workday_adp_hris as c
ON LOWER(SPLIT_PART(""Work Contact: Work Email"",'@',1))=LOWER(SPLIT_PART(b.email,'@',1))"
07cb6268-b5f7-cc61-20be-98545e1c8ec1,general_report (google_analytics.general_report) (gpbidb),,
07cb6268-b5f7-cc61-20be-98545e1c8ec1,general_report (google_analytics.general_report) (gpbidb),postgres,"SELECT date, goal_completion_location, SUM(goal_completions_all) AS goal_completions_all
FROM google_analytics.conversions_locations_report
WHERE date BETWEEN NOW() - INTERVAL '2 YEARS' AND NOW()
GROUP BY 1, 2
ORDER BY 1 DESC"
08b28efe-5145-478f-54e8-aee0c29be68b,Client & Professional Users,,
08b28efe-5145-478f-54e8-aee0c29be68b,Client & Professional Users,postgres,"with 
user_catalogue as (
	select distinct 
		a.user_id,
                a.id as Zoho_ID,
		b.email, 
		a.status, 
		a.professional_id, 
		a.client_person_id
	from goglobal_gp_goglobal.v_gp_gg_zoho_person_current a
	left join goglobal_gp_goglobal.v_gp_gg_user_current b on a.user_id = b.id), 
	
professional_preferred_email as (
	select distinct 
		usr.id, 
		usr.email, 
		case when pc.user_id is not null then 'Professional_and_Client_User' else null end as Indicator
	from goglobal_gp_goglobal.v_gp_gg_user_current usr
	left join goglobal_gp_goglobal.v_gp_gg_client_person_current pc on usr.id = pc.user_id)

select distinct a.client_country_id,
	a.lsp_country_id,
        b.zoho_id,
       b.user_id,
        case when d.status='1' then 'Active' else 'Inactive' end as Client_status,
	d.name as Client_name,
	a.status as professional_status, 
	concat(a.first_name, ' ',a.last_name) as Professional_full_name, 
	c.email as preferred_email, 
	b.status as Zoho_Status,
	c.indicator,
	b.professional_id as Zoho_professional_id, 
	b.client_person_id as Zoho_client_person_id

	
from goglobal_gp_goglobal.v_gp_gg_professional_current a
left join user_catalogue b on a.user_id = b.user_id
left join professional_preferred_email c on a.user_id = c.id
inner join goglobal_gp_goglobal.v_gp_gg_client_current d on a.client_id = d.id 
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current  lsp_c on a.lsp_country_id = lsp_c.id
left join goglobal_gp_goglobal.v_gp_gg_country_current  country_c on lsp_c.Country_id = country_c.id
where d.is_demo_client = 'False'"
08b28efe-5145-478f-54e8-aee0c29be68b,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"Select DISTINCT 
		goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current.professional_id, 
		case when role='6' then 'AccountsPayable'
		when role='1' then 'Client Admin'
		when role='4' then 'Expense Approver 1'
		when role='10' then 'Expense Approver 2'
		when role='13' then 'GP Submit Repor Administrator'
		when role='2' then 'Human Resources'
		when role='12' then 'Invoice Details'
		when role='3' then 'Payroll Approver'
		when role='5' then 'PTO Approver'
		when role='11' then 'RECRUITGLOBAL'
		when role='7' then 'Stakeholder'
		when role='8' then 'Supervisor Manager'
		when role='9' then 'Unassigned'
		end as Role,
		concat(goglobal_gp_goglobal.v_gp_gg_client_person_current.first_name,' ', goglobal_gp_goglobal.v_gp_gg_client_person_current.last_name) as User_Name, 
		 goglobal_gp_goglobal.v_gp_gg_user_current.email as User_EMAIL_EA, 
		v_gp_gg_client_person_current.is_no_longer_with_firm,
		CASE WHEN v_gp_gg_user_current.STATUS='3' THEN 'Invitation Accepted'
		when v_gp_gg_user_current.STATUS='2' then 'Invitation Sent'
		when v_gp_gg_user_current.STATUS='4' then 'Locked'
		when v_gp_gg_user_current.STATUS='1' then 'New'
		end as Invitation_Status_EA,
		goglobal_gp_goglobal.v_gp_gg_zoho_person_current.status as Status_Zoho, 
		concat('- GPP-', goglobal_gp_goglobal.v_gp_gg_user_current.id),
		goglobal_gp_goglobal.v_gp_gg_zoho_person_current.zoho_response, 
		V_GP_GG_CLIENT_PERSON_CURRENT.IS_ENABLED as GG_ENABLED
FROM goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current
INNER JOIN goglobal_gp_goglobal.v_gp_gg_client_person_current 
	on goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current.client_person_id = goglobal_gp_goglobal.v_gp_gg_client_person_current.id
INNER JOIN goglobal_gp_goglobal.v_gp_gg_client_current 
	on goglobal_gp_goglobal.v_gp_gg_client_person_current.client_id = goglobal_gp_goglobal.v_gp_gg_client_current.id
INNER JOIN goglobal_gp_goglobal.v_gp_gg_user_current 
	on goglobal_gp_goglobal.v_gp_gg_client_person_current.user_id = goglobal_gp_goglobal.v_gp_gg_user_current.id
	and goglobal_gp_goglobal.v_gp_gg_client_current.is_demo_client='0'
	and goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current.professional_id in (
		select id as Prof_id
		from goglobal_gp_goglobal.v_gp_gg_professional_current)
right join goglobal_gp_goglobal.v_gp_gg_zoho_person_current 
	on goglobal_gp_goglobal.v_gp_gg_user_current.id = goglobal_gp_goglobal.v_gp_gg_zoho_person_current.user_id
where role = '4'"
08b28efe-5145-478f-54e8-aee0c29be68b,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"Select DISTINCT 
		goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current.professional_id, 
		case when role='6' then 'AccountsPayable'
		when role='1' then 'Client Admin'
		when role='4' then 'Expense Approver 1'
		when role='10' then 'Expense Approver 2'
		when role='13' then 'GP Submit Repor Administrator'
		when role='2' then 'Human Resources'
		when role='12' then 'Invoice Details'
		when role='3' then 'Payroll Approver'
		when role='5' then 'PTO Approver'
		when role='11' then 'RECRUITGLOBAL'
		when role='7' then 'Stakeholder'
		when role='8' then 'Supervisor Manager'
		when role='9' then 'Unassigned'
		end as Role,
		concat(goglobal_gp_goglobal.v_gp_gg_client_person_current.first_name,' ', goglobal_gp_goglobal.v_gp_gg_client_person_current.last_name) as User_Name, 
		 goglobal_gp_goglobal.v_gp_gg_user_current.email as User_EMAIL_EA, 
		v_gp_gg_client_person_current.is_no_longer_with_firm,
		CASE WHEN v_gp_gg_user_current.STATUS='3' THEN 'Invitation Accepted'
		when v_gp_gg_user_current.STATUS='2' then 'Invitation Sent'
		when v_gp_gg_user_current.STATUS='4' then 'Locked'
		when v_gp_gg_user_current.STATUS='1' then 'New'
		end as Invitation_Status_EA,
		goglobal_gp_goglobal.v_gp_gg_zoho_person_current.status as Status_Zoho, 
		concat('- GPP-', goglobal_gp_goglobal.v_gp_gg_user_current.id),
		goglobal_gp_goglobal.v_gp_gg_zoho_person_current.zoho_response, 
		V_GP_GG_CLIENT_PERSON_CURRENT.IS_ENABLED as GG_ENABLED
FROM goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current
INNER JOIN goglobal_gp_goglobal.v_gp_gg_client_person_current 
	on goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current.client_person_id = goglobal_gp_goglobal.v_gp_gg_client_person_current.id
INNER JOIN goglobal_gp_goglobal.v_gp_gg_client_current 
	on goglobal_gp_goglobal.v_gp_gg_client_person_current.client_id = goglobal_gp_goglobal.v_gp_gg_client_current.id
INNER JOIN goglobal_gp_goglobal.v_gp_gg_user_current 
	on goglobal_gp_goglobal.v_gp_gg_client_person_current.user_id = goglobal_gp_goglobal.v_gp_gg_user_current.id
	and goglobal_gp_goglobal.v_gp_gg_client_current.is_demo_client='0'
	and goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current.professional_id in (
		select id as Prof_id
		from goglobal_gp_goglobal.v_gp_gg_professional_current)
right join goglobal_gp_goglobal.v_gp_gg_zoho_person_current 
	on goglobal_gp_goglobal.v_gp_gg_user_current.id = goglobal_gp_goglobal.v_gp_gg_zoho_person_current.user_id
where role = '5'"
08b28efe-5145-478f-54e8-aee0c29be68b,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"SELECT p.client_id,
	   cc.name AS customer_name,
           p.id AS professional_id,
	   CONCAT (cc6.first_name, ' ', cc6.last_name)AS account_manager,
	   CASE WHEN  p.goes_by is null then CONCAT(p.first_name, ' ',p.last_name)
	   ELSE CONCAT(p.first_name, ' ',p.last_name,' (',p.goes_by,')') END AS professional_name,
	   p.contract_start_date,
	   p.contract_end_date,
	   p.payroll_start_date,
	   p.payroll_end_date,	
	   p.is_contract_prob_period_applies,
	   p.status,
           p.expense_method,
	   p.work_email,
	   p.personal_email,
	   p.gp_onboard_lead_id,
	   p2.onboard_start_date,
	   p2.onboard_end_date,
	   cc.is_demo_client,
	   p.is_failed_to_launch,
	   p4.name AS professional_working_country,
	   p8.region AS professional_working_region,
	zoho_person.Professional_Name as zoho_professional_name,
	zoho_person.status as zoho_status, 
	zoho_person.concat as concat_prof_zohp,
	zoho_person.zoho_response,
		p2.sent_ee_date_signed,
		p._fivetran_synced

	   
FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS p
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current AS p1
ON p.professional_offboarding_id = p1.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current AS p2
ON p.professional_onboarding_id = p2.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS p3
ON p.lsp_country_id=p3.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS p4
ON p3.country_id=p4.id
LEFT JOIN repo.v_gp_mdm_region AS p8
ON p4.country_code = p8.country_code
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS cc 
ON p.client_id = cc.id
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_gp_person_current AS cc6
ON  cc.gp_account_manager_id = cc6.id

LEFT JOIN (
select distinct
	c.id as professional_id, 
	concat(c.first_name,' ', c.last_name) as Professional_Name,
	a.status, 
	concat('- GPP-', b.id),
	a.zoho_response, 
	a._fivetran_synced
from goglobal_gp_goglobal.v_gp_gg_zoho_person_current a 
left join goglobal_gp_goglobal.v_gp_gg_user_current b on a.user_id = b.id
left join goglobal_gp_goglobal.v_gp_gg_professional_current c on a.user_id = c.user_id
) as zoho_person on p.id = zoho_person.professional_id

ORDER BY 2"
08b28efe-5145-478f-54e8-aee0c29be68b,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"Select DISTINCT 
		goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current.professional_id, 
		case when role='6' then 'AccountsPayable'
		when role='1' then 'Client Admin'
		when role='4' then 'Expense Approver 1'
		when role='10' then 'Expense Approver 2'
		when role='13' then 'GP Submit Repor Administrator'
		when role='2' then 'Human Resources'
		when role='12' then 'Invoice Details'
		when role='3' then 'Payroll Approver'
		when role='5' then 'PTO Approver'
		when role='11' then 'RECRUITGLOBAL'
		when role='7' then 'Stakeholder'
		when role='8' then 'Supervisor Manager'
		when role='9' then 'Unassigned'
		end as Role,
		concat(goglobal_gp_goglobal.v_gp_gg_client_person_current.first_name,' ', goglobal_gp_goglobal.v_gp_gg_client_person_current.last_name) as User_Name, 
		 goglobal_gp_goglobal.v_gp_gg_user_current.email as User_EMAIL_EA, 
		v_gp_gg_client_person_current.is_no_longer_with_firm,
		CASE WHEN v_gp_gg_user_current.STATUS='3' THEN 'Invitation Accepted'
		when v_gp_gg_user_current.STATUS='2' then 'Invitation Sent'
		when v_gp_gg_user_current.STATUS='4' then 'Locked'
		when v_gp_gg_user_current.STATUS='1' then 'New'
		end as Invitation_Status_EA,
		goglobal_gp_goglobal.v_gp_gg_zoho_person_current.status as Status_Zoho, 
		concat('- GPP-', goglobal_gp_goglobal.v_gp_gg_user_current.id),
		goglobal_gp_goglobal.v_gp_gg_zoho_person_current.zoho_response, 
		V_GP_GG_CLIENT_PERSON_CURRENT.IS_ENABLED as GG_ENABLED
FROM goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current
INNER JOIN goglobal_gp_goglobal.v_gp_gg_client_person_current 
	on goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current.client_person_id = goglobal_gp_goglobal.v_gp_gg_client_person_current.id
INNER JOIN goglobal_gp_goglobal.v_gp_gg_client_current 
	on goglobal_gp_goglobal.v_gp_gg_client_person_current.client_id = goglobal_gp_goglobal.v_gp_gg_client_current.id
INNER JOIN goglobal_gp_goglobal.v_gp_gg_user_current 
	on goglobal_gp_goglobal.v_gp_gg_client_person_current.user_id = goglobal_gp_goglobal.v_gp_gg_user_current.id
	and goglobal_gp_goglobal.v_gp_gg_client_current.is_demo_client='0'
	and goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current.professional_id in (
		select id as Prof_id
		from goglobal_gp_goglobal.v_gp_gg_professional_current)
right join goglobal_gp_goglobal.v_gp_gg_zoho_person_current 
	on goglobal_gp_goglobal.v_gp_gg_user_current.id = goglobal_gp_goglobal.v_gp_gg_zoho_person_current.user_id
where role = '10'"
08b28efe-5145-478f-54e8-aee0c29be68b,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"WITH A AS (select t0.id as pro_id, t1.id AS A_ID,t2.user_id AS ZOHO_USER_ID, t1.email as user_mail,
case when t2.status='0' then 'Pending' 
		when t2.status='1' then 'Invitation Sent'
		when t2.status='2' then 'Active'
		when t2.status='3' then 'Invitation Rejected'
		when t2.status='4' then 'Inactive'
		when t2.status='5' then 'Error' 
		when t2.status='6' then 'Deleted'
		when t2.status='7' then 'Pending on Client User Creation'
		when t2.status='8' then 'Error Client User Creation'
		when t2.status='9' then 'Pending Inactive'
		when t2.status='10' then 'Error on Required on Mandatory Approver'
		when t2.status='11' then 'Error Client User Creation Stuck on Pending'
		end as zoho_status, T2.*
from goglobal_gp_goglobal.v_gp_gg_professional_current t0
left join goglobal_gp_goglobal.v_gp_gg_user_current t1 on t0.user_id=t1.id
left join goglobal_gp_goglobal.v_gp_gg_zoho_person_current t2 on t1.id=t2.user_id)

SELECT a.pro_id, A.A_id AS ID,
A.ZOHO_USER_ID,a.professional_id,a.status, A.ZOHO_STATUS, a.client_person_id, a.zoho_person_id,a.gp_person_id,a.user_mail,
case when (A.ZOHO_user_id is null) then 'User not sent to Zoho'
when (A.professional_id is not null AND A.status='4') then concat('In-active',' ',A.inactive_timestamp)
when (A.status='1' or A.status='2') then concat(A.ZOHO_STATUS,' ','GPP-',A.ZOHO_USER_ID)
when (A.status='5') then concat('Error: ',A.zoho_response)
ELSE A.ZOHO_STATUS
END AS TIME_EXP_SYST
FROM A"
08b28efe-5145-478f-54e8-aee0c29be68b,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"WITH CR AS(
	SELECT DISTINCT a.professional_id, a.client_person_id, CONCAT (b.first_name, ' ', b.last_name)AS user_name, c.email,
CASE WHEN a.role='6' THEN 'AccountsPayable'
     WHEN a.role='1' THEN 'Client Admin'
	 WHEN a.role='4' THEN'Expense Approver 1'
     WHEN a.role='10' THEN 'Expense Approver 2'
	 WHEN a.role='13' THEN 'GP Submit Repor Administrator'
	 WHEN a.role='2' THEN'Human Resources'
     WHEN a.role='12' THEN 'Invoice Details'
	 WHEN a.role='3' THEN 'Payroll Approver'
	 WHEN a.role='5' THEN 'PTO Approver'
     WHEN a.role='11' THEN 'RECRUITGLOBAL'
	 WHEN a.role='7' THEN 'Stakeholder'
	 WHEN a.role='8' THEN 'Supervisor Manager'
     WHEN a.role='9' THEN 'Unassigned'
	 END AS Role
	FROM goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current AS a
	INNER JOIN goglobal_gp_goglobal.v_gp_gg_client_person_current AS b
	ON a.client_person_id = b.id
	INNER JOIN goglobal_gp_goglobal.v_gp_gg_user_current AS c
	ON b.user_id = c.id
	ORDER BY a.professional_id)



Select

t1.id as Professional_id,



			EA1.user_name as Expense_Approver1,
	--		EA1.email as EA_Email,
			EA2.user_name as Expense_Approver2
	--		EA2.email as EA2_Email,

       
from GOGLOBAL_GP_GOGLOBAL.v_gp_gg_professional_current t1
LEFT JOIN GOGLOBAL_GP_GOGLOBAL.V_GP_GG_CLIENT_CURRENT T2 ON T1.CLIENT_ID=T2.ID

LEFT JOIN (
Select * FROM CR
	WHERE Role = 'Expense Approver 1'
) as EA1 on t1.id = EA1.professional_id

LEFT JOIN (
Select * FROM CR
	WHERE Role = 'Expense Approver 2'
) as EA2 on t1.id = EA2.professional_id

WHERE t1.is_failed_to_launch='false' AND t2.is_demo_client='false'"
0b6ecc77-8d75-286c-0c2b-5bbc02d3e972,Custom SQL Query (gpbidb) (2),postgres,"WITH SALESFORCE AS
(SELECT sf.*,  opp.immediate_headcount_c AS opp_immediate_headcount_c,
	opp.headcount_c AS opp_headcount_c 
 FROM salesforce.v_gp_sfdc_marketing_dashboard AS sf
 LEFT JOIN salesforce.v_gp_sfdc_opportunity_current AS opp ON sf.opp_id = opp.id	
 WHERE sf.point_time_date >>= '2020-01-01'
 AND sf.point_time_date <<= CURRENT_DATE
 AND  cohort_stage = 'SAL to MSA'
	  
),
GPP AS (
SELECT DISTINCT 
	      CASE WHEN a.salesforce_account_id IS NOT NULL THEN a.salesforce_account_id
          ELSE mdm_GG.source_id
        END as gpp_id_match,
	      a.id,
	      a.name,
          a.pricing_model,
a.billing_country,
a.billing_region,
	     CASE WHEN a.msa_contract_start_date_peo IS NOT NULL THEN a.msa_contract_start_date_peo
	    WHEN a.msa_contract_start_date_peo IS NULL AND a.msa_contract_start_date_services IS NOT NULL THEN a.msa_contract_start_date_services
	    WHEN a.msa_contract_start_date_services IS NULL AND a.msa_contract_start_date_sourcing IS NOT NULL THEN a.msa_contract_start_date_sourcing
	    WHEN a.msa_contract_start_date_sourcing IS NULL AND a.msa_contract_start_date_aso IS NOT NULL THEN a.msa_contract_start_date_aso
	  ELSE a.msa_contract_start_date_peo END AS ma_start_date,
	      b.pop_current, 
	      c.pop_to_date,
	      d.min_pay_start,
	      d.max_pay_start,
	      d.min_pay_end,
	      d.max_pay_end
	       
	FROM (SELECT a.id, a.salesforce_account_id,a.pricing_model,a.name,a.msa_contract_start_date_services,a.msa_contract_start_date_peo, a.msa_contract_start_date_aso,a.msa_contract_start_date_sourcing, b.billing_region, b.billing_country
		 FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
                 LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_client as b
                 ON a.id = b.id
		 WHERE a.is_demo_client = false) AS a
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_current
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC ('month', cal_date)= DATE_TRUNC ('month', CURRENT_DATE)
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS b
	ON a.id = b.client_id
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_to_date
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND payroll_start_date <<= CURRENT_DATE
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS c
	ON a.id = c.client_id
	
	LEFT JOIN (SELECT client_id, MAX(payroll_start_date)AS max_pay_start, MAX (payroll_end_date)AS max_pay_end,
				  MIN(payroll_end_date)AS min_pay_end, MIN(payroll_start_date) AS min_pay_start
				 FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			   WHERE (product_type_id <<>> '4' OR product_type_id IS NULL)
				 GROUP BY 1) d
	ON a.id = d.client_id
	
	
	LEFT JOIN repo.v_gp_mdm_customer AS e
  ON a.id::VARCHAR = e.source_id
	
  LEFT JOIN (SELECT *
  FROM repo.v_gp_mdm_customer
  WHERE source = 'SFDC Customer'
  ) AS mdm_GG
  ON e.parent_name = mdm_GG.parent_name
	ORDER BY 2
),
FINAL AS(SELECT 
		 SALESFORCE.*,
     GPP.*,
	
	  
	  	CASE 
		   
			 WHEN GPP.id IS NOT NULL AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) <<= 90
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.min_pay_start IS NULL
			 THEN 'Newly Signed'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND date_trunc('month', GPP.min_pay_start) >>= date_trunc('month',CURRENT_DATE) THEN 'Onboarding' 
			  
		   WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current >>0  THEN 'Currently Active'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.max_pay_end << CURRENT_DATE OR (date_trunc('month', GPP.max_pay_start) >>= date_trunc('month',CURRENT_DATE) AND GPP.max_pay_end >> CURRENT_DATE)
			 THEN 'Currently Inactive'
			 
			 
			 WHEN (GPP.id IS NOT NULL 
			 AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) >>90
			 AND GPP.pop_to_date IS NULL)
		   OR (GPP.id IS NOT NULL AND GPP.ma_start_date IS NULL AND SALESFORCE.msa_date IS NULL )
       THEN 'Never Active' 
		 
		   WHEN (GPP. id IS NULL
				 AND SALESFORCE.cohort_stage = 'SAL to MSA'
         AND SALESFORCE.opp_type = 'New Business'
         AND SALESFORCE.stage_name = 'Closed Won')
				 THEN 'Unknown'
			
			 END AS gpp_account_status
			
FROM SALESFORCE
LEFT JOIN GPP
ON SALESFORCE.account_id = GPP.gpp_id_match
AND SALESFORCE.cohort_stage = 'SAL to MSA'
AND SALESFORCE.opp_type = 'New Business'
AND SALESFORCE.stage_name = 'Closed Won'
		 )
SELECT *
FROM FINAL"
0b6ecc77-8d75-286c-0c2b-5bbc02d3e972,Custom SQL Query (gpbidb) (2),postgres,"SELECT 
client_id,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('1') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS NEW_STATUS,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('2') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS Onb_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('3') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS ACTIVE_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('4') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS TERM_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('5') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS INACT_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= TRUE AND (service_class IS NULL OR service_class <<>>'4')) AS ftl

FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS pro
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS client ON pro.client_id = client.id
WHERE client.is_demo_client = FALSE
GROUP BY pro.client_id"
0b6ecc77-8d75-286c-0c2b-5bbc02d3e972,Custom SQL Query (gpbidb) (2),,
0babc4b7-6247-7e9a-819b-16559b8e73e8,nr_forecast_12_m_final_forecast_3_models (model_dev.nr_forecast_12_m_final_forecast_3_models) (model_dev),,
0c0e35ac-b40e-2796-f0e1-c69614276298,v_gp_gg_master_client+ (Multiple Connections),postgres,"select 	id as sfdc_id,
				client_health__c,
				customer_health_notes__c, 
				customer_advocate_source_c,
				all_time_nps_c,
				company_size_c,
				review_link_c
		from  salesforce.v_gp_sfdc_account_current_pacific_time"
0c0e35ac-b40e-2796-f0e1-c69614276298,v_gp_gg_master_client+ (Multiple Connections),postgres,"select distinct customer.id,
		concat(customer_csr.first_name, ' ', customer_csr.last_name) AS account_executive,
		usr.email,
		split_part(LOWER(usr.email), '@', 1) AS lower_case_email,
		wkd.*,
                case when region='LATAM' THEN 'AMER'
                    when region='NA' THEN 'AMER'
                    ELSE region
                END as region_csm_2
FROM goglobal_gp_goglobal.v_gp_gg_client_current customer
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current customer_csr ON customer.gp_current_sales_rep_id = customer_csr.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_user_current usr ON usr.id = customer_csr.user_id
left join (select *,
					split_part(LOWER(""Work Contact: Work Email""), '@', 1) AS lower_case_email_WKD
			from workday_hris.v_non_sensitive_workday_data 
		   ) wkd on wkd.lower_case_email_WKD=split_part(LOWER(usr.email), '@', 1)"
0c0e35ac-b40e-2796-f0e1-c69614276298,v_gp_gg_master_client+ (Multiple Connections),,
0c0e35ac-b40e-2796-f0e1-c69614276298,v_gp_gg_master_client+ (Multiple Connections),databricks,"WITH contractors AS 
            (
              SELECT CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
                    accounting_period,
                    gp_customer_accounting_id,
                    COUNT(DISTINCT(project_id)) as active_professional_contracted_count
                  FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view
                  WHERE total_recurring_contractor_revenue  >> 0 
                  GROUP BY 1,2,3
                  ORDER BY 1
                  ),
cal as 
        (select distinct contractors1.period_date,
                contractors2.gp_customer_accounting_id
        from contractors as contractors1,
            contractors as contractors2
            )                  
select cal.*,
      contractors.active_professional_contracted_count,
      LAG(contractors.active_professional_contracted_count,1) OVER (PARTITION BY cal.gp_customer_accounting_id ORDER BY cal.period_date	) previous_active_professional_contracted_count
from cal
left join contractors on contractors.period_date=cal.period_date and contractors.gp_customer_accounting_id=cal.gp_customer_accounting_id"
0c0e35ac-b40e-2796-f0e1-c69614276298,v_gp_gg_master_client+ (Multiple Connections),databricks,"WITH POP AS 
          (
            SELECT CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
                    accounting_period, 
                    gp_customer_accounting_id,
                    COUNT(DISTINCT(project_id)) as active_professional_eor_count
            FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view 
            WHERE total_eor_recurring_fee_billing_value >> 0 
            GROUP BY 1,2,3
            ORDER BY 1
        ),
cal as 
        (select distinct pop1.period_date,
                pop2.gp_customer_accounting_id
        from pop as pop1,
            pop as pop2
            )
select cal.*,
      pop.active_professional_eor_count,
      LAG(pop.active_professional_eor_count,1) OVER (PARTITION BY cal.gp_customer_accounting_id ORDER BY cal.period_date	) previous_active_professional_eor_count
from cal
left join pop on pop.period_date=cal.period_date and pop.gp_customer_accounting_id=cal.gp_customer_accounting_id"
0c0e35ac-b40e-2796-f0e1-c69614276298,v_gp_gg_master_client+ (Multiple Connections),databricks,"SELECT 
CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
  accounting_period,
gp_customer_accounting_id,
  COUNT(DISTINCT(gp_customer_accounting_id)) as active_professional_eor_count
FROM gp_prod.gold_kpi.customer_monthly_billing_summary_view 
WHERE total_eor_recurring_fee_billing_value >> 0 
GROUP BY 1,2,3
ORDER BY 1"
0c0e35ac-b40e-2796-f0e1-c69614276298,v_gp_gg_master_client+ (Multiple Connections),postgres,"select distinct id, 
		factors_for_customer_health_c
from salesforce.account"
0d300bcf-54c9-96ef-d0cc-b90fb8051135,Custom SQL Query (gpbidb) (2),postgres,"SELECT cal_date,
       		client_id as customer_id,
       		COUNT(distinct professional_id) as professionals_active
			FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			WHERE active_flag= 'Active' 
			GROUP BY 1,2
			ORDER BY 2,1"
0d300bcf-54c9-96ef-d0cc-b90fb8051135,Custom SQL Query (gpbidb),postgres,"WITH SFDC AS (SELECT DISTINCT * FROM salesforce.v_marketing_dashboard_pacific_time
			 WHERE opportunity_lead_source='Partner'
			 AND pipeline_stage <<>> 'MQL'),
Catalogue AS ( --Customer Catalogue for GPP, SFDC
          Select Distinct
            Client.id AS GPP_id,
            Client.name AS customer_name,
            Mdm_GG.Parent_name as MDM_Parent_Name,
               Client.salesforce_account_id AS integration_id,
               mdm_GG.source_id AS mdm_id,
            mdm_GG.child_name as SFDC_Account_Name,
            CASE
               WHEN Client.salesforce_account_id IS NOT NULL AND mdm_GG.source_id IS NOT NULL THEN Client.salesforce_account_id
               WHEN Client.salesforce_account_id IS NULL AND mdm_GG.source_id IS NOT NULL THEN mdm_GG.source_id
               WHEN Client.salesforce_account_id IS NOT NULL AND mdm_GG.source_id IS  NULL THEN Client.salesforce_account_id
            END as SFDC_Account_id
          FROM goglobal_gp_goglobal.v_gp_gg_client_current AS Client
          Left Join repo.v_gp_mdm_customer AS t2 ON Client.id::VARCHAR = t2.source_id
          Left Join
          (  Select Distinct
               mdm_customer.*
            FROM repo.v_gp_mdm_customer mdm_customer
            Where source = 'SFDC Customer'
          ) AS mdm_GG On t2.parent_name = mdm_GG.parent_name
         Where Client.is_demo_client = 'False'
         Order By Client.id ASC
         ),
GPP AS(
      SELECT DISTINCT
         client.id as customer_id,
	  client.pricing_model as pricing_model,
           client.name as customer,
         client.msa_contract_start_date_peo,
           CASE WHEN client.status = '1' THEN 'Active'
               WHEN client.status = '2' THEN 'Inactive' END as customer_status,
           partner.name as partners_referral,
         Catalogue.SFDC_Account_Name,
         Catalogue.SFDC_Account_id,
         COUNT(distinct pro.id) filter (where pro.status IN ('1') and pro.is_failed_to_launch='false') as NEW_STATUS,
         COUNT(distinct pro.id) filter (where pro.status IN ('2') and pro.is_failed_to_launch='false') as Onb_STATUS,
         COUNT(distinct pro.id) filter (where pro.status IN ('3') and pro.is_failed_to_launch='false') as ACTIVE_STATUS,
         COUNT(distinct pro.id) filter (where pro.status IN ('4') and pro.is_failed_to_launch='false') as TERM_STATUS,
         COUNT(distinct pro.id) filter (where pro.status IN ('5') and pro.is_failed_to_launch='false') as INACT_STATUS,
         COUNT(distinct pro.id) filter (where pro.is_failed_to_launch='true') as FTL
      FROM goglobal_gp_goglobal.v_gp_gg_client_current as client
      Left Join goglobal_gp_goglobal.v_gp_gg_partners_referral_current partner on partner.id = Client.partners_referral_id
      Left Join goglobal_gp_goglobal.v_gp_gg_professional_current pro on client.id = pro.client_id
      Left Join Catalogue on Catalogue.gpp_id = client.id
      where is_demo_client='false'
      AND client.partners_referral_id IS NOT NULL
      GROUP BY 1,2,3,4,5,6,7,8
      order by 1
    ),
Bills AS(
       SELECT bills.client_id,
         bills.client,
         customer.partners_referral_id,
         bills.country,
         bills.professional_id,
         bills.pro AS professional_name,
         bills.client_bill_id,
         CASE WHEN bills.invoice_date IS NULL THEN bills_c.invoice_release_date ELSE bills.invoice_date END as invoice_date,
         bills.type,
         bills_c.bill_type,
         bills.bill_status,
         bills.amount,
         bills.billing_currency AS currency,
         country.id AS currency_id
      FROM goglobal_gp_goglobal.v_gp_gg_total_bills_mat AS bills
      LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_bill_current AS bills_c ON bills.client_bill_id = bills_c.id
      LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS customer ON bills.client_id = customer.id
      LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS country ON bills.billing_currency= country.name
       WHERE bills.bill_status = 'Paid'
      AND bills.type = 'Management Fee'
      AND bills_c.bill_type in ('3', '4')  -- 3 First Bill, 4 Regular
      AND customer.partners_referral_id IS NOT NULL
      ),
Conver as (
      SELECT Distinct
         BILLS.*,
         fx_rate.rate,
         CASE WHEN BILLS.currency_id <<>> 247 THEN BILLS.amount*fx_rate.rate else bills.amount END AS converted_amount_usd
      FROM BILLS
      LEFT JOIN goglobal_gp_goglobal.v_gp_gg_fxrate_current AS fx_rate ON BILLS.invoice_date = fx_rate.date AND BILLS.currency_id = fx_rate.currency_id
      WHERE (fx_rate.target_currency_id = 247 OR fx_rate.target_currency_id IS NULL)
      ORDER BY 1,5,8
         ),
Revenue as (
      Select Distinct
         Client_id,
         round(Sum(converted_amount_usd)) as Historical_USD_Net_Revenue
      From Conver
      Group by 1
      order by 1
         ),
GPP_SFDC as (
      SELECT DISTINCT
		gpp2.partners_referral as partners_referral2,
         SFDC.*,
         GPP.*,
         CASE WHEN SFDC.lead_or_opp_id IS NOT NULL THEN (RANK  () OVER ( PARTITION BY SFDC.lead_or_opp_id ORDER BY GPP.customer_id ) ) END AS Duplicate,
         Revenue.Historical_USD_Net_Revenue
      FROM SFDC
      Left Join catalogue ON  SFDC.account_id = catalogue.sfdc_account_id
      Full Join GPP ON catalogue.gpp_id = GPP.customer_id AND SFDC.stage_name='Closed Won' AND GPP.partners_referral = SFDC.partner
		left join gpp as gpp2  on GPP2.partners_referral = SFDC.partner
      Left Join Revenue on GPP.Customer_id = Revenue.Client_id
      ORDER BY SFDC.cal_date
          )
select distinct  * from gpp_sfdc"
0d300bcf-54c9-96ef-d0cc-b90fb8051135,Custom SQL Query (gpbidb),postgres,"SELECT cal_date,
       		client_id as customer_id,
       		COUNT(distinct professional_id) as professionals_active
			FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			WHERE active_flag= 'Active' 
			GROUP BY 1,2
			ORDER BY 2,1"
0d300bcf-54c9-96ef-d0cc-b90fb8051135,Custom SQL Query (gpbidb),postgres,"SELECT cal_date, client_id, country_name, COUNT(distinct professional_id) as professionals_active
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
WHERE active_flag= 'Active' 
GROUP BY 1,2,3
ORDER BY 2,1,3"
0db1fcb9-bd8a-648f-ab44-172ca583b0ac,Oracle Eloqua,,
0f086970-2b88-7bba-531f-d05e49de5941,Expense Report FM Jan-Sep 2022 (Zoho - GPP Bill Expense Data Jan-Sept 2022 V2),,
0f1931ab-4ec8-7e1a-e26a-e2718f7421a0,Custom SQL Query (gpbidb),postgres,select distinct * from salesforce.v_gp_sfdc_opportunity_current_pacific_time as a
0f1931ab-4ec8-7e1a-e26a-e2718f7421a0,Custom SQL Query (gpbidb),postgres,"select distinct id as partner_id,
name as partner_name,
				partner_agreement_effective_date_c,
type as partner_type,
				client_region_billing_country as partner_region,
				partner_vertical__c as partner_category,
				partner_group_c, 
				billing_country,
				gp_executive_sponsor_c,
				partner_executive_sponsor_c,
				open_api_c,
				corporate_partner_c,
				partner__referral__c,
				partner__referral__contact__c,
				gp_recruit_c,
				sso_c
from salesforce.v_gp_sfdc_account_current_pacific_time"
0f1931ab-4ec8-7e1a-e26a-e2718f7421a0,Custom SQL Query (gpbidb),postgres,"select distinct id as owner_id_,
name as owner_name
from salesforce.v_gp_sfdc_user_current"
089f7d01-600d-19c3-2790-9cbdcd2bd772,Custom SQL Query (gpbidb),postgres,"WITH mdm AS (
select prc.id AS gp_partner_id,
aa.partner2__c,
prc.name AS gp_partner_name,
ac.billing_country AS partner_country,
ac.client_region_billing_country AS partner_region
FROM (select * from goglobal_gp_goglobal.v_gp_gg_partners_referral_current
	  where id IS NOT NULL)prc
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current as cc
ON  prc.id = cc.partners_referral_id
LEFT JOIN repo.v_gp_mdm_customer AS mdm
ON cc.id::TEXT = mdm.source_id
LEFT JOIN (SELECT *
			FROM repo.v_gp_mdm_customer
			WHERE source = 'SFDC Customer') AS mdm_GG
ON mdm.parent_name = mdm_GG.parent_name
LEFT JOIN (SELECT account_id, close_date, partner2__c
			FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time AS a
			WHERE a.stage_name = 'Closed Won'
			AND a.type = 'New Business'
		    AND a.is_won = TRUE) AS aa
			ON mdm_GG.source_id = aa.account_id
			LEFT JOIN (select * from salesforce.v_gp_sfdc_account_current
		    where name IS NOT NULL and client_region_billing_country <<>> 'Sync Problem' and client_region_billing_country IS NOT NULL)AS ac
			ON aa.partner2__c::text = ac.id::text
			GROUP BY 1,2,3,4,5),
mdm_partner AS (Select * from mdm WHERE partner2__c is not NULL and partner2__c <<>> '001d000001xmPhrAAE'),
C AS (SELECT HD.cal_date,
                    HD.client_name AS client,
                    HD.client_id,
			 		CC.pricing_model,
                    HD.country_name,
                    HD.payroll_start_date::date,
                    HD.payroll_end_date::date,
                    HD.tenure_months,
                    HD.professional_id,
                    HD.COUNTRY_NAME AS WORKING_COUNTRY,
                    CONCAT(HD.first_name, ' ',HD.lASt_name) AS professional_name,
                    CASE WHEN HD.active_flag = 'Active' THEN HD.active_flag
                    ELSE 'Inactive' END AS professional_status,
                    CC.referred_by,
                    cc.partners_referral_id,
			 		cc9.region AS customer_region,
			 		p8.region AS professional_working_region,
                /*ADP Marketplace*/
                    CASE WHEN (cc.partners_referral_id = '1'
                    AND HD.active_flag = 'Active') THEN 200
                    ELSE 0 END AS marketplace_referral_fee_earned,
                    CASE
                            WHEN HD.MSA_CONTRACT_START_DATE_PEO ISNULL
                                    THEN HD.MSA_CONTRACT_START_DATE_ASO
                            ELSE HD.MSA_CONTRACT_START_DATE_PEO
                    END AS MSA_START_DATE,
                    CASE
                            WHEN HD.addendum_enrollment_date ISNULL
                                    THEN HD.addendum_enrollment_date_ASo
                            ELSE HD.addendum_enrollment_date
                    END AS Addendum_Enrollment_Date
            FROM goglobal_gp_goglobal.v_tableau_headcount_dAShboard HD
            JOIN goglobal_gp_goglobal.v_gp_gg_client_current CC ON HD.client_id = CC.id
			LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_professional_current AS p on
			HD.professional_id = p.id
			LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS p3
			ON p.lsp_country_id=p3.id
			LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS p4
			ON p3.country_id=p4.id
			LEFT JOIN repo.v_gp_mdm_region AS p8
			ON p4.country_code = p8.country_code
			LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS cc2
			ON CC.billing_address_id = cc2.id
			LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS cc3
			ON cc2.country_id=cc3.id
			LEFT JOIN repo.v_gp_mdm_region AS cc9
			ON cc3.country_code = cc9.country_code
            WHERE date_trunc('month', HD.cal_date) >>= '2019-01-01'
            AND date_trunc('month', HD.cal_date) <<= date_trunc('month', now())),
 table_1 as (
 SELECT  C.cal_date,
            C.client,
			C.pricing_model,
            C.payroll_start_date::date,
            C.payroll_end_date::date,
            C.professional_id,
            C.professional_name,
            C.professional_status,
            C.WORKING_COUNTRY,
            C.referred_by,
            z.name as New_Referral_Field,
            c.partners_referral_id,
            Z.NAME AS PARTNER,
            C.MSA_START_DATE,
            C.Addendum_Enrollment_Date,
            C.marketplace_referral_fee_earned,
			C.customer_region,
			C.professional_working_region,
			CASE WHEN cal_date >>= '2022-02-01' then 1 else 0 END as flag_pricing_model_start,
			mdm_partner.partner_country,
			customer_table.adp_lead_source,
			mdm_partner.partner_region
	FROM C
    LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current Z
	ON C.PARTNERS_REFERRAL_ID=Z.ID
	LEFT JOIN mdm_partner
	ON  Z.id = mdm_partner.gp_partner_id
	LEFT JOIN (SELECT id, adp_lead_source from goglobal_gp_goglobal.client WHERE _fivetran_active = true
	) as customer_table on C.client_id = customer_table.id
	GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22),
table_flag as (select client as client_2, new_referral_field as new_referral_field_2 , min(date_trunc('month', payroll_start_date)::date) as flag_start
		from table_1
		group by 1,2),
table_2 as (select distinct * from table_1
		left join table_flag
		on table_1.new_referral_field=table_flag.new_referral_field_2
		and table_1.client=table_flag.client_2),
pivot as ( select cal_date, client, pricing_model, payroll_start_date, payroll_end_date, professional_id, professional_name,
			professional_status, new_referral_field, customer_region, partner_country, partner_region, flag_start ,
			CASE
					WHEN cal_date=flag_start AND professional_status='Active' THEN 1
                    ELSE 0
                	END AS professional_pivot
			from table_2
			--where client='Aurora Expeditions'
			),
table_3 as (select cal_date, client, flag_start, professional_id, professional_pivot
		   from pivot
		   where professional_pivot=1),
table_4 as (Select pivot.cal_date, pivot.client, pricing_model, payroll_start_date, payroll_end_date, pivot.professional_id, professional_name,
			professional_status, new_referral_field, customer_region, partner_country, partner_region, pivot.flag_start, table_3.professional_pivot
			from pivot
			left join table_3
			on pivot.professional_id=table_3.professional_id),
table_3_months as (select cal_date,
			client,
			pricing_model,
			payroll_start_date,
			payroll_end_date,
			professional_id,
			professional_name,
			professional_status,
			new_referral_field,
			customer_region,
			partner_country,
			partner_region,
			flag_start,
			professional_pivot,
		    (date_trunc('month', flag_start)::date + '3 months'::interval)::date as flag_3_months,
			(date_trunc('month', flag_start)::date + '12 months'::interval)::date as flag_1_year
			from table_4),
pivot_3_months as ( select cal_date, client, pricing_model, payroll_start_date, payroll_end_date, professional_id, professional_name,
			professional_status, new_referral_field, customer_region, partner_country, partner_region, flag_start , professional_pivot, flag_3_months, flag_1_year,
			CASE
					WHEN cal_date=flag_3_months AND professional_status='Active' AND professional_pivot IS NULL THEN 1
                    ELSE 0
                	END AS prof_pivot_3_months
			from table_3_months),
table_5 as (select cal_date, client, flag_3_months, professional_id, prof_pivot_3_months
		   from pivot_3_months
		   where prof_pivot_3_months=1),			
table_6 as (Select pivot_3_months.cal_date, pivot_3_months.client, pricing_model, payroll_start_date, payroll_end_date, pivot_3_months.professional_id, professional_name,
			professional_status, new_referral_field, customer_region, partner_country, partner_region, flag_start, professional_pivot, flag_1_year, pivot_3_months.flag_3_months, table_5.prof_pivot_3_months
			from pivot_3_months
			left join table_5
			on pivot_3_months.professional_id=table_5.professional_id),
pivot_1_year as ( select cal_date, client, pricing_model, payroll_start_date, payroll_end_date, professional_id, professional_name,
			professional_status, new_referral_field, customer_region, partner_country, partner_region, flag_start , flag_3_months, 
		    flag_1_year,professional_pivot, prof_pivot_3_months,
			CASE
					WHEN cal_date=flag_1_year AND professional_status='Active' AND professional_pivot IS NULL AND prof_pivot_3_months IS NULL THEN 1
                    ELSE 0
                	END AS prof_pivot_1_year
			from table_6),
table_7 as (select cal_date, client, flag_1_year, professional_id, prof_pivot_1_year
		   from pivot_1_year
		   where prof_pivot_1_year=1),
table_8 as (Select pivot_1_year.cal_date, pivot_1_year.client, pricing_model, payroll_start_date, payroll_end_date, pivot_1_year.professional_id, professional_name,
			professional_status, new_referral_field, customer_region, partner_country, partner_region, flag_start, professional_pivot, pivot_1_year.flag_1_year, 
			flag_3_months, prof_pivot_3_months, pivot_1_year.prof_pivot_1_year
			from pivot_1_year
			left join table_7
			on pivot_1_year.professional_id=table_7.professional_id)
			select * from table_8"
86edd649-40e5-0dd2-cf7f-7324c89b3f19,campaign_history (gpbidb),postgres,"SELECT a.*
FROM facebook_ad_account_hist.ad_history a
INNER JOIN (
    SELECT id, MAX(updated_time) updated_time
    FROM facebook_ad_account_hist.ad_history
    GROUP BY id
) b ON a.id = b.id AND a.updated_time = b.updated_time"
86edd649-40e5-0dd2-cf7f-7324c89b3f19,campaign_history (gpbidb),postgres,"SELECT a.*
FROM facebook_ad_account_hist.ad_set_history a
INNER JOIN (
    SELECT id, MAX(updated_time) updated_time
    FROM facebook_ad_account_hist.ad_set_history
    GROUP BY id
) b ON a.id = b.id AND a.updated_time = b.updated_time"
86edd649-40e5-0dd2-cf7f-7324c89b3f19,campaign_history (gpbidb),,
86edd649-40e5-0dd2-cf7f-7324c89b3f19,campaign_history (gpbidb),postgres,"SELECT a.id::TEXT, a.updated_time, account_id, source_campaign_id, boosted_object_id, buying_type, can_create_brand_lift_study, can_use_spend_cap, configured_status, created_time, effective_status, name, objective, spend_cap, start_time, status, stop_time, daily_budget, _fivetran_synced
FROM facebook_ad_account_hist.campaign_history a
INNER JOIN (
    SELECT id, MAX(updated_time) updated_time
    FROM facebook_ad_account_hist.campaign_history
    GROUP BY id
) b ON a.id = b.id AND a.updated_time = b.updated_time"
267db168-c55d-80be-3b61-af8ff983b4b2,Custom SQL Query (gpbidb),postgres,"select t1.id, concat(t1.first_name,' ',t1.last_name) as professional, t1.status, t2.name as client, t4.name as country, t1.work_email, t1.personal_email,t5.email as used_for_login,
concat(t9.first_name,' ',t9.last_name) as Account_Manager,
case when t1.expense_method='1' then 'GP Submit'
	 when t1.expense_method='2' then ' Client Expense System/GP Reimburses'
	 when t1.expense_method='3' then 'Client Expense System/Client Reimburses'
	 when t1.expense_method='4' then '3rd Party EOR'
end as expense_method
from goglobal_gp_goglobal.v_gp_gg_professional_current t1
left join goglobal_gp_goglobal.v_gp_gg_client_current t2 	
	on t1.client_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t3 
		on t1.lsp_country_id=t3.id
	left join repo.v_gp_gg_country_current t4 
		on t3.country_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9  
		on t9.id = t2.gp_account_manager_id
left join goglobal_gp_goglobal.v_gp_gg_useR_current t5
	on t1.useR_id=t5.id
where t1.is_failed_to_launch='false' and is_demo_client='false'"
291163f2-619e-9252-3075-3cbcb5b53bcb,v_gp_gg_client_country_current (goglobal_goglobal.v_gp_gg_client_country_current)+ (gpbidb),,
291163f2-619e-9252-3075-3cbcb5b53bcb,v_gp_gg_client_country_current (goglobal_goglobal.v_gp_gg_client_country_current)+ (gpbidb),postgres,"select *, CASE WHEN COUNTRY_ID='103' THEN '22'::bigint
 WHEN COUNTRY_ID='196' THEN '37'::bigint
 end as silo_msa_id_tax
from goglobal_gp_goglobal.tax"
291163f2-619e-9252-3075-3cbcb5b53bcb,v_gp_gg_client_country_current (goglobal_goglobal.v_gp_gg_client_country_current)+ (gpbidb),postgres,"select t2.name as client,t3.id as client_country_id,t4.name as country,
count(distinct t1.id) filter (where is_failed_to_launch='false' and t1.status in ('2','3','4'))as pro,
count(distinct t1.id) filter (where is_failed_to_launch='true')as ftl
from goglobal_gp_goglobal.v_gp_gg_client_country_current t3
left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on t3.client_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t4 on t3.country_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_professional_current t1 on t1.client_id=t2.id and t3.id=t1.client_country_id
group by 1,2,3
order by 1,3"
291163f2-619e-9252-3075-3cbcb5b53bcb,v_gp_gg_client_country_current (goglobal_goglobal.v_gp_gg_client_country_current)+ (gpbidb),postgres,"select distinct ccm.client_country_id, 
insurance_markup.is_applicable as Insurance_markup_is_app, insurance_markup.markup_transaction_amt as insurance_markup,
Employee_Markup.is_applicable as Employee_Markup_is_app, Employee_Markup.markup_transaction_amt as Employee_Markup,
Medical_Markup.is_applicable as Medical_Markup_is_app, Medical_Markup.markup_transaction_amt as Medical_Markup
from  goglobal_gp_goglobal.v_gp_gg_client_country_markup_transaction_current ccm
left join (select * from  goglobal_gp_goglobal.v_gp_gg_client_country_markup_transaction_current where markup_transaction_id='1') as Insurance_Markup
	on ccm.client_country_id=insurance_markup.client_country_id
left join (select * from  goglobal_gp_goglobal.v_gp_gg_client_country_markup_transaction_current where markup_transaction_id='3') as Employee_Markup
	on ccm.client_country_id=Employee_Markup.client_country_id
left join (select * from  goglobal_gp_goglobal.v_gp_gg_client_country_markup_transaction_current where markup_transaction_id='4') as Medical_Markup
	on ccm.client_country_id=Medical_Markup.client_country_id"
291163f2-619e-9252-3075-3cbcb5b53bcb,v_gp_gg_client_country_current (goglobal_goglobal.v_gp_gg_client_country_current)+ (gpbidb),postgres,"Select distinct cc.id,
		min(cco.addendum_enrollment_date) as minimo
from goglobal_gp_goglobal.v_gp_gg_client_current cc
left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco on cc.id=cco.client_id
group by 1
order by 1"
3d3d7c18-5795-0fd1-02a9-c57396f3dcf1,Sales Exec. Performance,postgres,"WITH min_dates AS(SELECT opportunity_id,
		   MIN(rank) AS earliest	
FROM salesforce.v_gp_sfdc_opportunity_stage_duration
WHERE to_stage_name IN ('Contract','Closed Won','Negotiations L2','NegotiationsL2')
GROUP BY opportunity_id)
,
L2date AS(
SELECT DISTINCT opportunity_id, 
		prev_stage_name AS prev_stage, 
		to_stage_name AS final_stage,
		stage_last_modified AS first_mod_date
FROM salesforce.v_gp_sfdc_opportunity_stage_duration osd
LEFT JOIN min_dates mn USING(opportunity_id)
WHERE rank = earliest)
,
dates AS(
SELECT u.id AS uid, 
""Hire Date""::date AS hire,
(""Hire Date""::date + interval '90' day)::date AS hire_90,
(""Hire Date""::date + interval '180' day)::date AS hire_180,
(""Hire Date""::date + interval '365' day)::date AS hire_365
FROM salesforce.v_gp_sfdc_user_current u
JOIN workday_hris.v_non_sensitive_workday_data w ON LOWER(u.email) = LOWER(w.""Work Contact: Work Email"")
)
,
L2ops AS(
SELECT u.id AS uid, u.name, o.id
	--, o.name, o.stage_name, o.type,
--l.final_stage, l.first_mod_date, d.hire, d.hire_90
FROM salesforce.v_gp_sfdc_user_current u
LEFT JOIN salesforce.v_gp_sfdc_opportunity_current_pacific_time o ON o.owner_id = u.id
LEFT JOIN L2date l ON o.id=l.opportunity_id
LEFT JOIN dates d ON u.id = d.uid
WHERE l.first_mod_date >>= hire AND l.first_mod_date <<= hire_90
AND (o.record_type_bi__c  IS NULL OR o.record_type_bi__c  <<>> 'Potential Partner Opportunity')
AND (o.partner_acquisition__c IS NULL OR o.partner_acquisition__c <<>> 'Yes')
AND (o.type IS NULL OR o.type <<>> 'Existing Business')
	)
	
SELECT uid, name, COUNT(DISTINCT id) AS L2_leading_ops
FROM L2ops
GROUP BY uid, name"
3d3d7c18-5795-0fd1-02a9-c57396f3dcf1,Sales Exec. Performance,postgres,"WITH v_leads_and_opportunities AS (
         SELECT DISTINCT opps.id AS opp_id,
            opps.closed__lost__c,
            opps.created_date,
            opps.sales__accepted__date__c AS sal_accepted_date,
            opps.s_a_l__c,
            opps.s_a_l_by__sales__c,
            opps.record_type_bi__c,
            opps.close_date,
            opps.stage_name,
            opps.partner_acquisition__c AS partner_acq_opps,
            opps.is_won,
            opps.owner_id,
			opps.created_by_id,
            opps.type AS opp_type,
			opps.lead_source,
			opps.update_time,
            opps.pricing_model__c AS pricing_model_opps,
                CASE
                    WHEN (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) 
	                AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) 
	                --AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text) 
	                THEN 'Non Partner Opp or Existing Business'::text
                    ELSE 'Partner Opp or Existing Business'::text
                END AS opp_go_flag
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
        ), sql AS (
         SELECT DISTINCT v_leads_and_opportunities.close_date,
            'SQL'::text AS cohort_stage,
            v_leads_and_opportunities.created_date,
            v_leads_and_opportunities.is_won,
            v_leads_and_opportunities.opp_go_flag,
            v_leads_and_opportunities.opp_id,
            v_leads_and_opportunities.opp_type,
			v_leads_and_opportunities.lead_source,
			v_leads_and_opportunities.created_by_id AS name_join_id,
            v_leads_and_opportunities.partner_acq_opps,
            v_leads_and_opportunities.created_date::date AS point_time_date,
            v_leads_and_opportunities.pricing_model_opps,
            v_leads_and_opportunities.record_type_bi__c,
            v_leads_and_opportunities.s_a_l__c,
            v_leads_and_opportunities.s_a_l_by__sales__c,
            v_leads_and_opportunities.sal_accepted_date,
            v_leads_and_opportunities.stage_name,
			v_leads_and_opportunities.update_time
           FROM v_leads_and_opportunities
          WHERE v_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_leads_and_opportunities.opp_id IS NOT NULL
        ), sal AS (
         SELECT DISTINCT v_leads_and_opportunities.close_date,
            'SAL'::text AS cohort_stage,
            v_leads_and_opportunities.created_date,
            v_leads_and_opportunities.is_won,
            v_leads_and_opportunities.opp_go_flag,
            v_leads_and_opportunities.opp_id,
            v_leads_and_opportunities.opp_type,
			v_leads_and_opportunities.lead_source,
            v_leads_and_opportunities.owner_id AS name_join_id,
            v_leads_and_opportunities.partner_acq_opps,
            v_leads_and_opportunities.sal_accepted_date::date AS point_time_date,
            v_leads_and_opportunities.pricing_model_opps,
            v_leads_and_opportunities.record_type_bi__c,
            v_leads_and_opportunities.s_a_l__c,
            v_leads_and_opportunities.s_a_l_by__sales__c,
            v_leads_and_opportunities.sal_accepted_date,
            v_leads_and_opportunities.stage_name,
			v_leads_and_opportunities.update_time
           FROM v_leads_and_opportunities
          WHERE v_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_leads_and_opportunities.s_a_l_by__sales__c::text = 'Yes'::text
        ), ma AS (
         SELECT DISTINCT v_leads_and_opportunities.close_date,
            'MA'::text AS cohort_stage,
            v_leads_and_opportunities.created_date,
            v_leads_and_opportunities.is_won,
            v_leads_and_opportunities.opp_go_flag,
            v_leads_and_opportunities.opp_id,
            v_leads_and_opportunities.opp_type,
			v_leads_and_opportunities.lead_source,
            v_leads_and_opportunities.owner_id AS name_join_id,
            v_leads_and_opportunities.partner_acq_opps,
            v_leads_and_opportunities.close_date::date AS point_time_date,
            v_leads_and_opportunities.pricing_model_opps,
            v_leads_and_opportunities.record_type_bi__c,
            v_leads_and_opportunities.s_a_l__c,
            v_leads_and_opportunities.s_a_l_by__sales__c,
            v_leads_and_opportunities.sal_accepted_date,
            v_leads_and_opportunities.stage_name,
			v_leads_and_opportunities.update_time
           FROM v_leads_and_opportunities
          WHERE v_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_leads_and_opportunities.is_won = true
        ),  full_union AS (
         SELECT sql.close_date,
            sql.cohort_stage,
            sql.created_date,
            sql.is_won,
            sql.opp_go_flag,
            sql.opp_id,
            sql.opp_type,
			sql.lead_source,
            sql.name_join_id,
            sql.partner_acq_opps,
            sql.point_time_date,
            sql.pricing_model_opps,
            sql.record_type_bi__c,
            sql.s_a_l__c,
            sql.s_a_l_by__sales__c,
            sql.sal_accepted_date,
            sql.stage_name,
			sql.update_time
           FROM sql
        UNION ALL
         SELECT sal.close_date,
            sal.cohort_stage,
            sal.created_date,
            sal.is_won,
            sal.opp_go_flag,
            sal.opp_id,
            sal.opp_type,
			sal.lead_source,
            sal.name_join_id,
            sal.partner_acq_opps,
            sal.point_time_date,
            sal.pricing_model_opps,
            sal.record_type_bi__c,
            sal.s_a_l__c,
            sal.s_a_l_by__sales__c,
            sal.sal_accepted_date,
            sal.stage_name,
			sal.update_time
           FROM sal
        UNION ALL
         SELECT ma.close_date,
            ma.cohort_stage,
            ma.created_date,
            ma.is_won,
            ma.opp_go_flag,
            ma.opp_id,
            ma.opp_type,
			ma.lead_source,
            ma.name_join_id,
            ma.partner_acq_opps,
            ma.point_time_date,
            ma.pricing_model_opps,
            ma.record_type_bi__c,
            ma.s_a_l__c,
            ma.s_a_l_by__sales__c,
            ma.sal_accepted_date,
            ma.stage_name,
			ma.update_time
           FROM ma
        )
 SELECT *
   FROM full_union"
3d3d7c18-5795-0fd1-02a9-c57396f3dcf1,Sales Exec. Performance,postgres,"/*SELECT 
        ""SFDC ID"" AS id,
        TO_DATE(""Time"",'Mon-YY') AS date,
        --""Component Type:ss Sum Components"" AS quota_type,
        ""Reports To"" AS manager, 
        ""Target"" AS target, 
        ""Actual"" AS actuals
FROM anaplan.quotas_for_sales_executives
WHERE ""Component Type:ss Sum Components"" = 'MA'*/

SELECT 
        ""SFDC ID"" AS id,
        TO_DATE(""Time"",'Mon-YY') AS date,
        --""Component Type:ss Sum Components"" AS quota_type,
        --""Reports To"" AS manager, 
        MAX(""Target"") AS target, 
        MAX(""Actual"") AS actuals
FROM anaplan.anaplan_quotas_sales_executives
WHERE ""Component Type:ss Sum Components"" = 'MA'
GROUP BY ""SFDC ID"", ""Time""
Order by 1,2"
3d3d7c18-5795-0fd1-02a9-c57396f3dcf1,Sales Exec. Performance,postgres,"with dates AS(
SELECT u.id AS uid, u.email,
""Hire Date""::date AS hire,
(""Hire Date""::date + interval '90' day)::date AS hire_90,
(""Hire Date""::date + interval '180' day)::date AS hire_180,
(""Hire Date""::date + interval '365' day)::date AS hire_365
FROM salesforce.v_gp_sfdc_user_current u
JOIN workday_hris.v_non_sensitive_workday_data w ON LOWER(u.email) = LOWER(w.""Work Contact: Work Email"")
)
,
long_calls AS (
	SELECT DISTINCT c.id AS call_id,
	u1.email_address AS caller_mail,
	started::date AS call_date
	FROM gong.calls c
	LEFT JOIN gong.users AS u1
	ON c.""primaryUserId"" = u1.id
	WHERE duration::integer >>= 300
)
,
invite_count AS(SELECT call_id, affiliation, count( DISTINCT speaker_id) AS count
	FROM gong.calls_parties
	WHERE is_attendee = TRUE
	GROUP BY call_id, affiliation
	)
,
external AS (SELECT DISTINCT call_id
FROM invite_count
WHERE affiliation = 'External' AND count >> 0
			)
,
internal AS (SELECT DISTINCT call_id
FROM invite_count
WHERE affiliation = 'Internal' AND count = 1
)
,
solo_calls AS(
SELECT DISTINCT call_id 
FROM external
INNER JOIN internal USING (call_id)
)
,
leadcalls AS(
SELECT u.id AS uid, 
hire,
hire_90,
l.call_id, l.call_date

FROM salesforce.v_gp_sfdc_user_current u
JOIN dates ON u.id = dates.uid
LEFT JOIN long_calls l ON LOWER(u.email) = LOWER(caller_mail)
WHERE l.call_date >>= hire AND l.call_date <<= hire_90
)
,
solo_lean_calls AS(
SELECT l.call_id, l.caller_mail--, l.call_date, dates.hire_180
FROM long_calls l
INNER JOIN solo_calls USING (call_id)
LEFT JOIN dates ON LOWER(dates.email) = LOWER(l.caller_mail)
WHERE (dates.hire_180 IS NOT NULL) AND (l.call_date << dates.hire_180)
)

,
outreach AS (SELECT u.id AS uid, 
m.id AS mail_id 

FROM salesforce.v_gp_sfdc_user_current u
LEFT JOIN  outreach.v_outreach_mailing_current m ON LOWER(u.email) = LOWER(m.mailbox_address)
LEFT JOIN dates d ON d.uid = u.id
WHERE m.delivered_at >>= d.hire AND m.delivered_at <<= d.hire_90)

--End of tables
-- Start of query
SELECT u.id, u.name,  u.email, 
u.title, 
""Business Unit Description"", 
w.region, ""Status"",
""Reports To Name"",
""Hire Date""::date,
gong_calls,
solo_calls,
out_mails,
uf._fivetran_synced


FROM salesforce.v_gp_sfdc_user_current u
LEFT JOIN workday_hris.v_non_sensitive_workday_data w ON LOWER(u.email) = LOWER(w.""Work Contact: Work Email"")
LEFT JOIN (SELECT uid, count(distinct call_id) AS gong_calls
			FROM leadcalls 
			group by uid) AS c ON c.uid = u.id
LEFT JOIN (SELECT uid, count(distinct mail_id) AS out_mails
			FROM outreach 
			group by uid) AS o ON o.uid = u.id
LEFT JOIN (SELECT caller_mail, count(distinct call_id) AS solo_calls
			FROM solo_lean_calls 
			group by caller_mail) AS sc ON LOWER(sc.caller_mail) = LOWER(u.email)
LEFT JOIN salesforce.user uf USING(id)

--WHERE id = ''"
3d3d7c18-5795-0fd1-02a9-c57396f3dcf1,Sales Exec. Performance,postgres,"WITH gong AS (SELECT call_id, soc.id AS opp_id, 
	soc.name AS opportunity_name
	FROM gong.lz_calls_context cco
	LEFT JOIN salesforce.v_gp_sfdc_opportunity_current soc
	ON soc.id = cco.id
	WHERE cco.type = 'Opportunity' AND is_deleted = false)
,
MA AS(SELECT DISTINCT opps.id AS opp_id,
			--opps.pricing_model__c AS pricing_model_opps,
			opps.close_date,
CASE
                    WHEN (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) 
	                AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) 
	                AND (opps.type IS NULL OR opps.type::text <<>> 'Existing Business'::text) 
	                THEN 'Non Partner Opp or Existing Business'::text
                    ELSE 'Partner Opp or Existing Business'::text
                END AS opp_go_flag
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
		   WHERE opps.is_won = TRUE
)
,
invite_count AS(SELECT call_id, affiliation, count( DISTINCT speaker_id) AS count
	FROM gong.calls_parties
	WHERE is_attendee = TRUE
	GROUP BY call_id, affiliation
	)
,
external AS (SELECT DISTINCT call_id
FROM invite_count
WHERE affiliation = 'External' AND count >> 0
			)
,
internal AS (SELECT DISTINCT call_id
FROM invite_count
WHERE affiliation = 'Internal' AND count = 1
)
,
solo_calls AS(
SELECT DISTINCT call_id 
FROM external
INNER JOIN internal USING (call_id)
)
,
dates AS(
SELECT u.id AS uid,
	u.email,
""Hire Date""::date AS hire,
(""Hire Date""::date + interval '90' day)::date AS hire_90,
(""Hire Date""::date + interval '180' day)::date AS hire_180,
(""Hire Date""::date + interval '365' day)::date AS hire_365
FROM salesforce.v_gp_sfdc_user_current u
JOIN workday_hris.v_non_sensitive_workday_data w ON LOWER(u.email) = LOWER(w.""Work Contact: Work Email"")
)

,
long_calls AS (
	SELECT DISTINCT c.id AS call_id,
	u1.email_address AS caller_mail,
	started::date AS call_date,
	dates.hire_180
	FROM gong.calls c
	LEFT JOIN gong.users AS u1
	ON c.""primaryUserId"" = u1.id
	LEFT JOIN dates ON LOWER(dates.email) = LOWER(u1.email_address)
    WHERE (dates.hire_180 IS NOT NULL) AND (started::date << dates.hire_180)
	AND duration::integer >>= 300
)
,
solo_lean_calls AS(
SELECT l.call_id, l.caller_mail, l.call_date, l.hire_180
FROM long_calls l
INNER JOIN solo_calls USING (call_id)
--LEFT JOIN dates ON dates.email = l.caller_mail
--WHERE (dates.hire_180 IS NOT NULL) AND (l.call_date << dates.hire_180)
)

/* SELECT opp_id, close_date, call_id, caller_mail, call_date
FROM MA LEFT JOIN gong USING (opp_id)
INNER JOIN long_calls USING(call_id)
WHERE opp_go_flag = 'Non Partner Opp or Existing Business'
AND call_id IS NOT NULL
AND call_date <<= close_date
ORDER BY 1*/

SELECT opp_id, a.all_calls, b.solo_calls,
CASE 
WHEN a.all_calls = b.solo_calls THEN 'Solo'
ELSE 'Not solo' END
FROM (

	SELECT opp_id, COUNT(DISTINCT call_id) AS all_calls
	FROM MA LEFT JOIN gong USING (opp_id)
	INNER JOIN long_calls USING(call_id)
	WHERE opp_go_flag = 'Non Partner Opp or Existing Business'
	AND call_id IS NOT NULL
	AND call_date <<= close_date
	GROUP BY opp_id
) AS a
LEFT JOIN (

	SELECT opp_id, COUNT(DISTINCT call_id) AS solo_calls
	FROM MA LEFT JOIN gong USING (opp_id)
	INNER JOIN solo_lean_calls USING(call_id)
	WHERE opp_go_flag = 'Non Partner Opp or Existing Business'
	AND call_id IS NOT NULL
	AND call_date <<= close_date
	GROUP BY opp_id
) as b
USING (opp_id)
ORDER BY 1"
3d8d6adc-2905-b403-b69b-216c54511ae4,Current Active Customers,postgres,"with Client_industry as
	(
		select distinct cc.id  AS Client_ID,
			cc.name  AS Client,
                        cc.status,
			ind.name AS GGP_Industry,
			co.name AS Billing_Country,
			least(cc.msa_contract_start_date_sourcing,cc.msa_contract_start_date_peo,cc.msa_contract_start_date_services,cc.msa_contract_start_date_aso) AS Least_Contract_Signed_Date,
			cc.msa_contract_start_date_peo,
			cc.msa_contract_start_date_sourcing,
			cc.msa_contract_start_date_aso,
			cc.msa_contract_start_date_services	
		from goglobal_gp_goglobal.v_gp_gg_client_current cc
		left join goglobal_gp_goglobal.v_gp_gg_industry_current ind on cc.industry_id=ind.id
		left join goglobal_gp_goglobal.v_gp_gg_address_current adr ON cc.billing_address_id =adr.id
		left join goglobal_gp_goglobal.v_gp_gg_country_current co ON adr.country_id =co.id
		where cc.is_demo_client='false'
	)
select distinct GGP_Industry ""GGP Industry"",
		billing_country ""Billing Country"",
                Least_Contract_Signed_Date,
                status,
		client_id
from client_industry
ORDER BY 1,2,3"
3d8d6adc-2905-b403-b69b-216c54511ae4,Current Active Customers,postgres,"SELECT cal_date,client_id,country_name, title, COUNT (DISTINCT professional_id) AS professional_count
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
WHERE service_class::int <<>> 4 AND active_flag = 'Active' AND cal_date BETWEEN '2021-01-01'::date AND current_date
GROUP BY cal_date,client_id, country_name,title
ORDER BY 1,2"
3e52e095-3e77-8527-c05d-c80436e5e990,Custom SQL Query (gpbidb),postgres,"WITH A AS(select	t1.id, t1.status, t1.date_created,t1.date_modified,t1.modified_by,t1.version,t1.name, t1.accounting_id,
		t1.gp_account_manager_id, concat(t9.first_name,' ',t9.last_name) as Acc_Man_GG,
		ROW_NUMBER () OVER (partition by T1.ID ORDER BY T1.DATE_MODIFIED DESC) as row_number
FROM repo.gp_gg_client t1
left join repo.v_gp_gg_gp_person_current t9 on t1.gp_account_manager_id=t9.id
where is_demo_client='false'
		  order by ROW_NUMBER),
B AS(SELECT A.* FROM A WHERE ROW_NUMBER='1'),
C AS(SELECT id AS ID2, status AS STATUS2, date_created AS DATE_CREATED2,date_modified AS DATE_MODIFIED2,modified_by AS MODIFIED_BY_2,
	 		version AS VERSION2,name AS NAME2,accounting_id AS ACCOUNTING_ID2,
		gp_account_manager_id AS gp_account_manager_id2 , Acc_Man_GG AS Acc_Man_GG2,
		row_number AS row_number2 
	 FROM A WHERE ROW_NUMBER='2')
SELECT B.*,C.*, 
		CASE WHEN B.DATE_CREATED >> current_date - interval '8 days' THEN 'NEW' ELSE 'REMAIN' END AS NEW,
		CASE WHEN B.NAME<<>>C.NAME2 THEN 'CHANGE' ELSE 'REMAIN'END AS NAME_C,
		CASE WHEN B.ACCOUNTING_ID<<>>C.ACCOUNTING_ID2 THEN 'CHANGE' ELSE 'REMAIN'END AS ACCOUNTING_ID_C,
		CASE WHEN B.ACC_MAN_GG<<>>C.ACC_MAN_GG2 THEN 'CHANGE' ELSE 'REMAIN'END AS ACC_MAN_CN
FROM B left join C on b.id=c.id2
order by b.id"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Releases details (Jira),postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Releases details (Jira),postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
 CAST(""fixVersions"".""value"" as INT) as fixVersionID
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
JOIN ""jira_integration"".""issue_multiselect_history"" ""fixVersions"" on ""fixVersions"".issue_id = ""issue"".id and ""fixVersions"".field_id = 'fixVersions' and ""fixVersions"".is_active = true and ""fixVersions"".value is not NULL
where project in (10000,10103,10166,10164,10153,10010,10145) and _fivetran_deleted = false"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Releases details (Jira),postgres,"with valueStreamDomain as (
select domain.name as TDomain, domain.Id as TDomainId, valueStream.name as TValueStream from jira_integration.field_option domain
left join jira_integration.field_option valueStream on valueStream.id = domain.parent_id
)

SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)"",
  valueStreamDomain.TDomain,
  valueStreamDomain.TValueStream
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" 
LEFT JOIN valueStreamDomain on CAST(valueStreamDomain.TDomainId as TEXT) = issue_field_history.value
where issue_field_history.is_active = true and issue_field_history.field_id in ('customfield_10459')"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Releases details (Jira),postgres,"SELECT CAST(""issue_multiselect_history"".""_fivetran_id"" AS TEXT) AS ""_fivetran_id"",
  ""issue_multiselect_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_multiselect_history)"",
  CAST(""issue_multiselect_history"".""author_id"" AS TEXT) AS ""author_id"",
  CAST(""issue_multiselect_history"".""field_id"" AS TEXT) AS ""field_id"",
  ""issue_multiselect_history"".""is_active"" AS ""is_active"",
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id"",
  ""issue_multiselect_history"".""time"" AS ""time"",
  CAST(""issue_multiselect_history"".""value"" AS TEXT) AS ""value""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where

""issue_multiselect_history"".field_id = 'labels' and ""issue_multiselect_history"".is_active = true and ""issue_multiselect_history"".value in  ('automated-level0',
'automated-level1',
'automated-level2',
'automated-level3')"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Escalated tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  ""issue_field_history"".""value"" AS FoundIn
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_10389')"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Escalated tickets,postgres,"with fixVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (fixVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""fixVersionID"",
  ""issue_multiselect_history"".""value"" AS ""fixVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'fixVersions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from fixVersion
left join version on version.""id (version)"" = fixVersion.""fixVersionID"""
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Escalated tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  ""issue_field_history"".""value"" AS FoundIn
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_10470')"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Escalated tickets,postgres,"with affectsVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (affectsVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""affectsVersionID"",
  ""issue_multiselect_history"".""value"" AS ""affectsVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'versions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from version
left join affectsVersion on version.""id (version)"" = affectsVersion.""affectsVersionID"""
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Escalated tickets,postgres,"SELECT CAST(""issue_multiselect_history"".""_fivetran_id"" AS TEXT) AS ""_fivetran_id"",
  ""issue_multiselect_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_multiselect_history)"",
  CAST(""issue_multiselect_history"".""author_id"" AS TEXT) AS ""author_id"",
  CAST(""issue_multiselect_history"".""field_id"" AS TEXT) AS ""field_id"",
  ""issue_multiselect_history"".""is_active"" AS ""is_active"",
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id"",
  ""issue_multiselect_history"".""time"" AS ""time"",
  CAST(""issue_multiselect_history"".""value"" AS TEXT) AS ""value""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where

""issue_multiselect_history"".field_id = 'labels' and ""issue_multiselect_history"".is_active = true and ""issue_multiselect_history"".value in  ('affects_payroll')"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Escalated tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)""
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_10390','customfield_10397', 'customfield_10450','customfield_10470')"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Escalated tickets,postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  reporter.name AS reporter,
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
""issue_type"".""name"" as ""issueTypeName""
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
LEfT JOIN ""jira_integration"".""issue_type"" ""issue_type"" on ""issue_type"".id = ""issue"".""issue_type""
left join jira_integration.user reporter on reporter.id = issue.reporter

JOIN ""jira_integration"".""issue_multiselect_history"" ""labels"" on ""labels"".issue_id = ""issue"".id 
--and ""labels"".field_id = 'labels' and ""labels"".is_active = true and ""labels"".value in  ('jira_escalated', 'tech_escalated', 'jira-escalated', 'apr-2021-bug-bash') 
where project in (10000,10103) and _fivetran_deleted = false
AND (""resolution"".""name"" in ('Fixed','Done') OR ""issue"".""resolution"" IS NULL)
AND ""issue_type"".""name"" = 'Bug'
AND issue.id IN (SELECT i.id 
		FROM jira_integration.issue i 
		LEFT JOIN jira_integration.issue_field_history fh
		ON fh.issue_id = i.id
		WHERE field_id = 'customfield_10470' AND value = '11686' AND fh.is_active = TRUE)
AND reporter.name <<>> 'gp-snyk-github@globalization-partners.com'
AND labels.value NOT IN ('security-manual', 'security-sca', 'security_sca', 'security-tasks', 'security-posture', 'security-pentest', 'security-dast', 'security-container', 'security-asvs', 'security-swat')"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Escalated tickets,postgres,"with valueStreamDomain as (
select domain.name as TDomain, domain.Id as TDomainId, valueStream.name as TValueStream from jira_integration.field_option domain
left join jira_integration.field_option valueStream on valueStream.id = domain.parent_id
)

SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)"",
  valueStreamDomain.TDomain,
  valueStreamDomain.TValueStream
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" 
LEFT JOIN valueStreamDomain on CAST(valueStreamDomain.TDomainId as TEXT) = issue_field_history.value
where issue_field_history.is_active = true and issue_field_history.field_id in ('customfield_10459')"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Escalated tickets,postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Escalated tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  cast(""issue_field_history"".""value"" as DATE) AS RCADate
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_11015')"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Scenarios,postgres,"SELECT CAST(st.scenario_id AS int) AS scenario_id, 
       CAST(st.id AS int) AS tag_id, 
       s.name AS scenario_name, 
       s.created_at, 
       t.key AS tag_key, 
       t.value AS tag_value,
       p.name AS Project
FROM cucumber.scenarios_tags st
LEFT JOIN cucumber.scenarios s
ON st.scenario_id = s.id
LEFT JOIN cucumber.tags t
ON st.id = t.id
LEFT JOIN cucumber.projects p
ON s.project_id = p.id
WHERE p.last_author <<>> 'CucumberStudioBot'"
3ef0ecb2-4d3e-99dc-fafe-27e1d5e83209,Scenarios,postgres,"SELECT DISTINCT CAST(st.scenario_id AS int) AS scenario_id,
       t.value AS automation_level
FROM cucumber.scenarios_tags st
LEFT JOIN cucumber.scenarios s
ON st.scenario_id = s.id
LEFT JOIN cucumber.tags t
ON st.id = t.id
WHERE t.key = 'Automated'"
405793e4-6d74-942e-9004-1808bd4c98c1,Visa / Right to Work (gpbidb),postgres,"select t1.id, concat(t1.first_name,' ',t1.last_name)as Professional, t1.status, t2.name as Client, t2.status ""Client Status"",t4.name as country,
t1.personal_email,
t1.work_email,
t1.title as job_title,
case when t1.residency_status='1' then 'US Citizen' 
	 when t1.residency_status='2' then 'EXPAT' 
	 when t1.residency_status='3' then 'Local National' 
	 when t1.residency_status='4' then 'Third Country National'	
	else null end as residency_status,
t10.name as lsp,
t12.name as citizenship,t1.contract_start_date::date, t1.contract_end_date::date,
t1.is_fixed_term_emp_contract,
t1.contract_notes,
t1.is_contract_prob_period_applies,
t1.contract_prob_period_end_date::date,
t1.right_to_work_in_work_country,
t1.is_visa_sponsorship_required,
t1.is_sponsorship_visa_for_dependants_required,
t1.is_sponsoring_visa,
t1.is_sponsorship_visa_for_dependants,
t1.sponsoring_visa_notes,
t1.sponsoring_visa_expire_date,
concat(t13.first_name,' ',t13.last_name) as Onboard_Lead,
t5.work_authorization_received,
hc.active_flag,
T6.NAME ""LSP""
from goglobal_gp_goglobal.v_gp_gg_professional_current t1
left join goglobal_gp_goglobal.v_gp_gg_client_current t2 
	on t1.client_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t3
	on t1.lsp_country_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco	on t1.client_country_id=cco.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t4 on cco.country_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current t5
	on t1.professional_onboarding_id=t5.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_current t6 on t3.lsp_id=t6.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_current t10 on t3.lsp_id=t10.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t12 on t1.home_country_id=t12.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t13 on t1.gp_onboard_lead_id=t13.id
left join (select cal_Date, professional_id,active_flag
		   from goglobal_gp_goglobal.v_tableau_headcount_dashboard
		   where cal_date=date_trunc('month',current_date) and active_flag='Active') hc on t1.id=hc.professional_id
where t1.is_failed_to_launch='false' and t2.is_demo_client='false'"
407bea31-3838-2c24-4a7f-cd46bc7e9229,Custom SQL Query (gpbidb) (2),postgres,"WITH sfdc as (SELECT DISTINCT
				sfdc.*, acc_par.partner__c, account.name as partner_referral
			 FROM
			 	salesforce.v_gp_sfdc_marketing_mat_view AS sfdc
			 LEFT JOIN salesforce.v_gp_sfdc_account_current as acc_par
			 ON sfdc.account_id=acc_par.id
			 LEFT JOIN salesforce.v_gp_sfdc_account_current AS account ON acc_par.partner__c = account.id 
			 WHERE
				sfdc.cohort_stage='SAL to MSA'
				AND (sfdc.partner_acq_opps IS NULL OR sfdc.partner_acq_opps <<>> 'Yes')
				AND (sfdc.record_type_bi__c IS NULL OR sfdc.record_type_bi__c <<>> 'Potential Partner Opportunity')),
sbqq_1 as (SELECT DISTINCT 
           		sbqq_1.id as quote_id,
				sbqq_1.created_date as created_date_quote,
				sbqq_1.name as quote_name,
				sbqq_1.owner_id as owner_id_quote,
				sbqq_1.last_modified_date as last_modified_date_quote,
		        sbqq_1.sbqq_status_c,
		        sbqq_1.sbqq_billing_name_c,
			    sbqq_1.sbqq_opportunity_2_c,
				sbqq_1.approval_status_c,
		        sbqq_1.approval_indicator_c,
				sbqq_1.last_modified_by_id,
				sbqq_1.sbqq_account_c,
				sbqq_1.sbqq_days_quote_open_c,
				sbqq_1.sbqq_primary_c,
				sbqq_1.number_of_professionals_on_quote_c,
				sbqq_1.pricing_model_c,
                sbqq_1.sbqq_net_amount_c as net_amount_total,
                sbqq_1.pre_approved_minimum_fee_c,
				sbqq_1.currency_symbol_alike_quote_line_c,
				sbqq_1.is_gp_recruit_customer_c,
				sbqq_1.is_gp_contractor_customer_c,
				sbqq_1.complete_price_book_name_c,
				sbqq_1.estimated_monthly_cost_c,
			   	sbqq_1.currency_iso_code,
				sbqq_1.test_group_c
			FROM 
		   	  salesforce.sbqq_quote_c as sbqq_1
			WHERE 
		   		sbqq_1.is_deleted='FALSE'),
first_table as ( SELECT DISTINCT 
					sfdc.*, 
					sbqq_1.quote_id,
					sbqq_1.created_date_quote,
					sbqq_1.quote_name,
					sbqq_1.owner_id_quote,
					sbqq_1.last_modified_date_quote,
					sbqq_1.sbqq_status_c,
					sbqq_1.sbqq_billing_name_c,
					sbqq_1.approval_status_c,
		        	sbqq_1.approval_indicator_c,
					sbqq_1.last_modified_by_id,
					sbqq_1.sbqq_account_c,
					sbqq_1.sbqq_days_quote_open_c,
					sbqq_1.sbqq_primary_c,
					sbqq_1.number_of_professionals_on_quote_c,
					sbqq_1.pricing_model_c,
                    sbqq_1.net_amount_total,
                    sbqq_1.pre_approved_minimum_fee_c,
					sbqq_1.currency_symbol_alike_quote_line_c,
					sbqq_1.is_gp_recruit_customer_c,
					sbqq_1.is_gp_contractor_customer_c,
					sbqq_1.complete_price_book_name_c,
					sbqq_1.estimated_monthly_cost_c,
					sbqq_1.test_group_c,
					rate.conversion_rate,
					users.name as last_modified_name	
				FROM sfdc
				LEFT JOIN sbqq_1
				ON sfdc.lead_or_opp_id=sbqq_1.sbqq_opportunity_2_c
				LEFT JOIN salesforce.currency_type as rate
				ON sbqq_1.currency_iso_code=rate.iso_code
				LEFT JOIN salesforce.v_gp_sfdc_user_current as users
				ON sbqq_1.last_modified_by_id=users.id),
sbqq_2 as ( SELECT DISTINCT
		        sbqq_2.id AS quote_line_id, 
				sbqq_2.name AS quote_line_name, 
				sbqq_2.is_deleted,
				sbqq_2.currency_iso_code, 
				sbqq_2.created_date as created_date_line, 
				sbqq_2.last_modified_date, 
				sbqq_2.sbqq_quote_c, 
				sbqq_2.sbqq_additional_discount_c , 
				sbqq_2.sbqq_component_list_total_c , 
				sbqq_2.sbqq_component_total_c , 
				sbqq_2.sbqq_customer_price_c , 
				sbqq_2.sbqq_customer_total_c , 
				sbqq_2.sbqq_list_price_c , 
				sbqq_2.sbqq_list_total_c , 
				sbqq_2.sbqq_net_price_c , 
				sbqq_2.sbqq_net_total_c , 
				sbqq_2.sbqq_number_c , 
				sbqq_2.sbqq_original_price_c , 
				sbqq_2.sbqq_package_list_total_c , 
				sbqq_2.sbqq_package_total_c , 
				sbqq_2.sbqq_partner_price_c , 
				sbqq_2.sbqq_partner_total_c , 
				sbqq_2.sbqq_product_code_c , 
				sbqq_2.sbqq_product_name_c , 
				sbqq_2.sbqq_prorated_list_price_c , 
				sbqq_2.sbqq_prorated_price_c , 
				sbqq_2.sbqq_regular_price_c , 
				sbqq_2.sbqq_regular_total_c , 
				sbqq_2.sbqq_special_price_c , 
				sbqq_2.sbqq_total_discount_amount_c , 
				sbqq_2.sbqq_total_discount_rate_c , 
				sbqq_2.accruing_statutory_severance_c , 
				sbqq_2.additional_month_payment_c , 
				sbqq_2.x_13_th_month_payment_notes_c , 
				sbqq_2.estimated_social_charges_c , 
				sbqq_2.markup_on_expenses_c , 
				sbqq_2.monthly_service_fee_c , 
				sbqq_2.setup_fee_professional_c , 
				sbqq_2.vat_gst_c , 
				sbqq_2.base_c , 
				sbqq_2.variable_c , 
				sbqq_2.monthly_service_fee_calculated_c , 
				sbqq_2.setup_fee_per_additional_professional_c , 
				sbqq_2.minimum_monthly_service_fee_c , 
				sbqq_2.salary_bonus_c , 
				sbqq_2.minimum_monthly_service_fee_calculated_c , 
				sbqq_2.setup_total_all_hc_c , 
				sbqq_2.addendum_monthly_service_fee_original_c , 
				sbqq_2.estimated_employer_social_charges_on_bas_c , 
				sbqq_2.gp_fee_base_per_hc_c , 
				sbqq_2.estimated_employer_social_charges_on_var_c , 
				sbqq_2.gp_fee_variable_per_hc_c , 
				sbqq_2.fee_structure_c , 
				sbqq_2.monthly_fee_total_c , 
				sbqq_2.country_product_c , 
				sbqq_2.total_social_charges_hc_c , 
				sbqq_2.footnote_c , 
				sbqq_2.markup_on_expenses_notes_c , 
				sbqq_2.monthly_fee_variable_c , 
				sbqq_2.vat_per_hc_c , 
				sbqq_2.currency_transaction_and_wiring_c , 
				sbqq_2.total_monthly_cost_c , 
				sbqq_2.monthly_cost_of_doing_all_hc_c , 
				sbqq_2.product_name_text_c , 
				sbqq_2.monthly_currency_fee_c , 
				sbqq_2.currency_symbol_c , 
				sbqq_2.unique_identifier_c , 
				sbqq_2.x_13_th_14_th_month_addendum_notes_c , 
				sbqq_2.severance_addendum_notes_c , 
				sbqq_2.setup_fee_addendum_notes_c , 
				sbqq_2.vacation_pay_c , 
				sbqq_2.estimated_provident_fund_contribution_c , 
				sbqq_2.statutory_vacation_allowance_c , 
				sbqq_2.mandatory_pension_contribution_c , 
				sbqq_2.disability_insurance_per_professional_c , 
				sbqq_2.statutory_vacation_pay_bonus_c , 
				sbqq_2.statutory_unemployment_fund_cts_c , 
				sbqq_2.social_charges_addendum_notes_c , 
				sbqq_2.mandatory_financial_reserve_accrual_c , 
				sbqq_2.statutory_vacation_bonus_c , 
				sbqq_2.statutory_transient_bonus_c , 
				sbqq_2.monthly_service_fee_total_disc_c , 
				sbqq_2.monthly_service_fee_final_c , 
				sbqq_2.min_service_fee_total_disc_c , 
				sbqq_2.min_monthly_service_fee_final_c , 
				sbqq_2.total_discount_amount_c , 
				sbqq_2.statutory_vacation_pay_c , 
				sbqq_2.mandatory_medical_insurance_c , 
				sbqq_2.proposal_footnotes_c , 
				sbqq_2.base_monthly_c , 
				sbqq_2.variable_monthly_c , 
				sbqq_2.currency_transaction_and_wiring_monthly_c , 
				sbqq_2.mandatory_free_trade_zone_office_space_c , 
				sbqq_2.discount_tiers_applied_c , 
				sbqq_2.refundable_deposit_in_months_c , 
				sbqq_2.invoices_withdrawal_type_c , 
				sbqq_2.markup_on_expenses_amount_c , 
				sbqq_2.discount_tier_text_c , 
				sbqq_2.monthly_service_fee_discount_c , 
				sbqq_2.min_monthly_service_fee_discount_c , 
				sbqq_2.total_rep_s_discount_c , 
				sbqq_2.se_allowable_discount_c , 
				sbqq_2.rsd_discount_c , 
				sbqq_2.vp_discount_c , 
				sbqq_2.c_level_discount_c , 
				sbqq_2.need_rsd_approval_c , 
				sbqq_2.need_vp_approval_c , 
				sbqq_2.need_c_level_approval_c , 
				sbqq_2.estimated_social_charges_override_c , 
				sbqq_2.addendum_template_id_c , 
				sbqq_2.country_product_name_text_c , 
				sbqq_2.visa_fee_per_prof_including_g_l_fees_c , 
				sbqq_2.visa_fee_ren_per_prof_incl_g_l_fees_c , 
				sbqq_2.visa_renwl_fee_for_spouse_dependents_c , 
				sbqq_2.visa_fee_for_spouse_dependents_c , 
				sbqq_2.employment_pass_if_applicable_c , 
				sbqq_2.employment_pass_per_dependent_c , 
				sbqq_2.renewal_every_2_years_c , 
				sbqq_2.renewal_every_2_years_per_dependent_c , 
				sbqq_2.stat_employer_healthcare_contrib_c , 
				sbqq_2.foreign_worker_epi_c , 
				sbqq_2.issuance_of_req_letters_and_or_noc_s_c , 
				sbqq_2.if_required_arabic_translation_e_m_bc_c , 
				sbqq_2.x_1_time_3_rd_party_fees_for_pension_plan_c , 
				sbqq_2.statutory_pre_employment_medical_check_c , 
				sbqq_2.estimated_social_charges_ref_c , 
				sbqq_2.proposal_accrued_statory_severance_c , 
				sbqq_2.proposal_estimated_social_charges_c , 
				sbqq_2.proposal_indirect_tax_c , 
				sbqq_2.proposal_estimated_social_charges_in_c , 
				sbqq_2.monthly_service_fee_original_c , 
				sbqq_2.addendum_monthly_service_fee_c , 
				sbqq_2.addendum_estimated_social_charges_c , 
				sbqq_2.addendum_accrued_severance_c , 
				sbqq_2.addendum_markup_on_expenses_c , 
				sbqq_2.addendum_monthly_currency_transaction_c , 
				sbqq_2.addendum_indirect_tax_c , 
				sbqq_2.addendum_vacation_allowance_c , 
				sbqq_2.addendum_vacation_pay_c , 
				sbqq_2.addendum_financial_reserve_c , 
				sbqq_2.addendum_provident_fund_c , 
				sbqq_2.discounted_to_netprice_c , 
				sbqq_2.ann_tax_filling_fee_list_price_child_c , 
				sbqq_2.ann_tax_filling_fee_net_price_child_c , 
				sbqq_2.wiring_fee_list_price_child_c , 
				sbqq_2.wiring_fee_net_price_child_c , 
				sbqq_2.tran_admin_fee_list_price_child_c , 
				sbqq_2.tran_admin_fee_net_price_child_c , 
				sbqq_2.travel_fee_list_price_child_c , 
				sbqq_2.travel_fee_net_price_child_c , 
				sbqq_2.addendum_monthly_service_fee_initial_c , 
				sbqq_2.discounted_to_monthly_service_fee_c , 
				sbqq_2.discounted_to_minimum_monthly_service_c , 
				sbqq_2.discounted_to_social_charges_c , 
				sbqq_2.discounted_to_annual_tx_c , 
				sbqq_2.discounted_to_wiring_fee_c , 
				sbqq_2.discounted_to_one_time_trans_c , 
				sbqq_2.discounted_to_travel_insurance_c , 
				sbqq_2.switzerlandtext_1_c , 
				sbqq_2.switzerlandtext_2_c , 
				sbqq_2.monthly_fee_variable_original_c , 
				sbqq_2.addendum_net_price_c , 
				sbqq_2.monthly_service_overriding_disc_c , 
				sbqq_2.additional_month_payment_proposal_c , 
				sbqq_2.set_up_fee_currency_symbol_c , 
				sbqq_2.min_month_ser_fee_currency_symbol_c , 
				sbqq_2.annual_tax_currency_symbol_c , 
				sbqq_2.wiring_fee_currency_symbol_c , 
				sbqq_2.trans_fee_currency_symbol_c , 
				sbqq_2.travel_fee_currency_symbol_c , 
				sbqq_2.addendum_min_monthly_service_fee_c , 
				sbqq_2.addendum_annual_tax_fee_c , 
				sbqq_2.addendum_trans_fee_c , 
				sbqq_2.addendum_wiring_fee_c , 
				sbqq_2.addendum_travel_fee_c , 
				sbqq_2.markup_currency_symbol_c , 
				sbqq_2.monthly_service_fee_tier_notes_c , 
				sbqq_2.minimum_monthly_service_fee_tier_notes_c , 
				sbqq_2.monthly_service_fee_tier_c , 
				sbqq_2.minimum_monthly_service_fee_tier_c , 
				sbqq_2.additional_professional_checkbox_c , 
				sbqq_2.setup_fee_additional_professional_label_c , 
				sbqq_2.setup_fee_additional_professional_value_c , 
				sbqq_2.monthly_variable_overriding_disc_c , 
				sbqq_2.addendum_monthly_fee_variable_c , 
				sbqq_2.discounted_to_monthly_serv_fee_variable_c , 
				sbqq_2.additional_professional_currency_symbol_c , 
				sbqq_2.price_info_populated_c , 
				sbqq_2.country_number_c , 
				sbqq_2.proposal_total_monthly_cost_c , 
				sbqq_2.monthly_fee_variable_discount_c , 
				sbqq_2.monthly_fee_variable_final_c , 
				sbqq_2.estimated_social_charges_from_pbe_c , 
				sbqq_2.min_monthly_service_fee_original_c , 
				sbqq_2.monthly_service_variable_actual_disc_c , 
				sbqq_2.min_monthly_service_overriding_disc_c , 
				sbqq_2.original_monthly_total_fee_c , 
				sbqq_2.addendum_monthly_service_fee_variable_og_c , 
				sbqq_2.monthly_total_fee_discount_c , 
				sbqq_2.primary_product_c , 
				sbqq_2.ann_13_14_th_month_billed_amount_all_hc_c , 
				sbqq_2.ann_tax_trav_ins_all_hc_c , 
				sbqq_2.year_1_cost_c , 
				sbqq_2.subsequent_years_total_c , 
				sbqq_2.accruing_statutory_severance_currency_c , 
				sbqq_2.monthly_sum_of_salary_c , 
				sbqq_2.uae_office_space_fee_c , 
				sbqq_2.usa_state_c , 
				sbqq_2.usa_state_attrib_c , 
				sbqq_2.estimated_social_charges_from_pbe_value_c , 
				sbqq_2.x_14_th_month_note_c , 
				sbqq_2.custom_product_name_c , 
				sbqq_2.visa_cost_new_hire_1_year_lp_c , 
				sbqq_2.visa_cost_dependent_renewal_lp_c , 
				sbqq_2.visa_cost_other_resident_renewal_lp_c , 
				sbqq_2.visa_cost_new_hire_and_renewal_c , 
				sbqq_2.visa_cost_other_eu_eea_swiss_lp_c , 
				sbqq_2.visa_cost_new_hire_lp_c , 
				sbqq_2.visa_cost_renewal_lp_c , 
				sbqq_2.visa_cost_new_hire_2_year_lp_c , 
				sbqq_2.visa_cost_dependent_lp_c , 
				sbqq_2.visa_cost_other_eu_eea_swiss_natio_lp_c , 
				sbqq_2.adjusted_discount_c , 
				sbqq_2.visa_product_name_c , 
				sbqq_2.product_pricing_model_c , 
				sbqq_2.discount_beyond_preapproved_mgmt_fee_c , 
				sbqq_2.discount_beyond_preapproved_one_time_fee_c , 
				sbqq_2.pre_approved_management_fee_percentage_c , 
				sbqq_2.discount_beyond_preapproved_minimum_fee_c , 
				sbqq_2.country_product_iso_c
FROM salesforce.sbqq_quote_line_c AS sbqq_2
WHERE sbqq_2.is_deleted='FALSE')
SELECT DISTINCT 
first_table.*,
sbqq_2.*
FROM first_table
LEFT JOIN sbqq_2
ON first_table.quote_id=sbqq_2.sbqq_quote_c"
407bea31-3838-2c24-4a7f-cd46bc7e9229,Custom SQL Query (gpbidb) (2),postgres,"WITH SALESFORCE AS (
	
SELECT opp.*
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time AS opp
WHERE (opp.type <<>> 'Existing Business' OR opp.type IS NULL)
AND   (opp.partner_acquisition__c IS NULL OR opp.partner_acquisition__c <<>> 'Yes')
AND   (opp.is_won= 'TRUE')
AND   (opp.record_type_bi__c IS NULL OR opp.record_type_bi__c <<>> 'Potential Partner Opportunity')
AND   ( opp.pricing_model__c <<>> 'Contractor only' OR opp.pricing_model__c is NULL)
	
			       )
,
GPP AS (
SELECT DISTINCT 
	    
	      a.id AS client_id,
	a.salesforce_account_id,
	      a.name,
          a.pricing_model,
	      CASE WHEN a.msa_contract_start_date_peo IS NOT NULL THEN a.msa_contract_start_date_peo
	           WHEN a.msa_contract_start_date_peo IS NULL AND a.msa_contract_start_date_services IS NOT NULL THEN a.msa_contract_start_date_services
	           WHEN a.msa_contract_start_date_services IS NULL AND a.msa_contract_start_date_sourcing IS NOT NULL THEN a.msa_contract_start_date_sourcing
	           WHEN a.msa_contract_start_date_sourcing IS NULL AND a.msa_contract_start_date_aso IS NOT NULL THEN a.msa_contract_start_date_aso
	      ELSE a.msa_contract_start_date_peo END AS ma_start_date,
	      b.pop_current, 
	      c.pop_to_date,
	      d.min_pay_start,
	      d.max_pay_start,
	      d.min_pay_end,
	      d.max_pay_end
	       
	FROM (SELECT a.id,
		         a.salesforce_account_id,
		         a.pricing_model,
		         a.name,
		         a.msa_contract_start_date_services,
		         a.msa_contract_start_date_peo, 
		         a.msa_contract_start_date_aso,
		         a.msa_contract_start_date_sourcing
		 FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
		 WHERE a.is_demo_client = false) AS a
	
LEFT JOIN (SELECT client_id,
		          COUNT(DISTINCT professional_id) pop_current
	     FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
		 WHERE active_flag = 'Active'
		 AND DATE_TRUNC ('month', cal_date)= DATE_TRUNC ('month', CURRENT_DATE)
		 AND (product_type_id <<>> '4' OR product_type_id IS NULL)
		 GROUP BY 1) AS b
	ON a.id = b.client_id
LEFT JOIN (SELECT client_id,
		          COUNT(DISTINCT professional_id) pop_to_date
		   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
		   WHERE active_flag = 'Active'
		   AND DATE_TRUNC('month',payroll_start_date) <<= DATE_TRUNC ('month', CURRENT_DATE)
		   AND (product_type_id <<>> '4' OR product_type_id IS NULL)
		   GROUP BY 1) AS c
	ON a.id = c.client_id
	
LEFT JOIN (SELECT client_id, 
		          MAX(payroll_start_date)AS max_pay_start, 
		          MAX (payroll_end_date)AS max_pay_end,
				  MIN(payroll_end_date)AS min_pay_end, 
		          MIN(payroll_start_date) AS min_pay_start
				 
		   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
		   WHERE (product_type_id <<>> '4' OR product_type_id IS NULL)
		   GROUP BY 1) d
	ON a.id = d.client_id
	
),
FINAL AS(SELECT 
		 SALESFORCE.*,
     GPP.*,  
	  	CASE 
		   
			 WHEN GPP.client_id IS NOT NULL AND (CURRENT_DATE - (CASE WHEN SALESFORCE.close_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.close_date END)) <<= 90
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.min_pay_start IS NULL
			 THEN 'Newly Signed'
			 
			 WHEN GPP.client_id IS NOT NULL 
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND date_trunc('month', GPP.min_pay_start) >>= date_trunc('month',CURRENT_DATE) THEN 'Onboarding' 
			  
		   WHEN GPP.client_id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current >>0  THEN 'Currently Active'
			 
			 WHEN GPP.client_id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current IS NULL
			 AND (GPP.max_pay_end << CURRENT_DATE OR (date_trunc('month', GPP.max_pay_start) >>= date_trunc('month',CURRENT_DATE) AND GPP.max_pay_end >> CURRENT_DATE))
			 THEN 'Currently Inactive'
			 
			 
			 WHEN (GPP.client_id IS NOT NULL 
			 AND (CURRENT_DATE - (CASE WHEN SALESFORCE.close_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.close_date END)) >>90
			 AND GPP.pop_to_date IS NULL)
		   OR (GPP.client_id IS NOT NULL AND GPP.ma_start_date IS NULL AND SALESFORCE.close_date IS NULL )
       THEN 'Never Active' 
		 
		   WHEN (GPP.client_id IS NULL
         AND SALESFORCE.type = 'New Business'
         AND SALESFORCE.stage_name = 'Closed Won')
				 THEN 'Unknown'
			
			 END AS gpp_account_status_calc
			
FROM SALESFORCE
LEFT JOIN GPP
ON   SALESFORCE.account_id = GPP.salesforce_account_id
		 )
SELECT account_id,
       id AS opp_id,
	   close_date,
       client_id, 
	   gpp_account_status_calc
FROM FINAL"
407bea31-3838-2c24-4a7f-cd46bc7e9229,Custom SQL Query (gpbidb) (2),postgres,"WITH platform_match AS(
SELECT      sfdc.id AS sfdc_account_id,
            mdm_match.source_id AS mdm_match,
			gpp.id AS integration_match,
			CASE WHEN gpp.id::VARCHAR IS NOT NULL THEN gpp.id::VARCHAR
            ELSE mdm_match.source_id END AS id_match

FROM salesforce.v_gp_sfdc_account_current AS sfdc
LEFT JOIN repo.v_gp_mdm_customer AS mdm ON sfdc.id = mdm.source_id
LEFT JOIN (SELECT *
    FROM repo.v_gp_mdm_customer
    WHERE source = 'GoGlobal Client'
    ) AS mdm_match
    ON mdm.parent_name = mdm_match.parent_name	
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS gpp
			  ON sfdc.id = gpp.salesforce_account_id)

SELECT platform_match.*,gpp.id as gpp_id,gpp.name, gpp.accounting_id AS accumatica_id
FROM platform_match
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS gpp ON platform_match.id_match = gpp.id::VARCHAR"
41d39332-9d3d-2872-0c19-f8b32556c802,Custom SQL Query (gpbidb),postgres,"SELECT c.id AS Customer_id, c.name AS customer_name,a.id AS professional_id, CONCAT (a.first_name, ' ', a.last_name) AS professional_name, 
CASE WHEN a.status = '1' THEN 'New'
	 WHEN a.status = '2' THEN 'Onboarding'
	 WHEN a.status = '3' THEN 'Active'
	 WHEN a.status = '4' THEN 'Terminating'
	 WHEN a.status = '5' THEN 'Inactive' END AS professional_status, 
CONCAT (b.first_name, ' ', b.last_name) AS onboard_lead, e.name AS professional_working_country, a.payroll_start_date, f.postal_code, f.city, f.address1, f.address2,
g.name AS address_country, h.name AS address_province, i.social_security_number, j.rfc, k.curp, a.mobile_phone, a.work_email, a.personal_email
FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS b
ON a.gp_onboard_lead_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS c
ON a.client_id = c.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS d
ON a.lsp_country_id = d.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS e
ON d.country_id = e.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS f
ON a.home_address_id = f.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS g
ON f.country_id = g.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_province_current AS h
ON f.province_id = h.id
LEFT JOIN (SELECT professional_id, country_custom_field_id, value AS social_security_number
	FROM goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current 
	WHERE country_custom_field_id= 49) AS i
	ON a.id = i.professional_id
LEFT JOIN (SELECT professional_id, country_custom_field_id, value AS rfc
	FROM goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current 
	WHERE country_custom_field_id= 50) AS j
	ON a.id = j.professional_id
LEFT JOIN (SELECT professional_id, country_custom_field_id, value AS curp
	FROM goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current 
	WHERE country_custom_field_id= 51) AS k
	ON a.id = k.professional_id
	
WHERE e.name = 'Mexico'

ORDER BY 1,3"
41ff12c3-cd3b-5064-b733-ea6b27105276,v_gp_sfdc_marketing_dashboard (salesforce.v_gp_sfdc_marketing_dashboard) (gpbidb),,
42a60c81-6122-f749-d972-f9e814533e64,Customer WO DnB Data,,
42a60c81-6122-f749-d972-f9e814533e64,Toggle,,
44b02311-732d-8825-53e5-140b4c8aeb0d,Custom SQL Query (gpbidb),postgres,"With 
Leads_Opps as ( /*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
				Select Distinct
					CASE
                    	WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    	ELSE date_trunc('month'::text, opps.created_date)
                	END AS MQL_Cohort_Month,
					leads.id as lead_id,
					opps.id as opp_id,
					leads.is_converted,
					leads.converted_opportunity_id,
					CASE
						WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
						WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						ELSE NULL::text
					END AS client_region,
					leads.created_date AS mql_date,
					leads.converted_date,
					leads.partner_acquisition__c AS partner_acq_leads,
					leads_owner.name as leads_owner_name,
					leads_owner_manager.name as leads_owner_manager,
					opps_owner.name as opps_owner_name,
					opps_owner_manager.name as opps_owner_manager, 
					opps.created_date,
					opps.sales__accepted__date__c as SAL_Accepted_Date,
					opps.s_a_l__c,
                    opps.s_a_l_by__sales__c,
					opps.record_type_bi__c,
					opps.close_date AS msa_date,
					opps.stage_name,	
					opps.partner_acquisition__c AS partner_acq_opps,
					opps.type AS opportunity_type,
					opps.is_won AS opp_won, 
					opps.what_is_your_primary_product_interest__c AS what_is_opps,
					opps.record_type_text_id_c AS record_type_opps,
					opps.pricing_model__c AS pricing_model_opps,
					opps.id AS opps_id,
					CASE
                        WHEN leads.lead_source IS NULL THEN opps.lead_source
                        ELSE leads.lead_source
                    END::text as Lead_or_Opp_Source, 
					CASE 
						WHEN (opps.type <<>> 'Existing Business' OR opps.type IS NULL)
					     And (opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
  						 And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
						 And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
					Then 'Non Partner Opp or Existing Business'
					Else 'Partner Opp or Existing Business'
					End as Opp_Go_Flag
				From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             	Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
				Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
				Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner ON opps_owner.id = opps.owner_id
				Left Join salesforce.v_gp_sfdc_user_current leads_owner_manager ON leads_owner_manager.id = leads_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner_manager ON opps_owner_manager.id = opps_owner.manager_id
				--Where  CASE WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
				--	   ELSE date_trunc('month'::text, opps.created_date)
                --END >>= '2019-01-01'
				), 
     MQL as (
				Select Distinct
					'MQL' as Cohort_Stage, 
		 			lead_id as lead_or_opp_id,
		 			MQL_Date::date as Point_time_date,
		 			leads_owner_name as Lead_or_Opp_Owner_name,
		 			leads_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where (partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) 
		 		And lead_id is not null
				),
MQL_to_SQL as (
				Select Distinct
					'MQL to SQL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					Created_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_id is not null
				),
SQL_to_SAL as (
				Select Distinct
					'SQL to SAL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					SAL_Accepted_Date::date as Point_time_date, 
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And s_a_l_by__sales__c = 'Yes'
				),
SAL_to_MSA as (
				Select Distinct
					'SAL to MSA' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					MSA_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_won ='true'
				AND (pricing_model_opps <<>> 'Contractor Only' OR pricing_model_opps IS NULL)
				),
Full_Union as (
				Select 
					* 
				From MQL
					Union All
				Select 
					* 
				From MQL_to_SQL
					Union AlL
				Select 
					* 
				From SQL_to_SAL
					Union AlL
				Select 
					* 
				From SAL_to_MSA
				),
				--SELECT DISTINCT * FROM Full_Union
				--where lead_or_opp_id in ('0066T000016KebcQAC','0066T000015ryGIQAY','0060W000014Tn0HQAS','0066T000015s5vyQAA','0066T000016Km8fQAC'
										--'0066T000016KsYHQA0','0066T000015rlGgQAI','0066T000016KqClQAK','0066T000015rsKVQAY')
				--where point_time_date between '2021-05-07' AND '2021-07-30'
				--AND cohort_stage='SAL to MSA'
Weekly_Funnel as ( 
				Select Distinct
					Cohort_stage, 
					Client_region,
					Coalesce(Lead_or_Opp_Source, 'nulo') as Lead_or_Opp_Source,
					Coalesce(Lead_or_Opp_Owner_Name, 'nulo') as Lead_or_Opp_Owner_Name,
					Coalesce(Lead_or_Opp_Owner_Manager, 'nulo') as Lead_or_Opp_Owner_Manager,
					--point_time_date,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date - '12 weeks'::interval)::date as twelve_weeks_ago, 
					(date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date as Week_at_Friday,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date + '6 days'::interval)::date as Week_at_Next_Thursday,  
					Count(distinct lead_or_opp_id) as Count_Leads_or_opps
					--lead_or_opp_id
				From Full_Union 
				Group by 1,2,3,4,5,6,7,8
				Order by cohort_stage, (date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date asc --date_trunc('week', point_time_date + 5)- '5 days'::interval asc
				),
				--select distinct * from Weekly_Funnel 
				--where Week_at_Friday between '2021-05-07' AND '2021-08-05'
				--AND cohort_stage='SAL to MSA'
Date_Catalogue as (
				Select Distinct 
					WAF.Week_at_Friday as Week_at_Friday_C,
					WF.Cohort_stage as Cohort_Stage_c,
					WF.Client_region as Client_region_c,
					WF.Lead_or_Opp_Source as Lead_or_Opp_Source_c,
					WF.Lead_or_Opp_Owner_Name as Lead_or_Opp_Owner_Name_c,
					WF.Lead_or_Opp_Owner_Manager as Lead_or_Opp_Owner_Manager_c,
					0 as Count_Leads_or_opps_C
				From (Select Distinct Week_at_Friday From Weekly_Funnel) WAF, 
				(Select Distinct Cohort_stage, Client_region, Lead_or_Opp_Source, Lead_or_Opp_Owner_Name, Lead_or_Opp_Owner_Manager from Weekly_funnel) WF 
				Order by WF.Cohort_stage, WAF.Week_at_Friday asc
				), --Select * from Date_Catalogue where cohort_stage_c = 'SAL to MSA' and week_at_friday_c between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC' 
Dates_Aligned as (
				Select Distinct
					DC.*,
					Coalesce(Funnel.twelve_weeks_ago::date, (DC.Week_at_Friday_C - '12 weeks'::interval)::date) as  twelve_weeks_ago,
					Coalesce(Funnel.week_at_next_thursday, (DC.Week_at_Friday_C + '6 days'::interval)::date) as week_at_next_thursday, 
					Coalesce(Funnel.count_leads_or_opps, DC.count_leads_or_opps_c) as Count_leads_or_opps_final
				From Date_Catalogue DC
				Left Join Weekly_funnel Funnel on Funnel.week_at_friday = DC.week_at_friday_c
					and Funnel.cohort_stage = DC.cohort_stage_c
					and Funnel.Client_region = DC.Client_region_c
					and Funnel.Lead_or_Opp_Source = DC.Lead_or_Opp_Source_c
					and Funnel.Lead_or_Opp_Owner_Name = DC.Lead_or_Opp_Owner_Name_C
					and Funnel.Lead_or_Opp_Owner_Manager = DC.Lead_or_Opp_Owner_Manager_C
				) --Select * from Dates_Aligned where Week_at_Friday_C between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC'
Select Distinct 
	WF.Cohort_stage_c,
	WF.Client_region_c,
	WF.Lead_or_Opp_Source_c,
	WF.Lead_or_Opp_Owner_Name_c,
	WF.Lead_or_Opp_Owner_Manager_c,
	WF.twelve_weeks_ago, 
	WF.Week_at_Friday_c,
	WF.Week_at_Next_Thursday,
	WF.Count_Leads_or_opps_final,
	Sum(L12M.Count_Leads_or_opps_final) as Sum_L12M_Funnel
From Dates_aligned WF
Left Join (select Cohort_stage_c, Client_region_c, Lead_or_Opp_Source_c, Lead_or_Opp_Owner_Name_c, Lead_or_Opp_Owner_Manager_c, Week_at_Friday_c, Count_Leads_or_opps_final From Dates_aligned where Count_Leads_or_opps_final<<>> 0) L12M 
	on L12M.Week_at_Friday_c between WF.twelve_weeks_ago and WF.Week_at_Friday_c
	and WF.Cohort_stage_c = L12M.Cohort_stage_c
	and WF.Client_region_c = L12M.Client_region_c
	and WF.Lead_or_Opp_Source_c = L12M.Lead_or_Opp_Source_c
	and WF.Lead_or_Opp_Owner_Name_c = L12M.Lead_or_Opp_Owner_Name_c
	and WF.Lead_or_Opp_Owner_Manager_c = L12M.Lead_or_Opp_Owner_Manager_c
Group by WF.Cohort_stage_c, WF.Client_region_c, WF.Lead_or_Opp_Source_c, WF.Lead_or_Opp_Owner_Name_c, WF.Lead_or_Opp_Owner_Manager_c, WF.twelve_weeks_ago, WF.Week_at_Friday_c, WF.Week_at_Next_Thursday, WF.Count_Leads_or_opps_final
Having  Sum(L12M.Count_Leads_or_opps_final) is not null
Order by WF.Cohort_stage_c, WF.Week_at_Friday_c asc"
45c25bf1-d992-9204-75bf-52d2cc985d17,Custom SQL Query (gpbidb),postgres,"select distinct  
	max(fivetran_synced_opps) as last_data_updated
from
	salesforce.v_gp_sfdc_marketing_dashboard"
45c25bf1-d992-9204-75bf-52d2cc985d17,v_gp_sfdc_opportunity_current_pacific_time (salesforce.v_gp_sfdc_opportunity_current_pacific_time)+ (gpbidb),postgres,"WITH v_gp_sfdc_leads_and_opportunities AS (
         SELECT DISTINCT account.id AS account_id,
            account.name AS account_name,
                CASE
                    WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    ELSE date_trunc('month'::text, opps.created_date)
                END AS mql_cohort_month,
            leads.id AS lead_id,
            opps.b_d_r__date__c,
            opps.id AS opp_id,
            leads.is_converted,
            leads.converted_opportunity_id,
            leads.country AS lead_country,
            leads.campaign__source__c AS campaign_name,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    ELSE NULL::text
                END AS lead_disqualified_reason,
            leads.status AS lead_status,
            opps.opportunity__status__c AS opp_status,
            opps.closed__lost__c,
            leads.country_code AS lead_country_code,
            leads.lead_tier_c,
            opps.lead_source_tier_c,
            leads.bdr_unqualified_reason__c AS bdr_unqualified_reason,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    ELSE NULL::text
                END AS country_code,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    ELSE NULL::text
                END AS client_country,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    ELSE NULL::text
                END AS client_region,
            leads.created_date AS mql_date,
            leads.converted_date,
            leads.partner_acquisition__c AS partner_acq_leads,
            -- usr_lead_opp.leads_owner_name,
            -- usr_lead_opp.leads_owner_manager,
            opps.created_date,
            opps.sales__accepted__date__c AS sal_accepted_date,
            opps.s_a_l__c,
            opps.s_a_l_by__sales__c,
            opps.record_type_bi__c,
            opps.close_date AS msa_date,
            opps.stage_name,
            opps.partner_acquisition__c AS partner_acq_opps,
            opps.is_won AS opp_won,
            opps.record_type_text_id_c AS record_type_opps,
            -- usr_lead_opp.opps_owner_name,
            -- usr_lead_opp.opps_owner_manager,
            opps.name AS opp_name,
            opps.type AS opp_type,
            acc_partn.partner_level__c AS partner_level,
            opps.pricing_model__c AS pricing_model_opps,
                CASE
                    WHEN leads.lead_source IS NULL THEN opps.lead_source
                    ELSE leads.lead_source
                END::text AS lead_or_opp_source,
            -- usr_lead_opp.partner_development_owner,
            -- usr_lead_opp.bdr_owner_name,
            -- usr_lead_opp.bdr_manager_name,
            acc_partn.name AS partner,
            acc_partn.client_region_billing_country AS partner_region,
            account.type AS account_type,
            account.pricing_model__c AS acc_pricing_model,
                CASE
                    WHEN (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) 
	 				AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) 
	 				-- AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text) 
	 				THEN 'Non Partner Opp or Existing Business'::text
                    ELSE 'Partner Opp or Existing Business'::text
                END AS opp_go_flag,
            opps.immediate_headcount_c,
            opps.headcount_c,
            opps.de_country_c,
            opps.closed_lost_category_detail_c,
            opps.incumbent_solution_c,
            opps.competitorsthatare_involved_c,
            opps.contact_id,
            opps.primary_quotes_pricing_model_c,
            opps.competitors__involved__c,
            opps.other__competitor__c,
            opps.update_time AS fivetran_synced_opps,
            opps.total_professionals_c,
            leads.update_time AS fivetran_synced_leads,
            leads.company,
            leads.name,
            leads.email,
            acc_partn.billing_country AS partner_country,
            opps.existing_business_deal_classification_c,
            opps.existing_business_opp_type_c,
            opps.existing_business_opp_type_detail_c,
            users.name AS opp_owner_name,
            acc_partn.partner_agreement_effective_date__c AS partner_agreement_effective_date_c,
                CASE
                    WHEN leads.converted_opportunity_id IS NULL THEN 1::bigint
                    ELSE rank() OVER (PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date)
                END AS row_num,
            acc_partn.partner_vertical__c,
            acc_partn.vital_few__c as vital_few_partner,
			account.vital_few__c as vital_few_account,
            opps.opportunity_score_segment_c AS opps_score_segment,
            leads.opportunity_score_segment_c AS lead_score_segment,
			account.billing_country,
			users.manager_id,
			users.user_region_c as owner_region,
			users.is_active as owner_active,
			users.created_date as owner_created_date,
			opps.partner_development_owner_lookup__c,
			opps.owner_id,
			opps.sales_title_c_c,
 			opps.engagement__type__c,
            opps.sales_motion_formula__c AS sales_motion_opp,
            leads.sales_motion_formula__c AS sales_motion_lead,
            opps.manager_reviewed_sal__c
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
             LEFT JOIN salesforce.v_gp_sfdc_user_current users ON users.id::text = opps.owner_id::text
             --LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_or_opp_id::text =
    				-- CASE
                    -- WHEN leads.id IS NULL THEN opps.id
                    -- ELSE leads.id
                -- END::text
        ), mql AS (
         SELECT DISTINCT 'MQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.lead_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.mql_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            -- v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            -- v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.sales_motion_lead AS sales_motion,
            v_gp_sfdc_leads_and_opportunities.manager_reviewed_sal__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE (v_gp_sfdc_leads_and_opportunities.partner_acq_leads::text <<>> 'Yes'::text OR v_gp_sfdc_leads_and_opportunities.partner_acq_leads IS NULL) AND v_gp_sfdc_leads_and_opportunities.lead_id IS NOT NULL
        ), mql_to_sql AS (
         SELECT DISTINCT 'MQL to SQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.created_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion,
            v_gp_sfdc_leads_and_opportunities.manager_reviewed_sal__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_id IS NOT NULL
        ), sql_to_sal AS (
         SELECT DISTINCT 'SQL to SAL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion,
            v_gp_sfdc_leads_and_opportunities.manager_reviewed_sal__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c::text = 'Yes'::text
        ), sal_to_msa AS (
         SELECT DISTINCT 'SAL to MSA'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion,
            v_gp_sfdc_leads_and_opportunities.manager_reviewed_sal__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = true
        ), closed_lost AS (
         SELECT DISTINCT 'Closed Lost'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion,
            v_gp_sfdc_leads_and_opportunities.manager_reviewed_sal__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = false AND v_gp_sfdc_leads_and_opportunities.stage_name::text = 'Closed Lost'::text
        ), full_union AS (
         SELECT mql.cohort_stage,
            mql.account_id,
            mql.account_name,
            mql.b_d_r__date__c,
            mql.lead_or_opp_id,
            mql.point_time_date,
            mql.mql_cohort_month,
            mql.lead_id,
            mql.opp_id,
            mql.is_converted,
            mql.converted_opportunity_id,
            mql.lead_country,
            mql.campaign_name,
            mql.lead_disqualified_reason,
            mql.lead_status,
            mql.opp_status,
            mql.closed__lost__c,
            mql.lead_country_code,
            mql.country_code,
            mql.tier,
            mql.bdr_unqualified_reason,
            mql.client_region,
            mql.client_country,
            mql.mql_date,
            mql.converted_date,
            mql.partner_acq_leads,
            --mql.leads_owner_name,
            --mql.leads_owner_manager,
            mql.created_date,
            mql.sal_accepted_date,
            mql.s_a_l__c,
            mql.s_a_l_by__sales__c,
            mql.record_type_bi__c,
            mql.msa_date,
            mql.stage_name,
            mql.partner_acq_opps,
            mql.opp_won,
            mql.record_type_opps,
            mql.pricing_model_opps,
            --mql.opps_owner_name,
            --mql.opps_owner_manager,
            mql.opp_name,
            mql.opp_type,
            mql.partner_level,
            mql.lead_or_opp_source,
            --mql.partner_development_owner,
            --mql.bdr_owner_name,
            --mql.bdr_manager_name,
            mql.partner,
            mql.partner_region,
            mql.account_type,
            mql.acc_pricing_model,
            mql.opp_go_flag,
            mql.immediate_headcount_c,
            mql.headcount_c,
            mql.de_country_c,
            mql.closed_lost_category_detail_c,
            mql.incumbent_solution_c,
            mql.competitorsthatare_involved_c,
            mql.contact_id,
            mql.primary_quotes_pricing_model_c,
            mql.competitors__involved__c,
            mql.other__competitor__c,
            mql.fivetran_synced_opps,
            mql.fivetran_synced_leads,
            mql.partner_country,
            mql.existing_business_deal_classification_c,
            mql.existing_business_opp_type_c,
            mql.existing_business_opp_type_detail_c,
            mql.opp_owner_name,
            mql.row_num,
            mql.partner_vertical__c,
            mql.vital_few_partner,
			mql.vital_few_account,
            mql.partner_agreement_effective_date_c,
            mql.opps_score_segment,
            mql.lead_score_segment,
			mql.billing_country,
			mql.manager_id,
			mql.owner_region,
			mql.owner_active,
			mql.owner_created_date,
			mql.partner_development_owner_lookup__c,
			mql.owner_id,
			mql.sales_title_c_c,
 			mql.engagement__type__c,
            mql.sales_motion,
            mql.manager_reviewed_sal__c
           FROM mql
        UNION ALL
         SELECT mql_to_sql.cohort_stage,
            mql_to_sql.account_id,
            mql_to_sql.account_name,
            mql_to_sql.b_d_r__date__c,
            mql_to_sql.lead_or_opp_id,
            mql_to_sql.point_time_date,
            mql_to_sql.mql_cohort_month,
            mql_to_sql.lead_id,
            mql_to_sql.opp_id,
            mql_to_sql.is_converted,
            mql_to_sql.converted_opportunity_id,
            mql_to_sql.lead_country,
            mql_to_sql.campaign_name,
            mql_to_sql.lead_disqualified_reason,
            mql_to_sql.lead_status,
            mql_to_sql.opp_status,
            mql_to_sql.closed__lost__c,
            mql_to_sql.lead_country_code,
            mql_to_sql.country_code,
            mql_to_sql.tier,
            mql_to_sql.bdr_unqualified_reason,
            mql_to_sql.client_region,
            mql_to_sql.client_country,
            mql_to_sql.mql_date,
            mql_to_sql.converted_date,
            mql_to_sql.partner_acq_leads,
            --mql_to_sql.leads_owner_name,
           -- mql_to_sql.leads_owner_manager,
            mql_to_sql.created_date,
            mql_to_sql.sal_accepted_date,
            mql_to_sql.s_a_l__c,
            mql_to_sql.s_a_l_by__sales__c,
            mql_to_sql.record_type_bi__c,
            mql_to_sql.msa_date,
            mql_to_sql.stage_name,
            mql_to_sql.partner_acq_opps,
            mql_to_sql.opp_won,
            mql_to_sql.record_type_opps,
            mql_to_sql.pricing_model_opps,
            --mql_to_sql.opps_owner_name,
            --mql_to_sql.opps_owner_manager,
            mql_to_sql.opp_name,
            mql_to_sql.opp_type,
            mql_to_sql.partner_level,
            mql_to_sql.lead_or_opp_source,
            --mql_to_sql.partner_development_owner,
            --mql_to_sql.bdr_owner_name,
            --mql_to_sql.bdr_manager_name,
            mql_to_sql.partner,
            mql_to_sql.partner_region,
            mql_to_sql.account_type,
            mql_to_sql.acc_pricing_model,
            mql_to_sql.opp_go_flag,
            mql_to_sql.immediate_headcount_c,
            mql_to_sql.headcount_c,
            mql_to_sql.de_country_c,
            mql_to_sql.closed_lost_category_detail_c,
            mql_to_sql.incumbent_solution_c,
            mql_to_sql.competitorsthatare_involved_c,
            mql_to_sql.contact_id,
            mql_to_sql.primary_quotes_pricing_model_c,
            mql_to_sql.competitors__involved__c,
            mql_to_sql.other__competitor__c,
            mql_to_sql.fivetran_synced_opps,
            mql_to_sql.fivetran_synced_leads,
            mql_to_sql.partner_country,
            mql_to_sql.existing_business_deal_classification_c,
            mql_to_sql.existing_business_opp_type_c,
            mql_to_sql.existing_business_opp_type_detail_c,
            mql_to_sql.opp_owner_name,
            mql_to_sql.row_num,
            mql_to_sql.partner_vertical__c,
            mql_to_sql.vital_few_partner,
			mql_to_sql.vital_few_account,
            mql_to_sql.partner_agreement_effective_date_c,
            mql_to_sql.opps_score_segment,
            mql_to_sql.lead_score_segment,
			mql_to_sql.billing_country,
			mql_to_sql.manager_id,
			mql_to_sql.owner_region,
			mql_to_sql.owner_active,
			mql_to_sql.owner_created_date,
			mql_to_sql.partner_development_owner_lookup__c,
			mql_to_sql.owner_id,
			mql_to_sql.sales_title_c_c,
 			mql_to_sql.engagement__type__c,
            mql_to_sql.sales_motion,
            mql_to_sql.manager_reviewed_sal__c
           FROM mql_to_sql
        UNION ALL
         SELECT sql_to_sal.cohort_stage,
            sql_to_sal.account_id,
            sql_to_sal.account_name,
            sql_to_sal.b_d_r__date__c,
            sql_to_sal.lead_or_opp_id,
            sql_to_sal.point_time_date,
            sql_to_sal.mql_cohort_month,
            sql_to_sal.lead_id,
            sql_to_sal.opp_id,
            sql_to_sal.is_converted,
            sql_to_sal.converted_opportunity_id,
            sql_to_sal.lead_country,
            sql_to_sal.campaign_name,
            sql_to_sal.lead_disqualified_reason,
            sql_to_sal.lead_status,
            sql_to_sal.opp_status,
            sql_to_sal.closed__lost__c,
            sql_to_sal.lead_country_code,
            sql_to_sal.country_code,
            sql_to_sal.tier,
            sql_to_sal.bdr_unqualified_reason,
            sql_to_sal.client_region,
            sql_to_sal.client_country,
            sql_to_sal.mql_date,
            sql_to_sal.converted_date,
            sql_to_sal.partner_acq_leads,
            --sql_to_sal.leads_owner_name,
            --sql_to_sal.leads_owner_manager,
            sql_to_sal.created_date,
            sql_to_sal.sal_accepted_date,
            sql_to_sal.s_a_l__c,
            sql_to_sal.s_a_l_by__sales__c,
            sql_to_sal.record_type_bi__c,
            sql_to_sal.msa_date,
            sql_to_sal.stage_name,
            sql_to_sal.partner_acq_opps,
            sql_to_sal.opp_won,
            sql_to_sal.record_type_opps,
            sql_to_sal.pricing_model_opps,
            --sql_to_sal.opps_owner_name,
            --sql_to_sal.opps_owner_manager,
            sql_to_sal.opp_name,
            sql_to_sal.opp_type,
            sql_to_sal.partner_level,
            sql_to_sal.lead_or_opp_source,
            --sql_to_sal.partner_development_owner,
            --sql_to_sal.bdr_owner_name,
            --sql_to_sal.bdr_manager_name,
            sql_to_sal.partner,
            sql_to_sal.partner_region,
            sql_to_sal.account_type,
            sql_to_sal.acc_pricing_model,
            sql_to_sal.opp_go_flag,
            sql_to_sal.immediate_headcount_c,
            sql_to_sal.headcount_c,
            sql_to_sal.de_country_c,
            sql_to_sal.closed_lost_category_detail_c,
            sql_to_sal.incumbent_solution_c,
            sql_to_sal.competitorsthatare_involved_c,
            sql_to_sal.contact_id,
            sql_to_sal.primary_quotes_pricing_model_c,
            sql_to_sal.competitors__involved__c,
            sql_to_sal.other__competitor__c,
            sql_to_sal.fivetran_synced_opps,
            sql_to_sal.fivetran_synced_leads,
            sql_to_sal.partner_country,
            sql_to_sal.existing_business_deal_classification_c,
            sql_to_sal.existing_business_opp_type_c,
            sql_to_sal.existing_business_opp_type_detail_c,
            sql_to_sal.opp_owner_name,
            sql_to_sal.row_num,
            sql_to_sal.partner_vertical__c,
            sql_to_sal.vital_few_partner,
			sql_to_sal.vital_few_account,
            sql_to_sal.partner_agreement_effective_date_c,
            sql_to_sal.opps_score_segment,
            sql_to_sal.lead_score_segment,
			sql_to_sal.billing_country,
			sql_to_sal.manager_id,
			sql_to_sal.owner_region,
			sql_to_sal.owner_active,
			sql_to_sal.owner_created_date,
			sql_to_sal.partner_development_owner_lookup__c,
			sql_to_sal.owner_id,
			sql_to_sal.sales_title_c_c,
 			sql_to_sal.engagement__type__c,
            sql_to_sal.sales_motion,
            sql_to_sal.manager_reviewed_sal__c
           FROM sql_to_sal
        UNION ALL
         SELECT sal_to_msa.cohort_stage,
            sal_to_msa.account_id,
            sal_to_msa.account_name,
            sal_to_msa.b_d_r__date__c,
            sal_to_msa.lead_or_opp_id,
            sal_to_msa.point_time_date,
            sal_to_msa.mql_cohort_month,
            sal_to_msa.lead_id,
            sal_to_msa.opp_id,
            sal_to_msa.is_converted,
            sal_to_msa.converted_opportunity_id,
            sal_to_msa.lead_country,
            sal_to_msa.campaign_name,
            sal_to_msa.lead_disqualified_reason,
            sal_to_msa.lead_status,
            sal_to_msa.opp_status,
            sal_to_msa.closed__lost__c,
            sal_to_msa.lead_country_code,
            sal_to_msa.country_code,
            sal_to_msa.tier,
            sal_to_msa.bdr_unqualified_reason,
            sal_to_msa.client_region,
            sal_to_msa.client_country,
            sal_to_msa.mql_date,
            sal_to_msa.converted_date,
            sal_to_msa.partner_acq_leads,
            --sal_to_msa.leads_owner_name,
            --sal_to_msa.leads_owner_manager,
            sal_to_msa.created_date,
            sal_to_msa.sal_accepted_date,
            sal_to_msa.s_a_l__c,
            sal_to_msa.s_a_l_by__sales__c,
            sal_to_msa.record_type_bi__c,
            sal_to_msa.msa_date,
            sal_to_msa.stage_name,
            sal_to_msa.partner_acq_opps,
            sal_to_msa.opp_won,
            sal_to_msa.record_type_opps,
            sal_to_msa.pricing_model_opps,
            --sal_to_msa.opps_owner_name,
            --sal_to_msa.opps_owner_manager,
            sal_to_msa.opp_name,
            sal_to_msa.opp_type,
            sal_to_msa.partner_level,
            sal_to_msa.lead_or_opp_source,
            --sal_to_msa.partner_development_owner,
            --sal_to_msa.bdr_owner_name,
            --sal_to_msa.bdr_manager_name,
            sal_to_msa.partner,
            sal_to_msa.partner_region,
            sal_to_msa.account_type,
            sal_to_msa.acc_pricing_model,
            sal_to_msa.opp_go_flag,
            sal_to_msa.immediate_headcount_c,
            sal_to_msa.headcount_c,
            sal_to_msa.de_country_c,
            sal_to_msa.closed_lost_category_detail_c,
            sal_to_msa.incumbent_solution_c,
            sal_to_msa.competitorsthatare_involved_c,
            sal_to_msa.contact_id,
            sal_to_msa.primary_quotes_pricing_model_c,
            sal_to_msa.competitors__involved__c,
            sal_to_msa.other__competitor__c,
            sal_to_msa.fivetran_synced_opps,
            sal_to_msa.fivetran_synced_leads,
            sal_to_msa.partner_country,
            sal_to_msa.existing_business_deal_classification_c,
            sal_to_msa.existing_business_opp_type_c,
            sal_to_msa.existing_business_opp_type_detail_c,
            sal_to_msa.opp_owner_name,
            sal_to_msa.row_num,
            sal_to_msa.partner_vertical__c,
            sal_to_msa.vital_few_partner,
			sal_to_msa.vital_few_account,
            sal_to_msa.partner_agreement_effective_date_c,
            sal_to_msa.opps_score_segment,
            sal_to_msa.lead_score_segment,
			sal_to_msa.billing_country,
			sal_to_msa.manager_id,
			sal_to_msa.owner_region,
			sal_to_msa.owner_active,
			sal_to_msa.owner_created_date,
			sal_to_msa.partner_development_owner_lookup__c,
			sal_to_msa.owner_id,
			sal_to_msa.sales_title_c_c,
 			sal_to_msa.engagement__type__c,
            sal_to_msa.sales_motion,
            sal_to_msa.manager_reviewed_sal__c
           FROM sal_to_msa
        UNION ALL
         SELECT closed_lost.cohort_stage,
            closed_lost.account_id,
            closed_lost.account_name,
            closed_lost.b_d_r__date__c,
            closed_lost.lead_or_opp_id,
            closed_lost.point_time_date,
            closed_lost.mql_cohort_month,
            closed_lost.lead_id,
            closed_lost.opp_id,
            closed_lost.is_converted,
            closed_lost.converted_opportunity_id,
            closed_lost.lead_country,
            closed_lost.campaign_name,
            closed_lost.lead_disqualified_reason,
            closed_lost.lead_status,
            closed_lost.opp_status,
            closed_lost.closed__lost__c,
            closed_lost.lead_country_code,
            closed_lost.country_code,
            closed_lost.tier,
            closed_lost.bdr_unqualified_reason,
            closed_lost.client_region,
            closed_lost.client_country,
            closed_lost.mql_date,
            closed_lost.converted_date,
            closed_lost.partner_acq_leads,
            --closed_lost.leads_owner_name,
            --closed_lost.leads_owner_manager,
            closed_lost.created_date,
            closed_lost.sal_accepted_date,
            closed_lost.s_a_l__c,
            closed_lost.s_a_l_by__sales__c,
            closed_lost.record_type_bi__c,
            closed_lost.msa_date,
            closed_lost.stage_name,
            closed_lost.partner_acq_opps,
            closed_lost.opp_won,
            closed_lost.record_type_opps,
            closed_lost.pricing_model_opps,
            --closed_lost.opps_owner_name,
            --closed_lost.opps_owner_manager,
            closed_lost.opp_name,
            closed_lost.opp_type,
            closed_lost.partner_level,
            closed_lost.lead_or_opp_source,
            --closed_lost.partner_development_owner,
            --closed_lost.bdr_owner_name,
            --closed_lost.bdr_manager_name,
            closed_lost.partner,
            closed_lost.partner_region,
            closed_lost.account_type,
            closed_lost.acc_pricing_model,
            closed_lost.opp_go_flag,
            closed_lost.immediate_headcount_c,
            closed_lost.headcount_c,
            closed_lost.de_country_c,
            closed_lost.closed_lost_category_detail_c,
            closed_lost.incumbent_solution_c,
            closed_lost.competitorsthatare_involved_c,
            closed_lost.contact_id,
            closed_lost.primary_quotes_pricing_model_c,
            closed_lost.competitors__involved__c,
            closed_lost.other__competitor__c,
            closed_lost.fivetran_synced_opps,
            closed_lost.fivetran_synced_leads,
            closed_lost.partner_country,
            closed_lost.existing_business_deal_classification_c,
            closed_lost.existing_business_opp_type_c,
            closed_lost.existing_business_opp_type_detail_c,
            closed_lost.opp_owner_name,
            closed_lost.row_num,
            closed_lost.partner_vertical__c,
            closed_lost.vital_few_partner,
			closed_lost.vital_few_account,
            closed_lost.partner_agreement_effective_date_c,
            closed_lost.opps_score_segment,
            closed_lost.lead_score_segment,
			closed_lost.billing_country,
			closed_lost.manager_id,
			closed_lost.owner_region,
			closed_lost.owner_active,
			closed_lost.owner_created_date,
			closed_lost.partner_development_owner_lookup__c,
			closed_lost.owner_id,
			closed_lost.sales_title_c_c,
 			closed_lost.engagement__type__c,
            closed_lost.sales_motion,
            closed_lost.manager_reviewed_sal__c
           FROM closed_lost
        )
 SELECT DISTINCT full_union.cohort_stage,
    full_union.account_id,
    full_union.account_name,
    full_union.b_d_r__date__c,
    full_union.lead_or_opp_id,
    full_union.point_time_date,
    full_union.mql_cohort_month,
    full_union.lead_id,
    full_union.opp_id,
    full_union.is_converted,
    full_union.converted_opportunity_id,
    full_union.lead_country,
    full_union.campaign_name,
    full_union.lead_disqualified_reason,
    full_union.lead_status,
    full_union.opp_status,
    full_union.closed__lost__c,
    full_union.lead_country_code,
    full_union.country_code,
    full_union.tier,
    full_union.bdr_unqualified_reason,
    full_union.client_region,
    full_union.client_country,
    full_union.mql_date,
    full_union.converted_date,
    full_union.partner_acq_leads,
    --full_union.leads_owner_name,
    --full_union.leads_owner_manager,
    full_union.created_date,
    full_union.sal_accepted_date,
    full_union.s_a_l__c,
    full_union.s_a_l_by__sales__c,
    full_union.record_type_bi__c,
    full_union.msa_date,
    full_union.stage_name,
    full_union.partner_acq_opps,
    full_union.opp_won,
    full_union.record_type_opps,
    full_union.pricing_model_opps,
    --full_union.opps_owner_name,
    --full_union.opps_owner_manager,
    full_union.opp_name,
    full_union.opp_type,
    full_union.partner_level,
    full_union.lead_or_opp_source,
    --full_union.partner_development_owner,
    --full_union.bdr_owner_name,
    --full_union.bdr_manager_name,
    full_union.partner,
    full_union.partner_region,
    full_union.account_type,
    full_union.acc_pricing_model,
    full_union.opp_go_flag,
    full_union.immediate_headcount_c,
    full_union.headcount_c,
    full_union.de_country_c,
    full_union.closed_lost_category_detail_c,
    full_union.incumbent_solution_c,
    full_union.competitorsthatare_involved_c,
    full_union.contact_id,
    full_union.primary_quotes_pricing_model_c,
    full_union.competitors__involved__c,
    full_union.other__competitor__c,
    full_union.fivetran_synced_opps,
    full_union.fivetran_synced_leads,
    full_union.partner_country,
    full_union.existing_business_deal_classification_c,
    full_union.existing_business_opp_type_c,
    full_union.existing_business_opp_type_detail_c,
    full_union.opp_owner_name,
    full_union.row_num,
    full_union.partner_vertical__c,
    full_union.vital_few_partner,
	full_union.vital_few_account,
    full_union.partner_agreement_effective_date_c,
    full_union.opps_score_segment,
    full_union.lead_score_segment,
	full_union.billing_country,
			full_union.manager_id,
			full_union.owner_region,
			full_union.owner_active,
			full_union.owner_created_date,
			full_union.partner_development_owner_lookup__c,
			full_union.owner_id,
			full_union.sales_title_c_c,
 			full_union.engagement__type__c,
    full_union.sales_motion,
    full_union.manager_reviewed_sal__c
   FROM full_union
  WHERE full_union.row_num = 1"
45c25bf1-d992-9204-75bf-52d2cc985d17,v_gp_sfdc_opportunity_current_pacific_time (salesforce.v_gp_sfdc_opportunity_current_pacific_time)+ (gpbidb),postgres,"select distinct 
id as manager_id,
name as manager_name
FROM salesforce.v_gp_sfdc_user_current"
45c25bf1-d992-9204-75bf-52d2cc985d17,v_gp_sfdc_opportunity_current_pacific_time (salesforce.v_gp_sfdc_opportunity_current_pacific_time)+ (gpbidb),postgres,"select distinct 
id as partner_dev_owner_id,
name as partner_development_owner,
user_region_c as pdo_region,
is_active as pdo_active
FROM salesforce.v_gp_sfdc_user_current"
4811d585-9aff-781f-67d2-e0b183759f10,Sales Navigator Connection,,
482d6bec-8e48-42f0-0fc0-402ca86a950c,PoP by EOR and Contractor,,
3a907b2a-94d6-ee29-71e4-effa9f4a3d7e,Custom SQL Query (gpbidb),postgres,"with a as(
select distinct t1.client_id,
t2.name as client,
	concat(t10.first_name,' ',t10.last_name) as Account_Manager,
min(t1.addendum_enrollment_date) as minimo
from goglobal_gp_goglobal.v_gp_gg_client_country_current t1	
	left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on t1.client_id=t2.id
	left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t10  	
	on t10.id = t2.gp_account_manager_id
group by 1,2,3), 
b as(
select t2.id as client_id,
t2.name as client, t4.id as country_id,
t4.name as country,
 t1.id, 
t1.status
from goglobal_gp_goglobal.v_gp_gg_professional_current t1 
	left join goglobal_gp_goglobal.v_gp_gg_client_current t2 
		on t1.client_id=t2.id
	left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t3 	
		on t1.lsp_country_id=t3.id
	left join goglobal_gp_goglobal.v_gp_gg_country_current t4	
		on t3.country_id=t4.id
where is_demo_client='false' and is_failed_to_launch='false'
order by 2,4),
d as(
select client_id,
client,
country_id,
country,
COUNT(distinct b.id) filter (where b.status IN ('1','2','3','4')) as active_pros,
COUNT(distinct b.id) filter (where b.status IN ('5')) as inactive_pros
from b group by 1,2,3,4 order by 2,4)	
select T1.ID,t1.client_id, t2.name as client,t2.status,t2.is_demo_client,a.account_manager,
a.minimo, 
t1.country_id,t3.name as country,
d.active_pros,d.inactive_pros,
t1.addendum_enrollment_date,
t4.is_applicable, t4.markup_transaction_amt,t4.markup_transaction_id
from goglobal_gp_goglobal.v_gp_gg_client_country_current t1
	left join goglobal_gp_goglobal.v_gp_gg_client_current t2 
		on t1.client_id=t2.id
	left join goglobal_gp_goglobal.v_gp_gg_country_current t3 on t1.country_id=t3.id
	left join a on a.client_id=t1.client_id
	left join goglobal_gp_goglobal.v_gp_gg_client_country_markup_transaction_current t4 on t1.id=t4.client_country_id
left join d on d.client_id=t2.id and d.country_id=t3.id
where markup_transaction_id='1' and is_demo_client='false'"
39e1f077-9522-1c4f-842c-fa7d364ab726,v_marketing_dashboard_pacific_time (repo.v_marketing_dashboard_pacific_time) (gpbidb),,
39b885f1-ca68-0443-3402-00971daa0389,Custom SQL Query+ (Multiple Connections),,
39b885f1-ca68-0443-3402-00971daa0389,Custom SQL Query+ (Multiple Connections),postgres,"SELECT a.id,i.""Parent"",a.key as ""Issue Key"",b.name as ""Issue Type"",a.summary as ""Summary"",c.name as ""Status"",c.""Status Subcategory"",d.name as ""Priority"",
e.name as ""Assignee"",f.name as ""Reporter"",a.created,a.updated,a.resolved,g.value as ""Renewal Date"",h.value as ""Status per Jira"", j.name as ""Region"",
k.name as ""Project Health"",l.value as ""Next update expected from Benefits team by"",m.value as ""Target date for Project Close"",
n.value as ""Current broker(s)"",o.value as ""Current in-scope benefits types"",q.value as ""Target date to complete project"",
r.name as ""Benefits Request Type""
FROM jira_integration.issue as a
LEFT JOIN jira_integration.issue_type as b
ON a.issue_type=b.id
LEFT JOIN ( 
			SELECT y.id,y.name as ""Status Subcategory"",x.name
			FROM jira_integration.status_category as x
			LEFT JOIN jira_integration.status as y
			ON x.id=y.status_category_id) as c
ON a.status=c.id
LEFT JOIN jira_integration.priority as d
ON a.priority=d.id
LEFT JOIN jira_integration.user as e
ON a.assignee=e.id
LEFT JOIN jira_integration.user as f
ON a.reporter=f.id
LEFT JOIN 
(	SELECT a.issue_id,a.value,a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11021' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	WHERE a.field_id='customfield_11021' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as g
ON a.id=g.issue_id
LEFT JOIN 
(
	SELECT a.issue_id,a.value,a.time
FROM jira_integration.issue_field_history as a
LEFT JOIN
	 (
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11057' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
ON (a.issue_id=b.issue_id)
WHERE a.field_id='customfield_11057' AND a.time=b.max_time
AND a.issue_id IN ( SELECT DISTINCT id
					FROM jira_integration.issue
					WHERE project=10210)
) as h
on a.id=h.issue_id
LEFT JOIN (
			SELECT id,key as ""Parent""
			FROM jira_integration.issue
			WHERE project=10210 AND parent_id IS NULL
) as i
ON a.parent_id=i.id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time,c.name
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_10109' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	LEFT JOIN jira_integration.field_option as c
	ON a.value=c.id::text
	WHERE a.field_id='customfield_10109' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as j
on a.id=j.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time,c.name
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_10335' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	LEFT JOIN jira_integration.field_option as c
	ON a.value=c.id::text
	WHERE a.field_id='customfield_10335' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as k
on a.id=k.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11136' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	WHERE a.field_id='customfield_11136' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as l
on a.id=l.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11133' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	WHERE a.field_id='customfield_11133' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as m
on a.id=m.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11167' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	WHERE a.field_id='customfield_11167' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as n
on a.id=n.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11163' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	WHERE a.field_id='customfield_11163' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as o
on a.id=o.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11191' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	WHERE a.field_id='customfield_11191' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as q
on a.id=q.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time,c.name
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_10407' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	LEFT JOIN jira_integration.field_option as c
	ON a.value=c.id::text
	WHERE a.field_id='customfield_10407' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as r
on a.id=r.issue_id
WHERE a.project=10210 AND b.name NOT IN ('Sub-task')"
39b885f1-ca68-0443-3402-00971daa0389,Custom SQL Query+ (Multiple Connections),postgres,"SELECT issue_id,time,value
FROM jira_integration.issue_field_history
WHERE field_id='customfield_11057' 
AND issue_id IN ( SELECT DISTINCT id
					FROM jira_integration.issue
					WHERE project=10210)
ORDER BY 1,2 DESC"
39b885f1-ca68-0443-3402-00971daa0389,Custom SQL Query+ (Multiple Connections),postgres,"SELECT a.id,i.""Parent"" as ""Parent Issue"",a.key as ""Issue Key"",b.name as ""Issue Type"",a.summary as ""Summary"",c.name as ""Status"",c.""Status Subcategory"",d.name as ""Priority"",
e.name as ""Assignee""
FROM jira_integration.issue as a
LEFT JOIN jira_integration.issue_type as b
ON a.issue_type=b.id
LEFT JOIN ( 
			SELECT y.id,y.name as ""Status Subcategory"",x.name
			FROM jira_integration.status_category as x
			LEFT JOIN jira_integration.status as y
			ON x.id=y.status_category_id) as c
ON a.status=c.id
LEFT JOIN jira_integration.priority as d
ON a.priority=d.id
LEFT JOIN jira_integration.user as e
ON a.assignee=e.id
LEFT JOIN jira_integration.user as f
ON a.reporter=f.id
LEFT JOIN 
(	SELECT a.issue_id,a.value,a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11021' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	WHERE a.field_id='customfield_11021' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as g
ON a.id=g.issue_id
LEFT JOIN 
(
	SELECT a.issue_id,a.value,a.time
FROM jira_integration.issue_field_history as a
LEFT JOIN
	 (
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11057' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
ON (a.issue_id=b.issue_id)
WHERE a.field_id='customfield_11057' AND a.time=b.max_time
AND a.issue_id IN ( SELECT DISTINCT id
					FROM jira_integration.issue
					WHERE project=10210)
) as h
on a.id=h.issue_id
LEFT JOIN (
			SELECT id,key as ""Parent""
			FROM jira_integration.issue
			WHERE project=10210 AND parent_id IS NULL
) as i
ON a.parent_id=i.id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time,c.name
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_10109' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	LEFT JOIN jira_integration.field_option as c
	ON a.value=c.id::text
	WHERE a.field_id='customfield_10109' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as j
on a.id=j.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time,c.name
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_10335' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	LEFT JOIN jira_integration.field_option as c
	ON a.value=c.id::text
	WHERE a.field_id='customfield_10335' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as k
on a.id=k.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11136' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	WHERE a.field_id='customfield_11136' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as l
on a.id=l.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11133' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	WHERE a.field_id='customfield_11133' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as m
on a.id=m.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11167' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	WHERE a.field_id='customfield_11167' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as n
on a.id=n.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11163' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	WHERE a.field_id='customfield_11163' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as o
on a.id=o.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_11191' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	WHERE a.field_id='customfield_11191' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as q
on a.id=q.issue_id
LEFT JOIN (
	SELECT a.issue_id,a.value,a.time,c.name
	FROM jira_integration.issue_field_history as a
	LEFT JOIN
	 	(
	SELECT issue_id, MAX(time) as ""max_time""
	FROM jira_integration.issue_field_history
	WHERE field_id='customfield_10407' AND issue_id IN ( SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	GROUP BY 1) as b
	ON (a.issue_id=b.issue_id)
	LEFT JOIN jira_integration.field_option as c
	ON a.value=c.id::text
	WHERE a.field_id='customfield_10407' AND a.time=b.max_time
	AND a.issue_id IN ( SELECT DISTINCT id
						FROM jira_integration.issue
						WHERE project=10210)
) as r
on a.id=r.issue_id
WHERE a.project=10210 AND b.name IN ('Sub-task')"
39b885f1-ca68-0443-3402-00971daa0389,Custom SQL Query+ (Multiple Connections),postgres,"SELECT cal_date, country_name,count(distinct professional_id) as ""Professionals""
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
WHERE active_flag = 'Active'
AND (service_class IS NULL OR service_class <<>> '4') 
AND EXTRACT(MONTH from cal_date)=EXTRACT(MONTH from current_date)
AND EXTRACT(YEAR from cal_date)=EXTRACT(YEAR from current_date)
GROUP BY 1,2"
39b885f1-ca68-0443-3402-00971daa0389,Custom SQL Query+ (Multiple Connections),postgres,"WITH table_country as (	
	SELECT DISTINCT c.key,a.issue_id,b.name as ""country"",a.time
	FROM jira_integration.issue_field_history as a
	LEFT JOIN jira_integration.field_option as b
	ON a.value=b.id::text
	LEFT JOIN jira_integration.issue as c
	ON a.issue_id=c.id
	WHERE  field_id='customfield_10151' AND a.issue_id IN (
														SELECT DISTINCT id
														FROM jira_integration.issue
														WHERE project=10210)
	ORDER BY 1)
	
SELECT DISTINCT a.key,a.country
FROM table_country as a
LEFT JOIN 
		(
		SELECT issue_id, MAX(time) as ""max_time""
		FROM table_country
		GROUP BY 1
		) as b
ON a.issue_id=b.issue_id
WHERE a.time=b.""max_time""
ORDER BY 1"
39b885f1-ca68-0443-3402-00971daa0389,Custom SQL Query+ (Multiple Connections),postgres,"SELECT DISTINCT ""Worked In Country"",COUNT(DISTINCT(""Associate ID"")) as ""Internal Employees""
FROM workday_hris.v_workday_adp_hris
WHERE ""Status""='Active'
GROUP BY 1"
393923db-4b02-dbb3-8fc7-765dc63fda41,Custom SQL Query (gpbidb),postgres,"WITH sfdc as (
			  SELECT customer.id,
					 customer.name,
					 CASE WHEN Customer.salesforce_account_id IS NOT NULL AND mdm2.source_id IS NOT NULL THEN Customer.salesforce_account_id::TEXT
						  WHEN Customer.salesforce_account_id IS NULL AND mdm2.source_id IS NOT NULL THEN mdm2.source_id::TEXT
						  WHEN Customer.salesforce_account_id IS NOT NULL AND mdm2.source_id IS NULL THEN Customer.salesforce_account_id::TEXT
					 END as id_match
			 FROM goglobal_gp_goglobal.v_gp_gg_client_current customer
			 LEFT JOIN repo.v_gp_mdm_customer AS mdm ON customer.id::VARCHAR = mdm.source_id
			 LEFT JOIN (
				 		SELECT *
				 		FROM repo.v_gp_mdm_customer
				 		WHERE source = 'SFDC Customer'
						) AS mdm2 ON mdm.parent_name = mdm2.parent_name
			WHERE customer.is_demo_client = false
			),
sfdc_health as (
				select sfdc.*,
					   sfdc_ac.client_health__c
				from sfdc
				left join salesforce.v_gp_sfdc_account_current sfdc_ac on sfdc.id_match=sfdc_ac.id),
satisfaction AS (
				SELECT id,
					   s.ticket_id,
					   score, created_at, last_date,comment,reason
				FROM ""zendesk"".""satisfaction_rating"" AS s
				INNER JOIN (
							SELECT ticket_id, 
								   MAX(created_at) AS last_date
							FROM ""zendesk"".""satisfaction_rating""
							GROUP BY ticket_id
							) AS m ON (s.ticket_id = m.ticket_id AND created_at = last_date)
				),
gpp_zendesk as (
				SELECT t.id AS ticket_id_ZENDESK,
					   t.id::TEXT as ticket_id_zendesk_text,
						CASE WHEN O.CUSTOM_CUSTOMER_ID IS NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
							 WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NULL THEN O.CUSTOM_CUSTOMER_ID
                             WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
							 WHEN O.CUSTOM_CUSTOMER_ID = zendesk_org.CUSTOM_CUSTOMER_ID THEN zendesk_org.CUSTOM_CUSTOMER_ID
                                                         ELSE NULL
						END AS zendesk_gpp_client_id_match,
						CASE WHEN cc.name IS NULL AND cc2.name IS NOT NULL THEN cc2.name
							 WHEN cc.name IS NOT NULL AND cc2.name IS NULL THEN cc.name
							 WHEN cc.name IS NOT NULL AND cc2.name IS not NULL THEN cc2.name
							 WHEN cc.name = cc2.name THEN cc2.name
							 else null 
						END AS zendesk_gpp_client_name_match, 
						CASE WHEN O.NAME IS NULL AND zendesk_org.name IS NOT NULL THEN zendesk_org.name
							 WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NULL THEN O.NAME
							 WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NOT NULL THEN ZENDESK_ORG.NAME
							 WHEN O.NAME = zendesk_org.name THEN ZENDESK_ORG.NAME
							 ELSE NULL 
						END AS Zendesk_client_org,
						t.created_at,
						t.created_at::date as date,	
						t.created_at::time as time,
						t.organization_id AS customer_id,
						g.name AS group,
						t.requester_id,
						t.submitter_id,
						t.assignee_id,
						u4.name as assignee,
	                    split_part(LOWER(u4.email), '@', 1) AS assignee_email,
						u.name AS requester,
						U.ROLE AS requester_ROLE,
						t.status,
						T.PRIORITY,	
						case when t.priority='urgent' then 60
							else 2400 
						end as target_sla,
						T.CUSTOM_CATEGORY,
						CASE WHEN t_form.ticket_form='Shared Services' THEN concat('Shared Services -',' ',t.custom_SSC_Action)
							WHEN t_form.ticket_form='Internal Request' AND t.CUSTOM_INTERNAL_REQUEST_TYPE='Zendesk Support' THEN concat('Internal -',' ',t.custom_Internal_Request_Type)
							WHEN t.custom_category='expenses' THEN concat('Expense -',' ',t.custom_Expenses)
							WHEN t.custom_category='benefits' THEN concat('Benefits -',' ',t.custom_Benefits)
							WHEN t.custom_category='employee_onboarding' THEN concat('Employee Onboarding -',' ', t.custom_Employee_Onboarding)
							WHEN t.custom_category='invoicing' THEN CONCAT('Invoicing -',' ', t.custom_Invoicing)
							WHEN t.custom_category='time_off' THEN concat('Time Off -',' ',t.custom_Time_Off)
							WHEN t.custom_category='zoho' THEN concat('Zoho -',' ', t.custom_Zoho_Sub_Category)
							WHEN t.custom_category='time_tracking' THEN CONCAT('Time Tracking -',' ',t.custom_Time_Tracking)
							WHEN t.custom_category='hr_support' THEN CONCAT('HR Support -',' ',t.custom_HR_Support)
							WHEN t.custom_category='payroll' THEN concat('Payroll -',' ',t.custom_Payroll)
							WHEN t.custom_category='tech_support' THEN CONCAT('Tech Support -',' ',t.custom_Tech_Support)
							WHEN t.custom_category is not NULL THEN t.custom_category
							ELSE 'No Category'
						end as sub_category,	
						U.organization_id AS USER_ORGANIZATION_ID,
						T.organization_id,	
						U3.NAME AS SUBMITTER,
						U3.ROLE AS SUBMITTER_ROLE,
						t.via_channel,
						t.custom_customer_satisfaction,						
                                                zendesk_tm.assignee_updated_at,
						zendesk_tm.replies, 
						zendesk_tm.full_resolution_time_in_minutes_business, 
						zendesk_tm.reply_time_in_minutes_business,
						zendesk_tm.full_resolution_time_in_minutes_calendar, 
						zendesk_tm.reply_time_in_minutes_calendar,
						zendesk_tm.solved_at,
						zendesk_tm.requester_wait_time_in_minutes_calendar,
	                    zendesk_tm.initially_assigned_at,
						s.score,
						t.custom_region,
						u.custom_country,	
						Case when ZENDESK_TM.full_resolution_time_in_minutes_business <<=7200 then '0 - 5 days'
							 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>7200 and ZENDESK_TM.full_resolution_time_in_minutes_business<<=43200) then '5 - 30 days'
							 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>43200) then '+30 days'
						end as resolution_time,
						case when ZENDESK_TM.replies =0 then '0 touches'
							 when (ZENDESK_TM.replies>>0 and ZENDESK_TM.replies<<3) then '1 to 2 touches'
							 when (ZENDESK_TM.replies>>2 and ZENDESK_TM.replies<<6) then '3 to 5 touches'
							 when (ZENDESK_TM.replies>>5) then '+5 touches'
						end as replies_touches,
		case when score='good' then '1' 
							 when custom_customer_SATISFACTION='csat_rating_3' then '1'
							 when custom_customer_SATISFACTION='csat_rating_4' then '1'
							 when custom_customer_SATISFACTION='csat_rating_5' then '1'
							 else 0 
						end as CSAT_1,
						case when score='bad' then '1' 
							 when custom_customer_SATISFACTION='csat_rating_1' then '1'
							 when custom_customer_SATISFACTION='csat_rating_2' then '1'
							 else 0 
						end as CSAT_2,
						ticket_merge.tag as closed_by_merge
	
				FROM ""zendesk"".""ticket"" AS t
				LEFT JOIN ""zendesk"".""user"" AS u ON t.requester_id = u.id
				LEFT JOIN ""zendesk"".""group"" AS g ON t.group_id = g.id
				LEFT JOIN ""zendesk"".""organization"" AS org ON t.organization_id = org.id
				LEFT JOIN ""zendesk"".""user"" AS u3 ON t.SUBMITTER_ID = u3.id
				LEFT JOIN ""zendesk"".""user"" AS u4 ON t.assignee_id = u4.id
				LEFT JOIN ZENDESK.TICKET_METRICS AS ZENDESK_TM ON t.id=ZENDESK_TM.TICKET_ID
				LEFT JOIN ""satisfaction"" AS s ON t.id = s.ticket_id
				left join zendesk.organization o on o.id=U.organization_id
				left join zendesk.organization zendesk_org on zendesk_org.id=T.organization_id
				left join goglobal_gp_goglobal.v_gp_gg_client_current cc on cc.id=o.custom_customer_id	
				left join goglobal_gp_goglobal.v_gp_gg_client_current cc2 on cc2.id=zendesk_org.custom_customer_id
				left join (
							select distinct id,
								   name as ticket_form
							from  zendesk.ticket_form_history t2
							where name in ('Shared Services','Internal Request') and active='true'
							) t_form on t_form.id=t.ticket_form_id
				left join (
							SELECT *
							FROM zendesk.ticket_tag
							WHERE tag = 'closed_by_merge'
							) ticket_merge on t.id=ticket_merge.ticket_id
			)
select distinct gpp_zendesk.*, tme.type,
	  	(reply_time_in_minutes_business- target_sla) AS TIME_DIF,
		case
			when (reply_time_in_minutes_business- target_sla)>>0 then 'Breach'
			when (reply_time_in_minutes_business- target_sla)<<=0 then 'Within'
			ELSE NULL 
		end as SLA_performance,
		case 
			when (reply_time_in_minutes_business- target_sla)>>0 THEN 1
		end as SLA_performance_BREACH,
		case
			when (reply_time_in_minutes_business- target_sla)<<=0 THEN 1
		end as SLA_performance_WITHIN,
		case
			when reply_time_in_minutes_business is null then 1
		end as first_reply_ind,
	   client.accounting_id,
           client.status as client_status, 
	   client.tier_type, 
	   	CASE 
			WHEN client.pricing_model = 0 THEN 'Enterprise'::text
			WHEN client.pricing_model = 1 THEN 'Standard'::text
			ELSE 'Verify Pricing Model'::text
		END AS pricing_model,
		sfdc_health.client_health__c  ""SFDC Client Health"",
		concat(gpp_am.first_name,' ',gpp_am.last_name) AS Account_Manager,
		concat(gpp_ae.first_name,' ',gpp_ae.last_name)  AS Account_Executive,
		client.msa_contract_start_date_peo,
		idr.name as industry
from gpp_zendesk
left join goglobal_gp_goglobal.v_gp_gg_client_current client on client.id=gpp_zendesk.zendesk_gpp_client_id_match
left join (select * 
		   from zendesk.ticket_metric_events 
		   where type='apply_sla') TME on gpp_zendesk.ticket_id_zendesk_text=TME.ticket_id
LEFT JOIN sfdc_health ON sfdc_health.ID=client.ID
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current gpp_am on gpp_am.id = client.gp_account_manager_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current gpp_ae on gpp_ae.id = client.gp_current_sales_rep_id
left join goglobal_gp_goglobal.v_gp_gg_industry_current idr on idr.id = client.industry_id"
393923db-4b02-dbb3-8fc7-765dc63fda41,Custom SQL Query (gpbidb),postgres,"SELECT wd.*, split_part(LOWER(""Work Contact: Work Email""), '@', 1) AS lower_case_email
FROM workday_hris.v_non_sensitive_workday_data AS wd"
2a22cbf0-d032-9383-c2eb-6558552b6116,Pricing Model (gpbidb),postgres,"WITH professionals AS (
SELECT cl_country.client_id,
   country_c.name AS client_country_name,
   MAX(cl_country.payroll_end_date) AS max_pay_end,
   COUNT(cl_country.id)  AS total_professionals,
   SUM (CASE WHEN (cl_country.is_failed_to_launch='true') THEN 1 ELSE NULL END) AS failed,
   SUM (CASE WHEN (cl_country.status= '1') AND cl_country.is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS new,
   SUM (CASE WHEN (cl_country.status= '2') AND cl_country.is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS onboarding,
   SUM (CASE WHEN (cl_country.status= '3') AND cl_country.is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS active,
   SUM (CASE WHEN (cl_country.status= '4') AND cl_country.is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS terminating,
   SUM (CASE WHEN (cl_country.status= '5') AND cl_country.is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS inactive
FROM goglobal_gp_goglobal.v_gp_gg_professional_current cl_country
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current_mat cc ON cl_country.client_country_id = cc.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current_mat country_c ON cc.country_id = country_c.id
GROUP BY 1, 2
),
client_country AS (
SELECT cl_country.client_id,
   country_c.name AS client_country_name,
   country_c.country_code
FROM goglobal_gp_goglobal.v_gp_gg_professional_current_mat cl_country
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current_mat cc ON cl_country.client_country_id = cc.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current_mat country_c ON cc.country_id = country_c.id
GROUP BY 1, 2, 3
),
gg_client AS (
SELECT cl_current.id, cl_current.name, cl_current.status AS gg_client_status, cl_current.date_modified, cl_current.salesforce_account_id, cl_current.msa_contract_start_date_peo, cl_current.pricing_model,
   cl_country.client_country_name AS country_name,
   cl_country.country_code AS client_country_code,
   pro_current.max_pay_end, pro_current.failed, pro_current.new, pro_current.onboarding, pro_current.active, pro_current.terminating, pro_current.inactive, pro_current.total_professionals,
   d.name AS referral_name
FROM goglobal_gp_goglobal.v_gp_gg_client_current cl_current
LEFT JOIN client_country cl_country ON cl_current.id = cl_country.client_id
LEFT JOIN professionals pro_current ON cl_country.client_id = pro_current.client_id AND cl_country.client_country_name = pro_current.client_country_name
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current AS d ON cl_current.partners_referral_id = d.id
),
opportunities AS (
SELECT DISTINCT v_gp_sfdc_account_current.id AS acc_id,
    v_gp_sfdc_account_current.name AS acc_name,
    v_gp_sfdc_account_current.pricing_model__c AS acc_pricing_model,
    v_gp_sfdc_opportunity_current_pacific_time.close_date,
    v_gp_sfdc_opportunity_current_pacific_time.created_date,
    v_gp_sfdc_account_current.billing_country_code AS iso_code_2_digit__c,
    v_gp_sfdc_opportunity_current_pacific_time.is_won,
    ( SELECT max(v_gp_sfdc_opportunity_current_1.update_time) AS max
      FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time v_gp_sfdc_opportunity_current_1) AS last_update_date,
    v_gp_sfdc_opportunity_current_pacific_time.lead_source AS opportunity_lead_source,
    v_gp_sfdc_opportunity_current_pacific_time.pricing_model__c AS opp_pricing_model,
    v_gp_sfdc_opportunity_current_pacific_time.lead_source_tier_c AS opp_tier,
    v_gp_sfdc_opportunity_current_pacific_time.id AS opportunity_id,
    v_gp_sfdc_opportunity_current_pacific_time.name AS opportunity_name,
    v_gp_sfdc_opportunity_current_pacific_time.type AS oppotunity_type,
    mng.name AS owner_manager_name,
    v_gp_sfdc_user_current.name AS owner_name,
    acc_partn.name AS partner,
    v_gp_sfdc_opportunity_current.partner_lead_source__c AS partner_lead_source,
    acc_partn.partner_level__c AS partner_level,
    acc_partn.type AS partner_type,
    v_gp_sfdc_opportunity_current_pacific_time.partner_acquisition__c,
    dev_own.name AS partner_development_owner,
    v_gp_sfdc_opportunity_current_pacific_time.record_type_bi__c AS record_type_text_id_c,
    v_gp_sfdc_account_current.client_region_billing_country::character varying(3900) AS region_iso__c,
    v_gp_sfdc_opportunity_current_pacific_time.s_a_l__c,
    v_gp_sfdc_opportunity_current_pacific_time.stage_name
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time
     LEFT JOIN salesforce.v_gp_sfdc_opportunity_current ON salesforce.v_gp_sfdc_opportunity_current_pacific_time.id = salesforce.v_gp_sfdc_opportunity_current.id
     LEFT JOIN salesforce.v_gp_sfdc_user_current ON v_gp_sfdc_user_current.id::text = v_gp_sfdc_opportunity_current_pacific_time.owner_id::text
     LEFT JOIN salesforce.v_gp_sfdc_opportunity_detail_current ON v_gp_sfdc_opportunity_detail_current.opportunity__c::text = v_gp_sfdc_opportunity_current_pacific_time.id::text
     LEFT JOIN salesforce.v_gp_sfdc_country_current ON v_gp_sfdc_country_current.id::text = v_gp_sfdc_opportunity_detail_current.country__c::text
     LEFT JOIN v_gp_mdm_country ON v_gp_sfdc_country_current.id::text = v_gp_mdm_country.source_system_id
     LEFT JOIN salesforce.v_gp_sfdc_account_current ON v_gp_sfdc_opportunity_current_pacific_time.account_id::text = v_gp_sfdc_account_current.id::text
     LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON v_gp_sfdc_opportunity_current_pacific_time.partner2__c::text = acc_partn.id::text
     LEFT JOIN salesforce.v_gp_sfdc_campaign_current ON v_gp_sfdc_opportunity_current_pacific_time.campaign_id::text = v_gp_sfdc_campaign_current.id::text
     LEFT JOIN salesforce.v_gp_sfdc_user_current mng ON mng.id::text = v_gp_sfdc_user_current.manager_id::text
     LEFT JOIN salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = v_gp_sfdc_opportunity_current_pacific_time.partner_development_owner_lookup__c::text
),
salesforce_won AS (
SELECT *
FROM opportunities
WHERE stage_name = 'Closed Won'
),
salesforce_not_won AS (
SELECT *
FROM opportunities
WHERE stage_name != 'Closed Won'
),
sf_gg AS (
SELECT t1.id, t1.name,
   t1.client_country_code, t1.gg_client_status, t1.date_modified,
   t1.country_name,
   t1.msa_contract_start_date_peo,
   t1.max_pay_end, t1.failed, t1.new, t1.onboarding, t1.active, t1.terminating, t1.inactive, t1.total_professionals, t1.referral_name, t1.pricing_model,
   CASE WHEN t1.salesforce_account_id IS NOT NULL THEN t1.salesforce_account_id ELSE mdm_sfdc.source_id END AS salesforce_account_id
FROM gg_client t1
LEFT JOIN repo.v_gp_mdm_customer t2 ON t1.id::varchar = t2.source_id
LEFT JOIN (SELECT * FROM repo.v_gp_mdm_customer WHERE source = 'SFDC Customer') mdm_sfdc ON t2.parent_name = mdm_sfdc.parent_name
ORDER BY 1
),
sf_gg_won AS ( 
SELECT salesforce_won.acc_id,
   salesforce_won.acc_name,
   salesforce_won.acc_pricing_model,
   gg_client.active,
   gg_client.client_country_code,
   gg_client.id AS client_id,
   gg_client.max_pay_end AS client_max_pay_end,
   gg_client.name AS client_name,
   gg_client.pricing_model AS client_pricing_model,
   gg_client.date_modified AS client_record_date_modified,
   gg_client.country_name,
   gg_client.failed,
   gg_client.gg_client_status,
   gg_client.inactive,
   salesforce_won.iso_code_2_digit__c,
   salesforce_won.is_won,
   gg_client.msa_contract_start_date_peo,
   gg_client.new,
   gg_client.onboarding,
   salesforce_won.close_date AS opp_close_date,
   salesforce_won.created_date AS opp_created_date,
   salesforce_won.last_update_date AS opp_last_update_date,
   salesforce_won.owner_manager_name AS opp_owner_manager_name,
   salesforce_won.owner_name AS opp_owner_name,
   salesforce_won.opp_pricing_model,
   salesforce_won.stage_name AS opp_stage_name,
   salesforce_won.opp_tier,
   salesforce_won.opportunity_id,
   salesforce_won.opportunity_lead_source,
   salesforce_won.opportunity_name,
   salesforce_won.oppotunity_type,
   salesforce_won.partner,
   salesforce_won.partner_acquisition__c,
   salesforce_won.partner_development_owner,
   salesforce_won.partner_lead_source,
   salesforce_won.partner_level,
   salesforce_won.partner_type,
   salesforce_won.record_type_text_id_c,
   gg_client.referral_name,
   salesforce_won.region_iso__c,
   salesforce_won.s_a_l__c,
   CASE WHEN gg_client.onboarding IS NULL AND gg_client.active IS NULL AND gg_client.terminating IS NULL AND gg_client.inactive IS NULL AND (current_date::DATE- gg_client.msa_contract_start_date_peo::DATE) << 90 THEN 'Newly Signed'
   WHEN (gg_client.active IS NOT NULL) OR (gg_client.terminating IS NOT NULL AND gg_client.active IS NULL AND gg_client.max_pay_end >> current_date) OR (gg_client.terminating IS NOT NULL AND gg_client.active IS NULL AND gg_client.max_pay_end IS NULL) THEN 'Active'
   WHEN gg_client.onboarding IS NOT NULL AND gg_client.active IS NULL AND gg_client.terminating IS NULL AND gg_client.inactive IS NULL THEN 'Onboarding'
   WHEN (gg_client.active IS NULL AND gg_client.inactive IS NOT NULL ) OR (gg_client.active IS NULL AND gg_client.terminating IS NOT NULL AND gg_client.max_pay_end << current_date) THEN 'Inactive'
   WHEN gg_client.onboarding IS NULL AND active IS NULL AND gg_client.terminating IS NULL AND gg_client.inactive IS NULL AND (current_date::DATE- gg_client.msa_contract_start_date_peo::DATE) >> 90 THEN 'Stalled'
   WHEN salesforce_won.stage_name = 'Closed Lost' THEN 'Lost'
   WHEN salesforce_won.stage_name != 'Closed Won' THEN 'Pre-Sale'
   END AS status,
   gg_client.terminating,
   gg_client.total_professionals
FROM salesforce_won
LEFT JOIN sf_gg gg_client ON salesforce_won.acc_id = gg_client.salesforce_account_id
),
sf_gg_lost AS ( 
SELECT salesforce_not_won.acc_id,
   salesforce_not_won.acc_name,
   salesforce_not_won.acc_pricing_model,
   gg_client.active,
   gg_client.client_country_code,
   gg_client.id AS client_id,
   gg_client.max_pay_end AS client_max_pay_end,
   gg_client.name AS client_name,
   gg_client.pricing_model AS client_pricing_model,
   gg_client.date_modified AS client_record_date_modified,
   gg_client.country_name,
   gg_client.failed,
   gg_client.gg_client_status,
   gg_client.inactive,
   salesforce_not_won.iso_code_2_digit__c,
   salesforce_not_won.is_won,
   gg_client.msa_contract_start_date_peo,
   gg_client.new,
   gg_client.onboarding,
   salesforce_not_won.close_date AS opp_close_date,
   salesforce_not_won.created_date AS opp_created_date,
   salesforce_not_won.last_update_date AS opp_last_update_date,
   salesforce_not_won.owner_manager_name AS opp_owner_manager_name,
   salesforce_not_won.owner_name AS opp_owner_name,
   salesforce_not_won.opp_pricing_model,
   salesforce_not_won.stage_name AS opp_stage_name,
   salesforce_not_won.opp_tier,
   salesforce_not_won.opportunity_id,
   salesforce_not_won.opportunity_lead_source,
   salesforce_not_won.opportunity_name,
   salesforce_not_won.oppotunity_type,
   salesforce_not_won.partner,
   salesforce_not_won.partner_acquisition__c,
   salesforce_not_won.partner_development_owner,
   salesforce_not_won.partner_lead_source,
   salesforce_not_won.partner_level,
   salesforce_not_won.partner_type,
   salesforce_not_won.record_type_text_id_c,
   gg_client.referral_name,
   salesforce_not_won.region_iso__c,
   salesforce_not_won.s_a_l__c,
   NULL AS status,
   gg_client.terminating,
   gg_client.total_professionals
FROM salesforce_not_won
LEFT JOIN (SELECT * FROM gg_client where id='100000000') AS gg_client ON salesforce_not_won.acc_id = gg_client.salesforce_account_id
),
sf_gg_won_lost_union AS (
SELECT * FROM (
SELECT *
FROM SF_GG_LOST
UNION ALL
SELECT *
FROM SF_GG_WON) uni
)
SELECT sf_gg_won_lost_union.acc_id,
   sf_gg_won_lost_union.acc_name,
   sf_gg_won_lost_union.acc_pricing_model,
   sf_gg_won_lost_union.active AS client_active,
   sf_gg_won_lost_union.client_country_code,
   sf_gg_won_lost_union.failed AS client_failed,
   sf_gg_won_lost_union.client_id,
   sf_gg_won_lost_union.inactive AS client_inactive,
   sf_gg_won_lost_union.client_max_pay_end,
   sf_gg_won_lost_union.client_name,
   sf_gg_won_lost_union.new AS client_new,
   sf_gg_won_lost_union.onboarding AS client_onboarding,
   sf_gg_won_lost_union.client_pricing_model,
   sf_gg_won_lost_union.client_record_date_modified,
   sf_gg_won_lost_union.terminating AS client_terminating,
   sf_gg_won_lost_union.total_professionals AS client_total_professionals,
   sf_gg_won_lost_union.country_name,
   sf_gg_won_lost_union.gg_client_status,
   sf_gg_won_lost_union.iso_code_2_digit__c,
   sf_gg_won_lost_union.is_won,
   sf_gg_won_lost_union.msa_contract_start_date_peo,
   sf_gg_won_lost_union.opp_close_date,
   sf_gg_won_lost_union.opp_created_date,
   sf_gg_won_lost_union.opp_last_update_date,
   sf_gg_won_lost_union.opp_owner_manager_name,
   sf_gg_won_lost_union.opp_owner_name,
   sf_gg_won_lost_union.opp_pricing_model,
   sf_gg_won_lost_union.opp_stage_name,
   sf_gg_won_lost_union.opp_tier,
   sf_gg_won_lost_union.opportunity_id,
   sf_gg_won_lost_union.opportunity_lead_source,
   sf_gg_won_lost_union.opportunity_name,
   sf_gg_won_lost_union.oppotunity_type,
   sf_gg_won_lost_union.partner,
   sf_gg_won_lost_union.partner_acquisition__c,
   sf_gg_won_lost_union.partner_development_owner,
   sf_gg_won_lost_union.partner_lead_source,
   sf_gg_won_lost_union.partner_level,
   sf_gg_won_lost_union.partner_type,
   sf_gg_won_lost_union.record_type_text_id_c,
   sf_gg_won_lost_union.referral_name,
   sf_gg_won_lost_union.region_iso__c,
   sf_gg_won_lost_union.s_a_l__c,
   sf_gg_won_lost_union.status
FROM sf_gg_won_lost_union"
2a22cbf0-d032-9383-c2eb-6558552b6116,Pricing Model (gpbidb),,
2a22cbf0-d032-9383-c2eb-6558552b6116,Pricing Model (gpbidb),postgres,"WITH last_date as ( 
SELECT DISTINCT salesforce.sbqq_quote_c.id, 
   --salesforce.sbqq_quote_c.owner_id, 
   --salesforce.sbqq_quote_c.name, 
   salesforce.sbqq_quote_c.currency_iso_code, 
   salesforce.sbqq_quote_c.created_date, 
   salesforce.sbqq_quote_c.last_modified_date, 
   --salesforce.sbqq_quote_c.sbqq_account_c,
   --salesforce.v_gp_sfdc_account_current.name AS account_name,
   salesforce.sbqq_quote_c.sbqq_average_customer_discount_c, 
   --salesforce.sbqq_quote_c.sbqq_billing_country_c, 
   --salesforce.sbqq_quote_c.sbqq_billing_name_c, 
   --salesforce.sbqq_quote_c.sbqq_days_quote_open_c, 
   --salesforce.sbqq_quote_c.sbqq_opportunity_2_c, 
   salesforce.sbqq_quote_c.sbqq_primary_c, 
   --salesforce.sbqq_quote_c.sbqq_start_date_c, 
   salesforce.sbqq_quote_c.sbqq_total_customer_discount_amount_c, 
   salesforce.sbqq_quote_c.sbqq_regular_amount_c, 
   --salesforce.sbqq_quote_c.sbqq_customer_amount_c,
   --salesforce.sbqq_quote_c.sbqq_list_amount_c,
   salesforce.sbqq_quote_c.sbqq_net_amount_c,
   --salesforce.sbqq_quote_c.sum_of_salary_bonus_c,
   --salesforce.sbqq_quote_c.sum_of_gp_fees_c,	
   --salesforce.sbqq_quote_c.salary_bonus_c,
   --salesforce.sbqq_quote_c.gp_fees_c,
   --salesforce.sbqq_quote_c.total_year_1_cost_c,
   --salesforce.sbqq_quote_c.total_subsequent_years_cost_c,
   --salesforce.sbqq_quote_c.estimated_monthly_cost_c,
   salesforce.sbqq_quote_c.total_of_chart_fees_c,
   --salesforce.sbqq_quote_c.monthly_sum_of_salary_c,
   --salesforce.sbqq_quote_c.gp_quote_name_c, 
   --salesforce.sbqq_quote_c.country_names_c, 
   --salesforce.sbqq_quote_c.countries_c, 
   --salesforce.sbqq_quote_c.vp_approver_c, 
   --salesforce.sbqq_quote_c.rsd_approved_c, 
   --salesforce.sbqq_quote_c.vp_approved_c, 
   --salesforce.sbqq_quote_c.c_level_approved_c, 
   --salesforce.sbqq_quote_c.manager_approver_c, 
   --salesforce.sbqq_quote_c.client_legal_entity_c, 
   --salesforce.sbqq_quote_c.h_2_pricebook_c, 
   --salesforce.sbqq_quote_c.number_of_professionals_on_quote_c, 
   --salesforce.sbqq_quote_c.pricebook_name_c, 
   --salesforce.sbqq_quote_c.complete_price_book_name_c, 
   salesforce.v_gp_sfdc_user_current.name AS Sales_Rep, 
   --salesforce.v_gp_sfdc_user_current.division, 
   --salesforce.v_gp_sfdc_user_current.department, 
   --salesforce.v_gp_sfdc_user_current.title, 
   salesforce.v_marketing_dashboard_pacific_time.lead_or_opp_id as opp_id, 
   --salesforce.v_marketing_dashboard_pacific_time.opportunity_name, 
   --salesforce.v_marketing_dashboard_pacific_time.oppotunity_type, 
   --salesforce.v_marketing_dashboard_pacific_time.opportunity_lead_source, 
   --salesforce.v_marketing_dashboard_pacific_time.stage_name, 
   salesforce.v_marketing_dashboard_pacific_time.is_won, 
   --salesforce.v_marketing_dashboard_pacific_time.account_id, 
   --salesforce.v_marketing_dashboard_pacific_time.opportunity__status__c, 
   --salesforce.v_marketing_dashboard_pacific_time.closed__lost__c, 
   --salesforce.v_marketing_dashboard_pacific_time.record_type_text_id_c, 
   --salesforce.v_marketing_dashboard_pacific_time.iso_code_2_digit_2__c, 
   salesforce.v_marketing_dashboard_pacific_time.region_iso__c as Region, 
   --salesforce.v_marketing_dashboard_pacific_time.total__professionals__c, 
   --salesforce.v_marketing_dashboard_pacific_time.won__professionals__c, 
   --salesforce.v_marketing_dashboard_pacific_time.lost__professionals__c, 
   --salesforce.v_marketing_dashboard_pacific_time.cal_date, 
   --salesforce.v_marketing_dashboard_pacific_time.pipeline_stage, 
   --salesforce.v_marketing_dashboard_pacific_time.partner_acquisition__c, 
   salesforce.currency_type.conversion_rate--, 
   --user_2.name AS vp_approver_c_name, 
   --user_3.name AS manager_approver_c_name 
FROM salesforce.v_marketing_dashboard_pacific_time 
LEFT JOIN salesforce.sbqq_quote_c 
ON salesforce.v_marketing_dashboard_pacific_time.lead_or_opp_id=salesforce.sbqq_quote_c.sbqq_opportunity_2_c 
LEFT JOIN salesforce.v_gp_sfdc_user_current  
ON salesforce.sbqq_quote_c.owner_id=salesforce.v_gp_sfdc_user_current.id 
LEFT JOIN salesforce.v_gp_sfdc_user_current as user_2 
ON salesforce.sbqq_quote_c.vp_approver_c=user_2.id  
LEFT JOIN salesforce.v_gp_sfdc_user_current as user_3 
ON salesforce.sbqq_quote_c.manager_approver_c=user_3.id 
LEFT JOIN salesforce.currency_type 
ON salesforce.sbqq_quote_c.currency_iso_code=salesforce.currency_type.iso_code
LEFT JOIN salesforce.v_gp_sfdc_account_current 
ON salesforce.sbqq_quote_c.sbqq_account_c=salesforce.v_gp_sfdc_account_current.id
WHERE salesforce.v_marketing_dashboard_pacific_time.pipeline_stage='Qualified Opportunity'
AND salesforce.sbqq_quote_c.owner_id NOT IN ('0050W000006pMziQAE','0056T000008HWABQA4','0050W000007m7IAQAY', '0050W000006cFR6QAM'))
SELECT *, row_number()over (partition by last_date.opp_id order by last_modified_date desc) 
FROM last_date"
2add5479-1d9a-0c49-d261-288ca8617b8c,Outreach - Calls,postgres,"SELECT
	u.name AS user_name,
	dt.relationship_user_id,
	dt.call_id,
	dt.name AS relationship_sequence_name,
	dt.date,
	CASE WHEN SUM(outbound) != 0 THEN SUM(outbound) ELSE 0 END AS outbound,
	CASE WHEN SUM(inbound) != 0 THEN SUM(inbound) ELSE 0 END AS inbound,
	CASE WHEN SUM(""Answered - Qualified"") != 0 THEN SUM(""Answered - Qualified"") ELSE 0 END AS ""Answered - Qualified"",
	CASE WHEN SUM(""Answered - Follow Up"") != 0 THEN SUM(""Answered - Follow Up"") ELSE 0 END AS ""Answered - Follow Up"",
	CASE WHEN SUM(""Answered - Hold for Future"") != 0 THEN SUM(""Answered - Hold for Future"") ELSE 0 END AS ""Answered - Hold for Future"",
	CASE WHEN SUM(""Answered - Not Interested"") != 0 THEN SUM(""Answered - Not Interested"") ELSE 0 END AS ""Answered - Not Interested"",
	CASE WHEN SUM(""Gatekeeper"") != 0 THEN SUM(""Gatekeeper"") ELSE 0 END AS ""Gatekeeper"",
	CASE WHEN SUM(""Left Voicemail"") != 0 THEN SUM(""Left Voicemail"") ELSE 0 END AS ""Left Voicemail"",
	CASE WHEN SUM(""No Answer"") != 0 THEN SUM(""No Answer"") ELSE 0 END AS ""No Answer"",
	CASE WHEN SUM(""Junk Lead - Wrong Information"") != 0 THEN SUM(""Junk Lead - Wrong Information"") ELSE 0 END AS ""Junk Lead - Wrong Information"",
	CASE WHEN SUM(""Junk Lead - Bad Number"") != 0 THEN SUM(""Junk Lead - Bad Number"") ELSE 0 END AS ""Junk Lead - Bad Number"",
	CASE WHEN SUM(""Junk Lead - Customer Profile"") != 0 THEN SUM(""Junk Lead - Customer Profile"") ELSE 0 END AS ""Junk Lead - Customer Profile"",
	CASE WHEN SUM(""Not Logged"") != 0 THEN SUM(""Not Logged"") ELSE 0 END AS ""Not Logged""
	/*CASE WHEN SUM(""Answered - Already has a solution"") != 0 THEN SUM(""Answered - Already has a solution"") ELSE 0 END AS ""Answered - Already has a solution"",
	CASE WHEN SUM(""Answered - Follow Up"") != 0 THEN SUM(""Answered - Follow Up"") ELSE 0 END AS ""Answered - Follow Up"",
	CASE WHEN SUM(""Answered - Hold for Future"") != 0 THEN SUM(""Answered - Hold for Future"") ELSE 0 END AS ""Answered - Hold for Future"",
	CASE WHEN SUM(""Answered - Just Researching"") != 0 THEN SUM(""Answered - Just Researching"") ELSE 0 END AS ""Answered - Just Researching"",
	CASE WHEN SUM(""Answered - Meeting Set"") != 0 THEN SUM(""Answered - Meeting Set"") ELSE 0 END AS ""Answered - Meeting Set"",
	CASE WHEN SUM(""Answered - No Longer with Company"") != 0 THEN SUM(""Answered - No Longer with Company"") ELSE 0 END AS ""Answered - No Longer with Company"",
	CASE WHEN SUM(""Answered - Not Interested"") != 0 THEN SUM(""Answered - Not Interested"") ELSE 0 END AS ""Answered - Not Interested"",
	CASE WHEN SUM(""Answered - Qualified"") != 0 THEN SUM(""Answered - Qualified"") ELSE 0 END AS ""Answered - Qualified"",
	CASE WHEN SUM(""Answered - Requested more Info"") != 0 THEN SUM(""Answered - Requested more Info"") ELSE 0 END AS ""Answered - Requested more Info"",
	CASE WHEN SUM(""Answered - Wrong Contact"") != 0 THEN SUM(""Answered - Wrong Contact"") ELSE 0 END AS ""Answered - Wrong Contact"",
	CASE WHEN SUM(""Bad Number"") != 0 THEN SUM(""Bad Number"") ELSE 0 END AS ""Bad Number"",
	CASE WHEN SUM(""Dropped Voicemail"") != 0 THEN SUM(""Dropped Voicemail"") ELSE 0 END AS ""Dropped Voicemail"",
	CASE WHEN SUM(""Gatekeeper"") != 0 THEN SUM(""Gatekeeper"") ELSE 0 END AS ""Gatekeeper"",
	CASE WHEN SUM(""Junk Lead - Bad Number"") != 0 THEN SUM(""Junk Lead - Bad Number"") ELSE 0 END AS ""Junk Lead - Bad Number"",
	CASE WHEN SUM(""Junk Lead -  Customer Profile"") != 0 THEN SUM(""Junk Lead -  Customer Profile"") ELSE 0 END AS ""Junk Lead -  Customer Profile"",
	CASE WHEN SUM(""Junk Lead - Wrong Information"") != 0 THEN SUM(""Junk Lead - Wrong Information"") ELSE 0 END AS ""Junk Lead - Wrong Information"",
	CASE WHEN SUM(""Left Voicemail"") != 0 THEN SUM(""Left Voicemail"") ELSE 0 END AS ""Left Voicemail"",
	CASE WHEN SUM(""No Answer"") != 0 THEN SUM(""No Answer"") ELSE 0 END AS ""No Answer"",
	CASE WHEN SUM(""Not Logged"") != 0 THEN SUM(""Not Logged"") ELSE 0 END AS ""Not Logged"",
	CASE WHEN SUM(""Orum"") != 0 THEN SUM(""Orum"") ELSE 0 END AS ""Orum""*/
	FROM
	(
	SELECT 
		call.id AS call_id,
		call.relationship_user_id,
		sequence.name,
		timezone('PDT'::text, date_trunc('hour', call.created_at::timestamp with time zone))::timestamp with time zone AS date,
			CASE WHEN call.direction = 'outbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS outbound,
			CASE WHEN call.direction = 'inbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS inbound,
			CASE WHEN disposition.name = 'Answered - Qualified' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Qualified"",
			CASE WHEN disposition.name = 'Answered - Follow Up' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Follow Up"",
			CASE WHEN disposition.name = 'Answered - Hold for Future' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Hold for Future"",
			CASE WHEN disposition.name = 'Answered - Not Interested' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Not Interested"",
			CASE WHEN disposition.name = 'Gatekeeper' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Gatekeeper"",
			CASE WHEN disposition.name = 'Left Voicemail' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Left Voicemail"",
			CASE WHEN disposition.name = 'No Answer' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""No Answer"",
			CASE WHEN disposition.name = 'Junk Lead - Bad Number' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Bad Number"",
			CASE WHEN disposition.name = 'Junk Lead -  Customer Profile ' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Customer Profile"",
			CASE WHEN disposition.name = 'Junk Lead - Wrong Information' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Wrong Information"",
			CASE WHEN disposition.name IS NULL THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Not Logged""
			/*CASE WHEN call.direction = 'outbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS outbound,
			CASE WHEN call.direction = 'inbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS inbound,
			CASE WHEN disposition.name = 'Answered - Already has a solution' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Already has a solution"",
			CASE WHEN disposition.name = 'Answered - Follow Up' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Follow Up"",
			CASE WHEN disposition.name = 'Answered - Hold for Future' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Hold for Future"",
			CASE WHEN disposition.name = 'Answered - Just Researching' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Just Researching"",
			CASE WHEN disposition.name = 'Answered - Meeting Set' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Meeting Set"",
			CASE WHEN disposition.name = 'Answered - No Longer with Company' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - No Longer with Company"",
			CASE WHEN disposition.name = 'Answered - Not Interested' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Not Interested"",
			CASE WHEN disposition.name = 'Answered - Qualified' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Qualified"",
			CASE WHEN disposition.name = 'Answered - Requested more Info' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Requested more Info"",
			CASE WHEN disposition.name = 'Answered - Wrong Contact' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Wrong Contact"",
			CASE WHEN disposition.name = 'Bad Number' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Bad Number"",
			CASE WHEN disposition.name = 'Junk Lead - Bad Number' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Bad Number"",
			CASE WHEN disposition.name = 'Junk Lead -  Customer Profile' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead -  Customer Profile"",
			CASE WHEN disposition.name = 'Junk Lead - Wrong Information' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Wrong Information"",
			CASE WHEN disposition.name = 'Left Voicemail' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Left Voicemail"",
			CASE WHEN disposition.name = 'No Answer' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""No Answer"",
			CASE WHEN disposition.name IS NULL THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Not Logged"",
			CASE WHEN disposition.name = 'Orum' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Orum""*/
	FROM outreach.v_outreach_call_current call
	LEFT JOIN outreach.v_outreach_call_disposition_current disposition
	ON call.relationship_call_disposition_id = disposition.id
	LEFT JOIN outreach.v_outreach_sequence_current sequence
	ON call.relationship_sequence_id = sequence.id
	--WHERE call.created_at::date BETWEEN '2022-11-01 AND '2021-11-30'
	) AS dt
LEFT JOIN outreach.v_outreach_users_current u
ON dt.relationship_user_id = u.id
GROUP BY 1, 2 , 3, 4, 5
ORDER BY 4 DESC"
2add5479-1d9a-0c49-d261-288ca8617b8c,Outreach - Calls,postgres,"SELECT user_team.user_id, team.name AS team_name
FROM outreach.user_team user_team
LEFT JOIN outreach.v_outreach_users_current users
ON user_team.user_id = users.id
LEFT JOIN outreach.v_outreach_team_current team
ON user_team.team_id = team.id"
2add5479-1d9a-0c49-d261-288ca8617b8c,Outreach - Calls,postgres,"SELECT call_tag.call_id, call_tag.tag_name
FROM outreach.call_tag call_tag"
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Error ratio (WOR Data),,
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Releases (WOR Data),,
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Escalated tickets,postgres,"SELECT CAST(""issue_multiselect_history"".""_fivetran_id"" AS TEXT) AS ""_fivetran_id"",
  ""issue_multiselect_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_multiselect_history)"",
  CAST(""issue_multiselect_history"".""author_id"" AS TEXT) AS ""author_id"",
  CAST(""issue_multiselect_history"".""field_id"" AS TEXT) AS ""field_id"",
  ""issue_multiselect_history"".""is_active"" AS ""is_active"",
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id"",
  ""issue_multiselect_history"".""time"" AS ""time"",
  CAST(""issue_multiselect_history"".""value"" AS TEXT) AS ""value""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where

""issue_multiselect_history"".field_id = 'labels' and ""issue_multiselect_history"".is_active = true and ""issue_multiselect_history"".value in  ('affects_payroll')"
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Escalated tickets,postgres,"with affectsVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (affectsVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""affectsVersionID"",
  ""issue_multiselect_history"".""value"" AS ""affectsVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'versions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from version
left join affectsVersion on version.""id (version)"" = affectsVersion.""affectsVersionID"""
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Escalated tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)""
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_10390','customfield_10397', 'customfield_10450','customfield_10470')"
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Escalated tickets,postgres,"with valueStreamDomain as (
select domain.name as TDomain, domain.Id as TDomainId, valueStream.name as TValueStream from jira_integration.field_option domain
left join jira_integration.field_option valueStream on valueStream.id = domain.parent_id
)

SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)"",
  valueStreamDomain.TDomain,
  valueStreamDomain.TValueStream
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" 
LEFT JOIN valueStreamDomain on CAST(valueStreamDomain.TDomainId as TEXT) = issue_field_history.value
where issue_field_history.is_active = true and issue_field_history.field_id in ('customfield_10459')"
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Escalated tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  cast(""issue_field_history"".""value"" as DATE) AS RCADate
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_11015')"
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Escalated tickets,postgres,"with fixVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (fixVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""fixVersionID"",
  ""issue_multiselect_history"".""value"" AS ""fixVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'fixVersions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from fixVersion
left join version on version.""id (version)"" = fixVersion.""fixVersionID"""
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Escalated tickets,postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
""issue_type"".""name"" as ""issueTypeName""
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
LEfT JOIN ""jira_integration"".""issue_type"" ""issue_type"" on ""issue_type"".id = ""issue"".""issue_type""

JOIN ""jira_integration"".""issue_multiselect_history"" ""labels"" on ""labels"".issue_id = ""issue"".id and ""labels"".field_id = 'labels' and ""labels"".is_active = true and ""labels"".value in  ('jira_escalated', 'tech_escalated', 'jira-escalated', 'apr-2021-bug-bash') 
where project in (10000,10103) and _fivetran_deleted = false"
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Escalated tickets,postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Automated Tests (WOR Data),,
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Zendesk from DW,postgres,"SELECT ""ticket"".""_fivetran_synced"" AS ""_fivetran_synced"",
  ""ticket"".""allow_channelback"" AS ""allow_channelback"",
  ""ticket"".""created_at"" AS ""created_at"",
  ""ticket"".""custom_acumatica_related"" AS ""custom_acumatica_related"",
  CAST(""ticket"".""custom_tech_case_type"" AS TEXT) AS ""custom_tech_case_type"",
  ""ticket"".""has_incidents"" AS ""has_incidents"",
  ""ticket"".""id"" AS ""id"",
  ""ticket"".""is_public"" AS ""is_public"",
  ""ticket"".""merged_ticket_ids"" AS ""merged_ticket_ids"",
  ""ticket"".""requester_id"" AS ""requester_id"",
  CAST(""ticket"".""type"" AS TEXT) AS ""type"",
  ""ticket"".""updated_at"" AS ""updated_at"",
  CAST(""ticket"".""url"" AS TEXT) AS ""url""
FROM ""zendesk"".""ticket"" ""ticket""
where ""ticket"".""organization_id"" is NOT null"
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Zendesk from DW,postgres,"SELECT ""ticket_tag"".""_fivetran_synced"" AS ""_fivetran_synced (ticket_tag)"",
  CAST(""ticket_tag"".""tag"" AS TEXT) AS ""tag"",
  ""ticket_tag"".""ticket_id"" AS ""ticket_id""
FROM ""zendesk"".""ticket_tag"" ""ticket_tag"" where ""tag"" in ('jira_escalated')"
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Releases details (Jira),postgres,"SELECT CAST(""issue_multiselect_history"".""_fivetran_id"" AS TEXT) AS ""_fivetran_id"",
  ""issue_multiselect_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_multiselect_history)"",
  CAST(""issue_multiselect_history"".""author_id"" AS TEXT) AS ""author_id"",
  CAST(""issue_multiselect_history"".""field_id"" AS TEXT) AS ""field_id"",
  ""issue_multiselect_history"".""is_active"" AS ""is_active"",
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id"",
  ""issue_multiselect_history"".""time"" AS ""time"",
  CAST(""issue_multiselect_history"".""value"" AS TEXT) AS ""value""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where

""issue_multiselect_history"".field_id = 'labels' and ""issue_multiselect_history"".is_active = true and ""issue_multiselect_history"".value in  ('automated-level0',
'automated-level1',
'automated-level2',
'automated-level3')"
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Releases details (Jira),,
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Releases details (Jira),postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
 CAST(""fixVersions"".""value"" as INT) as fixVersionID
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
JOIN ""jira_integration"".""issue_multiselect_history"" ""fixVersions"" on ""fixVersions"".issue_id = ""issue"".id and ""fixVersions"".field_id = 'fixVersions' and ""fixVersions"".is_active = true and ""fixVersions"".value is not NULL
where project in (10000,10103,10166,10164,10153,10010,10145) and _fivetran_deleted = false"
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Releases details (Jira),postgres,"with valueStreamDomain as (
select domain.name as TDomain, domain.Id as TDomainId, valueStream.name as TValueStream from jira_integration.field_option domain
left join jira_integration.field_option valueStream on valueStream.id = domain.parent_id
)

SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)"",
  valueStreamDomain.TDomain,
  valueStreamDomain.TValueStream
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" 
LEFT JOIN valueStreamDomain on CAST(valueStreamDomain.TDomainId as TEXT) = issue_field_history.value
where issue_field_history.is_active = true and issue_field_history.field_id in ('customfield_10459')"
2b3dae9a-aa99-60a5-3e6f-48c4419213be,Releases details (Jira),postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
2b4e6108-9ec1-5094-00b7-8057eb138b4e,Unassociated,postgres,"SELECT T3.NAME AS bILLING_CYCLE,
T2.PROFESSIONAL_ID, concat(t4.first_name,' ',t4.last_name) as Professional, t4.is_failed_to_launch, t8.name as Client, t8.is_demo_client,
T4.CLIENT_COUNTRY_ID,T5.COUNTRY_ID,T6.NAME as Country,
t1.client_bill_id,
case when t7.category_type='1' then 'Professional' when t7.category_type='2' then 'GP' when t7.category_type='3' then 'Professional Variable'
	when t7.category_type='4' then 'LSP Employer Social Costs' when t7.category_type='5' then 'LSP Fee' when t7.category_type='6' then 'Markup'
	end as Category,
	t7.category_type,
t7.name,
T1.amount,t1.currency,t10.name as currency_amount,
t1.notes,t1.internal_notes
FROM goglobal_gp_goglobal.v_gp_gg_client_bill_transaction_current T1
left join goglobal_gp_goglobal.v_gp_gg_client_bill_current t2
		on t1.client_bill_id=t2.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_billing_cycle_current t3
		on t2.billing_cycle_id=t3.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_PROFESSIONAL_CURRENT T4
	ON T2.PROFESSIONAL_ID=T4.ID
LEFT JOIN goglobal_gp_goglobal.V_GP_GG_CLIENT_COUNTRY_CURRENT T5
	ON T4.CLIENT_COUNTRY_ID=T5.ID
LEFT JOIN goglobal_gp_goglobal.V_GP_GG_COUNTRY_CURRENT T6
	ON T5.COUNTRY_ID=T6.ID
left join goglobal_gp_goglobal.v_gp_gg_billing_transaction_type_current t7
		on t1.billing_transaction_type_id=t7.id
left join goglobal_gp_goglobal.v_gp_gg_client_current t8
		on t4.client_id=t8.id
		LEFT JOIN goglobal_gp_goglobal.V_GP_GG_COUNTRY_CURRENT T10
		ON T1.currency=T10.ID
WHERE t7.category_type not in ('2'/*GP FEE*/,'6'/*Markup*/) and t1.lsp_invoice_id is null"
2b4e6108-9ec1-5094-00b7-8057eb138b4e,Associated,postgres,"with Professional as 
				(
					select t1.lsp_invoice_date,t1.id as lsp_invoice_id, t1.lsp_invoice_number,
					T2.client_bill_id , t2.description, t2.amount,t2.currency, t2.notes,t2.internal_notes,
					t1.invoice_fx_rate, t1.Lsp_fx_rate, billing_transaction_type_id,t1.lsp_country_id,t1.billing_cycle_id
					from goglobal_gp_goglobal.v_gp_gg_lsp_invoice_current t1
						left join goglobal_gp_goglobal.v_gp_gg_client_bill_transaction_current t2
							on t1.id=t2.lsp_invoice_id
				),
lsp_fees as 
			(
				select t1.lsp_invoice_date,t1.id as lsp_invoice_id, t1.lsp_invoice_number,
				T2.client_bill_id , null as description, t2.amount,t2.currency, t2.notes,null as internal_notes,
				t1.invoice_fx_rate, t1.Lsp_fx_rate, billing_transaction_type_id, t1.lsp_country_id,t1.billing_cycle_id
				from goglobal_gp_goglobal.v_gp_gg_lsp_invoice_current t1
				left join goglobal_gp_goglobal.v_gp_gg_lsp_invoice_transaction_current t2
						on t1.id=t2.lsp_invoice_id
			),
ASSOCIATED AS
			(
				select *
				from professional
				UNION ALL
				select *
				from lsp_fees
			)
SELECT 
T1.client_bill_id ,t1.lsp_invoice_date,t10.name as lsp,lsp_invoice_id, t1.lsp_invoice_number,
concat(t3.first_name,' ',t3.last_name)as Professional,t3.status as pro_status,t3.accounting_id as acumatica_id,
t4.name as client,t6.name as country,
case when t2.bill_type='1' then 'Setup' when t2.bill_type='2' then 'Deposit' when t2.bill_type='3' then 'First Bill' 
	 when t2.bill_type='4' then 'Regular' when t2.bill_type='5' then 'Exception' when t2.bill_type='6' then 'Credit Memo'
	 when t2.bill_type='8' then 'Deposit Refund' when t2.bill_type='9' then 'Expense' else t2.bill_type 
	 end as bill_type,
												
case when t7.category_type='1' then 'Professional' when t7.category_type='2' then 'GP' 
	 when t7.category_type='3' then 'Professional Variable' when t7.category_type='4' then 'LSP Employer Social Costs' 
	 when t7.category_type='5' then 'LSP Fee' when t7.category_type='6' then 'Markup' else t7.category_type
	end as Category,
t7.name as type,
 t1.description, t1.amount,t1.currency,t11.name as currency_name, t1.notes,t1.internal_notes,
				t1.invoice_fx_rate, t1.Lsp_fx_rate, t12.name as billing_cycle
FROM ASSOCIATED T1
left join goglobal_gp_goglobal.v_gp_gg_client_bill_current t2
		on t1.client_bill_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_professional_current t3
		on t2.professional_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_client_current t4
		on t3.client_id=t4.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current T5
	 	ON T3.LSP_COUNTRY_ID=T5.ID
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current T6
	 	ON T5.COUNTRY_ID=T6.ID
left join goglobal_gp_goglobal.v_gp_gg_billing_transaction_type_current t7
		on t1.billing_transaction_type_id=t7.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current T9
	 	ON T1.LSP_COUNTRY_ID=T9.ID
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_current T10
		ON T9.LSP_ID=T10.ID
LEFT JOIN goglobal_gp_goglobal.V_GP_GG_COUNTRY_CURRENT T11
		ON T1.currency=T11.ID
left join goglobal_gp_goglobal.v_gp_gg_billing_cycle_current t12
		on t1.billing_cycle_id=t12.id"
2d158e83-ac99-a889-976a-67a0e9284060,User Satisfaction Survey (gpbidb),postgres,"WITH region1 AS (
SELECT
	ra.response_id,
	qo.text as region
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '400008101' and q.subtype <<>> 'descriptive_text' and q.id='60041033'
	GROUP BY 1,2
),
department1 AS (
SELECT
	ra.response_id,
	qo.text as department
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '400008101' and q.subtype <<>> 'descriptive_text' and q.id='60041034'
	GROUP BY 1,2
),
tableau_user1 AS (
SELECT
	ra.response_id,
	qo.text as active_user
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '400008101' and q.subtype <<>> 'descriptive_text' and q.id='60042724'
	GROUP BY 1,2
),
whatcanbi1 AS (
SELECT
	ra.response_id,
	ra.text as resp_answer
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '400008101' and q.subtype <<>> 'descriptive_text' and q.id='60041038'
	GROUP BY 1,2
),
region2 AS (
SELECT
	ra.response_id,
	qo.text as Region
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310236566' and q.subtype <<>> 'descriptive_text' and q.id='690234916'
	GROUP BY 1,2
),
department2 AS (
SELECT
	ra.response_id,
	qo.text as Department
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310236566' and q.subtype <<>> 'descriptive_text' and q.id='690236885'
	GROUP BY 1,2
),
whatcanbi2 AS (
SELECT
	ra.response_id,
	ra.text as resp_answer
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310236566' and q.subtype <<>> 'descriptive_text' and q.id='715920040'
	GROUP BY 1,2
)
SELECT
	sh.id AS survey_id,
	c.id AS collector_id,
	c.created_at AS collector_created_date,
	c.name AS collector_name,
	sh.title AS suvey_name,
	region1.region,
	department1.department,
	tableau_user1.active_user,
	q.survey_page_id,
	q.id AS question_id ,
	q.family,
	q.subtype,
	q.required_text,
	CASE WHEN q.id = '60041033' THEN 'Based Region'
	WHEN q.id = '60041034' THEN 'Department'
	WHEN q.id = '60042724' THEN 'Are you an active Tableau user?' 
	WHEN q.id = '60041035' THEN 'Relevance of Information' 
	WHEN q.id = '60041036' THEN 'Report Layout' 
	WHEN q.id = '60041037' THEN 'Reliability on BI as partnership for Data' 
	WHEN q.id = '60043903' THEN 'Why?'
	WHEN q.id = '60041038' THEN 'What can the BI team do to improve its service?' 
	END AS heading,
	sq.text AS subquestion,
	r.email AS recipient_email,
	rh.response_status,
	rh.total_time as total_time,
	rh.created_at as start_date,
	rh.updated_at as end_date,
	ra.response_id,
	ra.choice_id,
	whatcanbi1.resp_answer AS ""What Can the BI team improve?"",
	qo.text,
	qo.weight,
	MAX(ra._fivetran_synced)
	FROM survey_monkey.survey_history sh
	LEFT JOIN  survey_monkey.survey_page sp
	ON sh.id = sp.survey_id
	LEFT JOIN survey_monkey.question q
	on sp.id = q.survey_page_id
	LEFT JOIN survey_monkey.question_heading qh
	on q.id = qh.question_id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.sub_question sq
 	on ra.row_id = sq.id
	LEFT JOIN survey_monkey.response_page rp
	ON ra.response_page_id = rp.id
	LEFT JOIN survey_monkey.response_history rh
	ON ra.response_id = rh.id
	LEFT JOIN survey_monkey.recipient r
	ON rh.recipient_id = r.id
	LEFT JOIN survey_monkey.question_option qo
	ON ra.choice_id = qo.id
	LEFT JOIN region1
	on ra.response_id = region1.response_id
	LEFT JOIN department1
	on ra.response_id = department1.response_id
	LEFT JOIN tableau_user1
	on ra.response_id = tableau_user1.response_id
	LEFT JOIN whatcanbi1
	on ra.response_id = whatcanbi1.response_id
	LEFT JOIN survey_monkey.collector c
	ON rh.collector_id = c.id
WHERE sh._fivetran_active = true AND
rh._fivetran_active = true AND
sh.id = '400008101' -- '310236566' and q.subtype <<>> 'descriptive_text'
AND c.id IN ('420195781','424951544')
--AND --q.id NOT IN ('60041033','60041034','60042724')
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
UNION
SELECT
	sh.id AS survey_id,
	c.id AS collector_id,
	c.created_at AS collector_created_date,
	c.name AS collector_name,
	sh.title AS suvey_name,
	region2.region,
	department2.department,
	NULL AS active_user,
	q.survey_page_id,
	q.id AS question_id ,
	q.family,
	q.subtype,
	q.required_text,
	CASE WHEN q.id = '690234916' THEN 'Based Region'
	WHEN q.id = '690236885' THEN 'Department'
	WHEN q.id = '690242612' THEN 'Relevance of Information' 
	WHEN q.id = '690244481' THEN 'Report Layout' 
	WHEN q.id = '690245467' THEN 'Reliability on BI as partnership for Data' 
	WHEN q.id = '715920040' THEN 'What can the BI team do to improve its service?'
	ELSE qh.heading END AS heading,
	sq.text AS subquestion,
	r.email AS recipient_email,
	rh.response_status,
	rh.total_time as total_time,
	rh.created_at as start_date,
	rh.updated_at as end_date,
	ra.response_id,
	ra.choice_id,
	whatcanbi2.resp_answer AS ""What Can the BI team improve?"",
	qo.text,
	qo.weight,
	MAX(ra._fivetran_synced)
	FROM survey_monkey.survey_history sh
	LEFT JOIN  survey_monkey.survey_page sp
	ON sh.id = sp.survey_id
	LEFT JOIN survey_monkey.question q
	on sp.id = q.survey_page_id
	LEFT JOIN survey_monkey.question_heading qh
	on q.id = qh.question_id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.sub_question sq
 	on ra.row_id = sq.id
	LEFT JOIN survey_monkey.response_page rp
	ON ra.response_page_id = rp.id
	LEFT JOIN survey_monkey.response_history rh
	ON ra.response_id = rh.id
	LEFT JOIN survey_monkey.recipient r
	ON rh.recipient_id = r.id
	LEFT JOIN survey_monkey.question_option qo
	ON ra.choice_id = qo.id
	LEFT JOIN region2
	on ra.response_id = region2.response_id
	LEFT JOIN department2
	on ra.response_id = department2.response_id
	LEFT JOIN whatcanbi2
	on ra.response_id = whatcanbi2.response_id
	LEFT JOIN survey_monkey.collector c
	ON rh.collector_id = c.id
WHERE sh._fivetran_active = true AND
rh._fivetran_active = true AND
sh.id = '310236566' -- '310236566' and q.subtype <<>> 'descriptive_text'
AND c.id = '410685906'
--AND --q.id NOT IN ('60041033','60041034','60042724')
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
ORDER BY 1"
2d513525-06aa-f54a-b474-6fba6cf83202,Custom SQL Query (gpbidb),,
2e4b1a51-c8bb-bb04-4017-88242d7fca1b,BI Summary KPIs,postgres,SELECT DISTINCT current_date
27e12de0-2de9-aad5-2ed5-40f8953001a1,leads_and_opportunities (silver_marketing.leads_and_opportunities) (silver_marketing),,
27e12de0-2de9-aad5-2ed5-40f8953001a1,v_gp_sfdc_marketing_dashboard (salesforce.v_gp_sfdc_marketing_dashboard) (gpbidb),,
330c99e4-1a88-3557-37fd-12d836be93e3,Custom SQL Query+ (gpbidb),postgres,"WITH Leads_Opps AS (
         SELECT DISTINCT 
                         CASE
                             WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                             ELSE date_trunc('month'::text, opps.created_date)
                             END                                 AS mql_cohort_month,
                         leads.id                                AS lead_id,
                         opps.b_d_r__date__c,
                         leads.is_converted,
                         opps.id                                 AS opp_id,
                         leads.converted_opportunity_id,
                         leads.country                           AS lead_country,
                         leads.status                            AS lead_status,
                         opps.opportunity__status__c             AS opp_status,
                         leads.country_code                      AS lead_country_code,
                         leads.lead_tier_c,
                         opps.lead_source_tier_c,
                         CASE
                             WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                             WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                             WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                             ELSE NULL::text
                             END                                 AS client_country,
                         CASE
                             WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                             WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                             WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL
                                 THEN account.client_region_billing_country
                             ELSE NULL::text
                             END                                 AS client_region,
                         leads.created_date                      AS mql_date,
                         leads.converted_date,
                         leads.partner_acquisition__c            AS partner_acq_leads,
                          usr_lead_opp.leads_owner_name,
                         usr_lead_opp.leads_owner_manager,
                         opps.created_date,
                         opps.sales__accepted__date__c           AS sal_accepted_date,
                         opps.s_a_l__c,
                         opps.s_a_l_by__sales__c,
                         opps.record_type_bi__c,
                         opps.close_date                         AS msa_date,
                         opps.stage_name,
                         opps.partner_acquisition__c             AS partner_acq_opps,
                         opps.is_won                             AS opp_won,
                         opps.record_type_text_id_c              AS record_type_opps,
                         usr_lead_opp.opps_owner_name,
                         usr_lead_opp.opps_owner_manager,
                         opps.name                               AS opp_name,
                         opps.type                               AS opp_type,
                         acc_partn.partner_level__c              AS partner_level,
                         opps.pricing_model__c                   AS pricing_model_opps,
                         CASE
                            WHEN leads.lead_source IS NULL THEN opps.lead_source
                            ELSE leads.lead_source
                            END::text                           AS lead_or_opp_source,
                        usr_lead_opp.partner_development_owner,
                        usr_lead_opp.bdr_owner_name,
                        usr_lead_opp.bdr_manager_name,
                         acc_partn.name                          AS partner,
                         acc_partn.client_region_billing_country AS partner_region,
                         account.type                            AS account_type,
                         account.pricing_model__c                AS acc_pricing_model,
                         CASE
                             WHEN (opps.record_type_bi__c IS NULL OR
                                   opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) AND
                                  (opps.partner_acquisition__c IS NULL OR
                                   opps.partner_acquisition__c::text <<>> 'Yes'::text) AND
                                  (opps.pricing_model__c IS NULL OR
                                   opps.pricing_model__c::text <<>> 'Contractor only'::text)
                                 THEN 'Non Partner Opp or Existing Business'::text
                             ELSE 'Partner Opp or Existing Business'::text
                             END                                 AS opp_go_flag,
                         opps.update_time                        AS fivetran_synced_opps,
                         acc_partn.billing_country               AS partner_country,
		 				 CASE 
							WHEN leads.converted_opportunity_id IS NULL THEN 1
	 					 	ELSE RANK()  OVER(PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date) END AS row_num
         FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
                  FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
                  LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
                  LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
		 		  --LEFT JOIN salesforce.v_gp_sfdc_user_current users ON users.id::text = opps.owner_id::text
                  --LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_id::text = leads.id::text OR usr_lead_opp.opp_id::text = opps.id::text
		 		  LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp on usr_lead_opp.lead_or_opp_id::text = CASE WHEN leads.id IS NULL 
	THEN opps.id ELSE leads.id END
     ),
	 
MQL as (
   Select Distinct
      'MQL' as Cohort_Stage,
      lead_id as lead_or_opp_id,
      MQL_Date::date as Point_time_date,
      *
   From Leads_Opps 
    WHERE (Leads_Opps.partner_acq_leads::text <<>> 'Yes'::text OR Leads_Opps.partner_acq_leads IS NULL) 
	AND Leads_Opps.lead_id IS NOT NULL
   ),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      Created_date::date as Point_time_date,
      *
   From Leads_Opps 
  WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.opp_id IS NOT NULL
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.s_a_l_by__sales__c::text = 'Yes'::text
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.opp_won = true
   ),
Opp_lost as (
   Select Distinct
      'Opp lost' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      --last_mod_date::date as Point_time_date,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
     WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.opp_won = false
   ),

Full_Union as (
   Select *
   From MQL
   Union All
   Select *
   From MQL_to_SQL
   Union AlL
   Select *
   From SQL_to_SAL
   Union AlL
   Select *
   From SAL_to_MSA
	Union All
   Select *
   From Opp_Lost
   )
SELECT * 
FROM Full_Union"
330c99e4-1a88-3557-37fd-12d836be93e3,Custom SQL Query+ (gpbidb),postgres,"SELECT opportunity.id, ofh.max AS opp_status_last_updated
   FROM salesforce.opportunity
     LEFT JOIN (SELECT DISTINCT t1.opportunity_id,
            max(t1.created_date) AS max
           FROM salesforce.opportunity_field_history t1
          WHERE t1.is_deleted = false AND t1.field::text = 'Opportunity_Status__c'::text AND t1.new_value::text = 'BDR Requalify'::text AND t1.created_date = (( SELECT max(tmax.created_date) AS max
                   FROM salesforce.opportunity_field_history tmax
                  WHERE t1.id::text = tmax.id::text))
          GROUP BY t1.opportunity_id) ofh ON ofh.opportunity_id::text = opportunity.id::text
  WHERE opportunity.is_deleted IS FALSE"
330c99e4-1a88-3557-37fd-12d836be93e3,Custom SQL Query+ (gpbidb),postgres,"SELECT lead.id, lh.max AS lead_status_last_updated
   FROM salesforce.v_gp_sfdc_lead_current_pacific_time lead
     LEFT JOIN ( SELECT DISTINCT t1.lead_id,
            max(t1.created_date) AS max
           FROM salesforce.lead_history t1
          WHERE t1.is_deleted = false AND t1.field::text = 'Status'::text AND (t1.new_value::text = 'Disqualified'::text OR t1.new_value::text = 'Nurture'::text) AND t1.created_date = (( SELECT max(tmax.created_date) AS max
                   FROM salesforce.lead_history tmax
                  WHERE t1.id::text = tmax.id::text))
          GROUP BY t1.lead_id) lh ON lh.lead_id::text = lead.id::text
  WHERE lead.created_date BETWEEN NOW() - INTERVAL '2 YEARS' AND NOW()
  --lead.is_deleted IS FALSE"
333d0eae-accd-9800-5bb6-1915b0c4ce1c,KB data snapshots,postgres,"SELECT sn.id, knowledge_article_id, 
	u1.name AS owner, u1.division AS owner_division, 
	u1.department AS owner_department, u1.title AS owner_title,
	is_deleted, validation_status, publish_status, version_number, 
	is_latest_version, is_visible_in_app, is_visible_in_pkb, is_visible_in_csp, is_visible_in_prm, sn.created_date, 
	u2.name AS creator, u2.division AS creator_division, 
	u2.department AS creator_department, u2.title AS creator_title,
	u3.name AS last_modifier, u3.division AS last_modifier_division, 
	u3.department AS last_modifier_department, u3.title AS last_modifier_title,
	sn.last_modified_date, 
	language, sn.title AS article_title,  summary, 
	article_number, 
        first_published_date::date, last_published_date, 
	article_created_by_id, 
	article_created_date::date, 
        article_total_view_count, 
	rt.name AS record_type,
	approved_c, article_department_c, 
	by_pass_approval_c, static_article_link_c, lessonly_resources_c, 
	reviewer_c, country_card_c, 
        run_time_snapshot::date,
        cal.first_of_month,
	CASE 
	WHEN run_time_snapshot::date = CURRENT_DATE THEN TRUE
	ELSE cal.last_of_month
	END AS last_of_month,
	cal.first_of_qtr,
	CASE
	WHEN run_time_snapshot::date = CURRENT_DATE THEN TRUE
	ELSE cal.last_of_qtr
	END AS last_of_qtr
	FROM salesforce.knowledge_base_custom_snapshots AS sn
	LEFT JOIN salesforce.user AS u1
	ON sn.owner_id = u1.id
	LEFT JOIN salesforce.user AS u2
	ON sn.created_by_id = u2.id
	LEFT JOIN salesforce.user AS u3
	ON sn.last_modified_by_id  = u3.id
	LEFT JOIN salesforce.record_type AS rt
	ON sn.record_type_id = rt.id
        LEFT JOIN repo.gp_calendar AS cal
	ON sn.run_time_snapshot::date = cal.cal_date
        WHERE article_department_c = 'Global Operations'"
33b2bd8c-5d3a-d747-cc10-e84e1d3590d0,v_gp_gg_master_client (goglobal_gp_goglobal.v_gp_gg_master_client) (gpbidb),,
3445ea32-4c53-298e-f272-3b5408f16668,Custom SQL Query (gpbidb),,
3445ea32-4c53-298e-f272-3b5408f16668,Custom SQL Query (gpbidb),postgres,"with a AS (
     select 
     c.professional_id,concat(t2.first_name,' ',t2.last_name) as pro,t2.status, t3.id as client_id, t3.name as Client, t5.name as Country,t6.name as currency_name,  t2.is_failed_to_launch, b.ar_account_id, 
     a.client_bill_id,c.billing_cycle_id, c.bill_type,c.accounting_id, lsp.legal_entity_name, a.notes as customer_notes, t2.accounting_id as pro_account_id, t2.contract_start_date, t2.payroll_start_date,
  CASE
   WHEN t4.is_gp_entity IS TRUE THEN 'GP Entity'::text
   WHEN t4.is_gp_entity IS FALSE THEN 'LSP Entity'::text
  ELSE 'UNKNOWN'::text
  END AS entity_status,
 CASE WHEN c.status='1' THEN 'Draft'
 WHEN c.status='2' THEN 'Client Approval'
 WHEN c.status='3' THEN 'Submitted'
 WHEN c.status='4' THEN 'LSP Approval'
 WHEN c.status='5' THEN 'LSP Submitted'
 WHEN c.status='6' THEN 'Ready to Validate'
 WHEN c.status='7' THEN 'Preparing Bill'
 WHEN c.status='8' THEN 'Generate Invoice'
 WHEN c.status='9' THEN 'Ready to Send'
 WHEN c.status='10' THEN 'Billed'
 WHEN c.status='11' THEN 'Paid'
 WHEN c.status='12' THEN 'Invoice in Progress'
 WHEN c.status='13' THEN 'Invoice Error'
  END as bill_status,
Case When t2.residency_status = '1' then 'US CITIZEN'
    When t2.residency_status = '2' THEN 'EXPAT'
	When t2.residency_status = '3' THEN 'Local National'
	When t2.residency_status = '4' THEN 'Third Country National'  
	Else 'Verify Residency Code' 
end as Residency_status,
Case When t3.pricing_model = 0 then 'Enterprise' 
 	  When t3.pricing_model = 1 then 'Standard'
 	Else 'Verify Pricing Model' end as Pricing_Model,
	d.start_date,
	b.category_type,
	 CASE
                    WHEN b.category_type::text = '1'::text THEN 'Professional'::character varying
                    WHEN b.category_type::text = '2'::text THEN 'GP Fees'::character varying
                    WHEN b.category_type::text = '3'::text THEN 'Professional Variable'::character varying
                    WHEN b.category_type::text = '6'::text THEN 'Markup Transactions'::character varying
                    ELSE b.category_type
                END AS category,
 	b.name as type,
     Case 
        When t2.service_class = '1' then 'PEO'
        When t2.service_class = '2' then 'ASO'
        When t2.service_class = '3' then 'Services'
        When t2.service_class = '4' then 'Contractor'
        Else 'Review Code'
    End as Pro_Service_Class,
    Case 
        When c.document_type='1' then 'Invoice'
	    When c.document_type='2' then 'Credit Memo'
	End as document_type,
	a.amount AS local_amount,
            t6.name AS local_currency,
	a.currency,t3.preferring_billing_currency,T8.NAME AS PREFERRING_CURRENCY_NAME,C.LEGACY,c.fx_rate,a.target_currency_fxrate, A.LSP_INVOICE_ID,a.amount AS AMOUNT, T7.INVOICE_FX_RATE
from goglobal_gp_goglobal.v_gp_gg_client_bill_transaction_current a 
left join goglobal_gp_goglobal.v_gp_gg_billing_transaction_type_current b on a.billing_transaction_type_id=b.id
left join goglobal_gp_goglobal.v_gp_gg_client_bill_current c on c.id=a.client_bill_id
left join goglobal_gp_goglobal.v_gp_gg_billing_cycle_current d on c.billing_cycle_id=d.id
 left join goglobal_gp_goglobal.v_gp_gg_professional_current t2 on c.professional_id=t2.id 
left join goglobal_gp_goglobal.v_gp_gg_client_current t3 on t2.client_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t4 on t2.lsp_country_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_current_mat lsp on t4.lsp_id = lsp.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t5 on t4.country_id=t5.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t6 on a.currency=t6.id
LEFT JOIN GOGLOBAL_gp_GOGLOBAL.V_GP_GG_lsp_invoice_CURRENT T7 on A.LSP_INVOICE_ID=T7.ID
left join goglobal_gp_goglobal.v_gp_gg_country_current t8 on T3.PREFERRING_BILLING_currency=t8.id
order by 7,8,14
),


MDM_Catalogue as (
	/*Code to bring the Universal MDM ID into total bills dashboard*/
	Select distinct 
		parent_name, parent_taxonomyitemid as MDM_ID, source_id::bigint as MDM_GPP_ID
	from repo.v_gp_mdm_customer 
	where source = 'GoGlobal Client' 
	Order by source_id::bigint
),
B AS(
	select a.*, case when currency=preferring_billing_currency then '1' else '0' end as IND
	FROM A),
c as(SELECT B.*,
	CASE WHEN IND='1'  THEN B.AMOUNT 
             WHEN (IND='0' AND LEGACY='true') then (b.amount*b.invoice_fx_rate)
             When (ind='0' and legacy='false' and target_currency_fxrate is not null)  then (b.amount * b.target_currency_fxrate)
             When (ind='0' and legacy='false' and target_currency_fxrate is null)  then (b.amount * b.fx_rate)
	else null 
	END AS BILL_FIN, 
        Case When category_type = '2' then b.amount
	Else
            CASE When IND='1'  THEN B.AMOUNT 
		 When (IND='0' AND LEGACY='true') then (b.amount*b.invoice_fx_rate)
		 When (ind='0' and legacy='false' and target_currency_fxrate is not null)  then (b.amount * b.target_currency_fxrate)
		 When (ind='0' and legacy='false' and target_currency_fxrate is null)  then (b.amount * b.fx_rate)
             Else null end 
	END AS BILL_FIN_NEW,
        Case 
            When category_type = '2' then b.currency_name
	Else b.preferring_currency_name
	End as currency_billed
FROM B), 
Last as (
	select distinct 
		contract_start_date, payroll_start_date, Residency_status, pro_account_id, legal_entity_name, entity_status, is_failed_to_launch, 
		ar_account_id, client_id,  client, Pricing_Model, document_type,category_type,category,local_amount,local_currency, country, professional_id, pro, customer_notes, Pro_Service_Class,
		client_bill_id, accounting_id, billing_cycle_id, start_date, type, preferring_currency_name as Preferred_Currency, 
		currency_billed as Currency, bill_status, sum(bill_fin_new), sum(bill_fin) as Sum_bill_fin_previous
	from c
	group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29
	order by billing_cycle_id,accounting_id
		 ), 
fee_bucket as (
	Select Distinct
		start_date, fee_bucket, professional_id, client_id,net_revenue
	FROM ltv_analysis.v_ltv_int_fee_buckets
	Where fee_bucket is not null and date_trunc('month', start_date)<<>> date_trunc('month', now()::date)
	Order by professional_id, start_date desc
				)
Select distinct
	Last.*, 
	Case When Currency NOT IN ('Australian Dollar', 'Canadian Dollar', 'European Euro', 'Pound Sterling', 'Singapore Dollar', 'United States Dollar') and Sum_bill_fin_previous is null then sum
		 When Currency NOT IN ('Australian Dollar', 'Canadian Dollar', 'European Euro', 'Pound Sterling', 'Singapore Dollar', 'United States Dollar') and Sum_bill_fin_previous is not null then Sum_bill_fin_previous
	Else sum 
	end as Review_New_Total_Bill_Logic, 
	Case When Currency NOT IN ('Australian Dollar', 'Canadian Dollar', 'European Euro', 'Pound Sterling', 'Singapore Dollar', 'United States Dollar')  then Preferred_Currency
	Else Currency
	End as Review_New_Currency_Logic, 
	fee_bucket.fee_bucket 
From Last 
Left Join fee_bucket on (Last.professional_id = fee_bucket.professional_id and Last.start_date = fee_bucket.start_date)"
35ca4651-9c71-c86b-5bbf-ec7b6de44bfa,Custom SQL Query (gpbidb),postgres,"With
Master_Marketing as (
        Select Distinct 
            Extract(year from MQL_Cohort_Month) as MQL_Cohort_Year, 
            Extract(quarter from MQL_Cohort_Month) as MQL_Cohort_Quarter, 
            MQL_Cohort_Month,
            (DATE_PART('year', Point_time_date) - DATE_PART('year', MQL_Cohort_Month::date)) * 12 +
            (DATE_PART('month', Point_time_date) - DATE_PART('month', MQL_Cohort_Month::date)) as Month_Difference,
            Cohort_stage,
            Tier,
            lead_or_opp_id
        From salesforce.v_gp_sfdc_marketing_dashboard
        Where MQL_Cohort_Month >>= '2019-01-01'
        AND (opp_type::text <<>> 'Existing Business'::text OR opp_type IS NULL)
        order by Cohort_stage, MQL_Cohort_Month, Extract(quarter from MQL_Cohort_Month) asc
        ),
Year_Quarter_Cohorts as (
        Select Distinct 
            Extract(year from MQL_Cohort_Month) as MQL_Cohort_Year, 
            Extract(quarter from MQL_Cohort_Month) as MQL_Cohort_Quarter, 
            Cohort_stage, 
            Case 
                When cohort_stage = 'MQL' then 'MQL to SQL'
                When cohort_stage = 'MQL to SQL' then 'SQL to SAL'
                When cohort_stage = 'SQL to SAL' then 'SAL to MSA'
            End as Previous_Stage_Count,
            Tier,
            count(distinct lead_or_opp_id) as Unique_Leads_or_Opps
        From salesforce.v_gp_sfdc_marketing_dashboard
        Where MQL_Cohort_Month >>= '2019-01-01'
        AND (opp_type::text <<>> 'Existing Business'::text OR opp_type IS NULL)
        group by 1,2,3,4,5
        order by Cohort_stage, Extract(year from MQL_Cohort_Month), Extract(quarter from MQL_Cohort_Month) asc
        ) 
Select Distinct 
    Master_Marketing.*,
    Year_Cohort.Unique_Leads_or_Opps as Year_Cohort_Count, 
    Quarter_Cohort.Unique_Leads_or_Opps as Quarter_Cohort_Count
From Master_Marketing
Left Join Year_Quarter_Cohorts Quarter_Cohort on Master_Marketing.MQL_Cohort_Year = Quarter_Cohort.MQL_Cohort_Year and Master_Marketing.MQL_Cohort_Quarter = Quarter_Cohort.MQL_Cohort_Quarter and Master_Marketing.Cohort_Stage = Quarter_Cohort.Previous_Stage_Count and Master_Marketing.Tier = Quarter_Cohort.Tier
Left Join (Select Distinct MQL_Cohort_Year, Previous_Stage_Count, Tier, Sum(Unique_Leads_or_Opps) as Unique_Leads_or_Opps From Year_Quarter_Cohorts Group by 1,2,3 ) Year_Cohort on Master_Marketing.MQL_Cohort_Year = Year_Cohort.MQL_Cohort_Year and Master_Marketing.Cohort_Stage = Year_Cohort.Previous_Stage_Count and Master_Marketing.Tier = Year_Cohort.Tier
Order by Master_Marketing.Cohort_Stage, Master_Marketing.MQL_Cohort_Month, Master_Marketing.Month_Difference asc"
38d8d3ed-481d-5aaa-6304-dd817eb1c790,v_gp_sfdc_marketing_dashboard (salesforce.v_gp_sfdc_marketing_dashboard) (gpbidb),,
38f50521-f4c0-41b4-0281-37a9a84920d5,Custom SQL Query (gpbidb),postgres,"select distinct  
	max(fivetran_synced_opps) as last_data_updated
from
	salesforce.v_gp_sfdc_marketing_dashboard"
38f50521-f4c0-41b4-0281-37a9a84920d5,v_gp_sfdc_opportunity_current_pacific_time (salesforce.v_gp_sfdc_opportunity_current_pacific_time)+ (gpbidb),postgres,"WITH v_gp_sfdc_leads_and_opportunities AS (
         SELECT DISTINCT account.id AS account_id,
            account.name AS account_name,
                CASE
                    WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    ELSE date_trunc('month'::text, opps.created_date)
                END AS mql_cohort_month,
            leads.id AS lead_id,
            opps.b_d_r__date__c,
            opps.id AS opp_id,
            leads.is_converted,
            leads.converted_opportunity_id,
            leads.country AS lead_country,
            leads.campaign__source__c AS campaign_name,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    ELSE NULL::text
                END AS lead_disqualified_reason,
            leads.status AS lead_status,
            opps.opportunity__status__c AS opp_status,
            opps.closed__lost__c,
            leads.country_code AS lead_country_code,
            leads.lead_tier_c,
            opps.lead_source_tier_c,
            leads.bdr_unqualified_reason__c AS bdr_unqualified_reason,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    ELSE NULL::text
                END AS country_code,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    ELSE NULL::text
                END AS client_country,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    ELSE NULL::text
                END AS client_region,
            leads.created_date AS mql_date,
            leads.converted_date,
            leads.partner_acquisition__c AS partner_acq_leads,
            -- usr_lead_opp.leads_owner_name,
            -- usr_lead_opp.leads_owner_manager,
            opps.created_date,
            opps.sales__accepted__date__c AS sal_accepted_date,
            opps.s_a_l__c,
            opps.s_a_l_by__sales__c,
            opps.record_type_bi__c,
            opps.close_date AS msa_date,
            opps.stage_name,
            opps.partner_acquisition__c AS partner_acq_opps,
            opps.is_won AS opp_won,
            opps.record_type_text_id_c AS record_type_opps,
            -- usr_lead_opp.opps_owner_name,
            -- usr_lead_opp.opps_owner_manager,
            opps.name AS opp_name,
            opps.type AS opp_type,
            acc_partn.partner_level__c AS partner_level,
            opps.pricing_model__c AS pricing_model_opps,
                CASE
                    WHEN leads.lead_source IS NULL THEN opps.lead_source
                    ELSE leads.lead_source
                END::text AS lead_or_opp_source,
            -- usr_lead_opp.partner_development_owner,
            -- usr_lead_opp.bdr_owner_name,
            -- usr_lead_opp.bdr_manager_name,
            acc_partn.name AS partner,
            acc_partn.client_region_billing_country AS partner_region,
            account.type AS account_type,
            account.pricing_model__c AS acc_pricing_model,
                CASE
                    WHEN (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) 
	 				AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) 
	 				-- AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text) 
	 				THEN 'Non Partner Opp or Existing Business'::text
                    ELSE 'Partner Opp or Existing Business'::text
                END AS opp_go_flag,
            opps.immediate_headcount_c,
            opps.headcount_c,
            opps.de_country_c,
            opps.closed_lost_category_detail_c,
            opps.incumbent_solution_c,
            opps.competitorsthatare_involved_c,
            opps.contact_id,
            opps.primary_quotes_pricing_model_c,
            opps.competitors__involved__c,
            opps.other__competitor__c,
            opps.update_time AS fivetran_synced_opps,
            opps.total_professionals_c,
            leads.update_time AS fivetran_synced_leads,
            leads.company,
            leads.name,
            leads.email,
            acc_partn.billing_country AS partner_country,
            opps.existing_business_deal_classification_c,
            opps.existing_business_opp_type_c,
            opps.existing_business_opp_type_detail_c,
            users.name AS opp_owner_name,
            acc_partn.partner_agreement_effective_date__c AS partner_agreement_effective_date_c,
                CASE
                    WHEN leads.converted_opportunity_id IS NULL THEN 1::bigint
                    ELSE rank() OVER (PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date)
                END AS row_num,
            acc_partn.partner_vertical__c,
            acc_partn.vital_few__c as vital_few_partner,
			account.vital_few__c as vital_few_account,
            opps.opportunity_score_segment_c AS opps_score_segment,
            leads.opportunity_score_segment_c AS lead_score_segment,
			account.billing_country,
			users.manager_id,
			users.user_region_c as owner_region,
			users.is_active as owner_active,
			users.created_date as owner_created_date,
			opps.partner_development_owner_lookup__c,
			opps.owner_id,
			opps.sales_title_c_c,
 			opps.engagement__type__c,
            opps.sales_motion_formula__c AS sales_motion_opp,
            leads.sales_motion_formula__c AS sales_motion_lead,
            opps.manager_reviewed_sal__c
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
             LEFT JOIN salesforce.v_gp_sfdc_user_current users ON users.id::text = opps.owner_id::text
             --LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_or_opp_id::text =
    				-- CASE
                    -- WHEN leads.id IS NULL THEN opps.id
                    -- ELSE leads.id
                -- END::text
        ), mql AS (
         SELECT DISTINCT 'MQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.lead_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.mql_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            -- v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            -- v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.sales_motion_lead AS sales_motion,
            v_gp_sfdc_leads_and_opportunities.manager_reviewed_sal__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE (v_gp_sfdc_leads_and_opportunities.partner_acq_leads::text <<>> 'Yes'::text OR v_gp_sfdc_leads_and_opportunities.partner_acq_leads IS NULL) AND v_gp_sfdc_leads_and_opportunities.lead_id IS NOT NULL
        ), mql_to_sql AS (
         SELECT DISTINCT 'MQL to SQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.created_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion,
            v_gp_sfdc_leads_and_opportunities.manager_reviewed_sal__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_id IS NOT NULL
        ), sql_to_sal AS (
         SELECT DISTINCT 'SQL to SAL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion,
            v_gp_sfdc_leads_and_opportunities.manager_reviewed_sal__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c::text = 'Yes'::text
        ), sal_to_msa AS (
         SELECT DISTINCT 'SAL to MSA'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion,
            v_gp_sfdc_leads_and_opportunities.manager_reviewed_sal__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = true
        ), closed_lost AS (
         SELECT DISTINCT 'Closed Lost'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c,
            v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion,
            v_gp_sfdc_leads_and_opportunities.manager_reviewed_sal__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = false AND v_gp_sfdc_leads_and_opportunities.stage_name::text = 'Closed Lost'::text
        ), full_union AS (
         SELECT mql.cohort_stage,
            mql.account_id,
            mql.account_name,
            mql.b_d_r__date__c,
            mql.lead_or_opp_id,
            mql.point_time_date,
            mql.mql_cohort_month,
            mql.lead_id,
            mql.opp_id,
            mql.is_converted,
            mql.converted_opportunity_id,
            mql.lead_country,
            mql.campaign_name,
            mql.lead_disqualified_reason,
            mql.lead_status,
            mql.opp_status,
            mql.closed__lost__c,
            mql.lead_country_code,
            mql.country_code,
            mql.tier,
            mql.bdr_unqualified_reason,
            mql.client_region,
            mql.client_country,
            mql.mql_date,
            mql.converted_date,
            mql.partner_acq_leads,
            --mql.leads_owner_name,
            --mql.leads_owner_manager,
            mql.created_date,
            mql.sal_accepted_date,
            mql.s_a_l__c,
            mql.s_a_l_by__sales__c,
            mql.record_type_bi__c,
            mql.msa_date,
            mql.stage_name,
            mql.partner_acq_opps,
            mql.opp_won,
            mql.record_type_opps,
            mql.pricing_model_opps,
            --mql.opps_owner_name,
            --mql.opps_owner_manager,
            mql.opp_name,
            mql.opp_type,
            mql.partner_level,
            mql.lead_or_opp_source,
            --mql.partner_development_owner,
            --mql.bdr_owner_name,
            --mql.bdr_manager_name,
            mql.partner,
            mql.partner_region,
            mql.account_type,
            mql.acc_pricing_model,
            mql.opp_go_flag,
            mql.immediate_headcount_c,
            mql.headcount_c,
            mql.de_country_c,
            mql.closed_lost_category_detail_c,
            mql.incumbent_solution_c,
            mql.competitorsthatare_involved_c,
            mql.contact_id,
            mql.primary_quotes_pricing_model_c,
            mql.competitors__involved__c,
            mql.other__competitor__c,
            mql.fivetran_synced_opps,
            mql.fivetran_synced_leads,
            mql.partner_country,
            mql.existing_business_deal_classification_c,
            mql.existing_business_opp_type_c,
            mql.existing_business_opp_type_detail_c,
            mql.opp_owner_name,
            mql.row_num,
            mql.partner_vertical__c,
            mql.vital_few_partner,
			mql.vital_few_account,
            mql.partner_agreement_effective_date_c,
            mql.opps_score_segment,
            mql.lead_score_segment,
			mql.billing_country,
			mql.manager_id,
			mql.owner_region,
			mql.owner_active,
			mql.owner_created_date,
			mql.partner_development_owner_lookup__c,
			mql.owner_id,
			mql.sales_title_c_c,
 			mql.engagement__type__c,
            mql.sales_motion,
            mql.manager_reviewed_sal__c
           FROM mql
        UNION ALL
         SELECT mql_to_sql.cohort_stage,
            mql_to_sql.account_id,
            mql_to_sql.account_name,
            mql_to_sql.b_d_r__date__c,
            mql_to_sql.lead_or_opp_id,
            mql_to_sql.point_time_date,
            mql_to_sql.mql_cohort_month,
            mql_to_sql.lead_id,
            mql_to_sql.opp_id,
            mql_to_sql.is_converted,
            mql_to_sql.converted_opportunity_id,
            mql_to_sql.lead_country,
            mql_to_sql.campaign_name,
            mql_to_sql.lead_disqualified_reason,
            mql_to_sql.lead_status,
            mql_to_sql.opp_status,
            mql_to_sql.closed__lost__c,
            mql_to_sql.lead_country_code,
            mql_to_sql.country_code,
            mql_to_sql.tier,
            mql_to_sql.bdr_unqualified_reason,
            mql_to_sql.client_region,
            mql_to_sql.client_country,
            mql_to_sql.mql_date,
            mql_to_sql.converted_date,
            mql_to_sql.partner_acq_leads,
            --mql_to_sql.leads_owner_name,
           -- mql_to_sql.leads_owner_manager,
            mql_to_sql.created_date,
            mql_to_sql.sal_accepted_date,
            mql_to_sql.s_a_l__c,
            mql_to_sql.s_a_l_by__sales__c,
            mql_to_sql.record_type_bi__c,
            mql_to_sql.msa_date,
            mql_to_sql.stage_name,
            mql_to_sql.partner_acq_opps,
            mql_to_sql.opp_won,
            mql_to_sql.record_type_opps,
            mql_to_sql.pricing_model_opps,
            --mql_to_sql.opps_owner_name,
            --mql_to_sql.opps_owner_manager,
            mql_to_sql.opp_name,
            mql_to_sql.opp_type,
            mql_to_sql.partner_level,
            mql_to_sql.lead_or_opp_source,
            --mql_to_sql.partner_development_owner,
            --mql_to_sql.bdr_owner_name,
            --mql_to_sql.bdr_manager_name,
            mql_to_sql.partner,
            mql_to_sql.partner_region,
            mql_to_sql.account_type,
            mql_to_sql.acc_pricing_model,
            mql_to_sql.opp_go_flag,
            mql_to_sql.immediate_headcount_c,
            mql_to_sql.headcount_c,
            mql_to_sql.de_country_c,
            mql_to_sql.closed_lost_category_detail_c,
            mql_to_sql.incumbent_solution_c,
            mql_to_sql.competitorsthatare_involved_c,
            mql_to_sql.contact_id,
            mql_to_sql.primary_quotes_pricing_model_c,
            mql_to_sql.competitors__involved__c,
            mql_to_sql.other__competitor__c,
            mql_to_sql.fivetran_synced_opps,
            mql_to_sql.fivetran_synced_leads,
            mql_to_sql.partner_country,
            mql_to_sql.existing_business_deal_classification_c,
            mql_to_sql.existing_business_opp_type_c,
            mql_to_sql.existing_business_opp_type_detail_c,
            mql_to_sql.opp_owner_name,
            mql_to_sql.row_num,
            mql_to_sql.partner_vertical__c,
            mql_to_sql.vital_few_partner,
			mql_to_sql.vital_few_account,
            mql_to_sql.partner_agreement_effective_date_c,
            mql_to_sql.opps_score_segment,
            mql_to_sql.lead_score_segment,
			mql_to_sql.billing_country,
			mql_to_sql.manager_id,
			mql_to_sql.owner_region,
			mql_to_sql.owner_active,
			mql_to_sql.owner_created_date,
			mql_to_sql.partner_development_owner_lookup__c,
			mql_to_sql.owner_id,
			mql_to_sql.sales_title_c_c,
 			mql_to_sql.engagement__type__c,
            mql_to_sql.sales_motion,
            mql_to_sql.manager_reviewed_sal__c
           FROM mql_to_sql
        UNION ALL
         SELECT sql_to_sal.cohort_stage,
            sql_to_sal.account_id,
            sql_to_sal.account_name,
            sql_to_sal.b_d_r__date__c,
            sql_to_sal.lead_or_opp_id,
            sql_to_sal.point_time_date,
            sql_to_sal.mql_cohort_month,
            sql_to_sal.lead_id,
            sql_to_sal.opp_id,
            sql_to_sal.is_converted,
            sql_to_sal.converted_opportunity_id,
            sql_to_sal.lead_country,
            sql_to_sal.campaign_name,
            sql_to_sal.lead_disqualified_reason,
            sql_to_sal.lead_status,
            sql_to_sal.opp_status,
            sql_to_sal.closed__lost__c,
            sql_to_sal.lead_country_code,
            sql_to_sal.country_code,
            sql_to_sal.tier,
            sql_to_sal.bdr_unqualified_reason,
            sql_to_sal.client_region,
            sql_to_sal.client_country,
            sql_to_sal.mql_date,
            sql_to_sal.converted_date,
            sql_to_sal.partner_acq_leads,
            --sql_to_sal.leads_owner_name,
            --sql_to_sal.leads_owner_manager,
            sql_to_sal.created_date,
            sql_to_sal.sal_accepted_date,
            sql_to_sal.s_a_l__c,
            sql_to_sal.s_a_l_by__sales__c,
            sql_to_sal.record_type_bi__c,
            sql_to_sal.msa_date,
            sql_to_sal.stage_name,
            sql_to_sal.partner_acq_opps,
            sql_to_sal.opp_won,
            sql_to_sal.record_type_opps,
            sql_to_sal.pricing_model_opps,
            --sql_to_sal.opps_owner_name,
            --sql_to_sal.opps_owner_manager,
            sql_to_sal.opp_name,
            sql_to_sal.opp_type,
            sql_to_sal.partner_level,
            sql_to_sal.lead_or_opp_source,
            --sql_to_sal.partner_development_owner,
            --sql_to_sal.bdr_owner_name,
            --sql_to_sal.bdr_manager_name,
            sql_to_sal.partner,
            sql_to_sal.partner_region,
            sql_to_sal.account_type,
            sql_to_sal.acc_pricing_model,
            sql_to_sal.opp_go_flag,
            sql_to_sal.immediate_headcount_c,
            sql_to_sal.headcount_c,
            sql_to_sal.de_country_c,
            sql_to_sal.closed_lost_category_detail_c,
            sql_to_sal.incumbent_solution_c,
            sql_to_sal.competitorsthatare_involved_c,
            sql_to_sal.contact_id,
            sql_to_sal.primary_quotes_pricing_model_c,
            sql_to_sal.competitors__involved__c,
            sql_to_sal.other__competitor__c,
            sql_to_sal.fivetran_synced_opps,
            sql_to_sal.fivetran_synced_leads,
            sql_to_sal.partner_country,
            sql_to_sal.existing_business_deal_classification_c,
            sql_to_sal.existing_business_opp_type_c,
            sql_to_sal.existing_business_opp_type_detail_c,
            sql_to_sal.opp_owner_name,
            sql_to_sal.row_num,
            sql_to_sal.partner_vertical__c,
            sql_to_sal.vital_few_partner,
			sql_to_sal.vital_few_account,
            sql_to_sal.partner_agreement_effective_date_c,
            sql_to_sal.opps_score_segment,
            sql_to_sal.lead_score_segment,
			sql_to_sal.billing_country,
			sql_to_sal.manager_id,
			sql_to_sal.owner_region,
			sql_to_sal.owner_active,
			sql_to_sal.owner_created_date,
			sql_to_sal.partner_development_owner_lookup__c,
			sql_to_sal.owner_id,
			sql_to_sal.sales_title_c_c,
 			sql_to_sal.engagement__type__c,
            sql_to_sal.sales_motion,
            sql_to_sal.manager_reviewed_sal__c
           FROM sql_to_sal
        UNION ALL
         SELECT sal_to_msa.cohort_stage,
            sal_to_msa.account_id,
            sal_to_msa.account_name,
            sal_to_msa.b_d_r__date__c,
            sal_to_msa.lead_or_opp_id,
            sal_to_msa.point_time_date,
            sal_to_msa.mql_cohort_month,
            sal_to_msa.lead_id,
            sal_to_msa.opp_id,
            sal_to_msa.is_converted,
            sal_to_msa.converted_opportunity_id,
            sal_to_msa.lead_country,
            sal_to_msa.campaign_name,
            sal_to_msa.lead_disqualified_reason,
            sal_to_msa.lead_status,
            sal_to_msa.opp_status,
            sal_to_msa.closed__lost__c,
            sal_to_msa.lead_country_code,
            sal_to_msa.country_code,
            sal_to_msa.tier,
            sal_to_msa.bdr_unqualified_reason,
            sal_to_msa.client_region,
            sal_to_msa.client_country,
            sal_to_msa.mql_date,
            sal_to_msa.converted_date,
            sal_to_msa.partner_acq_leads,
            --sal_to_msa.leads_owner_name,
            --sal_to_msa.leads_owner_manager,
            sal_to_msa.created_date,
            sal_to_msa.sal_accepted_date,
            sal_to_msa.s_a_l__c,
            sal_to_msa.s_a_l_by__sales__c,
            sal_to_msa.record_type_bi__c,
            sal_to_msa.msa_date,
            sal_to_msa.stage_name,
            sal_to_msa.partner_acq_opps,
            sal_to_msa.opp_won,
            sal_to_msa.record_type_opps,
            sal_to_msa.pricing_model_opps,
            --sal_to_msa.opps_owner_name,
            --sal_to_msa.opps_owner_manager,
            sal_to_msa.opp_name,
            sal_to_msa.opp_type,
            sal_to_msa.partner_level,
            sal_to_msa.lead_or_opp_source,
            --sal_to_msa.partner_development_owner,
            --sal_to_msa.bdr_owner_name,
            --sal_to_msa.bdr_manager_name,
            sal_to_msa.partner,
            sal_to_msa.partner_region,
            sal_to_msa.account_type,
            sal_to_msa.acc_pricing_model,
            sal_to_msa.opp_go_flag,
            sal_to_msa.immediate_headcount_c,
            sal_to_msa.headcount_c,
            sal_to_msa.de_country_c,
            sal_to_msa.closed_lost_category_detail_c,
            sal_to_msa.incumbent_solution_c,
            sal_to_msa.competitorsthatare_involved_c,
            sal_to_msa.contact_id,
            sal_to_msa.primary_quotes_pricing_model_c,
            sal_to_msa.competitors__involved__c,
            sal_to_msa.other__competitor__c,
            sal_to_msa.fivetran_synced_opps,
            sal_to_msa.fivetran_synced_leads,
            sal_to_msa.partner_country,
            sal_to_msa.existing_business_deal_classification_c,
            sal_to_msa.existing_business_opp_type_c,
            sal_to_msa.existing_business_opp_type_detail_c,
            sal_to_msa.opp_owner_name,
            sal_to_msa.row_num,
            sal_to_msa.partner_vertical__c,
            sal_to_msa.vital_few_partner,
			sal_to_msa.vital_few_account,
            sal_to_msa.partner_agreement_effective_date_c,
            sal_to_msa.opps_score_segment,
            sal_to_msa.lead_score_segment,
			sal_to_msa.billing_country,
			sal_to_msa.manager_id,
			sal_to_msa.owner_region,
			sal_to_msa.owner_active,
			sal_to_msa.owner_created_date,
			sal_to_msa.partner_development_owner_lookup__c,
			sal_to_msa.owner_id,
			sal_to_msa.sales_title_c_c,
 			sal_to_msa.engagement__type__c,
            sal_to_msa.sales_motion,
            sal_to_msa.manager_reviewed_sal__c
           FROM sal_to_msa
        UNION ALL
         SELECT closed_lost.cohort_stage,
            closed_lost.account_id,
            closed_lost.account_name,
            closed_lost.b_d_r__date__c,
            closed_lost.lead_or_opp_id,
            closed_lost.point_time_date,
            closed_lost.mql_cohort_month,
            closed_lost.lead_id,
            closed_lost.opp_id,
            closed_lost.is_converted,
            closed_lost.converted_opportunity_id,
            closed_lost.lead_country,
            closed_lost.campaign_name,
            closed_lost.lead_disqualified_reason,
            closed_lost.lead_status,
            closed_lost.opp_status,
            closed_lost.closed__lost__c,
            closed_lost.lead_country_code,
            closed_lost.country_code,
            closed_lost.tier,
            closed_lost.bdr_unqualified_reason,
            closed_lost.client_region,
            closed_lost.client_country,
            closed_lost.mql_date,
            closed_lost.converted_date,
            closed_lost.partner_acq_leads,
            --closed_lost.leads_owner_name,
            --closed_lost.leads_owner_manager,
            closed_lost.created_date,
            closed_lost.sal_accepted_date,
            closed_lost.s_a_l__c,
            closed_lost.s_a_l_by__sales__c,
            closed_lost.record_type_bi__c,
            closed_lost.msa_date,
            closed_lost.stage_name,
            closed_lost.partner_acq_opps,
            closed_lost.opp_won,
            closed_lost.record_type_opps,
            closed_lost.pricing_model_opps,
            --closed_lost.opps_owner_name,
            --closed_lost.opps_owner_manager,
            closed_lost.opp_name,
            closed_lost.opp_type,
            closed_lost.partner_level,
            closed_lost.lead_or_opp_source,
            --closed_lost.partner_development_owner,
            --closed_lost.bdr_owner_name,
            --closed_lost.bdr_manager_name,
            closed_lost.partner,
            closed_lost.partner_region,
            closed_lost.account_type,
            closed_lost.acc_pricing_model,
            closed_lost.opp_go_flag,
            closed_lost.immediate_headcount_c,
            closed_lost.headcount_c,
            closed_lost.de_country_c,
            closed_lost.closed_lost_category_detail_c,
            closed_lost.incumbent_solution_c,
            closed_lost.competitorsthatare_involved_c,
            closed_lost.contact_id,
            closed_lost.primary_quotes_pricing_model_c,
            closed_lost.competitors__involved__c,
            closed_lost.other__competitor__c,
            closed_lost.fivetran_synced_opps,
            closed_lost.fivetran_synced_leads,
            closed_lost.partner_country,
            closed_lost.existing_business_deal_classification_c,
            closed_lost.existing_business_opp_type_c,
            closed_lost.existing_business_opp_type_detail_c,
            closed_lost.opp_owner_name,
            closed_lost.row_num,
            closed_lost.partner_vertical__c,
            closed_lost.vital_few_partner,
			closed_lost.vital_few_account,
            closed_lost.partner_agreement_effective_date_c,
            closed_lost.opps_score_segment,
            closed_lost.lead_score_segment,
			closed_lost.billing_country,
			closed_lost.manager_id,
			closed_lost.owner_region,
			closed_lost.owner_active,
			closed_lost.owner_created_date,
			closed_lost.partner_development_owner_lookup__c,
			closed_lost.owner_id,
			closed_lost.sales_title_c_c,
 			closed_lost.engagement__type__c,
            closed_lost.sales_motion,
            closed_lost.manager_reviewed_sal__c
           FROM closed_lost
        )
 SELECT DISTINCT full_union.cohort_stage,
    full_union.account_id,
    full_union.account_name,
    full_union.b_d_r__date__c,
    full_union.lead_or_opp_id,
    full_union.point_time_date,
    full_union.mql_cohort_month,
    full_union.lead_id,
    full_union.opp_id,
    full_union.is_converted,
    full_union.converted_opportunity_id,
    full_union.lead_country,
    full_union.campaign_name,
    full_union.lead_disqualified_reason,
    full_union.lead_status,
    full_union.opp_status,
    full_union.closed__lost__c,
    full_union.lead_country_code,
    full_union.country_code,
    full_union.tier,
    full_union.bdr_unqualified_reason,
    full_union.client_region,
    full_union.client_country,
    full_union.mql_date,
    full_union.converted_date,
    full_union.partner_acq_leads,
    --full_union.leads_owner_name,
    --full_union.leads_owner_manager,
    full_union.created_date,
    full_union.sal_accepted_date,
    full_union.s_a_l__c,
    full_union.s_a_l_by__sales__c,
    full_union.record_type_bi__c,
    full_union.msa_date,
    full_union.stage_name,
    full_union.partner_acq_opps,
    full_union.opp_won,
    full_union.record_type_opps,
    full_union.pricing_model_opps,
    --full_union.opps_owner_name,
    --full_union.opps_owner_manager,
    full_union.opp_name,
    full_union.opp_type,
    full_union.partner_level,
    full_union.lead_or_opp_source,
    --full_union.partner_development_owner,
    --full_union.bdr_owner_name,
    --full_union.bdr_manager_name,
    full_union.partner,
    full_union.partner_region,
    full_union.account_type,
    full_union.acc_pricing_model,
    full_union.opp_go_flag,
    full_union.immediate_headcount_c,
    full_union.headcount_c,
    full_union.de_country_c,
    full_union.closed_lost_category_detail_c,
    full_union.incumbent_solution_c,
    full_union.competitorsthatare_involved_c,
    full_union.contact_id,
    full_union.primary_quotes_pricing_model_c,
    full_union.competitors__involved__c,
    full_union.other__competitor__c,
    full_union.fivetran_synced_opps,
    full_union.fivetran_synced_leads,
    full_union.partner_country,
    full_union.existing_business_deal_classification_c,
    full_union.existing_business_opp_type_c,
    full_union.existing_business_opp_type_detail_c,
    full_union.opp_owner_name,
    full_union.row_num,
    full_union.partner_vertical__c,
    full_union.vital_few_partner,
	full_union.vital_few_account,
    full_union.partner_agreement_effective_date_c,
    full_union.opps_score_segment,
    full_union.lead_score_segment,
	full_union.billing_country,
			full_union.manager_id,
			full_union.owner_region,
			full_union.owner_active,
			full_union.owner_created_date,
			full_union.partner_development_owner_lookup__c,
			full_union.owner_id,
			full_union.sales_title_c_c,
 			full_union.engagement__type__c,
    full_union.sales_motion,
    full_union.manager_reviewed_sal__c
   FROM full_union
  WHERE full_union.row_num = 1"
38f50521-f4c0-41b4-0281-37a9a84920d5,v_gp_sfdc_opportunity_current_pacific_time (salesforce.v_gp_sfdc_opportunity_current_pacific_time)+ (gpbidb),postgres,"select distinct 
id as partner_dev_owner_id,
name as partner_development_owner,
user_region_c as pdo_region,
is_active as pdo_active
FROM salesforce.v_gp_sfdc_user_current"
38f50521-f4c0-41b4-0281-37a9a84920d5,v_gp_sfdc_opportunity_current_pacific_time (salesforce.v_gp_sfdc_opportunity_current_pacific_time)+ (gpbidb),postgres,"select distinct 
id as manager_id,
name as manager_name
FROM salesforce.v_gp_sfdc_user_current"
324ff501-173f-6be4-2e38-a635974b110e,Last Update,postgres,"SELECT max(_fivetran_synced)
FROM microsoft_ads.user_location_performance_daily_report"
324ff501-173f-6be4-2e38-a635974b110e,Microsoft Ads,postgres,"select distinct campaign_id::numeric as campaign_id_num, t2.name, t1.*
from microsoft_ads.user_location_performance_daily_report t1
left join microsoft_ads.v_campaign_history_latest t2
on t1.campaign_id = t2.id"
324ff501-173f-6be4-2e38-a635974b110e,Microsoft Ads,,
324ff501-173f-6be4-2e38-a635974b110e,Microsoft Ads,postgres,"WITH leads AS (
SELECT cal_date, pipeline_stage, stage_name,
CASE WHEN aggregated_lead_source ILIKE '%facebook%' THEN 'Facebook Ads'::text
  WHEN aggregated_lead_source ILIKE '%Adwords%' OR aggregated_lead_source ILIKE '%Google%' THEN 'Google Ads'::text
  WHEN aggregated_lead_source ILIKE '%Linkedin%' OR aggregated_lead_source ILIKE '%LinkedinAds%' THEN 'LinkedIn Ads'::text
  WHEN aggregated_lead_source ILIKE '%Bing%' THEN 'Microsoft Ads'::text
  WHEN aggregated_lead_source ILIKE '%Twitter%' THEN 'Twitter Ads'::text
  WHEN aggregated_lead_source ILIKE '%Website%' THEN 'Website'::text
 ELSE aggregated_lead_source END AS aggregated_lead_source,
 lead_or_opp_id
FROM
(select distinct date_trunc('day', cal_date)::date as cal_date, 'MQL' as Pipeline_stage, stage_name,
 lead_source AS aggregated_lead_source, lead_or_opp_id
from salesforce.v_marketing_dashboard_pacific_time
where pipeline_stage = 'MQL'
and (partner_acquisition__c isnull or partner_acquisition__c = 'No')
--and cal_date between '2021-10-01' and '2021-10-31'
UNION
select distinct date_trunc('day', cal_date)::date as cal_date, 'SQL' as Pipeline_stage,  stage_name,
 CASE WHEN lead_source ISNULL THEN opportunity_lead_source ELSE lead_source END AS aggregated_lead_source, lead_or_opp_id
from salesforce.v_marketing_dashboard_pacific_time
where pipeline_stage = 'SQL'
and (partner_acquisition__c isnull or partner_acquisition__c = 'No')
and (oppotunity_type = 'New Business' or oppotunity_type isnull)
and record_type_text_id_c != 'Potential Partner Opportunity'
--and cal_date between '2021-10-01' and '2021-10-31'
UNION
select distinct date_trunc('day', cal_date)::date as cal_date, 'SAL' as Pipeline_stage, stage_name,
 CASE WHEN lead_source ISNULL THEN opportunity_lead_source ELSE lead_source END AS aggregated_lead_source, lead_or_opp_id
from salesforce.v_marketing_dashboard_pacific_time
where pipeline_stage = 'SAL'
and (partner_acquisition__c isnull or partner_acquisition__c = 'No')
and (oppotunity_type = 'New Business' or oppotunity_type isnull)
and record_type_text_id_c != 'Potential Partner Opportunity'
and s_a_l__c = 'true'
--and cal_date between '2021-10-01' and '2021-10-31'
UNION
select distinct date_trunc('day', cal_date)::date as cal_date,'Closed_Won' as Pipeline_stage, stage_name,
 CASE WHEN lead_source ISNULL THEN opportunity_lead_source ELSE lead_source END AS aggregated_lead_source, lead_or_opp_id
from salesforce.v_marketing_dashboard_pacific_time
where pipeline_stage = 'Qualified Opportunity'
and (partner_acquisition__c isnull or partner_acquisition__c = 'No')
and (oppotunity_type = 'New Business' or oppotunity_type isnull)
and record_type_text_id_c != 'Potential Partner Opportunity'
and is_won = 'True'
--and cal_date between '2021-10-01' and '2021-10-31'
order by 1 desc) Unformat
WHERE aggregated_lead_source ILIKE '%facebook%'
OR (aggregated_lead_source ILIKE '%Adwords%' OR aggregated_lead_source ILIKE '%Google%')
OR (aggregated_lead_source ILIKE '%Linkedin%' OR aggregated_lead_source ILIKE '%LinkedinAds%')
OR aggregated_lead_source ILIKE '%Bing%'
OR aggregated_lead_source ILIKE '%Twitter%'
OR aggregated_lead_source ILIKE '%Website%'
                ),
STAGES AS (
            SELECT CAL_DATE, AGGREGATED_LEAD_SOURCE, 
            COUNT(DISTINCT LEAD_OR_OPP_ID) FILTER (WHERE PIPELINE_STAGE='MQL') AS MQL,
            COUNT(DISTINCT LEAD_OR_OPP_ID) FILTER (WHERE PIPELINE_STAGE='SQL') AS SQL,
            COUNT(DISTINCT LEAD_OR_OPP_ID) FILTER (WHERE PIPELINE_STAGE='SAL') AS SAL,
			COUNT(DISTINCT LEAD_OR_OPP_ID) FILTER (WHERE PIPELINE_STAGE='Closed_Won') AS Closed_Won
            FROM LEADS
            GROUP BY 1,2
            ),
-- SELECT * FROM STAGES
Campaigns as(
SELECT DISTINCT cal.cal_date,
 'Microsoft Ads'::text AS channel,
 cdp.campaign_id::text,
 ch.name::text AS campaign_name,
 ch.type AS campaign_type,
 cdp.country,
 SUM(cdp.clicks) AS clicks,
 SUM(cdp.impressions) AS impressions,
 SUM(cdp.conversions) AS conversions,
 SUM(cdp.spend) AS spend
FROM gp_calendar cal,
 microsoft_ads.user_location_performance_daily_report cdp
LEFT JOIN
(SELECT DISTINCT id, name, type
FROM microsoft_ads.campaign_history t1
WHERE modified_time = (SELECT MAX(modified_time) FROM microsoft_ads.campaign_history tmax WHERE t1.id = tmax.id)
ORDER BY 1) ch ON cdp.campaign_id = ch.id
WHERE date_trunc('day'::text, cal.cal_date::date)::date = date_trunc('day'::text, cdp.date::date)::date
GROUP BY 1, 2 , 3, 4, 5, 6
)
, PREV AS (select CASE WHEN campaigns.cal_date IS NULL THEN stages.cal_date ELSE campaigns.cal_date END AS cal_date,
CASE WHEN stages.aggregated_lead_source = 'Website' THEN 'Website' ELSE campaigns.channel END AS channel,
campaigns.campaign_id::bigint,
campaigns.campaign_name,
campaigns.campaign_type,
campaigns.country,
campaigns.clicks,
campaigns.impressions,
campaigns.conversions,
campaigns.spend,
stages.mql,
stages.sql,
stages.sal,
stages.closed_won
from stages
    full join campaigns
        on campaigns.channel = stages.aggregated_lead_source AND campaigns.cal_date = stages.cal_date
ORDER BY 1, 2, 3)
SELECT * FROM PREV WHERE channel IS NOT NULL and channel='Microsoft Ads'"
87bd3212-ccfb-5325-afe2-15d61431ac4a, Fees,postgres,"SELECT b.client_id AS customer_id, 
       a.name AS customer_name,
	   c.name AS country,
	   b.addendum_enrollment_date,
	   b.is_original_msa, 
	   b.deposit_month_number,
	   b.is_flat_fee AS setup_fee_isflat,
	   b.flat_fee,
	   b.setup_fee_note,
	   d.tier,
	   d.lower_professional_count,
	   d.upper_professional_count, 
	   d.amount,
	   e.currency_name AS preferred_billing_currency
FROM goglobal_gp_goglobal.v_gp_gg_client_country_current AS b
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_setup_fee_current AS d
ON   b.id = d.client_country_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS a
ON b.client_id = a.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS c
ON b.country_id = c.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS e
ON a.preferring_billing_currency = e.id
WHERE a.is_demo_client = false
ORDER BY a.id, c.name"
87bd3212-ccfb-5325-afe2-15d61431ac4a, Fees,postgres,"SELECT b.client_id AS customer_id, 
       a.name AS customer_name,
	   c.name AS country,
	   b.addendum_enrollment_date,
	   b.is_original_msa, 
	   b.deposit_month_number,
	   b.is_flat_management_fee, 
	   b.flat_management_fee, 
	   b.management_fee_note,
	   d.tier,
	   d.lower_professional_count,
	   d.upper_professional_count, 
	   d.max_total_value,
	   d.min_total_value,
	   d.default_management_fee_pct,
	   e.currency_name AS preferred_billing_currency
	   
FROM goglobal_gp_goglobal.v_gp_gg_client_country_current AS b
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_RATE_TABLE_current AS d
ON   b.id = d.client_country_id
LEFT JOIN goglobal_gp_goglobal.V_gp_gg_client_current AS a
ON b.client_id = a.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS c
ON b.country_id = c.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS e
ON a.preferring_billing_currency = e.id
WHERE a.is_demo_client = false
ORDER BY a.id, c.name"
87beb22e-8c54-9a16-e2eb-ebf641412209,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT podname, site_luid, u.site_name, site_create_date, site_creator_capacity, site_explorer_capacity, site_user_quota, site_viewer_capacity, user_id, user_luid, user_email, created_at, user_account_age, last_login_date, days_since_last_login, license_type, site_role, owned_projects, owned_data_sources, owned_certified_data_sources, owned_data_sources_size, owned_workbooks, owned_workbooks_size, owned_views, access_data_source_events_count, access_view_events, publish_data_source_events, publish_workbook_events, last_datasource_access_date, last_datasource_publish_date, last_view_access_date, last_workbook_publish_date, data_source_access_count_total, data_source_access_count_unique_users, view_access_count_total, view_access_count_unique_users, run_date,
	COUNT_TOTAL_USERS.count_t_users
	FROM tableau.ts_users u
	LEFT JOIN (SELECT site_name, COUNT(DISTINCT user_email) as count_t_users
			  FROM tableau.ts_users group by 1) COUNT_TOTAL_USERS on u.site_name = COUNT_TOTAL_USERS.site_name"
87beb22e-8c54-9a16-e2eb-ebf641412209,ts_users (tableau.ts_users)+ (gpbidb),,
87beb22e-8c54-9a16-e2eb-ebf641412209,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT project_name, site_name, actor_user_id, actor_user_name, e.event_name, event_type, event_id, event_date, actor_license_role, actor_site_role, item_type, e.item_id, e.item_name, workbook_name, historical_item_name, item_owner_email, item_repository_url, historical_item_repository_url, run_date,
	suspend.event_name as suspended, md.max_date
	FROM tableau.ts_events e

	left join (select item_id, event_name from tableau.ts_events WHERE event_name = 'Suspend Extract Refresh Due to Inactivity' ) suspend on
	e.item_id = suspend.item_id
	
	left join (SELECT  item_id, item_name, event_name , MAX(event_date) as max_event_date, 1 as max_date
	FROM tableau.ts_events
	where event_name = 'Publish Workbook'
	group by 1,2,3) as md on (e.item_id = md.item_id and e.event_name = md.event_name and e.event_date = md.max_event_date)"
87beb22e-8c54-9a16-e2eb-ebf641412209,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT ""Payroll Name"", ""Job Title Description"", ""Business Unit Description"", ""Home Department Description"", ""Worked In Country"", ""Status"", ""Hire Date"", LOWER(""Work Contact: Work Email"") AS ""Work Contact: Work Email""
	FROM workday_hris.v_non_sensitive_workday_data"
8944b0d6-4da9-56e4-da23-0aa4155d87fc,Operations,postgres,"WITH satisfaction AS (SELECT id, s.ticket_id, score, created_at, last_date, comment, reason
	FROM ""zendesk"".""satisfaction_rating"" AS s
	INNER JOIN (
	SELECT ticket_id, MAX(created_at) AS last_date
	FROM ""zendesk"".""satisfaction_rating""
	GROUP BY ticket_id) AS m
	ON (s.ticket_id = m.ticket_id AND created_at = last_date)),
gpp_zendesk as
(
SELECT 
	    CASE WHEN O.CUSTOM_CUSTOMER_ID IS NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
	         WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NULL THEN O.CUSTOM_CUSTOMER_ID
	         WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
			 WHEN O.CUSTOM_CUSTOMER_ID = zendesk_org.CUSTOM_CUSTOMER_ID THEN zendesk_org.CUSTOM_CUSTOMER_ID
			else null
		END AS zendesk_gpp_client_id_match,
	    CASE WHEN cc.name IS NULL AND cc2.name IS NOT NULL THEN cc2.name
	         WHEN cc.name IS NOT NULL AND cc2.name IS NULL THEN cc.name
			 WHEN cc.name IS NOT NULL AND cc2.name IS not NULL THEN cc2.name
	         WHEN cc.name = cc2.name THEN cc.name
			 else null
	         END AS zendesk_gpp_client_name_match,
	    
	    CASE WHEN O.NAME IS NULL AND zendesk_org.name IS NOT NULL THEN zendesk_org.name
	         WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NULL THEN O.NAME
			 WHEN O.NAME IS NOT NULL AND zendesk_org.name IS not NULL THEN zendesk_org.NAME
	         WHEN O.NAME = zendesk_org.name THEN zendesk_org.NAME
			 ELSE NULL 
	         END AS Zendesk_client_org,
		t.created_at,
		t.created_at::date as date,	
		t.created_at::time as time,
		t.organization_id AS customer_id,
							g.name AS group,
							t.requester_id,t.submitter_id,
							u.name AS requester,
							U.ROLE AS requester_ROLE,
							t.id AS ticket_id_ZENDESK,
							t.status,
							T.PRIORITY,
							T.CUSTOM_CATEGORY,
							U.organization_id AS USER_ORGANIZATION_ID,
							T.organization_id,
							U3.NAME AS SUBMITTER,
							U3.ROLE AS SUBMITTER_ROLE,
							t.via_channel,
							zendesk_tm.replies, zendesk_tm.full_resolution_time_in_minutes_business, zendesk_tm.reply_time_in_minutes_business,
							s.score,
							Case when ZENDESK_TM.full_resolution_time_in_minutes_business <<=7200 then '0 - 5 days'
								 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>7200 and ZENDESK_TM.full_resolution_time_in_minutes_business<<=43200) then '5 - 30 days'
								 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>43200) then '+30 days'
							end as resolution_time,
							case when ZENDESK_TM.replies =0 then '0 touches'
								 when (ZENDESK_TM.replies>>0 and ZENDESK_TM.replies<<3) then '1 to 2 touches'
								 when (ZENDESK_TM.replies>>2 and ZENDESK_TM.replies<<6) then '3 to 5 touches'
								 when (ZENDESK_TM.replies>>5) then '+5 touches'
							end as replies_touches,
							ticket_merge.tag as closed_by_merge
							FROM ""zendesk"".""ticket"" AS t
							LEFT JOIN ""zendesk"".""user"" AS u
							ON t.requester_id = u.id
							LEFT JOIN ""zendesk"".""group"" AS g
							ON t.group_id = g.id
							LEFT JOIN ""zendesk"".""organization"" AS org
							ON t.organization_id = org.id
							LEFT JOIN ""zendesk"".""user"" AS u3
							ON t.SUBMITTER_ID = u3.id
							LEFT JOIN ZENDESK.TICKET_METRICS AS ZENDESK_TM ON t.id=ZENDESK_TM.TICKET_ID
							LEFT JOIN ""satisfaction"" AS s ON t.id = s.ticket_id
							left join zendesk.organization o on o.id=U.organization_id
							left join zendesk.organization zendesk_org on zendesk_org.id=T.organization_id
							left join goglobal_gp_goglobal.v_gp_gg_client_current cc on cc.id=o.custom_customer_id
							left join goglobal_gp_goglobal.v_gp_gg_client_current cc2 on cc2.id=zendesk_org.custom_customer_id
							left join (
										SELECT *
										FROM zendesk.ticket_tag
										WHERE tag = 'closed_by_merge'
										) ticket_merge on t.id=ticket_merge.ticket_id
 )
select *
from gpp_zendesk
where status <<>> 'deleted'"
8944b0d6-4da9-56e4-da23-0aa4155d87fc,Operations,postgres,"SELECT a.id, b.onboard_end_date AS date, CASE WHEN b.onboard_end_date IS NOT NULL THEN 'Onboard'END AS process
FROM goglobal_gp_goglobal.v_gp_gg_professional_current a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current b
ON a.professional_onboarding_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current d
ON a.client_id = d.id
WHERE d.is_demo_client = false
AND b.onboard_end_date  IS NOT NULL


UNION 


SELECT a.id, b.offboard_end_date AS date, CASE WHEN b.offboard_end_date IS NOT NULL THEN 'Offboard'END AS process
FROM goglobal_gp_goglobal.v_gp_gg_professional_current a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current b
ON a.professional_offboarding_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current d
ON a.client_id = d.id
WHERE d.is_demo_client = false
AND b.offboard_end_date IS NOT NULL
ORDER BY 1"
8944b0d6-4da9-56e4-da23-0aa4155d87fc,Operations,postgres,"WITH client_churn AS(SELECT a.cal_date,
       a.client_id,
	   a.client_name,		 
	   master.status,
	   CASE WHEN first_active.client_first_active_flag IS NOT NULL THEN 'Client First Active' END AS client_first_active_flag,
	   CASE WHEN
	     (COUNT(a.active_flag)>>0 AND COUNT(a.active_flag) = COUNT(DISTINCT CASE WHEN a.active_flag IS NOT NULL AND a.termination_flag IS NOT NULL THEN a.professional_id END))
		 THEN 'Client Becoming Inactive' END AS client_becoming_inactive_flag,
	   CASE WHEN (COUNT(a.active_flag))>>0
				  AND (LAG(COUNT(a.termination_flag),1) OVER (PARTITION BY a.client_id ORDER BY a.client_id, a.cal_date)) =
				      (LAG(COUNT(a.professional_id),1)  OVER (PARTITION BY a.client_id ORDER BY a.client_id, a.cal_date))
		THEN 'Became Active Again' END AS client_active_again_flag,
	CASE WHEN COUNT(a.active_flag)>>0 THEN 'Active' END AS client_active

FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_client AS master ON a.client_id = master.id

LEFT JOIN (SELECT 	
		   a.client_id,
		   MIN(a.cal_date) AS client_first_active_flag
		   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS a
		   WHERE a.active_flag IS NOT NULL
		   AND (service_class IS NULL OR service_class <<>> '4')
		   GROUP BY a.client_id)AS first_active
ON a.client_id = first_active.client_id
AND a.cal_date = first_active.client_first_active_flag
	
WHERE (a.new_flag IS NOT NULL
OR a.termination_flag IS NOT NULL
OR a.active_flag IS NOT NULL)
AND a.cal_date <<= CURRENT_DATE					 
AND (a.service_class IS NULL OR a.service_class <<>> '4')
GROUP BY 1,2,3,4,5
ORDER BY  a.cal_date)

SELECT *
FROM client_churn
ORDER BY client_id, cal_date"
8944b0d6-4da9-56e4-da23-0aa4155d87fc,Operations,postgres,"SELECT        
               a.id AS customer_id,
               a.name AS customer_name,
               CASE WHEN a.status = '1' THEN 'Active'
                          WHEN a.status = '2' THEN 'Inactive'
               END AS customer_status,
               CASE WHEN a.pricing_model = 0 THEN 'Enterprise'
                          WHEN a.pricing_model = 1 THEN 'Standard'
               END as customer_pricing_model,
			   a.salesforce_account_id AS gpp_salesforce_account_id,
			   g.name AS customer_billing_country,
			   g.gp_region AS customer_billing_region,
			   CONCAT (h.first_name, ' ', h.last_name)AS customer_account_manager,
			   CONCAT (i.first_name, ' ', i.last_name)AS customer_account_executive,
               a.is_gp_contractor_customer,
               a.is_gp_recruit_customer,
               a.is_bank_info_approved,
			   b.name AS customer_industry,
			   a.msa_contract_start_date_peo,
			   a.msa_contract_start_date_services,
			   a.msa_contract_start_date_aso,
			   a.msa_contract_start_date_sourcing,
			   c.id AS professional_id,
			   CONCAT(c.first_name, ' ', c.last_name) AS professional_name,
			   CASE WHEN c.status = '1' THEN 'New'
			        WHEN c.status = '2' THEN 'Onboarding'
					WHEN c.status = '3' THEN 'Active'
					WHEN c.status = '4' THEN 'Terminating'
					WHEN c.status = '5' THEN 'Inactive'
					END AS prof_status,
			   c.is_failed_to_launch,
			   e.name AS prof_employment_country,
			   e.gp_region AS prof_employment_region,
			   CASE
               WHEN j.is_gp_entity IS TRUE THEN 'GP Entity'::text
               WHEN j.is_gp_entity IS FALSE THEN 'LSP Entity'::text
               ELSE 'UNKNOWN'::text END AS entity_type,
                           c.service_class,
                           c.payroll_start_date,
                           c.payroll_end_date,
                           k.offboard_start_date,
                           k.offboard_end_date,
                           k.reason_type,
                           k.will_be_backfilling_this_position,
                           l.onboard_start_date,
                           l.onboard_end_date,
                           l.gp_empl_contract_prepared_by,
                           c.contract_start_date,
                           c.contract_end_date,
                           c.date_created,
                           c.is_sponsoring_visa,
						   m.id AS lsp_id,
						   m.name AS prof_lsp_name,
						   m.status AS lsp_status,
						   c.is_gp_recruit AS prof_is_gp_recruit,
						   benefit_type.name AS Benefit_type,
	                       CASE WHEN country_benefit.mandatory='1' THEN 'Mandatory'
	   		               WHEN country_benefit.mandatory='0' THEN 'Supplemental'
	                       END AS benefit_Plan_Type,
	                       benefit_current.name AS benefit_Plan_Name,
		                   benefit_current.custom benefit_custom,
		                   CASE WHEN benefit_current.active='1' THEN 'Yes'
                           WHEN benefit_current.active='0' THEN 'No' ELSE null
	                       END AS benefit_Active_plan,
		                   benefit_enrollment.benefit_id,
	                       benefit_enrollment.status as benefit_prof_status,
master.partner_referral


FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_client AS master
ON a.id = master.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_industry_current AS b
ON a.industry_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_current AS c
ON a.id = c.client_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS d
ON c.lsp_country_id = d.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current AS cco
ON c.client_country_id = cco.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS e
ON cco.country_id = e.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS f
ON a.billing_address_id = f.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS g
ON f.country_id = g.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS h
ON a.gp_account_manager_id= h.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS i
ON a.gp_current_sales_rep_id= i.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS j
ON c.lsp_country_id = j.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current AS k
ON c.professional_offboarding_id = k.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current AS l
ON c.professional_onboarding_id = l.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_current m
ON d.lsp_id = m.id
LEFT JOIN benefits_gp_benefits.v_benefits_professional_benefit_enrollment_current benefit_enrollment
ON c.id = benefit_enrollment.professional_external_id::INTEGER
LEFT JOIN benefits_gp_benefits.v_benefits_benefit_current benefit_current
ON benefit_enrollment.benefit_id = benefit_current.id::INTEGER AND e.id=benefit_current.country_external_id::INTEGER
LEFT JOIN benefits_gp_benefits.v_benefits_benefit_type_current benefit_type
ON benefit_current.benefit_type_id=benefit_type.id::INTEGER
LEFT JOIN benefits_gp_benefits.v_benefits_country_benefit_type_current country_benefit
ON benefit_type.id::INTEGER = country_benefit.benefit_type_id AND country_benefit.country_external_id::INTEGER = e.id::INTEGER
LEFT JOIN goglobal_gp_goglobal.V_GP_GG_LSP_CURRENT LSP

ON d.LSP_ID=LSP.ID


		   

WHERE a.is_demo_client = false

ORDER BY a.id, c.id"
8944b0d6-4da9-56e4-da23-0aa4155d87fc,Operations,postgres,"WITH client_historic AS(
SELECT date_trunc('month'::text, cal.cal_date::timestamp with time zone)::date AS cal_date,
       client.id,
	   client.name,
	   	 CASE WHEN client.msa_contract_start_date_peo IS NOT NULL THEN client.msa_contract_start_date_peo
	          WHEN client.msa_contract_start_date_peo IS NULL AND client.msa_contract_start_date_services IS NOT NULL THEN client.msa_contract_start_date_services
	          WHEN client.msa_contract_start_date_services IS NULL AND client.msa_contract_start_date_sourcing IS NOT NULL THEN client.msa_contract_start_date_sourcing
	          WHEN client.msa_contract_start_date_sourcing IS NULL AND client.msa_contract_start_date_aso IS NOT NULL THEN client.msa_contract_start_date_aso
	          ELSE client.msa_contract_start_date_peo END AS gpp_contract_date

	   
FROM gp_calendar cal, 
     goglobal_gp_goglobal.v_gp_gg_client_current client

	 
WHERE cal.first_of_month IS TRUE
AND cal.cal_date >>= '2012-01-01'
AND DATE_TRUNC('month',cal.cal_date) <<= DATE_TRUNC('month', CURRENT_DATE)
AND client.is_demo_client = FALSE)

SELECT client_historic.*,
		 CASE WHEN DATE_TRUNC('month',gpp_contract_date) = DATE_TRUNC('month', cal_date) THEN TRUE END AS Contract_start,
		 CASE WHEN DATE_TRUNC('month',gpp_contract_date) <<= DATE_TRUNC('month', cal_date) THEN TRUE END AS in_platform
FROM client_historic"
8944b0d6-4da9-56e4-da23-0aa4155d87fc,Operations,postgres,"SELECT cal_date,
       client_id,
	   
	   CASE WHEN 
	   COUNT (CASE WHEN active_flag = 'Active' AND (service_class IS NULL OR service_class <<>> '4') THEN professional_id END)OVER (PARTITION BY client_id, cal_date) >>0
       AND COUNT (CASE WHEN active_flag = 'Active' AND service_class = '4' THEN professional_id END)OVER (PARTITION BY client_id, cal_date)  >> 0 THEN 'Both'
	   
	   WHEN   COUNT (CASE WHEN active_flag = 'Active' AND (service_class IS NULL OR service_class <<>> '4') THEN professional_id END)OVER (PARTITION BY client_id, cal_date) >>0
	   AND COUNT (CASE WHEN active_flag = 'Active' AND service_class = '4' THEN professional_id END)OVER (PARTITION BY client_id, cal_date) = 0 THEN 'EOR'
	   
	    WHEN   COUNT (CASE WHEN active_flag = 'Active' AND (service_class IS NULL OR service_class <<>> '4') THEN professional_id END)OVER (PARTITION BY client_id, cal_date) = 0
	   AND COUNT (CASE WHEN active_flag = 'Active' AND service_class = '4' THEN professional_id END)OVER (PARTITION BY client_id, cal_date)  >> 0 THEN 'Contractors'
	   
	   END AS product_mix,
	   
	   professional_id,
	   new_flag,
	   active_flag,
	   termination_flag

FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
WHERE DATE_TRUNC('month', cal_date) <<= DATE_TRUNC('month', CURRENT_DATE)
ORDER BY 2,1,3"
8944b0d6-4da9-56e4-da23-0aa4155d87fc,Operations,postgres,"SELECT 
        sfdc.id AS sfdc_id,
		sfdc.name AS sfdc_account_name,
		sfdc.type AS sfdc_account_type,
		sfdc.client_health__c
FROM salesforce.v_gp_sfdc_account_current SFDC"
8944b0d6-4da9-56e4-da23-0aa4155d87fc,ADP,postgres,select * from workday_hris.v_non_sensitive_workday_data
d65e837b-8e7a-2334-cccb-2fb95ca76b87,Custom SQL Query (gpbidb),postgres,"With Billed_Salary as (
						Select Distinct
							c.professional_id, --c.billing_cycle_id,
							d.start_date,
							b.name,
							a.currency,
							t6.currency_code, 
							t6.name as currency_name,
                                                         Row_Number() Over(Partition by Professional_id Order By start_date asc) as row_number,
							SUM(a.amount) AS Current_Salary
				    	from goglobal_gp_goglobal.v_gp_gg_client_bill_transaction_current a 
						left join goglobal_gp_goglobal.v_gp_gg_billing_transaction_type_current b on a.billing_transaction_type_id=b.id
						left join goglobal_gp_goglobal.v_gp_gg_client_bill_current    c on c.id=a.client_bill_id
						left join goglobal_gp_goglobal.v_gp_gg_billing_cycle_current  d on c.billing_cycle_id=d.id
						left join goglobal_gp_goglobal.v_gp_gg_country_current       t6 on a.currency=t6.id
						Where a.billing_transaction_type_id IN ('2')
						--And d.start_date >>= '2019-01-01' --and D.start_date << date_trunc('month', now()) 
						GROUP BY 1,2,3,4,5,6
						ORDER BY 1, 2), 
				Pro as (
						Select Distinct
							T2.id as Professional_id_Dup,
							concat(t2.first_name,' ',t2.last_name) as pro_full_name,
							t2.annual_base_salary, c.currency_code as annual_base_salary_currency,
							t3.id as client_id, 
							t3.name as Client,
					t5.name as country,
							CASE
								WHEN t2.status = '1' THEN 'New'
								WHEN t2.status = '2' THEN 'Onboarding'
								WHEN t2.status = '3' THEN 'Active'
								WHEN t2.status = '4' THEN 'Terminating'
								WHEN t2.status = '5' THEN 'Inactive'
							ELSE t2.status 
							END AS professional_status_desc
						From goglobal_gp_goglobal.v_gp_gg_professional_current  t2
						Left join goglobal_gp_goglobal.v_gp_gg_client_current   t3 on t2.client_id=t3.id
			
						left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco on t2.client_country_id=cco.id
						Left join goglobal_gp_goglobal.v_gp_gg_country_current   t5 on cco.country_id=t5.id
					  LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current c	
						on t2.annual_base_salary_currency = c.id
						Where t2.is_failed_to_launch is False
						And t3.is_demo_client is False), 
Pro_w_Base_Salary as (
						Select Distinct 
							B.*, 
							A.*, 
							LAG(Current_Salary,1)  OVER (PARTITION BY professional_id ORDER BY start_date) as PREVIOUS_SALARY 
							--Row_Number() Over(Partition by Professional_id Order By start_date asc)
						From Billed_Salary A 
						Inner Join Pro B on A.Professional_id = B.Professional_id_Dup
	 					Where row_number >> 1
						Order by A.professional_id, A.start_date)
Select Distinct 
	C.*, 
	case when (C.previous_salary != 0 and C.previous_salary != C.current_salary) then((C.current_salary-C.PREVIOUS_SALARY)/C.PREVIOUS_SALARY) else NULL END as ""B(w)"",
  	case when (C.previous_salary != 0 and C.previous_salary != C.current_salary) then 1 else NULL END as salary_change_flag,
        case when (C.previous_salary != 0 and ((C.current_salary - C.PREVIOUS_SALARY)/C.PREVIOUS_SALARY)>>0) THEN 'Increase' 
             WHEN (C.previous_salary != 0 and ((C.current_salary - C.PREVIOUS_SALARY)/C.PREVIOUS_SALARY)<<0)  THEN 'Decrease' END AS salary_change_month
	
From Pro_w_Base_Salary C"
d6bdc113-1a0d-6de3-a56c-d278cd5770ff,Salesforce Pacific Time,,
d711169c-9dcf-1e27-93f7-39121d2bd58e,Custom SQL Query+ (gpbidb),postgres,"SELECT 
       aud.id, 
	   aud.rev,
       aud.date_modified,
	   aud.revtype,
	   aud.modified_by,
	   CASE WHEN ""Work Contact: Work Email"" IS NULL AND users.email = 'techadmin@g-p.com' THEN 'System User' 
	   WHEN ""Work Contact: Work Email"" IS NULL AND split_part(LOWER(users.email), '@', 2) <<>> 'g-p.com' THEN CONCAT (cp.first_name, ' ', cp.last_name)
	   WHEN ""Work Contact: Work Email"" IS NULL AND split_part(LOWER(users.email), '@', 2) = 'g-p.com' THEN users.email 
	   ELSE CONCAT (person.first_name, ' ', person.last_name) END AS modified_by_name,
	   
	   users.email AS modified_by_email,
	   split_part(LOWER(users.email), '@', 2),
	   CASE WHEN  CONCAT (person.first_name, ' ', person.last_name) = 'System User'
	   THEN 'Sytem User' ELSE wd.""Job Title Description"" END AS job_title_description,
	   wd.""Home Department Description"",
	   aud.client_id,
	   aud.addendum_enrollment_date,
	   aud.original_forecast,   
	   aud.annual_fee,
	   aud.annual_fee_aso,
	   aud.annual_fee_due_upon,
	   aud.annual_fee_due_upon_aso,
	   aud.trans_term_fee_aso,
	   aud.wire_fee_aso,
	   aud.is_flat_fee_aso,
	   aud.flat_fee,
	   aud.setup_fee_note,
	   aud.is_flat_management_fee,
	   aud.flat_management_fee,
	   aud.management_fee_note,
	   aud.management_fee_note_aso, -- might be msa country notes
	   aud.transfer_minimum_term_cost_aso,
       aud.estimated_social_cost_pct,
	   aud.severance_accural_pct_aso,
	   aud.expense_markup_pct,
	   aud.is_currency_transaction_fee_applicable,
	   aud.currency_transaction_fee_pct,
	   aud.indirect_tax_pct,
	   aud.banking_fee_pct_aso,
	   aud.deposit_month_number,
	   aud.deposit,
	   aud.approved_expenses_due,
	   aud.monthly_payroll_changes_due,
	   aud.bi_monthly_payroll_changes_due_period_one,
	   aud.bi_monthly_payroll_changes_due_period_two,
	   aud.management_fee_pct
     
	   
	   
FROM goglobal_gp_goglobal.client_country_aud AS aud
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_user_current AS users ON aud.modified_by = users.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current as person ON users.id = person.user_id
LEFT JOIN workday_hris.v_non_sensitive_workday_data AS wd ON split_part(LOWER(users.email), '@', 1) = split_part(LOWER(wd.""Work Contact: Work Email""), '@', 1)
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_person_current AS cp ON users.id = cp.user_id"
d711169c-9dcf-1e27-93f7-39121d2bd58e,Custom SQL Query+ (gpbidb),postgres,"SELECT DISTINCT
       mc.id,
       mc.name AS client_name,
	   cc.country_id,
	   country.name AS country_name,
	   fee.client_country_id,
	   addendum_enrollment_date
	   
FROM goglobal_gp_goglobal.v_gp_gg_master_client AS mc
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current AS cc ON mc.id = cc.client_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current country ON cc.country_id = country.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_fee_current AS fee ON cc.id = fee.client_country_id
WHERE mc.is_demo_client = FALSE

ORDER BY mc.id, country.name"
d73f3188-c7e0-73d4-da8c-8b7f8c2a3a3b,v_gp_sfdc_marketing_dashboard (salesforce.v_gp_sfdc_marketing_dashboard) (gpbidb),,
d73f3188-c7e0-73d4-da8c-8b7f8c2a3a3b,v_gp_sfdc_marketing_dashboard (salesforce.v_gp_sfdc_marketing_dashboard) (gpbidb),postgres,"SELECT opps_det.opportunity__c,
	opps_det.professionals__c
FROM salesforce.v_gp_sfdc_opportunity_detail_current opps_det"
d7afd658-12c1-1e4e-41a7-0e9d4f489fe0,Custom SQL Query (gpbidb),postgres,"select row_number()over (partition by TM.TICKET_ID order by TM.CREATED) AS COMMENT_NBR, 
		usr.name AS COMMENTER,
		usr.role COMMENTER_ROLE,
		tm.ticket_id,
                tm.created,
                tm.public
from zendesk.ticket_comment tm
left join zendesk.user usr on tm.user_id=usr.id"
d7afd658-12c1-1e4e-41a7-0e9d4f489fe0,Custom SQL Query (gpbidb),postgres,"WITH sfdc as (
			  SELECT customer.id,
					 customer.name,
					 Customer.salesforce_account_id as id_match
			 FROM goglobal_gp_goglobal.v_gp_gg_client_current customer
			WHERE customer.is_demo_client = false
			),
sfdc_health as (
				select sfdc.*,
					   sfdc_ac.client_health__c
				from sfdc
				left join salesforce.v_gp_sfdc_account_current sfdc_ac on sfdc.id_match=sfdc_ac.id),
satisfaction AS (
				SELECT id,
					   s.ticket_id,
					   score, created_at, last_date,comment,reason
				FROM ""zendesk"".""satisfaction_rating"" AS s
				INNER JOIN (
							SELECT ticket_id, 
								   MAX(created_at) AS last_date
							FROM ""zendesk"".""satisfaction_rating""
							GROUP BY ticket_id
							) AS m ON (s.ticket_id = m.ticket_id AND created_at = last_date)
				),
gpp_zendesk as (
				SELECT t.id AS ticket_id_ZENDESK,
					   t.id::TEXT as ticket_id_zendesk_text,
						CASE WHEN O.CUSTOM_CUSTOMER_ID IS NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
							 WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NULL THEN O.CUSTOM_CUSTOMER_ID
							 WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
							 WHEN O.CUSTOM_CUSTOMER_ID = zendesk_org.CUSTOM_CUSTOMER_ID THEN zendesk_org.CUSTOM_CUSTOMER_ID
                                                         ELSE NULL
						END AS zendesk_gpp_client_id_match,
						CASE WHEN cc.name IS NULL AND cc2.name IS NOT NULL THEN cc2.name
							 WHEN cc.name IS NOT NULL AND cc2.name IS NULL THEN cc.name
							WHEN cc.name IS NOT NULL AND cc2.name IS not NULL THEN cc2.name
							 WHEN cc.name = cc2.name THEN cc.name
							else null
						END AS zendesk_gpp_client_name_match, 
						CASE WHEN O.NAME IS NULL AND zendesk_org.name IS NOT NULL THEN zendesk_org.name
							 WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NULL THEN O.NAME
                                                         WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NOT NULL THEN ZENDESK_ORG.NAME
                                                         WHEN O.NAME = zendesk_org.name THEN ZENDESK_ORG.NAME
							 ELSE NULL 
						END AS Zendesk_client_org,
						t.created_at,
						t.created_at::date as date,	
						t.created_at::time as time,
						t.organization_id AS customer_id,
						g.name AS group,
						t.requester_id,
						t.submitter_id,
						t.assignee_id,
						u4.name as assignee,
						u4.email as asignee_email,
						replace (u4.email,'@globalization-partners.com', '@g-p.com') as asignee_new_mail,
						u.name AS requester,
						U.ROLE AS requester_ROLE,
						u.email as requester_email,
						t.status,
						T.PRIORITY,	
						case when t.priority='urgent' then 60
							else 2400 
						end as target_sla,
						T.CUSTOM_CATEGORY,
						CASE WHEN t_form.ticket_form='Shared Services' THEN concat('Shared Services -',' ',t.custom_SSC_Action)
							WHEN t_form.ticket_form='Internal Request' AND t.CUSTOM_INTERNAL_REQUEST_TYPE='Zendesk Support' THEN concat('Internal -',' ',t.custom_Internal_Request_Type)
							WHEN t.custom_category='expenses' THEN concat('Expense -',' ',t.custom_Expenses)
							WHEN t.custom_category='benefits' THEN concat('Benefits -',' ',t.custom_Benefits)
							WHEN t.custom_category='employee_onboarding' THEN concat('Employee Onboarding -',' ', t.custom_Employee_Onboarding)
							WHEN t.custom_category='invoicing' THEN CONCAT('Invoicing -',' ', t.custom_Invoicing)
							WHEN t.custom_category='time_off' THEN concat('Time Off -',' ',t.custom_Time_Off)
							WHEN t.custom_category='zoho' THEN concat('Zoho -',' ', t.custom_Zoho_Sub_Category)
							WHEN t.custom_category='time_tracking' THEN CONCAT('Time Tracking -',' ',t.custom_Time_Tracking)
							WHEN t.custom_category='hr_support' THEN CONCAT('HR Support -',' ',t.custom_HR_Support)
							WHEN t.custom_category='payroll' THEN concat('Payroll -',' ',t.custom_Payroll)
							WHEN t.custom_category='tech_support' THEN CONCAT('Tech Support -',' ',t.custom_Tech_Support)
							WHEN t.custom_category is not NULL THEN t.custom_category
							ELSE 'No Category'
						end as sub_category,	
						U.organization_id AS USER_ORGANIZATION_ID,
						T.organization_id,	
						U3.NAME AS SUBMITTER,
						U3.ROLE AS SUBMITTER_ROLE,
						u3.email as submitter_email,
						replace (u3.email,'@globalization-partners.com', '@g-p.com') as submitter_new_mail,
						t.via_channel,
						t.custom_customer_satisfaction,						
                                                zendesk_tm.assignee_updated_at,
						zendesk_tm.replies, 
						zendesk_tm.full_resolution_time_in_minutes_business, 
						zendesk_tm.reply_time_in_minutes_business,
						zendesk_tm.full_resolution_time_in_minutes_calendar, 
						zendesk_tm.reply_time_in_minutes_calendar,
						zendesk_tm.solved_at,
						split_part(zendesk_tm.solved_at,'T', 1)::DATE solved_at_date,
						zendesk_tm.requester_wait_time_in_minutes_calendar,
						zendesk_tm.assignee_stations,
						zendesk_tm.group_stations,
						s.score,
						t.custom_region,
						u.custom_country,	
						Case when ZENDESK_TM.full_resolution_time_in_minutes_business <<=7200 then '0 - 5 days'
							 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>7200 and ZENDESK_TM.full_resolution_time_in_minutes_business<<=43200) then '5 - 30 days'
							 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>43200) then '+30 days'
						end as resolution_time,
						case when ZENDESK_TM.replies =0 then '0 touches'
							 when (ZENDESK_TM.replies>>0 and ZENDESK_TM.replies<<3) then '1 to 2 touches'
							 when (ZENDESK_TM.replies>>2 and ZENDESK_TM.replies<<6) then '3 to 5 touches'
							 when (ZENDESK_TM.replies>>5) then '+5 touches'
						end as replies_touches,
		case when score='good' then '1' 
							 when custom_customer_SATISFACTION='csat_rating_3' then '1'
							 when custom_customer_SATISFACTION='csat_rating_4' then '1'
							 when custom_customer_SATISFACTION='csat_rating_5' then '1'
							 else 0 
						end as CSAT_1,
						case when score='bad' then '1' 
							 when custom_customer_SATISFACTION='csat_rating_1' then '1'
							 when custom_customer_SATISFACTION='csat_rating_2' then '1'
							 else 0 
						end as CSAT_2,
                                                case when score='bad' then 'Bad'
						when custom_customer_SATISFACTION='csat_rating_1' then 'Bad'
						when custom_customer_SATISFACTION='csat_rating_2' then 'Bad'
						when score='good' then 'Good' 
						when custom_customer_SATISFACTION='csat_rating_4' then 'Good'
						when custom_customer_SATISFACTION='csat_rating_5' then 'Good'
						when custom_customer_SATISFACTION='csat_rating_3' then 'Neutral'
                                                end as ""Satisfaction with IM"",
								 ticket_merge.tag AS closed_by_merge
				FROM ""zendesk"".""ticket"" AS t
				LEFT JOIN ""zendesk"".""user"" AS u ON t.requester_id = u.id
				LEFT JOIN ""zendesk"".""group"" AS g ON t.group_id = g.id
				LEFT JOIN ""zendesk"".""organization"" AS org ON t.organization_id = org.id
				LEFT JOIN ""zendesk"".""user"" AS u3 ON t.SUBMITTER_ID = u3.id
				LEFT JOIN ""zendesk"".""user"" AS u4 ON t.assignee_id = u4.id
				LEFT JOIN ZENDESK.TICKET_METRICS AS ZENDESK_TM ON t.id=ZENDESK_TM.TICKET_ID
				LEFT JOIN ""satisfaction"" AS s ON t.id = s.ticket_id
				left join zendesk.organization o on o.id=U.organization_id
				left join zendesk.organization zendesk_org on zendesk_org.id=T.organization_id
				left join goglobal_gp_goglobal.v_gp_gg_client_current cc on cc.id=o.custom_customer_id	
				left join goglobal_gp_goglobal.v_gp_gg_client_current cc2 on cc2.id=zendesk_org.custom_customer_id
				left join (
							select distinct id,
								   name as ticket_form
							from  zendesk.ticket_form_history t2
							where name in ('Shared Services','Internal Request') and active='true'
							) t_form on t_form.id=t.ticket_form_id
				LEFT JOIN (
							SELECT *
							FROM zendesk.ticket_tag
							WHERE tag = 'closed_by_merge'
							) ticket_merge ON t.id=ticket_merge.ticket_id
			)
select distinct gpp_zendesk.*, tme.type,
	  	(reply_time_in_minutes_business- target_sla) AS TIME_DIF,
		case
			when (reply_time_in_minutes_business- target_sla)>>0 then 'Breach'
			when (reply_time_in_minutes_business- target_sla)<<=0 then 'Within'
			ELSE NULL 
		end as SLA_performance,
		case 
			when (reply_time_in_minutes_business- target_sla)>>0 THEN 1
		end as SLA_performance_BREACH,
		case
			when (reply_time_in_minutes_business- target_sla)<<=0 THEN 1
		end as SLA_performance_WITHIN,
		case
			when reply_time_in_minutes_business is null then 1
		end as first_reply_ind,
	   client.accounting_id,
           client.status as client_status, 
	   client.tier_type, 
	   	CASE 
			WHEN client.pricing_model = 0 THEN 'Enterprise'::text
			WHEN client.pricing_model = 1 THEN 'Standard'::text
			ELSE 'Verify Pricing Model'::text
		END AS pricing_model,
		sfdc_health.client_health__c  ""SFDC Client Health"",
		concat(gpp_am.first_name,' ',gpp_am.last_name) AS Account_Manager,
		concat(gpp_ae.first_name,' ',gpp_ae.last_name)  AS Account_Executive,
		client.msa_contract_start_date_peo,
		idr.name as industry
from gpp_zendesk
left join goglobal_gp_goglobal.v_gp_gg_client_current client on client.id=gpp_zendesk.zendesk_gpp_client_id_match
left join (select * 
		   from zendesk.ticket_metric_events 
		   where type='apply_sla') TME on gpp_zendesk.ticket_id_zendesk_text=TME.ticket_id
LEFT JOIN sfdc_health ON sfdc_health.ID=client.ID
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current gpp_am on gpp_am.id = client.gp_account_manager_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current gpp_ae on gpp_ae.id = client.gp_current_sales_rep_id
left join goglobal_gp_goglobal.v_gp_gg_industry_current idr on idr.id = client.industry_id"
d7afd658-12c1-1e4e-41a7-0e9d4f489fe0,Custom SQL Query (gpbidb),postgres,"with comment_history as 
		(
			select tc.ticket_id,
				   tc.id as comment_id,
				   tc.created,
				   tc.body as comment,
				   usr.role,
				   usr.name,
				   usr.email,	   
				   tc.public,
				   row_number()over (partition by tc.ticket_id,usr.role order by tc.created) as comment_nbr_by_role
			from zendesk.ticket_comment tc
			left join zendesk.user usr on tc.user_id=usr.id
			left join zendesk.ticket ticket on tc.ticket_id=ticket.id
			where tc.public='true' and ticket.created_at>>='01-02-2023' --and ticket.id='183073'
			order by tc.ticket_id, tc.created
		),
preceding_comment as 
		(
			select *,
				   lag(comment_history.created, 1) OVER (PARTITION BY comment_history.ticket_id order by comment_history.created) as preceding_created,
				   lag(comment_history.role, 1) OVER (PARTITION BY comment_history.ticket_id order by comment_history.created) as preceding_role,
				   lag(comment_history.comment_nbr_by_role, 1) OVER (PARTITION BY comment_history.ticket_id order by comment_history.created) as preceding_nbr_comment
			from comment_history
		),
first_comment as 
		(
		 SELECT *, 
				case when (preceding_role is null and role='agent' and comment_nbr_by_role='1') then 'Yes'
			 		else 'No'
				end first_comment_by_agent,
				case when (role=preceding_role) then 'Yes'
					 when preceding_role is null then NULL
					 when (role<<>>preceding_role) then 'No'
			   end preceding_same_role
		FROM preceding_comment
		),
next_comments as 
		(
			select *,
				   row_number()over (partition by first_comment.ticket_id order by first_comment.created) as order_comments
			from first_comment 
			where role='agent' and preceding_role='end-user' and COMMENT_NBR_BY_ROLE>>1 AND preceding_nbr_comment>>1 and first_comment_by_agent='No'
		),
next_comments_END_USER as 
		(
			select *,
				   row_number()over (partition by first_comment.ticket_id order by first_comment.created) as order_comments
			from first_comment 
			where role<<>>'agent' and preceding_role='agent' and COMMENT_NBR_BY_ROLE>>1 AND preceding_same_role='No' and first_comment_by_agent='No'
		)			
		
select distinct ticket.id,
TM.REPLIES,
		second_comment.TICKET_ID,
		second_comment.COMMENT_ID,
		second_comment.CREATED,
		second_comment.COMMENT,
		second_comment.ROLE,
		second_comment.NAME,
		second_comment.EMAIL,
		second_comment.PUBLIC,
		second_comment.COMMENT_NBR_BY_ROLE,
		second_comment_end.CREATED AS PRECEDING_CREATED,
		second_comment_end.ROLE AS PRECEDING_ROLE,
		second_comment_end.COMMENT_NBR_BY_ROLE AS PRECEDING_NBR_COMMENT,
		second_comment_end.FIRST_COMMENT_BY_AGENT,
		(second_comment.created-second_comment_end.created)as second_response,
		EXTRACT(epoch FROM (second_comment.created-second_comment_end.created))/3600 as second_response_hours
from zendesk.ticket ticket 
left join (
			select *
		   	from next_comments_END_USER
		   	where order_comments='1'
		  ) second_comment_end on second_comment_end.ticket_id=ticket.id

left join (
			select *
		   	from next_comments
		   	where order_comments='1'
		  ) second_comment on second_comment.ticket_id=ticket.id
left join ZENDESK.TICKET_METRICS TM on TM.ticket_id=ticket.id
where ticket.created_at>>='01-02-2023'  --and ticket.id='211591'"
d7afd658-12c1-1e4e-41a7-0e9d4f489fe0,Custom SQL Query (gpbidb),,
d7afd658-12c1-1e4e-41a7-0e9d4f489fe0,Custom SQL Query (gpbidb),postgres,"select distinct tfh.ticket_id,
		tfh.updated,
		tfh.field_name,
		usr.name new_value,
		usr_mod.name as modifier
from zendesk.ticket_field_history tfh
left join zendesk.user usr on tfh.value::numeric=usr.id::numeric
left join zendesk.user usr_mod on tfh.user_id=usr_mod.id
where  field_name='assignee_id'-- and user_id='1534320771222'
UNION ALL
select distinct tfh.ticket_id,
		tfh.updated,
		tfh.field_name,
		grp.name new_value,
		usr_mod.name as modifier
from zendesk.ticket_field_history tfh
left join zendesk.group grp on tfh.value::numeric=grp.id::numeric
left join zendesk.user usr_mod on tfh.user_id=usr_mod.id
where  field_name='group_id'-- and user_id='1534320771222'
UNION ALL
select distinct tfh.ticket_id,
		tfh.updated,
		tfh.field_name,
		tfh.value  new_value,
		usr_mod.name as modifier
from zendesk.ticket_field_history tfh
left join zendesk.user usr_mod on tfh.user_id=usr_mod.id
where field_name='status'-- and user_id='1534320771222'
UNION ALL
select distinct tfh.ticket_id,
		tfh.updated,
		tfh.field_name,
		tfh.value  new_value,
		usr_mod.name as modifier
from zendesk.ticket_field_history tfh
left join zendesk.user usr_mod on tfh.user_id=usr_mod.id
where  field_name='priority'-- and user_id='1534320771222'"
d7afd658-12c1-1e4e-41a7-0e9d4f489fe0,Custom SQL Query (gpbidb),postgres,"with groups as (select distinct tfh.ticket_id,
		tfh.updated,
		tfh.field_name,
		grp.name new_value,
		usr_mod.name as modifier,
		row_number()over (partition by ticket_id order by updated )  as first_group
from zendesk.ticket_field_history tfh
left join zendesk.group grp on tfh.value::numeric=grp.id::numeric
left join zendesk.user usr_mod on tfh.user_id=usr_mod.id
where  field_name='group_id'
)
select *
from groups 
where first_group='1'"
d80697fe-d5d1-9cd4-d2d0-9171ca0596a8,Asset Downloaded Report,postgres,"SELECT DISTINCT
            leads.id AS lead_id,
            leads.asset_downloaded_c,
            leads.hot_form_c,
            leads.partner_acquisition__c,
			opps.id AS opp_id,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    ELSE NULL::text
                END AS client_region,
                CASE WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    ELSE date_trunc('month'::text, opps.created_date)
                END AS mql_cohort_month,
			leads.created_date AS mql_date,
            leads.lead_source,
                CASE
                    WHEN leads.lead_source IS NULL THEN opps.lead_source
                    ELSE leads.lead_source
                END::text AS lead_or_opp_source,
			leads.country AS lead_country,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    ELSE NULL::text
                END AS client_country,
				leads.campaign__source__c AS campaign_name,
				leads.website,
                CASE
                    WHEN leads.converted_opportunity_id IS NULL THEN 1::bigint
                    ELSE rank() OVER (PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date)
                END AS row_num
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
			 WHERE (opps.type IS NULL OR opps.type::text <<>> 'Existing Business'::text)
             AND (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
             AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text)
             AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text)
             AND leads.asset_downloaded_c IS NOT NULL
			 --AND leads.created_date BETWEEN '2022-09-01' AND '2022-09-30'
			 ORDER BY leads.created_date DESC"
d88a9e2f-df3d-1de2-617c-d08aea0f10e3,Pro Level (Customer Data flagged by Churn),,
d8f69f96-fc04-f041-75d3-ca57d795ea9e,list,postgres,"with 
workbooks as (
    select
        item_id
        ,item_name as workbook_name
        ,description
        ,item_hyperlink
    from tableau.site_content
)

,events as (
    SELECT 
        project_name
        ,site_name
        ,actor_user_id
        ,actor_user_name
        ,e.event_name
        ,event_type
        ,event_id
        ,event_date
        ,actor_license_role
        ,actor_site_role
        ,item_type
        ,e.item_id
        ,e.item_name
        ,workbook_name
        ,historical_item_name
        ,item_owner_email
        ,item_repository_url
        ,historical_item_repository_url
        ,run_date
        ,suspend.event_name as suspended
        ,md.max_date
    FROM tableau.ts_events e

    left join (
        select 
            item_id
            ,event_name 
        from tableau.ts_events 
        WHERE event_name = 'Suspend Extract Refresh Due to Inactivity' 
    ) suspend on e.item_id = suspend.item_id

    left join (
        SELECT  
            item_id
            ,item_name
            ,event_name
            ,MAX(event_date) as max_event_date
            ,1 as max_date
        FROM tableau.ts_events
        where event_name = 'Publish Workbook'
        group by 1,2,3
    ) as md on (e.item_id = md.item_id and e.event_name = md.event_name and e.event_date = md.max_event_date)
)

,events_full_outer_join as (
	select 
		a.*
		,con.item_type as item_type_content
	from events a
	full outer join tableau.site_content as con 
	on a.workbook_name=con.item_name
)

,views as (
    select 
        item_id
        ,count(actor_user_id) as views
    from events_full_outer_join
    where true
        and event_date>>=NOW() - INTERVAL '90 DAY'
        
    group by 1
    order by 2 desc
)

select 
    a.*
    ,b.views
from workbooks a
left join views b
on a.item_id=b.item_id
order by b.views"
d981658c-957b-9892-216d-fad4a92ae9fd,Custom SQL Query (gpbidb),postgres,"SELECT DISTINCT opp.*, 
				acc.name AS partner_name,
				use.name AS partner_dev_Owner
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opp
LEFT JOIN salesforce.v_gp_sfdc_account_current_pacific_time acc
ON opp.partner2__c=acc.id
LEFT JOIN salesforce.v_gp_sfdc_user_current use
ON opp.partner_development_owner_lookup__c=use.id"
d981658c-957b-9892-216d-fad4a92ae9fd,Custom SQL Query (gpbidb),postgres,"WITH Catalogue AS (	--Customer Catalogue for GPP, SFDC 
			 Select Distinct
				Client.id AS GPP_id, 
				Client.name AS customer_name,
				Mdm_GG.Parent_name as MDM_Parent_Name, 
	            Client.salesforce_account_id AS integration_id,
	            mdm_GG.source_id AS mdm_id,
				mdm_GG.child_name as SFDC_Account_Name,
				CASE 
					WHEN Client.salesforce_account_id IS NOT NULL AND mdm_GG.source_id IS NOT NULL THEN Client.salesforce_account_id
					WHEN Client.salesforce_account_id IS NULL AND mdm_GG.source_id IS NOT NULL THEN mdm_GG.source_id
					WHEN Client.salesforce_account_id IS NOT NULL AND mdm_GG.source_id IS  NULL THEN Client.salesforce_account_id
				END as SFDC_Account_id
			 FROM goglobal_gp_goglobal.v_gp_gg_client_current AS Client
			 Left Join repo.v_gp_mdm_customer AS t2 ON Client.id::VARCHAR = t2.source_id
			 Left Join 
			 (  Select Distinct  
					mdm_customer.*
				FROM repo.v_gp_mdm_customer mdm_customer
				Where source = 'SFDC Customer'
			 ) AS mdm_GG On t2.parent_name = mdm_GG.parent_name
			Where Client.is_demo_client = 'False'
			Order By Client.id ASC
			),
Revenue AS (with conversion as (
					select co.currency_code, 
						   co.currency_name,
						   co.name,
						   fxr.currency_id,
						   fxr.target_currency_id,
						   co2.name as target_currency, 
						   DATE(date_trunc('month',fxr.date)) AS year_month, 
						   AVG(fxr.rate) as avg_monthly_rate
					from goglobal_gp_goglobal.v_gp_gg_fxrate_current fxr
					left join goglobal_gp_goglobal.v_gp_gg_country_current co on fxr.currency_id=co.id
					left join goglobal_gp_goglobal.v_gp_gg_country_current co2 on fxr.target_currency_id=co2.id
					where target_currency_id='247' 
					GROUP BY 1,2,3,4,5,6,7
					)
SELECT DISTINCT BILLS.START_DATE,
		bills.CLIENT_ID,
		BILLS.CLIENT,
		case when bills.billing_currency='United States Dollar' then SUM(bills.billing_amount)
				else (SUM(bills.billing_amount) * conversion.avg_monthly_rate) 
		end as management_fee
FROM goglobal_gp_goglobal.v_gp_gg_total_bills_mat bills
left join conversion on conversion.year_month=bills.start_date and conversion.currency_name=bills.billing_currency
WHERE type  = 'Management Fee' and document_type='1' and bill_type_name in ('First Bill', 'Regular') and  bills.billing_amount>>0 
			and start_date>>='01-01-2021' 
			--and client_id='1'
group by BILLS.START_DATE, bills.CLIENT_ID, BILLS.CLIENT, bills.billing_currency, conversion.avg_monthly_rate
ORDER BY 2,1)
select Revenue.*, Catalogue.sfdc_account_id from Revenue
Left join Catalogue
ON revenue.client_id=Catalogue.gpp_id"
d98c83fa-80b0-cce8-b178-7d428147de28,v_gp_sfdc_master_marketing_dashboard,,
d98c83fa-80b0-cce8-b178-7d428147de28,v_gp_sfdc_master_marketing_dashboard,postgres,"SELECT 
id,
existing_business_deal_classification_c,
existing_business_opp_type_c,
existing_business_opp_type_detail_c
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time"
d98c83fa-80b0-cce8-b178-7d428147de28,v_gp_sfdc_master_marketing_dashboard,postgres,"SELECT DISTINCT is_gp_recruit_customer_c,
is_gp_contractor_customer_c,
pricing_model_c,
sbqq_primary_c,
is_deleted,
sbqq_opportunity_2_c
FROM salesforce.sbqq_quote_c
WHERE sbqq_primary_c='TRUE'
and is_deleted='FALSE'"
d98c83fa-80b0-cce8-b178-7d428147de28,Custom SQL Query (gpbidb),postgres,"With 
Leads_Opps as ( /*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
				Select Distinct
					CASE
                    	WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    	ELSE date_trunc('month'::text, opps.created_date)
                	END AS MQL_Cohort_Month,
					leads.id as lead_id,
					opps.id as opp_id,
					leads.is_converted,
					leads.converted_opportunity_id,
					CASE
						WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
						WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						ELSE NULL::text
					END AS client_region,
					leads.created_date AS mql_date,
					leads.converted_date,
					leads.partner_acquisition__c AS partner_acq_leads,
					leads_owner.name as leads_owner_name,
					leads_owner_manager.name as leads_owner_manager,
					opps_owner.name as opps_owner_name,
					opps_owner_manager.name as opps_owner_manager, 
					opps.created_date,
					opps.sales__accepted__date__c as SAL_Accepted_Date,
					opps.s_a_l__c,
                    opps.s_a_l_by__sales__c,
					opps.record_type_bi__c,
					opps.close_date AS msa_date,
					opps.stage_name,	
					opps.partner_acquisition__c AS partner_acq_opps,
					opps.type AS opportunity_type,
					opps.is_won AS opp_won, 
					opps.what_is_your_primary_product_interest__c AS what_is_opps,
					opps.record_type_text_id_c AS record_type_opps,
					opps.pricing_model__c AS pricing_model_opps,
					opps.id AS opps_id,
					CASE
                        WHEN leads.lead_source IS NULL THEN opps.lead_source
                        ELSE leads.lead_source
                    END::text as Lead_or_Opp_Source,
					CASE
						WHEN dev_own.name IS NULL THEN 1
						ELSE 0
						END AS Partner_develop_owner_flag,
					CASE
         				WHEN leads.converted_opportunity_id IS NULL THEN leads_owner.name
         				ELSE opps.bdr_owner_name
      					END AS bdr_owner_name,
					CASE
         				WHEN bdr_owner_name IS NULL THEN 1
         				ELSE 0
      					END AS bdr_owner_name_flag,
					CASE
         				WHEN acc_partn.name IS NULL THEN 1
         				ELSE 0
      					END AS Partner_flag,
					CASE
         				WHEN opps.b_d_r__date__c IS NULL THEN 1
         				ELSE 0
      					END AS b_d_r_date_c_flag,
					CASE 
						WHEN (opps.type <<>> 'Existing Business' OR opps.type IS NULL)
					     And (opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
  						 And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
						 And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
					Then 'Non Partner Opp or Existing Business'
					Else 'Partner Opp or Existing Business'
					End as Opp_Go_Flag
				From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             	Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
				Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
				Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner ON opps_owner.id = opps.owner_id
				Left Join salesforce.v_gp_sfdc_user_current leads_owner_manager ON leads_owner_manager.id = leads_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner_manager ON opps_owner_manager.id = opps_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
				LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c = acc_partn.id
				--Where  CASE WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
				--	   ELSE date_trunc('month'::text, opps.created_date)
                --END >>= '2019-01-01'
				), 
     MQL as (
				Select Distinct
					'MQL' as Cohort_Stage, 
		 			lead_id as lead_or_opp_id,
		 			MQL_Date::date as Point_time_date,
		 			leads_owner_name as Lead_or_Opp_Owner_name,
		 			leads_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where (partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) 
		 		And lead_id is not null
				),
MQL_to_SQL as (
				Select Distinct
					'MQL to SQL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					Created_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_id is not null
				),
SQL_to_SAL as (
				Select Distinct
					'SQL to SAL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					SAL_Accepted_Date::date as Point_time_date, 
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And s_a_l_by__sales__c = 'Yes'
				),
SAL_to_MSA as (
				Select Distinct
					'SAL to MSA' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					MSA_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_won ='true'
				AND (pricing_model_opps <<>> 'Contractor Only' OR pricing_model_opps IS NULL)
				),
Full_Union as (
				Select 
					* 
				From MQL
					Union All
				Select 
					* 
				From MQL_to_SQL
					Union AlL
				Select 
					* 
				From SQL_to_SAL
					Union AlL
				Select 
					* 
				From SAL_to_MSA
				),
				--SELECT DISTINCT * FROM Full_Union
				--where lead_or_opp_id in ('0066T000016KebcQAC','0066T000015ryGIQAY','0060W000014Tn0HQAS','0066T000015s5vyQAA','0066T000016Km8fQAC'
										--'0066T000016KsYHQA0','0066T000015rlGgQAI','0066T000016KqClQAK','0066T000015rsKVQAY')
				--where point_time_date between '2021-05-07' AND '2021-07-30'
				--AND cohort_stage='SAL to MSA'
Weekly_Funnel as ( 
				Select Distinct
					Cohort_stage, 
					Client_region,
					Partner_flag,
					Partner_develop_owner_flag,
					b_d_r_date_c_flag,
					bdr_owner_name_flag,
					Coalesce(Lead_or_Opp_Source, 'nulo') as Lead_or_Opp_Source,
					Coalesce(Lead_or_Opp_Owner_Name, 'nulo') as Lead_or_Opp_Owner_Name,
					Coalesce(Lead_or_Opp_Owner_Manager, 'nulo') as Lead_or_Opp_Owner_Manager,
					--point_time_date,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date - '12 weeks'::interval)::date as twelve_weeks_ago, 
					(date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date as Week_at_Friday,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date + '6 days'::interval)::date as Week_at_Next_Thursday,  
					Count(distinct lead_or_opp_id) as Count_Leads_or_opps
					--lead_or_opp_id
				From Full_Union 
				Group by 1,2,3,4,5,6,7,8,9,10,11,12
				Order by cohort_stage, (date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date asc --date_trunc('week', point_time_date + 5)- '5 days'::interval asc
				),
				--select distinct * from Weekly_Funnel 
				--where Week_at_Friday between '2021-05-07' AND '2021-08-05'
				--AND cohort_stage='SAL to MSA'
Date_Catalogue as (
				Select Distinct 
					WAF.Week_at_Friday as Week_at_Friday_C,
					WF.Cohort_stage as Cohort_Stage_c,
					WF.Client_region as Client_region_c,
					WF.Lead_or_Opp_Source as Lead_or_Opp_Source_c,
					WF.Lead_or_Opp_Owner_Name as Lead_or_Opp_Owner_Name_c,
					WF.Lead_or_Opp_Owner_Manager as Lead_or_Opp_Owner_Manager_c,
					WF.Partner_flag as Partner_flag_c,
					WF.Partner_develop_owner_flag as Partner_develop_owner_flag_c,
					WF.b_d_r_date_c_flag as b_d_r_date_c_flag_c,
					WF.bdr_owner_name_flag as bdr_owner_name_flag_c,
					0 as Count_Leads_or_opps_C
				From (Select Distinct Week_at_Friday From Weekly_Funnel) WAF, 
				(Select Distinct Cohort_stage, Client_region, Lead_or_Opp_Source, Lead_or_Opp_Owner_Name, Lead_or_Opp_Owner_Manager, Partner_flag, Partner_develop_owner_flag, b_d_r_date_c_flag, bdr_owner_name_flag from Weekly_funnel) WF 
				Order by WF.Cohort_stage, WAF.Week_at_Friday asc
				), --Select * from Date_Catalogue where cohort_stage_c = 'SAL to MSA' and week_at_friday_c between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC' 
Dates_Aligned as (
				Select Distinct
					DC.*,
					Coalesce(Funnel.twelve_weeks_ago::date, (DC.Week_at_Friday_C - '12 weeks'::interval)::date) as  twelve_weeks_ago,
					Coalesce(Funnel.week_at_next_thursday, (DC.Week_at_Friday_C + '6 days'::interval)::date) as week_at_next_thursday, 
					Coalesce(Funnel.count_leads_or_opps, DC.count_leads_or_opps_c) as Count_leads_or_opps_final
				From Date_Catalogue DC
				Left Join Weekly_funnel Funnel on Funnel.week_at_friday = DC.week_at_friday_c
					and Funnel.cohort_stage = DC.cohort_stage_c
					and Funnel.Client_region = DC.Client_region_c
					and Funnel.Lead_or_Opp_Source = DC.Lead_or_Opp_Source_c
					and Funnel.Lead_or_Opp_Owner_Name = DC.Lead_or_Opp_Owner_Name_C
					and Funnel.Lead_or_Opp_Owner_Manager = DC.Lead_or_Opp_Owner_Manager_C
					and Funnel.Partner_flag = DC.Partner_flag_c
					and Funnel.Partner_develop_owner_flag = DC.Partner_develop_owner_flag_c
					and Funnel.b_d_r_date_c_flag = DC.b_d_r_date_c_flag_c
					and Funnel.bdr_owner_name_flag = DC.bdr_owner_name_flag_c
				) --Select * from Dates_Aligned where Week_at_Friday_C between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC'
Select Distinct 
	WF.Cohort_stage_c,
	WF.Client_region_c,
	WF.Lead_or_Opp_Source_c,
	WF.Lead_or_Opp_Owner_Name_c,
	WF.Lead_or_Opp_Owner_Manager_c,
	WF.Partner_flag_c,
	WF.Partner_develop_owner_flag_c,
	WF.b_d_r_date_c_flag_c,
	WF.bdr_owner_name_flag_c,
	WF.twelve_weeks_ago, 
	WF.Week_at_Friday_c,
	WF.Week_at_Next_Thursday,
	WF.Count_Leads_or_opps_final,
	Sum(L12M.Count_Leads_or_opps_final) as Sum_L12M_Funnel
From Dates_aligned WF
Left Join (select Cohort_stage_c, Client_region_c, Lead_or_Opp_Source_c, Lead_or_Opp_Owner_Name_c, Lead_or_Opp_Owner_Manager_c, Partner_flag_c, Partner_develop_owner_flag_c, b_d_r_date_c_flag_c, bdr_owner_name_flag_c, Week_at_Friday_c, Count_Leads_or_opps_final From Dates_aligned where Count_Leads_or_opps_final<<>> 0) L12M 
	on L12M.Week_at_Friday_c between WF.twelve_weeks_ago and WF.Week_at_Friday_c
	and WF.Cohort_stage_c = L12M.Cohort_stage_c
	and WF.Client_region_c = L12M.Client_region_c
	and WF.Lead_or_Opp_Source_c = L12M.Lead_or_Opp_Source_c
	and WF.Lead_or_Opp_Owner_Name_c = L12M.Lead_or_Opp_Owner_Name_c
	and WF.Lead_or_Opp_Owner_Manager_c = L12M.Lead_or_Opp_Owner_Manager_c
	and WF.Partner_flag_c = L12M.Partner_flag_c
	and WF.Partner_develop_owner_flag_c = L12M.Partner_develop_owner_flag_c
	and WF.b_d_r_date_c_flag_c = L12M.b_d_r_date_c_flag_c
	and WF.bdr_owner_name_flag_c = L12M.bdr_owner_name_flag_c
Group by WF.Cohort_stage_c, WF.Client_region_c, WF.Lead_or_Opp_Source_c, WF.Lead_or_Opp_Owner_Name_c, WF.Lead_or_Opp_Owner_Manager_c, WF.Partner_flag_c, WF.Partner_develop_owner_flag_c, WF.b_d_r_date_c_flag_c, WF.bdr_owner_name_flag_c, WF.twelve_weeks_ago, WF.Week_at_Friday_c, WF.Week_at_Next_Thursday, WF.Count_Leads_or_opps_final
Having  Sum(L12M.Count_Leads_or_opps_final) is not null
Order by WF.Cohort_stage_c, WF.Week_at_Friday_c asc"
d98c83fa-80b0-cce8-b178-7d428147de28,Contractor Reporting (gpbidb),postgres,"WITH SFDC AS (SELECT account.client_region_billing_country AS client_region,
	account.billing_country AS client_country,
	opps.id AS opp_id,
	opps.lead_source,
	opps.s_a_l_by__sales__c,
	dev_own.name AS partner_development_owner,
	acc_partn.name AS partner,
	--opps.record_type_bi__c AS record_type,
	--opps.partner_acquisition__c AS partner_acq_opps,
	opps.type AS opp_type,
	opps.stage_name,
	opps.created_date,
        opps.close_date,
        opps.sales__accepted__date__c,
			  opps.is_won,
	opps.what_is_your_primary_product_interest__c AS what_ppi,
    sbqq.is_gp_contractor_customer_c AS gp_contractor_customer,
    sbqq.pricing_model_c AS pricing_model_primary_quote,
    sbqq.sbqq_primary_c AS primary_quote
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
LEFT JOIN salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
LEFT JOIN
(SELECT id, sbqq_opportunity_2_c, is_gp_contractor_customer_c, pricing_model_c, sbqq_primary_c
	FROM salesforce.sbqq_quote_c
	WHERE is_deleted = FALSE
	AND sbqq_primary_c = TRUE
) sbqq ON opps.id=sbqq.sbqq_opportunity_2_c
WHERE 
(opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text)),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      created_date::date as Point_time_date,
      *
   From SFDC
   Where --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	opp_id is not null
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      sales__accepted__date__c::date as Point_time_date,
      *
   From SFDC
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	s_a_l_by__sales__c= 'Yes'
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      close_date::date as Point_time_date,
      *
   From SFDC
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	is_won ='true'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
   FULL_UNION as (
	SELECT * FROM MQL_to_SQL
UNION ALL
	SELECT * FROM SQL_to_SAL
UNION ALL
	SELECT * FROM SAL_to_MSA)
SELECT * FROM FULL_UNION"
d9c770ac-a162-8cc5-1539-278ffc1ccea6,Custom SQL Query (gpbidb),postgres,"With
Master_Marketing as (
        Select Distinct 
            Extract(year from MQL_Cohort_Month) as MQL_Cohort_Year, 
            Extract(quarter from MQL_Cohort_Month) as MQL_Cohort_Quarter, 
            MQL_Cohort_Month,
            (DATE_PART('year', Point_time_date) - DATE_PART('year', MQL_Cohort_Month::date)) * 12 +
            (DATE_PART('month', Point_time_date) - DATE_PART('month', MQL_Cohort_Month::date)) as Month_Difference,
            Cohort_stage,
            Tier,
            lead_or_opp_id
        From salesforce.v_gp_sfdc_master_marketing
        Where MQL_Cohort_Month >>= '2019-01-01'
        order by Cohort_stage, MQL_Cohort_Month, Extract(quarter from MQL_Cohort_Month) asc
        ),
Year_Quarter_Cohorts as (
        Select Distinct 
            Extract(year from MQL_Cohort_Month) as MQL_Cohort_Year, 
            Extract(quarter from MQL_Cohort_Month) as MQL_Cohort_Quarter, 
            Cohort_stage, 
            Case 
                When cohort_stage = 'MQL' then 'MQL to SQL'
                When cohort_stage = 'MQL to SQL' then 'SQL to SAL'
                When cohort_stage = 'SQL to SAL' then 'SAL to MSA'
            End as Previous_Stage_Count,
            Tier,
            count(distinct lead_or_opp_id) as Unique_Leads_or_Opps
        From salesforce.v_gp_sfdc_master_marketing
        Where MQL_Cohort_Month >>= '2019-01-01'
        group by 1,2,3,4,5
        order by Cohort_stage, Extract(year from MQL_Cohort_Month), Extract(quarter from MQL_Cohort_Month) asc
        ) 
Select Distinct 
    Master_Marketing.*,
    Year_Cohort.Unique_Leads_or_Opps as Year_Cohort_Count, 
    Quarter_Cohort.Unique_Leads_or_Opps as Quarter_Cohort_Count
From Master_Marketing
Left Join Year_Quarter_Cohorts Quarter_Cohort on Master_Marketing.MQL_Cohort_Year = Quarter_Cohort.MQL_Cohort_Year and Master_Marketing.MQL_Cohort_Quarter = Quarter_Cohort.MQL_Cohort_Quarter and Master_Marketing.Cohort_Stage = Quarter_Cohort.Previous_Stage_Count and Master_Marketing.Tier = Quarter_Cohort.Tier
Left Join (Select Distinct MQL_Cohort_Year, Previous_Stage_Count, Tier, Sum(Unique_Leads_or_Opps) as Unique_Leads_or_Opps From Year_Quarter_Cohorts Group by 1,2,3 ) Year_Cohort on Master_Marketing.MQL_Cohort_Year = Year_Cohort.MQL_Cohort_Year and Master_Marketing.Cohort_Stage = Year_Cohort.Previous_Stage_Count and Master_Marketing.Tier = Year_Cohort.Tier
Order by Master_Marketing.Cohort_Stage, Master_Marketing.MQL_Cohort_Month, Master_Marketing.Month_Difference asc"
d9ddf152-ac96-0943-61d2-d56841bea10c,v_gp_sfdc_marketing_dashboard (salesforce.v_gp_sfdc_marketing_dashboard) (gpbidb),,
da0929cc-07f1-daa4-228f-b3114b881aa1,Netherlands,postgres,"With gender as(select professional_id, country_custom_field_id, value as gender from goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current where country_custom_field_id='180'),
BSN as (select professional_id, country_custom_field_id, value as BSN from goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current where country_custom_field_id='179'),
tax_id_number as (select professional_id, country_custom_field_id, value as tax_id_number from goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current where country_custom_field_id='80'),
ssn as (select professional_id, country_custom_field_id, value as ssn from goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current where country_custom_field_id='114'),
oib as (select professional_id, country_custom_field_id, value as oib from goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current where country_custom_field_id='26')
select t1.id, concat(t1.first_name,' ',t1.last_name)as Professional, T1.STATUS,t2.name as Client, t4.name as Country,
		t1.legal_full_name,t1.goes_by, t1.personal_Email,t1.contract_start_date, t1.birth_date,
		gender.gender,
		T1.ANNUAL_BASE_SALARY, T5.NAME AS CURRENCY,
		BSN.BSN, tax_id_number.tax_id_number, ssn.ssn,oib.oib,
		t6.address1 as Domicile,T6.ADDRESS2 AS ADDRESS2,
		t6.city as City,
		T6.POSTAL_CODE,
		mp.employment_country,
		mp.is_failed_to_launch,
		mp.service_class,
mp.is_demo_client
from goglobal_gp_goglobal.v_gp_gg_professional_current t1
left join goglobal_gp_goglobal.v_gp_gg_master_professional as mp on t1.id = mp.internal_id
left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on t1.client_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t3 on t1.lsp_country_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t4 on t3.country_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t5 on t1.ANNUAL_BASE_SALARY_CURRENCY=t5.id
Left join goglobal_gp_goglobal.v_gp_gg_address_current t6 on t1.home_address_id=t6.id
LEFT JOIN gender ON gender.PROFESSIONAL_ID=T1.ID
LEFT JOIN BSN ON BSN.PROFESSIONAL_ID=T1.ID
LEFT JOIN ssn ON ssn.PROFESSIONAL_ID=T1.ID
LEFT JOIN tax_id_number ON tax_id_number.PROFESSIONAL_ID=T1.ID
LEFT JOIN oib ON oib.PROFESSIONAL_ID=T1.ID
where mp.employment_country in ('Netherlands','Spain','Portugal','Croatia') and
(date_trunc('month',t1.contract_start_date)=date_trunc('month',current_date) 
 or date_trunc('month',t1.contract_start_date)=date_trunc('month',current_date - interval '3 month')
  or date_trunc('month',t1.contract_start_date)=date_trunc('month',current_date + interval '1 month'))"
da332c1a-800f-4bbd-1652-fb34cd8441c9,Custom SQL Query (gpbidb),postgres,"select cc.id ""Customer ID"",
	   cc.name ""Customer"",
	   case when cc.status='1' then 'Active'
	   		when cc.status='2' then 'Inactive'
	   end ""Customer Status"",
case when cc.pricing_model=0 then 'Enterprise'
			when cc.pricing_model=1 then 'Standard'
		end as pricing_model,
	   co.name ""Employment Country"",
	   pro.id ""Internal ID"",
	   pro.external_id ""GP Professional ID"",
	   pro.first_name ""First Name"",
	   pro.last_name ""Last Name"",
	   pro.legal_full_name ""Professional Legal Full Name"",
	   case when pro.status='1' then 'New'
	   	 	when pro.status='2' then 'Onboarding'
			when pro.status='3' then 'Active'
			when pro.status='4' then 'Terminating'
			when pro.status='5' then 'Inactive'
	   end ""Status"",
	   pro.birth_date ""Birth Date"",
	   age(current_date, pro.birth_date) ""Age"",
	   pro.preferred_pronoun ""Preferred Pronoun"",
	   pro.title ""Job Title"",
	   usr.email ""Preferred for Login Email"",
	   adrs.city ""Personal City"",
	   co2.name ""Personal Country"",
	   case when pro.residency_status='1' then 'US Citizen'
	   		when pro.residency_status='2' then 'Expat'
			when pro.residency_status='3' then 'Local National'
			when pro.residency_status='1' then 'Third Country National'
			else NULL
		end ""Residency Status"",
		pro.contract_start_date ""Contract Start Date"",
		pro.contract_end_date ""Contract End Date"",
		pro.payroll_start_date ""Payroll Start Date"",
		pro.payroll_end_date ""Payroll End Date"",
		pro.annual_base_salary ""Annual Base Salary"",
		curr.name ""Annual Base Salary Currency"",
		curr.currency_code ""Annual Base Salary Currency Code"",
		concat(customer_am.first_name, ' ', customer_am.last_name) ""Account Manager"",
		lsp.name ""Related LSP"",
		hr_specialist.Human_resources ""Human Resources Specialist"",
		GDR.GENDER
from goglobal_gp_goglobal.v_gp_gg_professional_current pro
left join goglobal_gp_goglobal.v_gp_gg_client_current cc on pro.client_id=cc.id
left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco on pro.client_country_id=cco.id
left join goglobal_gp_goglobal.v_gp_gg_country_current co on cco.country_id=co.id
left join goglobal_gp_goglobal.v_gp_gg_user_current usr on pro.user_id=usr.id
left join goglobal_gp_goglobal.v_gp_gg_address_current adrs on pro.home_address_id=adrs.id
left join goglobal_gp_goglobal.v_gp_gg_country_current co2 on adrs.country_id=co2.id
left join goglobal_gp_goglobal.v_gp_gg_country_current curr on pro.annual_base_salary_currency=curr.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current customer_am ON cc.gp_account_manager_id = customer_am.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current lspco ON pro.lsp_country_id = lspco.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_current lsp ON lspco.LSP_id = lsp.id
left join (
			select pca.professional_id,
	   			   pca.role,	
	   			   concat(cpc.first_name,' ',cpc.last_name) as Human_resources
			from goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current pca
			LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_person_current cpc ON pca.client_person_id = cpc.id
			where role='2') hr_specialist on pro.id=hr_specialist.professional_id
left join (
			select professional_id,
				value as gender
			from goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current
			where country_custom_field_id='141'
		  )	GDR ON GDR.PROFESSIONAL_ID=PRO.ID		
where pro.is_failed_to_launch='false' and cc.is_demo_client='false'"
da332c1a-800f-4bbd-1652-fb34cd8441c9,Custom SQL Query (gpbidb),postgres,"select distinct cal_date,professional_id,active_flag
from goglobal_gp_goglobal.v_TABLEAU_HEADCOUNT_DASHBOARD
where active_flag='Active' and CAL_DATE<<=date_trunc('month',current_date)"
dac96328-2df3-ffa1-306f-c438e18aefd9,ADP,postgres,select * from workday_hris.v_non_sensitive_workday_data
dac96328-2df3-ffa1-306f-c438e18aefd9,Operations,postgres,"SELECT        
               distinct a.id AS customer_id,
               a.name AS customer_name,
               CASE WHEN a.status = '1' THEN 'Active'
                          WHEN a.status = '2' THEN 'Inactive'
               END AS customer_status,
               CASE WHEN a.pricing_model = 0 THEN 'Enterprise'
                          WHEN a.pricing_model = 1 THEN 'Standard'
               END as customer_pricing_model,
			   a.salesforce_account_id AS gpp_salesforce_account_id,
			   mdm_match.source_id AS mdm_salesforce_account_id,
			   CASE WHEN a.salesforce_account_id  IS NOT NULL THEN a.salesforce_account_id 
               		ELSE mdm_match.source_id 
				END AS id_match,
			   g.name AS customer_billing_country,
			   g.gp_region AS customer_billing_region,
			   CONCAT (h.first_name, ' ', h.last_name)AS customer_account_manager,
			   CONCAT (i.first_name, ' ', i.last_name)AS customer_account_executive,
               a.is_gp_contractor_customer,
               a.is_gp_recruit_customer,
               a.is_bank_info_approved,
			   b.name AS customer_industry,
			   a.msa_contract_start_date_peo,
			   a.msa_contract_start_date_services,
			   a.msa_contract_start_date_aso,
			   a.msa_contract_start_date_sourcing,
			   c.id AS professional_id,
			   CONCAT(c.first_name, ' ', c.last_name) AS professional_name,
			   CASE WHEN c.status = '1' THEN 'New'
			        WHEN c.status = '2' THEN 'Onboarding'
					WHEN c.status = '3' THEN 'Active'
					WHEN c.status = '4' THEN 'Terminating'
					WHEN c.status = '5' THEN 'Inactive'
					END AS prof_status,
			   c.is_failed_to_launch,
			   c.client_country_id,
			   e.name AS prof_employment_country,
                           	case when e.name in ('Australia',
						'Christmas Island (Australia)',
						'Cocos (Keeling) Islands (Australia)',
						'Cook Islands (New Zealand)',
						'Fiji',
						'Kiribati',
						'Marshall Islands',
						'Micronesia',
						'Nauru',
						'New Zealand',
						'Niue (New Zealand)',
						'Norfolk Island (Australia)',
						'Papua New Guinea',
						'Solomon Islands',
						'Tokelau (New Zealand)',
						'Tonga',
						'Tuvalu',
						'Vanuatu') then 'Australia - NZ'
					when e.name in ('China',
									'Hong Kong (China)',
									'Macau (China)',
									'Mongolia') then 'Greater China'
					when e.name in ('Japan',
									'North Korea',
									'South Korea') then 'Japan and Korea'
					when e.name in ('Brunei',
									'Cambodia',
									'Indonesia',
									'Laos',
									'Malaysia',
									'Myanmar',
									'Palau',
									'Philippines',
									'Thailand',
									'Timor-Leste',
									'Vietnam') then 'SEA'
					when e.name in ('Singapore',
								  	'Taiwan') then 'Singapore and Taiwan'
					when e.name in ('Bangladesh',
									'Bhutan',
									'India',
									'Maldives',
									'Nepal',
									'Pakistan',
									'Sri Lanka') then 'South Asia'
					else null
				end as Market_unit,
			   e.gp_region AS prof_employment_region,
			   CASE
               WHEN d.is_gp_entity IS TRUE THEN 'GP Entity'::text
               WHEN d.is_gp_entity IS FALSE THEN 'LSP Entity'::text
               ELSE 'UNKNOWN'::text END AS entity_type,
                           c.service_class,
                           c.payroll_start_date,
                           c.payroll_end_date,
                           k.offboard_start_date,
                           k.offboard_end_date,
                           k.reason_type,
                           k.will_be_backfilling_this_position,
                           l.onboard_start_date,
                           l.onboard_end_date,
                           l.gp_empl_contract_prepared_by,
                           c.contract_start_date,
                           c.contract_end_date,
                           c.date_created,
                           c.is_sponsoring_visa,
						   m.id AS lsp_id,
						   m.name AS prof_lsp_name,
						   m.status AS lsp_status,
						   c.is_gp_recruit AS prof_is_gp_recruit,
						   benefit_type.name AS Benefit_type,
	                       CASE WHEN country_benefit.mandatory='1' THEN 'Mandatory'
	   		               WHEN country_benefit.mandatory='0' THEN 'Supplemental'
	                       END AS benefit_Plan_Type,
	                       benefit_current.name AS benefit_Plan_Name,
		                   benefit_current.custom benefit_custom,
		                   CASE WHEN benefit_current.active='1' THEN 'Yes'
                           WHEN benefit_current.active='0' THEN 'No' ELSE null
	                       END AS benefit_Active_plan,
		                   benefit_enrollment.benefit_id,
	                       benefit_enrollment.status as benefit_prof_status


FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_industry_current AS b ON a.industry_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_current AS c ON a.id = c.client_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS d ON c.lsp_country_id = d.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current AS cco ON c.client_country_id = cco.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS e ON cco.country_id = e.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS f ON a.billing_address_id = f.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS g ON f.country_id = g.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS h ON a.gp_account_manager_id= h.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS i ON a.gp_current_sales_rep_id= i.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current AS k ON c.professional_offboarding_id = k.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current AS l ON c.professional_onboarding_id = l.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_current m ON d.lsp_id = m.id
LEFT JOIN benefits_gp_benefits.v_benefits_professional_benefit_enrollment_current benefit_enrollment ON c.id = benefit_enrollment.professional_external_id::INTEGER
LEFT JOIN benefits_gp_benefits.v_benefits_benefit_current benefit_current ON benefit_enrollment.benefit_id = benefit_current.id::INTEGER AND e.id=benefit_current.country_external_id::INTEGER
LEFT JOIN benefits_gp_benefits.v_benefits_benefit_type_current benefit_type ON benefit_current.benefit_type_id=benefit_type.id::INTEGER
LEFT JOIN benefits_gp_benefits.v_benefits_country_benefit_type_current country_benefit ON benefit_type.id::INTEGER = country_benefit.benefit_type_id AND country_benefit.country_external_id::INTEGER = e.id::INTEGER
LEFT JOIN repo.v_gp_mdm_customer AS mdm ON a.id::VARCHAR = mdm.source_id
LEFT JOIN (SELECT *
    		FROM repo.v_gp_mdm_customer
    		WHERE source = 'SFDC Customer'
    		) AS mdm_match ON mdm.parent_name = mdm_match.parent_name
WHERE a.is_demo_client = false"
dac96328-2df3-ffa1-306f-c438e18aefd9,Operations,postgres,"with conversion as 
				(
					select co.currency_code, 
						   co.currency_name,
						   co.name,
						   fxr.currency_id,
						   fxr.target_currency_id,
						   co2.name as target_currency,
						   fxr.date,
						   DATE(date_trunc('month',fxr.date)) AS year_month, 
						   fxr.rate,	
						   row_number() over (partition by co.currency_code order by fxr.date desc) as Row
					from goglobal_gp_goglobal.v_gp_gg_fxrate_current fxr
					left join goglobal_gp_goglobal.v_gp_gg_country_current co on fxr.currency_id=co.id
					left join goglobal_gp_goglobal.v_gp_gg_country_current co2 on fxr.target_currency_id=co2.id
					where target_currency_id='247' 
				),
AVERAGE_RATE as 
				(select distinct currency_code, 
						   currency_name,
						   name,
						   currency_id,
						   target_currency_id,
						   target_currency,
						   year_month, 
						   AVG(rate) AVG_RATE
				 FROM CONVERSION
				 GROUP BY 1,2,3,4,5,6,7
				)
select MAT.*,
		AVERAGE_RATE.AVG_RATE,
		CASE WHEN MAT.BILLING_CURRENCY='United States Dollar' THEN BILLING_CURRENCY
			 ELSE 'United States Dollar'
		END AS USD_CURRENCY,
		(MAT.BILLING_AMOUNT*AVERAGE_RATE.AVG_RATE) AS USD_BILLING_AMOUNT
from goglobal_gp_goglobal.v_gp_gg_total_bills_mat MAT
LEFT JOIN AVERAGE_RATE ON MAT.BILLING_CURRENCY=AVERAGE_RATE.NAME AND MAT.START_DATE=AVERAGE_RATE.YEAR_MONTH
where type in ('Insurance Premium','Medical Insurance','Insurance Premium - Life') 
AND START_DATE>>='2021-01-01'"
dac96328-2df3-ffa1-306f-c438e18aefd9,Operations,postgres,"WITH satisfaction AS (SELECT id, s.ticket_id, score, created_at, last_date, comment, reason
	FROM ""zendesk"".""satisfaction_rating"" AS s
	INNER JOIN (
	SELECT ticket_id, MAX(created_at) AS last_date
	FROM ""zendesk"".""satisfaction_rating""
	GROUP BY ticket_id) AS m
	ON (s.ticket_id = m.ticket_id AND created_at = last_date)),
gpp_zendesk as
(
SELECT 
	    CASE WHEN O.CUSTOM_CUSTOMER_ID IS NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
	         WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NULL THEN O.CUSTOM_CUSTOMER_ID
	         WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
			 WHEN O.CUSTOM_CUSTOMER_ID = zendesk_org.CUSTOM_CUSTOMER_ID THEN zendesk_org.CUSTOM_CUSTOMER_ID
			else null
		END AS zendesk_gpp_client_id_match,
	    CASE WHEN cc.name IS NULL AND cc2.name IS NOT NULL THEN cc2.name
	         WHEN cc.name IS NOT NULL AND cc2.name IS NULL THEN cc.name
			 WHEN cc.name IS NOT NULL AND cc2.name IS not NULL THEN cc2.name
	         WHEN cc.name = cc2.name THEN cc.name
			 else null
	         END AS zendesk_gpp_client_name_match,
	    
	    CASE WHEN O.NAME IS NULL AND zendesk_org.name IS NOT NULL THEN zendesk_org.name
	         WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NULL THEN O.NAME
			 WHEN O.NAME IS NOT NULL AND zendesk_org.name IS not NULL THEN zendesk_org.NAME
	         WHEN O.NAME = zendesk_org.name THEN zendesk_org.NAME
			 ELSE NULL 
	         END AS Zendesk_client_org,
		t.created_at,
		t.created_at::date as date,	
		t.created_at::time as time,
		t.organization_id AS customer_id,
							g.name AS group,
							t.requester_id,t.submitter_id,
							u.name AS requester,
							U.ROLE AS requester_ROLE,
							t.id AS ticket_id_ZENDESK,
							t.status,
							T.PRIORITY,
							T.CUSTOM_CATEGORY,
							U.organization_id AS USER_ORGANIZATION_ID,
							T.organization_id,
							U3.NAME AS SUBMITTER,
							U3.ROLE AS SUBMITTER_ROLE,
							t.via_channel,
							zendesk_tm.replies, zendesk_tm.full_resolution_time_in_minutes_business, zendesk_tm.reply_time_in_minutes_business,
							s.score,
							Case when ZENDESK_TM.full_resolution_time_in_minutes_business <<=7200 then '0 - 5 days'
								 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>7200 and ZENDESK_TM.full_resolution_time_in_minutes_business<<=43200) then '5 - 30 days'
								 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>43200) then '+30 days'
							end as resolution_time,
							case when ZENDESK_TM.replies =0 then '0 touches'
								 when (ZENDESK_TM.replies>>0 and ZENDESK_TM.replies<<3) then '1 to 2 touches'
								 when (ZENDESK_TM.replies>>2 and ZENDESK_TM.replies<<6) then '3 to 5 touches'
								 when (ZENDESK_TM.replies>>5) then '+5 touches'
							end as replies_touches,
							ticket_merge.tag as closed_by_merge
							FROM ""zendesk"".""ticket"" AS t
							LEFT JOIN ""zendesk"".""user"" AS u
							ON t.requester_id = u.id
							LEFT JOIN ""zendesk"".""group"" AS g
							ON t.group_id = g.id
							LEFT JOIN ""zendesk"".""organization"" AS org
							ON t.organization_id = org.id
							LEFT JOIN ""zendesk"".""user"" AS u3
							ON t.SUBMITTER_ID = u3.id
							LEFT JOIN ZENDESK.TICKET_METRICS AS ZENDESK_TM ON t.id=ZENDESK_TM.TICKET_ID
							LEFT JOIN ""satisfaction"" AS s ON t.id = s.ticket_id
							left join zendesk.organization o on o.id=U.organization_id
							left join zendesk.organization zendesk_org on zendesk_org.id=T.organization_id
							left join goglobal_gp_goglobal.v_gp_gg_client_current cc on cc.id=o.custom_customer_id
							left join goglobal_gp_goglobal.v_gp_gg_client_current cc2 on cc2.id=zendesk_org.custom_customer_id
							left join (
										SELECT *
										FROM zendesk.ticket_tag
										WHERE tag = 'closed_by_merge'
										) ticket_merge on t.id=ticket_merge.ticket_id
 )
select *
from gpp_zendesk
where status <<>> 'deleted'"
dac96328-2df3-ffa1-306f-c438e18aefd9,Operations,postgres,"SELECT a.id, b.onboard_end_date AS date, CASE WHEN b.onboard_end_date IS NOT NULL THEN 'Onboard'END AS process
FROM goglobal_gp_goglobal.v_gp_gg_professional_current a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current b
ON a.professional_onboarding_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current d
ON a.client_id = d.id
WHERE d.is_demo_client = false
AND b.onboard_end_date  IS NOT NULL


UNION 


SELECT a.id, b.offboard_end_date AS date, CASE WHEN b.offboard_end_date IS NOT NULL THEN 'Offboard'END AS process
FROM goglobal_gp_goglobal.v_gp_gg_professional_current a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current b
ON a.professional_offboarding_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current d
ON a.client_id = d.id
WHERE d.is_demo_client = false
AND b.offboard_end_date IS NOT NULL
ORDER BY 1"
dac96328-2df3-ffa1-306f-c438e18aefd9,Operations,postgres,"SELECT 
        sfdc.id AS sfdc_id,
		sfdc.name AS sfdc_account_name,
		sfdc.type AS sfdc_account_type,
		sfdc.client_health__c
FROM salesforce.v_gp_sfdc_account_current SFDC"
dac96328-2df3-ffa1-306f-c438e18aefd9,Operations,postgres,"with a as 
	(
		select distinct c.id as Country_id,
			c.name as Country, 
			bt.name as Benefit_type, 
			btc.mandatory, 
			bt.id as btc_id 
	from benefits_gp_benefits.v_benefits_country_benefit_type_current btc
	left join goglobal_gp_goglobal.v_gp_gg_country_current c on btc.country_external_id::integer = c.id
	left join benefits_gp_benefits.v_benefits_benefit_type_current bt on bt.id=btc.benefit_type_id
	),
b as 
	(
		select t1.id as client_country_id,
				t1.client_id, 
				t1.country_id,
				t2.name as country 
		from goglobal_gp_goglobal.v_gp_gg_client_country_current t1 
		left join goglobal_gp_goglobal.v_gp_gg_country_current t2 on t1.country_id=t2.id 
		order by 1,2
	),
c as
	(
		select b.client_id,
				b.client_country_id,
				b.country_id, 
				a.country_id as country_id_1,
				b.country,
				a.benefit_type,
				a.mandatory,
				a.btc_id
		from b 
		left join a on b.country_id=a.country_id
	),
d as
	(
		select bc.id,
				bc.active,
				b.name as plan_name,
				case when b.active=true then 'Yes'
					 when b.active=false then 'No' 
					 else null
				end as Active_plan, 
				bc.customer_external_id as client_id, 
				c.id as country_id,
				c.name as Country, 
				bt.id as btc_id, 
				bt.name as benefit_type
		from benefits_gp_benefits.v_benefits_customer_benefit_offering_current bc, 
			 benefits_gp_benefits.v_benefits_benefit_current b, 
			 goglobal_gp_goglobal.v_gp_gg_country_current c, 
			 benefits_gp_benefits.v_benefits_benefit_type_current bt
		where bc.benefit_id = b.id::integer and b.country_external_id::integer = c.id and b.benefit_type_id = bt.id::integer and bc.active = true
	),
e as 
	(
		select c.*, 
				d.plan_name,
				d.active_plan
		from c 
		left join d on c.client_id=d.client_id::integer and c.country_id=d.country_id and c.btc_id=d.btc_id
	)

		select e.client_id, 
				z.name as Client,
				z.status as client_status, 
				z.is_demo_client,
				e.client_country_id,
				e.country_id,
				e.country,
				e.benefit_type, 
				e.mandatory,
				e.plan_name,
				e.active_plan,
				case when (e.mandatory=true and e.plan_name is not null) then 'Offering'
						when (e.mandatory=true and plan_name is null) then 'Setup Incomplete'
						when (e.mandatory=false and plan_name is not null) then 'Offering'
						when (e.mandatory=false and plan_name is  null) then 'Not Offering'
						else null
				END AS STATUS
	from e 
	left join goglobal_gp_goglobal.v_gp_gg_client_current z on e.client_id=z.id"
dac96328-2df3-ffa1-306f-c438e18aefd9,Operations,postgres,"with conversion as 
				(
					select co.currency_code, 
						   co.currency_name,
						   co.name,
						   fxr.currency_id,
						   fxr.target_currency_id,
						   co2.name as target_currency,
						   fxr.date,
						   DATE(date_trunc('month',fxr.date)) AS year_month, 
						   fxr.rate,	
						   row_number() over (partition by co.currency_code order by fxr.date desc) as Row
					from goglobal_gp_goglobal.v_gp_gg_fxrate_current fxr
					left join goglobal_gp_goglobal.v_gp_gg_country_current co on fxr.currency_id=co.id
					left join goglobal_gp_goglobal.v_gp_gg_country_current co2 on fxr.target_currency_id=co2.id
					where target_currency_id='247' 
				),
latest_rate as 
				(select distinct *
				 from conversion
				 where row='1'
				)

SELECT pro.id,
pro.status,
first_name, last_name,
		pro.annual_base_salary,
		(pro.annual_base_salary/12) as monthly_base_salary,
		pro.annual_base_salary_currency,
		latest_rate.rate,
		((pro.annual_base_salary/12) * latest_rate.rate) as monthly_base_salary_USD 
FROM goglobal_gp_goglobal.v_gp_gg_professional_current pro
left join latest_rate on latest_rate.currency_id=pro.annual_base_salary_currency
left join goglobal_gp_goglobal.v_gp_gg_client_current cc on pro.client_id=cc.id 
where pro.is_failed_to_launch='false' and is_demo_client='false'"
dac96328-2df3-ffa1-306f-c438e18aefd9,Operations,postgres,"SELECT cal_date,
       client_id,
	   professional_id,
	   new_flag,
	   active_flag,
	   termination_flag,
           tenure_months

FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
WHERE DATE_TRUNC('month', cal_date) <<= DATE_TRUNC('month', CURRENT_DATE)
and active_flag='Active'"
dac96328-2df3-ffa1-306f-c438e18aefd9,Operations,postgres,"SELECT
        cc.id,
		cc.name as client,
	    cb_org.employee_count
		
	FROM goglobal_gp_goglobal.v_gp_gg_client_current cc
	LEFT JOIN client_investor.client_investor_gp_cb as gp_cb on cc.id = gp_cb.client_id
    LEFT JOIN crunchbase.v_cb_organizations_latest_mat cb_org on gp_cb.uuid = cb_org.uuid	
	WHERE cc.is_demo_client = 'False' 
	ORDER BY cc.id"
dac96328-2df3-ffa1-306f-c438e18aefd9,Operations,postgres,"WITH client_historic AS(
SELECT date_trunc('month'::text, cal.cal_date::timestamp with time zone)::date AS cal_date,
       client.id,
	   client.name,
	   	 CASE WHEN client.msa_contract_start_date_peo IS NOT NULL THEN client.msa_contract_start_date_peo
	          WHEN client.msa_contract_start_date_peo IS NULL AND client.msa_contract_start_date_services IS NOT NULL THEN client.msa_contract_start_date_services
	          WHEN client.msa_contract_start_date_services IS NULL AND client.msa_contract_start_date_sourcing IS NOT NULL THEN client.msa_contract_start_date_sourcing
	          WHEN client.msa_contract_start_date_sourcing IS NULL AND client.msa_contract_start_date_aso IS NOT NULL THEN client.msa_contract_start_date_aso
	          ELSE client.msa_contract_start_date_peo END AS gpp_contract_date

	   
FROM gp_calendar cal, 
     goglobal_gp_goglobal.v_gp_gg_client_current client

	 
WHERE cal.first_of_month IS TRUE
AND cal.cal_date >>= '2012-01-01'
AND DATE_TRUNC('month',cal.cal_date) <<= DATE_TRUNC('month', CURRENT_DATE)
AND client.is_demo_client = FALSE)

SELECT client_historic.*,
		 CASE WHEN DATE_TRUNC('month',gpp_contract_date) = DATE_TRUNC('month', cal_date) THEN TRUE END AS Contract_start,
		 CASE WHEN DATE_TRUNC('month',gpp_contract_date) <<= DATE_TRUNC('month', cal_date) THEN TRUE END AS in_platform
FROM client_historic"
db5aa201-8a8f-1529-408f-c8f3ffa687a9,Oracle Eloqua,,
d43c02c3-78c0-717b-ebf3-bff12efa1a09,Custom SQL Query (gpbidb) (2),postgres,"WITH SALESFORCE AS
(SELECT sf.*
 FROM salesforce.v_gp_sfdc_marketing_dashboard  AS sf
 LEFT JOIN salesforce.v_gp_sfdc_opportunity_current AS opp ON sf.opp_id = opp.id	
 LEFT JOIN salesforce.v_gp_sfdc_account_current AS acc ON opp.account_id = acc.id
 WHERE sf.point_time_date >>= '2020-01-01'
 AND sf.point_time_date <<= CURRENT_DATE
 AND  cohort_stage = 'SAL to MSA'
	 
),
GPP AS (
SELECT DISTINCT 
	      CASE WHEN a.salesforce_account_id IS NOT NULL THEN a.salesforce_account_id
          ELSE mdm_GG.source_id
        END as gpp_id_match,
	      a.id,
	      a.name,
          a.pricing_model,
a.billing_country,
a.billing_region,
	     CASE WHEN a.msa_contract_start_date_peo IS NOT NULL THEN a.msa_contract_start_date_peo
	    WHEN a.msa_contract_start_date_peo IS NULL AND a.msa_contract_start_date_services IS NOT NULL THEN a.msa_contract_start_date_services
	    WHEN a.msa_contract_start_date_services IS NULL AND a.msa_contract_start_date_sourcing IS NOT NULL THEN a.msa_contract_start_date_sourcing
	    WHEN a.msa_contract_start_date_sourcing IS NULL AND a.msa_contract_start_date_aso IS NOT NULL THEN a.msa_contract_start_date_aso
	  ELSE a.msa_contract_start_date_peo END AS ma_start_date,
	      b.pop_current, 
	      c.pop_to_date,
	      d.min_pay_start,
	      d.max_pay_start,
	      d.min_pay_end,
	      d.max_pay_end
	       
	FROM (SELECT a.id, a.salesforce_account_id,a.pricing_model,a.name,a.msa_contract_start_date_services,a.msa_contract_start_date_peo, a.msa_contract_start_date_aso,a.msa_contract_start_date_sourcing, b.billing_region, b.billing_country
		 FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
                 LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_client as b
                 ON a.id = b.id
		 WHERE a.is_demo_client = false) AS a
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_current
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC ('month', cal_date)= DATE_TRUNC ('month', CURRENT_DATE)
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS b
	ON a.id = b.client_id
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_to_date
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND payroll_start_date <<= CURRENT_DATE
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS c
	ON a.id = c.client_id
	
	LEFT JOIN (SELECT client_id, MAX(payroll_start_date)AS max_pay_start, MAX (payroll_end_date)AS max_pay_end,
				  MIN(payroll_end_date)AS min_pay_end, MIN(payroll_start_date) AS min_pay_start
				 FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			   WHERE (product_type_id <<>> '4' OR product_type_id IS NULL)
				 GROUP BY 1) d
	ON a.id = d.client_id
	
	
	LEFT JOIN repo.v_gp_mdm_customer AS e
  ON a.id::VARCHAR = e.source_id
	
  LEFT JOIN (SELECT *
  FROM repo.v_gp_mdm_customer
  WHERE source = 'SFDC Customer'
  ) AS mdm_GG
  ON e.parent_name = mdm_GG.parent_name
	ORDER BY 2
),
FINAL AS(SELECT 
		 SALESFORCE.*,
     GPP.*,
	
	  
	  	CASE 
		   
			 WHEN GPP.id IS NOT NULL AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) <<= 90
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.min_pay_start IS NULL
			 THEN 'Newly Signed'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND date_trunc('month', GPP.min_pay_start) >>= date_trunc('month',CURRENT_DATE) THEN 'Onboarding' 
			  
		   WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current >>0  THEN 'Currently Active'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.max_pay_end << CURRENT_DATE OR (date_trunc('month', GPP.max_pay_start) >>= date_trunc('month',CURRENT_DATE) AND GPP.max_pay_end >> CURRENT_DATE)
			 THEN 'Currently Inactive'
			 
			 
			 WHEN (GPP.id IS NOT NULL 
			 AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) >>90
			 AND GPP.pop_to_date IS NULL)
		   OR (GPP.id IS NOT NULL AND GPP.ma_start_date IS NULL AND SALESFORCE.msa_date IS NULL )
       THEN 'Never Active' 
		 
		   WHEN (GPP. id IS NULL
				 AND SALESFORCE.cohort_stage = 'SAL to MSA'
         AND SALESFORCE.opp_type = 'New Business'
         AND SALESFORCE.stage_name = 'Closed Won')
				 THEN 'Unknown'
			
			 END AS gpp_account_status
			
FROM SALESFORCE
LEFT JOIN GPP
ON SALESFORCE.account_id = GPP.gpp_id_match
AND SALESFORCE.cohort_stage = 'SAL to MSA'
AND SALESFORCE.opp_type = 'New Business'
AND SALESFORCE.stage_name = 'Closed Won'
		 )
SELECT *
FROM FINAL"
d43c02c3-78c0-717b-ebf3-bff12efa1a09,Custom SQL Query (gpbidb) (2),,
d43c02c3-78c0-717b-ebf3-bff12efa1a09,Custom SQL Query (gpbidb) (2),postgres,"SELECT 
client_id,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('1') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS NEW_STATUS,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('2') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS Onb_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('3') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS ACTIVE_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('4') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS TERM_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('5') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS INACT_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= TRUE AND (service_class IS NULL OR service_class <<>>'4')) AS ftl

FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS pro
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS client ON pro.client_id = client.id
WHERE client.is_demo_client = FALSE
GROUP BY pro.client_id"
dbae4abb-cb07-1cfb-108a-ab800dfc04a3,v_gp_sfdc_marketing_dashboard (salesforce.v_gp_sfdc_marketing_dashboard) (gpbidb),,
dbae4abb-cb07-1cfb-108a-ab800dfc04a3,Custom SQL Query (gpbidb),postgres,"SELECT DISTINCT
       client.id, 
       client.name,
	   client.pricing_model,
	   partner.name AS partner, 
	   CASE WHEN client.msa_contract_start_date_peo IS NOT NULL THEN client.msa_contract_start_date_peo
	        WHEN client.msa_contract_start_date_peo IS NULL AND client.msa_contract_start_date_services IS NOT NULL THEN client.msa_contract_start_date_services
	        WHEN client.msa_contract_start_date_services IS NULL AND client.msa_contract_start_date_sourcing IS NOT NULL THEN client.msa_contract_start_date_sourcing
	        WHEN client.msa_contract_start_date_sourcing IS NULL AND client.msa_contract_start_date_aso IS NOT NULL THEN client.msa_contract_start_date_aso
	   ELSE client.msa_contract_start_date_peo END AS gpp_contract_date,
	   client.salesforce_account_id AS integration_id,
	   SFDC.min_close_date AS min_sfdc_close_date,
	   prof.first_pop,
	   pop.current_month_pop,
	   contractors.current_month_contractors
FROM goglobal_gp_goglobal.v_gp_gg_client_current client
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current partner ON client.partners_referral_id = partner.id
LEFT JOIN (SELECT client_id, MIN(payroll_start_date) AS first_pop
		   FROM goglobal_gp_goglobal.v_gp_gg_professional_current
		   WHERE is_failed_to_launch= false
		   AND (service_class <<>> '4' OR service_class IS NULL)
                   AND date_trunc('month', payroll_start_date) <<= date_trunc('month', CURRENT_DATE)
		   GROUP BY 1) AS prof ON client.id = prof.client_id
		   
LEFT JOIN (SELECT client_id, COUNT(DISTINCT professional_id) AS current_month_pop
		   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
		   WHERE DATE_TRUNC('month', cal_date) = DATE_TRUNC ('month', CURRENT_DATE)
		   AND (service_class IS NULL OR service_class <<>> '4')
		   AND active_flag = 'Active'
		   GROUP BY 1) AS pop ON client.id = pop.client_id
		   
LEFT JOIN (SELECT client_id, COUNT(DISTINCT professional_id) AS current_month_contractors
		   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
		   WHERE DATE_TRUNC('month', cal_date) = DATE_TRUNC ('month', CURRENT_DATE)
		   AND service_class = '4'
		   AND active_flag = 'Active'
		   GROUP BY 1) AS contractors ON client.id = contractors.client_id
		   
LEFT JOIN (SELECT DISTINCT account_id, stage_name, type, MIN(close_date) AS min_close_date
		  FROM salesforce.v_gp_sfdc_opportunity_current
		  WHERE stage_name = 'Closed Won'
		  AND ( record_type_text_id_c IS NULL OR record_type_text_id_c <<>> 'Potential Partner Opportunity')
		  AND (what_is_your_primary_product_interest__c IS NULL OR what_is_your_primary_product_interest__c <<>> 'G-P Contractor')
		  AND (pricing_model__c IS NULL OR pricing_model__c <<>> 'Contractor only')
		  AND (type IS NULL OR type <<>> 'Existing Business')
		  GROUP BY 1,2,3 ) AS SFDC 
		  ON client.salesforce_account_id = SFDC.account_id

		   
WHERE client.is_demo_client = false
ORDER BY client.id"
d42a9012-b385-d9f5-d1e6-e7403b453be0,Customer WO DnB Data,,
d42a9012-b385-d9f5-d1e6-e7403b453be0,Toggle,,
c9615e3d-183c-3787-6049-52f00d9e95d4,glassdoor (repo.glassdoor) (gpbidb),,
cb0c85e9-7bf6-ab17-160c-9d88734a6b49,Custom SQL Query (gpbidb),postgres,"WITH CB AS (
        SELECT DISTINCT
            cc.id AS Client_id,
            cc.name AS client_name,
            cb_org.name AS cb_org_name,
            cb_org.status AS cb_org_status,
            ipos.ipo_status AS cb_ipo_status,
            cb_org.founded_on AS cb_founded_on,
            cb_org.employee_count AS cb_employee_count,
            cb_org.num_funding_rounds AS cb_funding_rounds,
            cb_org.total_funding_usd AS cb_total_funding
        FROM goglobal_gp_goglobal.v_gp_gg_client_current cc
        LEFT JOIN client_investor.client_investor_gp_cb AS gp_cb ON cc.id = gp_cb.client_id
        LEFT JOIN crunchbase.v_cb_organizations_latest_mat AS cb_org ON gp_cb.uuid = cb_org.uuid
        LEFT JOIN crunchbase.cb_organizations_ipos AS ipos ON gp_cb.uuid = ipos.uuid
        WHERE cc.is_demo_client = 'False'
        AND cb_org.name IS NOT NULL
        ORDER BY cc.id),
		
dnb AS (SELECT DISTINCT
            Customer_Base.""GPP Customer ID"" AS DnB_GPP_Customer_id, 
            Customer_Base.""GPP Customer Name"" AS DnB_GPP_Customer_Name, 
            Customer_Base.""DUNS Number"" AS Duns_number,
            Yearly_Revenue.""financials_yearlyRevenue_value"" as DnB_Yearly_Revenue_USD,
            Customer_Base.run_date AS DnB_run_date,
			Ind_Type_1.""industryCodes_description"" AS ""D&B Standard Industry Code"",
            Ind_Type_2.""industryCodes_description"" AS ""US Standard Industry Code 1987 - 4 digit"",
            Ind_Type_3.""industryCodes_description"" AS ""North American Industry Classification System 2017"",
            Ind_Type_4.""industryCodes_description"" AS ""NACE Revision 2"",
            Ind_Type_5.""industryCodes_description"" AS ""D&B Hoovers Industry Code"",
            Ind_Type_6.""industryCodes_description"" AS ""D&B Standard Major Industry Code""
          
        FROM dnb.gpp_clients_duns_numbers Customer_Base
        LEFT JOIN dnb.""ci_financials_yearlyRevenue"" Yearly_Revenue on Customer_Base.""DUNS Number"" = Yearly_Revenue.Duns_number and Yearly_Revenue.""financials_yearlyRevenue_currency"" = 'USD'
        LEFT JOIN dnb.""ci_industryCodes"" Duns_base ON Customer_Base.""DUNS Number"" = Duns_base.Duns_number
		LEFT JOIN dnb.""ci_industryCodes"" Ind_Type_1 ON Duns_base.Duns_number = Ind_Type_1.Duns_number AND Ind_Type_1.""industryCodes_typeDnBCode"" = 3599  AND  Ind_Type_1.""industryCodes_priority"" = 1
        LEFT JOIN dnb.""ci_industryCodes"" Ind_Type_2 ON Duns_base.Duns_number = Ind_Type_2.Duns_number AND  Ind_Type_2.""industryCodes_typeDnBCode"" = 399   AND  Ind_Type_2.""industryCodes_priority"" = 1
        LEFT JOIN dnb.""ci_industryCodes"" Ind_Type_3 ON Duns_base.Duns_number = Ind_Type_3.Duns_number AND  Ind_Type_3.""industryCodes_typeDnBCode"" = 30832 AND  Ind_Type_3.""industryCodes_priority"" = 1
        LEFT JOIN dnb.""ci_industryCodes"" Ind_Type_4 ON Duns_base.Duns_number = Ind_Type_4.Duns_number AND  Ind_Type_4.""industryCodes_typeDnBCode"" = 29104 AND Ind_Type_4.""industryCodes_priority"" = 1
        LEFT JOIN dnb.""ci_industryCodes"" Ind_Type_5 ON Duns_base.Duns_number = Ind_Type_5.Duns_number AND  Ind_Type_5.""industryCodes_typeDnBCode"" = 25838 AND  Ind_Type_5.""industryCodes_priority"" = 1
        LEFT JOIN dnb.""ci_industryCodes"" Ind_Type_6 ON Duns_base.Duns_number = Ind_Type_6.Duns_number AND  Ind_Type_6.""industryCodes_typeDnBCode"" = 24657 AND  Ind_Type_6.""industryCodes_priority"" = 1

        ORDER BY Customer_Base.""GPP Customer ID"" ASC
)

SELECT client.id AS gpp_client_id,
       client.name AS gpp_client_name,
       client.industry AS gpp_industry,
	   client.billing_region AS gpp_client_billing_region,
	   client.billing_country AS gpp_client_blling_country,
           client.partner_referral,
	   cb.cb_org_status,
	   cb.cb_ipo_status,
	   cb.cb_founded_on,
	   cb.cb_employee_count,
	   cb.cb_funding_rounds,
	   cb.cb_total_funding,
	   dnb.duns_number,
           dnb.DnB_Yearly_Revenue_USD,
	   dnb.""D&B Standard Industry Code"" AS dnb_standard_industry_code,
	   dnb.""US Standard Industry Code 1987 - 4 digit"" AS dnb_us_standard_industry_code,
	   dnb.""North American Industry Classification System 2017"" AS dnb_na_industry_class,
	   dnb.""NACE Revision 2"" AS dnb_nace_revision,
	   dnb.""D&B Hoovers Industry Code"" AS dnb_hoovers_industry_code,
	   dnb.""D&B Standard Major Industry Code"" AS dnb_standard_major_ind_code,
	   client_country.Country_id AS gpp_client_country_id,
	   country.name AS gpp_client_country_name,
	   prof.internal_id AS gpp_prof_internal_id,
	   prof.employment_country AS gpp_prof_employment_country,
           prof.employment_country_region AS gpp_prof_employment_region,
	   prof.service_class AS gpp_prof_service_class,
	   prof.is_failed_to_launch AS gpp_prof_is_failed_to_launch,
	   prof.title AS gpp_prof_title
	   
FROM goglobal_gp_goglobal.v_gp_gg_master_client AS client
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current AS client_country ON client.id = client_country.client_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS country On client_country.country_id = country.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_professional AS prof ON client.id = prof.client_id AND country.name = prof.employment_country
LEFT JOIN cb ON client.id = cb.client_id
LEFT JOIN dnb ON client.id = dnb.DnB_GPP_Customer_id
WHERE client.is_demo_client = FALSE
ORDER BY client.id"
cb10bc77-874d-e77b-04a9-7407c4ad2dc1,Custom SQL Query+ (gpbidb),postgres,"WITH t1 AS(SELECT DISTINCT a.professional_id, a.client_person_id, CONCAT (b.first_name, ' ', b.last_name)AS user_name, c.email,
CASE WHEN a.role='6' THEN 'AccountsPayable'
     WHEN a.role='1' THEN 'Client Admin' 
	 WHEN a.role='4' THEN'Expense Approver 1'
     WHEN a.role='10' THEN 'Expense Approver 2' 
	 WHEN a.role='13' THEN 'GP Submit Repor Administrator' 
	 WHEN a.role='2' THEN'Human Resources'
     WHEN a.role='12' THEN 'Invoice Details' 
	 WHEN a.role='3' THEN 'Payroll Approver' 
	 WHEN a.role='5' THEN 'PTO Approver'
     WHEN a.role='11' THEN 'RECRUITGLOBAL'  
	 WHEN a.role='7' THEN 'Stakeholder'  
	 WHEN a.role='8' THEN 'Supervisor Manager'
     WHEN a.role='9' THEN 'Unassigned'   
	 END AS Role
	FROM goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current AS a
	INNER JOIN goglobal_gp_goglobal.v_gp_gg_client_person_current AS b
	ON a.client_person_id = b.id
	INNER JOIN goglobal_gp_goglobal.v_gp_gg_user_current AS c
	ON b.user_id = c.id
	ORDER BY a.professional_id),

t2 AS (SELECT d.id, d.is_contract_prob_period_applies, CONCAT(d.first_name, ' ', d.last_name) AS prof_name, d.client_id, e.name
FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS d
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS e
ON d.client_id = e.id
WHERE d.is_failed_to_launch = 'false'
AND d.is_contract_prob_period_applies = 'true'
AND e.is_demo_client = 'false')

SELECT t2.client_id, t2.name, t1.professional_id, t2.prof_name, t1.user_name, t1.role, t1.email
FROM t1
INNER JOIN t2
ON t1.professional_id = t2.id
WHERE (role = 'Supervisor Manager' OR role = 'Human Resources')
ORDER BY professional_id"
cb10bc77-874d-e77b-04a9-7407c4ad2dc1,Custom SQL Query+ (gpbidb),postgres,"SELECT a.id, CONCAT(a.first_name, ' ', a.last_name) AS professional_name, a.is_contract_prob_period_applies, a.contract_start_date,
a.contract_end_date,
a.contract_prob_period_end_date, (AGE(a.contract_prob_period_end_date,a.contract_start_date)) AS prob_period_duration, a.status,
a.client_id, b.name, a.lsp_country_id,
			CASE WHEN (a.contract_prob_period_end_date - current_date) <<0 THEN 'Already Ended'
			WHEN (a.contract_prob_period_end_date - current_date)<<= 7  AND (a.contract_prob_period_end_date - current_date)>>=0 THEN '1 Week or Less'
			WHEN (a.contract_prob_period_end_date - current_date) >> 7 AND (a.contract_prob_period_end_date - current_date) <<= 30 THEN '1 Month or Less'
			WHEN (a.contract_prob_period_end_date - current_date) >> 30 THEN 'More Than 1 Month'
                        WHEN a.contract_prob_period_end_date IS NULL THEN 'No End Date Set'
			END AS to_end,
a.payroll_start_date, a.payroll_end_date,
		   D.NAME AS country
								
FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS b ON a.client_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_CLIENT_country_current  CCO ON A.CLIENT_COUNTRY_ID=CCO.ID
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current d ON CCO.country_id=D.id
WHERE is_contract_prob_period_applies = 'true' AND is_demo_client = 'false' AND is_failed_to_launch = 'false'"
cc5851b0-2b51-9be3-8e5c-275d74070758,Change Request Analysis,,
ccbf78ff-272d-c232-5849-b34fd1c3c488,Outreach - Calls,postgres,"SELECT
	u.name AS user_name,
	dt.relationship_user_id,
	dt.call_id,
	dt.name AS relationship_sequence_name,
	dt.date,
	CASE WHEN SUM(outbound) != 0 THEN SUM(outbound) ELSE 0 END AS outbound,
	CASE WHEN SUM(inbound) != 0 THEN SUM(inbound) ELSE 0 END AS inbound,
	CASE WHEN SUM(""Answered - Qualified"") != 0 THEN SUM(""Answered - Qualified"") ELSE 0 END AS ""Answered - Qualified"",
	CASE WHEN SUM(""Answered - Follow Up"") != 0 THEN SUM(""Answered - Follow Up"") ELSE 0 END AS ""Answered - Follow Up"",
	CASE WHEN SUM(""Answered - Hold for Future"") != 0 THEN SUM(""Answered - Hold for Future"") ELSE 0 END AS ""Answered - Hold for Future"",
	CASE WHEN SUM(""Answered - Not Interested"") != 0 THEN SUM(""Answered - Not Interested"") ELSE 0 END AS ""Answered - Not Interested"",
	CASE WHEN SUM(""Gatekeeper"") != 0 THEN SUM(""Gatekeeper"") ELSE 0 END AS ""Gatekeeper"",
	CASE WHEN SUM(""Left Voicemail"") != 0 THEN SUM(""Left Voicemail"") ELSE 0 END AS ""Left Voicemail"",
	CASE WHEN SUM(""No Answer"") != 0 THEN SUM(""No Answer"") ELSE 0 END AS ""No Answer"",
	CASE WHEN SUM(""Junk Lead - Wrong Information"") != 0 THEN SUM(""Junk Lead - Wrong Information"") ELSE 0 END AS ""Junk Lead - Wrong Information"",
	CASE WHEN SUM(""Junk Lead - Bad Number"") != 0 THEN SUM(""Junk Lead - Bad Number"") ELSE 0 END AS ""Junk Lead - Bad Number"",
	CASE WHEN SUM(""Junk Lead - Customer Profile"") != 0 THEN SUM(""Junk Lead - Customer Profile"") ELSE 0 END AS ""Junk Lead - Customer Profile"",
	CASE WHEN SUM(""Not Logged"") != 0 THEN SUM(""Not Logged"") ELSE 0 END AS ""Not Logged""
	/*CASE WHEN SUM(""Answered - Already has a solution"") != 0 THEN SUM(""Answered - Already has a solution"") ELSE 0 END AS ""Answered - Already has a solution"",
	CASE WHEN SUM(""Answered - Follow Up"") != 0 THEN SUM(""Answered - Follow Up"") ELSE 0 END AS ""Answered - Follow Up"",
	CASE WHEN SUM(""Answered - Hold for Future"") != 0 THEN SUM(""Answered - Hold for Future"") ELSE 0 END AS ""Answered - Hold for Future"",
	CASE WHEN SUM(""Answered - Just Researching"") != 0 THEN SUM(""Answered - Just Researching"") ELSE 0 END AS ""Answered - Just Researching"",
	CASE WHEN SUM(""Answered - Meeting Set"") != 0 THEN SUM(""Answered - Meeting Set"") ELSE 0 END AS ""Answered - Meeting Set"",
	CASE WHEN SUM(""Answered - No Longer with Company"") != 0 THEN SUM(""Answered - No Longer with Company"") ELSE 0 END AS ""Answered - No Longer with Company"",
	CASE WHEN SUM(""Answered - Not Interested"") != 0 THEN SUM(""Answered - Not Interested"") ELSE 0 END AS ""Answered - Not Interested"",
	CASE WHEN SUM(""Answered - Qualified"") != 0 THEN SUM(""Answered - Qualified"") ELSE 0 END AS ""Answered - Qualified"",
	CASE WHEN SUM(""Answered - Requested more Info"") != 0 THEN SUM(""Answered - Requested more Info"") ELSE 0 END AS ""Answered - Requested more Info"",
	CASE WHEN SUM(""Answered - Wrong Contact"") != 0 THEN SUM(""Answered - Wrong Contact"") ELSE 0 END AS ""Answered - Wrong Contact"",
	CASE WHEN SUM(""Bad Number"") != 0 THEN SUM(""Bad Number"") ELSE 0 END AS ""Bad Number"",
	CASE WHEN SUM(""Dropped Voicemail"") != 0 THEN SUM(""Dropped Voicemail"") ELSE 0 END AS ""Dropped Voicemail"",
	CASE WHEN SUM(""Gatekeeper"") != 0 THEN SUM(""Gatekeeper"") ELSE 0 END AS ""Gatekeeper"",
	CASE WHEN SUM(""Junk Lead - Bad Number"") != 0 THEN SUM(""Junk Lead - Bad Number"") ELSE 0 END AS ""Junk Lead - Bad Number"",
	CASE WHEN SUM(""Junk Lead -  Customer Profile"") != 0 THEN SUM(""Junk Lead -  Customer Profile"") ELSE 0 END AS ""Junk Lead -  Customer Profile"",
	CASE WHEN SUM(""Junk Lead - Wrong Information"") != 0 THEN SUM(""Junk Lead - Wrong Information"") ELSE 0 END AS ""Junk Lead - Wrong Information"",
	CASE WHEN SUM(""Left Voicemail"") != 0 THEN SUM(""Left Voicemail"") ELSE 0 END AS ""Left Voicemail"",
	CASE WHEN SUM(""No Answer"") != 0 THEN SUM(""No Answer"") ELSE 0 END AS ""No Answer"",
	CASE WHEN SUM(""Not Logged"") != 0 THEN SUM(""Not Logged"") ELSE 0 END AS ""Not Logged"",
	CASE WHEN SUM(""Orum"") != 0 THEN SUM(""Orum"") ELSE 0 END AS ""Orum""*/
	FROM
	(
	SELECT 
		call.id AS call_id,
		call.relationship_user_id,
		sequence.name,
		timezone('PDT'::text, date_trunc('hour', call.created_at::timestamp with time zone))::timestamp with time zone AS date,
			CASE WHEN call.direction = 'outbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS outbound,
			CASE WHEN call.direction = 'inbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS inbound,
			CASE WHEN disposition.name = 'Answered - Qualified' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Qualified"",
			CASE WHEN disposition.name = 'Answered - Follow Up' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Follow Up"",
			CASE WHEN disposition.name = 'Answered - Hold for Future' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Hold for Future"",
			CASE WHEN disposition.name = 'Answered - Not Interested' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Not Interested"",
			CASE WHEN disposition.name = 'Gatekeeper' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Gatekeeper"",
			CASE WHEN disposition.name = 'Left Voicemail' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Left Voicemail"",
			CASE WHEN disposition.name = 'No Answer' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""No Answer"",
			CASE WHEN disposition.name = 'Junk Lead - Bad Number' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Bad Number"",
			CASE WHEN disposition.name = 'Junk Lead -  Customer Profile ' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Customer Profile"",
			CASE WHEN disposition.name = 'Junk Lead - Wrong Information' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Wrong Information"",
			CASE WHEN disposition.name IS NULL THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Not Logged""
			/*CASE WHEN call.direction = 'outbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS outbound,
			CASE WHEN call.direction = 'inbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS inbound,
			CASE WHEN disposition.name = 'Answered - Already has a solution' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Already has a solution"",
			CASE WHEN disposition.name = 'Answered - Follow Up' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Follow Up"",
			CASE WHEN disposition.name = 'Answered - Hold for Future' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Hold for Future"",
			CASE WHEN disposition.name = 'Answered - Just Researching' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Just Researching"",
			CASE WHEN disposition.name = 'Answered - Meeting Set' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Meeting Set"",
			CASE WHEN disposition.name = 'Answered - No Longer with Company' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - No Longer with Company"",
			CASE WHEN disposition.name = 'Answered - Not Interested' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Not Interested"",
			CASE WHEN disposition.name = 'Answered - Qualified' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Qualified"",
			CASE WHEN disposition.name = 'Answered - Requested more Info' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Requested more Info"",
			CASE WHEN disposition.name = 'Answered - Wrong Contact' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Wrong Contact"",
			CASE WHEN disposition.name = 'Bad Number' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Bad Number"",
			CASE WHEN disposition.name = 'Junk Lead - Bad Number' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Bad Number"",
			CASE WHEN disposition.name = 'Junk Lead -  Customer Profile' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead -  Customer Profile"",
			CASE WHEN disposition.name = 'Junk Lead - Wrong Information' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Wrong Information"",
			CASE WHEN disposition.name = 'Left Voicemail' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Left Voicemail"",
			CASE WHEN disposition.name = 'No Answer' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""No Answer"",
			CASE WHEN disposition.name IS NULL THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Not Logged"",
			CASE WHEN disposition.name = 'Orum' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Orum""*/
	FROM outreach.v_outreach_call_current call
	LEFT JOIN outreach.v_outreach_call_disposition_current disposition
	ON call.relationship_call_disposition_id = disposition.id
	LEFT JOIN outreach.v_outreach_sequence_current sequence
	ON call.relationship_sequence_id = sequence.id
	--WHERE call.created_at::date BETWEEN '2022-11-01 AND '2021-11-30'
	) AS dt
LEFT JOIN outreach.v_outreach_users_current u
ON dt.relationship_user_id = u.id
GROUP BY 1, 2 , 3, 4, 5
ORDER BY 4 DESC"
ccbf78ff-272d-c232-5849-b34fd1c3c488,Outreach - Calls,postgres,"SELECT user_team.user_id, team.name AS team_name
FROM outreach.user_team user_team
LEFT JOIN outreach.v_outreach_users_current users
ON user_team.user_id = users.id
LEFT JOIN outreach.v_outreach_team_current team
ON user_team.team_id = team.id"
ccbf78ff-272d-c232-5849-b34fd1c3c488,Outreach - Calls,postgres,"SELECT call_tag.call_id, call_tag.tag_name
FROM outreach.call_tag call_tag"
ccda8155-7a3c-b7bd-3920-c454e1647b79,Custom SQL Query+ (gpbidb) (2),postgres,"WITH Leads_Opps AS (
         SELECT DISTINCT 
                         CASE
                             WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                             ELSE date_trunc('month'::text, opps.created_date)
                             END                                 AS mql_cohort_month,
                         leads.id                                AS lead_id,
                         opps.b_d_r__date__c,
                         leads.is_converted,
                         opps.id                                 AS opp_id,
                         leads.converted_opportunity_id,
                         leads.country                           AS lead_country,
                         leads.status                            AS lead_status,
                         opps.opportunity__status__c             AS opp_status,
                         leads.country_code                      AS lead_country_code,
                         leads.lead_tier_c,
                         opps.lead_source_tier_c,
                         CASE
                             WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                             WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                             WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                             ELSE NULL::text
                             END                                 AS client_country,
                         CASE
                             WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                             WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                             WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL
                                 THEN account.client_region_billing_country
                             ELSE NULL::text
                             END                                 AS client_region,
                         leads.created_date                      AS mql_date,
                         leads.converted_date,
                         leads.partner_acquisition__c            AS partner_acq_leads,
                          usr_lead_opp.leads_owner_name,
                         usr_lead_opp.leads_owner_manager,
                         opps.created_date,
                         opps.sales__accepted__date__c           AS sal_accepted_date,
                         opps.s_a_l__c,
                         opps.s_a_l_by__sales__c,
                         opps.record_type_bi__c,
                         opps.close_date                         AS msa_date,
                         opps.stage_name,
                         opps.partner_acquisition__c             AS partner_acq_opps,
                         opps.is_won                             AS opp_won,
                         opps.record_type_text_id_c              AS record_type_opps,
                         usr_lead_opp.opps_owner_name,
                         usr_lead_opp.opps_owner_manager,
                         opps.name                               AS opp_name,
                         opps.type                               AS opp_type,
                         acc_partn.partner_level__c              AS partner_level,
                         opps.pricing_model__c                   AS pricing_model_opps,
			opps.hot_form_c                        AS hot_form_c_opps,
			leads.hot_form_c                       AS hot_form_c_leas,
                         CASE
                            WHEN leads.lead_source IS NULL THEN opps.lead_source
                            ELSE leads.lead_source
                            END::text                           AS lead_or_opp_source,
                        usr_lead_opp.partner_development_owner,
                        usr_lead_opp.bdr_owner_name,
                        usr_lead_opp.bdr_manager_name,
                         acc_partn.name                          AS partner,
                         acc_partn.client_region_billing_country AS partner_region,
                         account.type                            AS account_type,
                         account.pricing_model__c                AS acc_pricing_model,
                         CASE
                             WHEN (opps.record_type_bi__c IS NULL OR
                                   opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) AND
                                  (opps.partner_acquisition__c IS NULL OR
                                   opps.partner_acquisition__c::text <<>> 'Yes'::text) AND
                                  (opps.pricing_model__c IS NULL OR
                                   opps.pricing_model__c::text <<>> 'Contractor only'::text)
                                 THEN 'Non Partner Opp or Existing Business'::text
                             ELSE 'Partner Opp or Existing Business'::text
                             END                                 AS opp_go_flag,
                         opps.update_time                        AS fivetran_synced_opps,
                         acc_partn.billing_country               AS partner_country,
		 				 CASE 
							WHEN leads.converted_opportunity_id IS NULL THEN 1
	 					 	ELSE RANK()  OVER(PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date) END AS row_num
         FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
                  FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
                  LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
                  LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
		 		  --LEFT JOIN salesforce.v_gp_sfdc_user_current users ON users.id::text = opps.owner_id::text
                  --LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_id::text = leads.id::text OR usr_lead_opp.opp_id::text = opps.id::text
		 		  LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp on usr_lead_opp.lead_or_opp_id::text = CASE WHEN leads.id IS NULL 
	THEN opps.id ELSE leads.id END
     ),
	 
MQL as (
   Select Distinct
      'MQL' as Cohort_Stage,
      lead_id as lead_or_opp_id,
      MQL_Date::date as Point_time_date,
      *
   From Leads_Opps 
    WHERE (Leads_Opps.partner_acq_leads::text <<>> 'Yes'::text OR Leads_Opps.partner_acq_leads IS NULL) 
	AND Leads_Opps.lead_id IS NOT NULL
   ),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      Created_date::date as Point_time_date,
      *
   From Leads_Opps 
  WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.opp_id IS NOT NULL
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.s_a_l_by__sales__c::text = 'Yes'::text
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.opp_won = true
   ),
Opp_lost as (
   Select Distinct
      'Opp lost' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      --last_mod_date::date as Point_time_date,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
     WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.opp_won = false
   ),

Full_Union as (
   Select *
   From MQL
   Union All
   Select *
   From MQL_to_SQL
   Union AlL
   Select *
   From SQL_to_SAL
   Union AlL
   Select *
   From SAL_to_MSA
	Union All
   Select *
   From Opp_Lost
   )
SELECT * 
FROM Full_Union"
ccda8155-7a3c-b7bd-3920-c454e1647b79,Custom SQL Query+ (gpbidb) (2),postgres,"SELECT opportunity.id, ofh.max AS opp_status_last_updated
   FROM salesforce.opportunity
     LEFT JOIN (SELECT DISTINCT t1.opportunity_id,
            max(t1.created_date) AS max
           FROM salesforce.opportunity_field_history t1
          WHERE t1.is_deleted = false AND t1.field::text = 'Opportunity_Status__c'::text AND t1.new_value::text = 'BDR Requalify'::text AND t1.created_date = (( SELECT max(tmax.created_date) AS max
                   FROM salesforce.opportunity_field_history tmax
                  WHERE t1.id::text = tmax.id::text))
          GROUP BY t1.opportunity_id) ofh ON ofh.opportunity_id::text = opportunity.id::text
  WHERE opportunity.is_deleted IS FALSE"
ccda8155-7a3c-b7bd-3920-c454e1647b79,Custom SQL Query+ (gpbidb) (2),postgres,"SELECT lead.id, lh.max AS lead_status_last_updated
   FROM salesforce.v_gp_sfdc_lead_current_pacific_time lead
     LEFT JOIN ( SELECT DISTINCT t1.lead_id,
            max(t1.created_date) AS max
           FROM salesforce.lead_history t1
          WHERE t1.is_deleted = false AND t1.field::text = 'Status'::text AND (t1.new_value::text = 'Disqualified'::text OR t1.new_value::text = 'Nurture'::text) AND t1.created_date = (( SELECT max(tmax.created_date) AS max
                   FROM salesforce.lead_history tmax
                  WHERE t1.id::text = tmax.id::text))
          GROUP BY t1.lead_id) lh ON lh.lead_id::text = lead.id::text
  WHERE lead.created_date BETWEEN NOW() - INTERVAL '2 YEARS' AND NOW()
  --lead.is_deleted IS FALSE"
cec33694-f65a-9c00-9ee6-ecdf27c06406,gp_acumatica_ap_transaction (repo.gp_acumatica_ap_transaction) (gpbidb),,
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,Releases details (Jira),postgres,"with valueStreamDomain as (
select domain.name as TDomain, domain.Id as TDomainId, valueStream.name as TValueStream from jira_integration.field_option domain
left join jira_integration.field_option valueStream on valueStream.id = domain.parent_id
)

SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)"",
  valueStreamDomain.TDomain,
  valueStreamDomain.TValueStream
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" 
LEFT JOIN valueStreamDomain on CAST(valueStreamDomain.TDomainId as TEXT) = issue_field_history.value
where issue_field_history.is_active = true and issue_field_history.field_id in ('customfield_10459')"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,Releases details (Jira),postgres,"SELECT CAST(""issue_multiselect_history"".""_fivetran_id"" AS TEXT) AS ""_fivetran_id"",
  ""issue_multiselect_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_multiselect_history)"",
  CAST(""issue_multiselect_history"".""author_id"" AS TEXT) AS ""author_id"",
  CAST(""issue_multiselect_history"".""field_id"" AS TEXT) AS ""field_id"",
  ""issue_multiselect_history"".""is_active"" AS ""is_active"",
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id"",
  ""issue_multiselect_history"".""time"" AS ""time"",
  CAST(""issue_multiselect_history"".""value"" AS TEXT) AS ""value""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where

""issue_multiselect_history"".field_id = 'labels' and ""issue_multiselect_history"".is_active = true and ""issue_multiselect_history"".value in  ('automated-level0',
'automated-level1',
'automated-level2',
'automated-level3')"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,Releases details (Jira),postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
 CAST(""fixVersions"".""value"" as INT) as fixVersionID
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
JOIN ""jira_integration"".""issue_multiselect_history"" ""fixVersions"" on ""fixVersions"".issue_id = ""issue"".id and ""fixVersions"".field_id = 'fixVersions' and ""fixVersions"".is_active = true and ""fixVersions"".value is not NULL
where project in (10000,10103,10166,10164,10153,10010,10145) and _fivetran_deleted = false"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,Releases details (Jira),,
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,Releases details (Jira),postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,CSR tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""StatusPropagation""
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_11013')"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,CSR tickets,postgres,"with valueStreamDomain as (
select domain.name as TDomain, domain.Id as TDomainId, valueStream.name as TValueStream from jira_integration.field_option domain
left join jira_integration.field_option valueStream on valueStream.id = domain.parent_id
)

SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)"",
  valueStreamDomain.TDomain,
  valueStreamDomain.TValueStream
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" 
LEFT JOIN valueStreamDomain on CAST(valueStreamDomain.TDomainId as TEXT) = issue_field_history.value
where issue_field_history.is_active = true and issue_field_history.field_id in ('customfield_10459')"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,CSR tickets,postgres,"with fixVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (fixVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""fixVersionID"",
  ""issue_multiselect_history"".""value"" AS ""fixVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'fixVersions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from fixVersion
left join version on version.""id (version)"" = fixVersion.""fixVersionID"""
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,CSR tickets,postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
""issue_type"".""name"" as ""issueTypeName"",
""labels"".value as ""labelBlocker""
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
LEfT JOIN ""jira_integration"".""issue_type"" ""issue_type"" on ""issue_type"".id = ""issue"".""issue_type""
LEFT JOIN ""jira_integration"".""issue_multiselect_history"" ""labels"" on ""labels"".issue_id = ""issue"".id and ""labels"".field_id = 'labels' and ""labels"".is_active = true and ""labels"".value in  ('blockers') 
where project = 10010 and _fivetran_deleted = false and ""issue"".""issue_type"" = 10401"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,CSR tickets,postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,CSR tickets,postgres,"with affectsVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (affectsVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""affectsVersionID"",
  ""issue_multiselect_history"".""value"" AS ""affectsVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'versions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from version
left join affectsVersion on version.""id (version)"" = affectsVersion.""affectsVersionID"""
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,CSR tickets,postgres,"select c.name as Component,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".component c  on c.id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'components' and is_active= true and ""issue_multiselect_history"".value in ('10469','10470','10471','10472','10473','10597','10598','10480','10496','10497','10498')"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,CSR tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)""
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_10390','customfield_10397', 'customfield_10450','customfield_10470')"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,CSR tickets,postgres,"select 
    ifh.issue_id,
    ifh.value::float
from 
    jira_integration.issue_field_history ifh
where 
    field_id = 'customfield_10023'
    and is_active = true"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,CSR tickets,postgres,"select 
	fo.name as requestTeam,
	""issue_multiselect_history"".issue_id as issueID,
	""issue_multiselect_history"".value as value,
	row_number() over(partition by ""issue_multiselect_history"".issue_id order by ""issue_multiselect_history"".time desc) as rn
    from ""jira_integration"".""issue_multiselect_history""
	left join ""jira_integration"".field_option fo  on fo.id = ""issue_multiselect_history"".""value""::INT
    where 
	""issue_multiselect_history"".field_id = 'customfield_11203' 
	and is_active= true
	and ""issue_multiselect_history"".value in ('15215','15216','15217','15218','15219','15220','15221','15222','15223','15224','15225','15226','15227','15228','15229','15230','15231','15232','15233','15234','15235','15236','15237','15238','15239','15240','15241','15242','15243','15244','15245','15246','15247','15248','15249','15250','15251','15253','15254','15255','15256','15257','15258','15259','15260','15261','15262','15263','15264','15265','15267','15419','15423','15424','15481')"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,CSR tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""StatusPropagation""
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_11014')"
cec34799-50ce-dd2c-1f0f-0b18dc32ce7d,CSR tickets,postgres,"select ""field_option"".name as DevOpsTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_11019'and is_active= true and ""issue_multiselect_history"".value is not null"
cf916044-a0af-b23a-63c7-dea34d905424,Marketing View (gpbidb),postgres,"WITH 
max_dates AS(
	SELECT opportunity_id,
		   MAX(rank) AS latest	
FROM salesforce.v_gp_sfdc_opportunity_stage_duration
WHERE NOT(prev_stage_name = to_stage_name AND to_stage_name = 'Closed Lost')
GROUP BY opportunity_id),
opp_history AS(
SELECT DISTINCT opportunity_id, 
		prev_stage_name AS prev_stage, 
		to_stage_name AS final_stage,
		stage_last_modified AS last_mod_date
FROM salesforce.v_gp_sfdc_opportunity_stage_duration osd
LEFT JOIN max_dates mx USING(opportunity_id)
WHERE rank = latest
),
Leads_Opps as ( /*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
   Select Distinct
      CASE
         WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
         ELSE date_trunc('month'::text, opps.created_date)
      END AS MQL_Cohort_Month,
      leads.id as lead_id,
      opps.id as opp_id,
      leads.is_converted,
      leads.converted_opportunity_id,
      leads.country as lead_country,
      leads.campaign__source__c as campaign_name,
					--opps.bdr_owner__c as bdr_owner_test,
					--opps_bdr_manager.manager_id as bdr_manager_id_test,
					--bdr_manager.name as bdr_manager_test,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_disqualified_reason__c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c
         ELSE NULL::text
      END AS lead_disqualified_reason,
       opps.closed__lost__c,
      leads.status AS lead_status,
      leads.country_code AS lead_country_code,
       CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_source_tier_c
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_tier_c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_source_tier_c
         ELSE NULL::text
      END AS tier,
      --leads.lead_disqualified_reason__c as lead_disqualified_reason,
      leads.bdr_unqualified_reason__c as bdr_unqualified_reason,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
         ELSE NULL::text
      END AS client_region,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country_code
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country_code
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country_code
         ELSE NULL::text
      END AS country_code,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
         ELSE NULL::text
                END AS client_country,
      leads.created_date AS mql_date,
      leads.converted_date,
      leads.partner_acquisition__c AS partner_acq_leads,
      --leads_owner.name as leads_owner_name,
      --leads_owner_manager.name as leads_owner_manager,
      opps.created_date AS opp_created_date,
	  opps.last_modified_date AS opp_last_modified_date,
      opps.created_date,
	  opps.potential_partner_lead__c,
      opps.sales__accepted__date__c as SAL_Accepted_Date,
      opps.s_a_l__c,
      opps.s_a_l_by__sales__c,
      opps.record_type_bi__c,
      opps.is_closed AS opp_closed,
      opps.close_date AS msa_date,
      opps.stage_name,
      opps.partner_acquisition__c AS partner_acq_opps,
      opps.type AS opportunity_type,
      opps.is_won AS opp_won,
      opps.what_is_your_primary_product_interest__c AS what_is_opps,
      opps.record_type_text_id_c AS record_type_opps,
      opps.pricing_model__c AS pricing_model_opps,
      --opps_owner.name as opps_owner_name,
      --opps_owner_manager.name as opps_owner_manager,
      opps.name AS opp_name,
	sfdc_opp.closed_lost_competitor_name_c AS lost_to_competitor,
		leads.hot_form_c AS hot_form_leads,
	opps.hot_form_c AS hot_form_opps,
	CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.b_d_r__date__c::date
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN sfdc_lead.bdr_date_c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.b_d_r__date__c::date
         ELSE NULL
      END AS b_d_r__date__c,
     -- opps.b_d_r__date__c,
      opps.type AS opp_type,
      opps.is_won AS won_flag,
      opps.partner_level__c AS partner_level,
      opps.update_time AS fivetran_synced_opps,
      --opps.lead_disqualified_reason__c AS lead_disqualified_reason,
      opps.pricing_model__c AS opp_pricing_model,
	/*CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps_owner_role.name
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner_role.name
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps_owner_role.name
         ELSE NULL::text
      END AS owner_role,*/
	/*CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps_owner.title
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner.title
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN leads_owner.title
         ELSE NULL::text
      END AS leads_owner_title,*/
	  leads_owner.title AS leads_owner_title,
 	  CASE
		WHEN leads_owner.title IN ('BDR','Business Development Manager',
			'Business Development Representative','Busines Development Representative',
			'Business Development Team Lead', 'Director of Business Development',
			'Senior Business Development Representative','Senior Business Development Trainer',
			'Senior Manager, Business Development','Vice President, Global Outbound'
		) THEN 'BDR lead'
		ELSE 'Non-BDR lead'
		END AS lead_owner_title_flag,
      CASE
         WHEN leads.lead_source IS NULL THEN opps.lead_source
         ELSE leads.lead_source
      END::text as Lead_or_Opp_Source,
      --dev_own.name AS partner_development_owner,
      /*CASE
      WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN 
      opps.bdr_owner_name
      WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner.name
      WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN 
      opps.bdr_owner_name
      END AS bdr_owner_name,*/
      acc_partn.name AS partner,
      acc_partn.client_region_billing_country AS partner_region,
      account.type AS account_type,
      account.pricing_model__c AS acc_pricing_model,
      CASE
         WHEN 
			--(opps.type <<>> 'Existing Business' OR opps.type IS NULL)
         --And 
			(opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
         And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
         --And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
         And (opps.pricing_model__c IS NULL OR opps.pricing_model__c  <<>> 'Contractor only')
	  Then 'Non Partner Opp or Existing Business'
      Else 'Partner Opp or Existing Business'
      End as Opp_Go_Flag,
	  opp_history.prev_stage, 
	  opp_history.final_stage,
	  opp_history.last_mod_date,
	  CASE
         WHEN opp_history.final_stage = 'Closed Lost' THEN opp_history.prev_stage
         ELSE NULL
      END AS lost_from_stage,
/*camp_memb.id AS member_id,
	camp_memb.name AS member_name,
    camp_memb.fcrm_fcr_admin_response_day_c AS member_response_date,
CASE 
	WHEN camp_memb.fcrm_fcr_admin_response_day_c <<= opps.close_date THEN 'In time'
	WHEN camp_memb.fcrm_fcr_admin_response_day_c >> opps.close_date THEN 'Too late'
	WHEN opps.close_date IS NULL THEN 'Not closed'
    ELSE NULL::text
END AS response_time_flag*/
mc.type AS member_type,
            usr_lead_opp.leads_owner_name,
            usr_lead_opp.leads_owner_manager,
            usr_lead_opp.opps_owner_name,
            usr_lead_opp.opps_owner_manager,
            usr_lead_opp.partner_development_owner,
            usr_lead_opp.bdr_owner_name,
            usr_lead_opp.bdr_manager_name

	
	
   From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
   Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
   Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
   LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c = acc_partn.id
   Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
   LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_or_opp_id::text =
                CASE
                    WHEN leads.id IS NULL THEN opps.id
                    ELSE leads.id
                END::text
   LEFT JOIN salesforce.lead sfdc_lead ON sfdc_lead.id = leads.id
   LEFT JOIN salesforce.opportunity sfdc_opp ON sfdc_opp.id = opps.id 
   LEFT JOIN opp_history ON opps.id = opp_history.opportunity_id
  -- LEFT JOIN salesforce.v_gp_sfdc_campaign_member_current camp_memb
   --ON (opps.contact_id = camp_memb.contact_id AND opps.campaign_id = camp_memb.campaign_id)
   LEFT JOIN salesforce.v_gp_sfdc_campaign_member_current mc ON mc.lead_id = leads.id
WHERE (leads.created_date::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())
OR (opps.created_date::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())
OR (opps.sales__accepted__date__c::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())
OR (opps.close_date::date BETWEEN NOW() - INTERVAL '16 Months' AND NOW())

), 
MQL as (
   Select Distinct
      'MQL' as Cohort_Stage,
      lead_id as lead_or_opp_id,
      MQL_Date::date as Point_time_date,
      *
   From Leads_Opps 
   Where --(partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) And 
	lead_id is not null
	--AND lead_owner_title_flag = 'BDR lead'
   ),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      Created_date::date as Point_time_date,
      *
   From Leads_Opps lo
   Where --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	opp_id is not null
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	s_a_l_by__sales__c = 'Yes'
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	opp_won ='true'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
Opp_lost as (
   Select Distinct
      'Opp lost' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      --last_mod_date::date as Point_time_date,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	final_stage = 'Closed Lost'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
   L1 as (
	 Select Distinct
      'Negotiations L1' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	   s_a_l_by__sales__c = 'Yes' 
		  AND (stage_name IN ('Negotiations L1','Negotiations L2','Contract','Closed Won') OR
		   lost_from_stage IN ('Negotiations L1','NegotiationsL1','Negotiations L2','NegotiationsL2','Contract'))
   ),
    L2 as (
	 Select Distinct
      'Negotiations L2' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
		s_a_l_by__sales__c = 'Yes' 
	 			  AND (stage_name IN ('Negotiations L2','Contract','Closed Won') OR
		   lost_from_stage IN ('Negotiations L2','NegotiationsL2','Contract'))
   ),
   Contract as (
	 Select Distinct
      'Contract' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	   s_a_l_by__sales__c = 'Yes' 
	   	  AND (stage_name IN ('Contract','Closed Won') OR
		   lost_from_stage IN ('Contract'))
   ),
Full_Union as (
   Select *
   From MQL
   Union All
   Select *
   From MQL_to_SQL
   Union AlL
   Select *
   From SQL_to_SAL
   Union AlL
   Select *
   From SAL_to_MSA
   Union All
   Select *
   From L1
   Union All
   Select *
   From L2
   Union All
   Select *
   From Contract
	Union All
   Select *
   From Opp_Lost
   )
SELECT * 
FROM Full_Union"
d0554948-137b-769b-9ec0-800f5a001a1c,Custom SQL Query (gpbidb),postgres,"SELECT e.primaryentitykeyid,
       e.reference_id,
	   e.entity_type,
	   e.name,
          e.gpp_name,
	   tax_legal_entities,
           CASE
	   	WHEN e.status = 'Active ' THEN 'Active'
                ELSE e.status
           END AS Status,
	   e.type,
	   CASE
	   	WHEN e.category = 'Local Counsel' THEN 'LC'
		WHEN e.category = 'LSP/LC' THEN 'LC'
		ELSE e.category
	   END AS category,
	   e.run_date,
           CASE
                WHEN e.jurisdiction IS NULL THEN a.country
                ELSE e.jurisdiction
           END AS jurisdiction,
	   e.legal_entity AS legal_entity_type,
	   a.city,
	   a.state_province,
	   a.county,
	   a.country,
	   a.zip_post_code,
	   CONCAT(a.address_line_1,' ',a.address_line_2,' ',a.address_line_3) AS address,
	   c.name AS contact_name,
	   c.entity_contact,
	   c.effective_from,
	   c.effective_to,
	   c.notes AS contact_notes,
	   b.bank_name,
	   b.account_name,
	   b.account_type,
	   b.account_number,
	   ba.primary_activity,
	   egp.total_pop,
           egp.total_pop_hc,
	   egp.gp_internal_hc,
           tax.tax_id,
	   tax.cit_due_date, 
	   tax.cit_preparer, 
	   tax.cit_rate, 
	   tax.cit_statutory_of_limitation,
	   tax.currency_local_books_and_records, 
	   tax.date_us_ctb_election, 
	   tax.indirect_tax_rate_for_gp,
	   tax.language_books_records_cit_return,
	   tax.party_prepare_statutory_reporting,
	   tax.standard_indirect_tax_rate,
	   tax.statutory_reporting_requirement,
	   tax.taxable_base,
	   tax.us_checkbox_entity AS us_entity,
	   tax.us_tax_id,
	   tax.vat_number, 
	   tax.vat_return_filing, 
	   tax.vat_return_preparer, 
	   tax.vat_statute_of_limitation, 
	   tax.vat_gst_is_registered,
           Date(LEFT(qlf.formation_date,10)) AS formation_date
 
FROM ""gems"".""entities"" AS e
LEFT JOIN ""gems"".""addresses"" AS a
ON e.primaryentitykeyid = a.id
LEFT JOIN ""gems"".""contacts"" AS c
ON e.primaryentitykeyid = c.id
LEFT JOIN ""gems"".""banking"" AS b
ON e.primaryentitykeyid = b.id
LEFT JOIN ""gems"".""business_activity"" as ba
ON e.primaryentitykeyid = ba.id
LEFT JOIN ""entities"".""entities_gp_gems"" as egpg
ON e.reference_id = egpg.gems_reference_id
LEFT JOIN ""entities"".""gp"" as egp
on egpg.org_id_business_gp = egp.org_id
LEFT JOIN ""gems"".""taxation_details"" AS tax
ON e.primaryentitykeyid = tax.id
LEFT JOIN ""gems"".""qualifications_licenses_formation"" AS qlf
ON e.primaryentitykeyid = qlf.id
-- WHERE e.entity_type <<>> 'Person'"
d08a08de-8f0c-efbf-2bf7-fb030e084f9d,Custom SQL Query (gpbidb),postgres,"select pro.*,
		(pro.onboard_end_date - pro.onboard_start_date) AS Onboarding_Days,
		case when pro.onboard_start_date is not null then 'Onboard Yes' 
					else 'Onboard No' 
		end as onboard_start_flag,
		case when pro.onboard_end_date is null then 'NO'
			 when pro.onboard_end_date is not null then 'YES'
		end as Onboard_completed
from goglobal_gp_goglobal.v_gp_gg_master_professional pro"
d0dd2bed-4caa-affb-27aa-e0dfb08e8e6e,Asset Downloaded Report,postgres,"SELECT DISTINCT
            leads.id AS lead_id,
            leads.asset_downloaded_c,
            leads.hot_form_c,
            leads.partner_acquisition__c,
			opps.id AS opp_id,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    ELSE NULL::text
                END AS client_region,
                CASE WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    ELSE date_trunc('month'::text, opps.created_date)
                END AS mql_cohort_month,
			leads.created_date AS mql_date,
            leads.lead_source,
                CASE
                    WHEN leads.lead_source IS NULL THEN opps.lead_source
                    ELSE leads.lead_source
                END::text AS lead_or_opp_source,
			leads.country AS lead_country,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    ELSE NULL::text
                END AS client_country,
				leads.campaign__source__c AS campaign_name,
				leads.website,
                CASE
                    WHEN leads.converted_opportunity_id IS NULL THEN 1::bigint
                    ELSE rank() OVER (PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date)
                END AS row_num
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
			 WHERE (opps.type IS NULL OR opps.type::text <<>> 'Existing Business'::text)
             AND (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
             AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text)
             AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text)
             AND leads.asset_downloaded_c IS NOT NULL
			 --AND leads.created_date BETWEEN '2022-09-01' AND '2022-09-30'
			 ORDER BY leads.created_date DESC"
d16ac5a2-9c70-dab6-ea17-c8c2545d3261,v_gp_gg_client_country_current (goglobal_goglobal.v_gp_gg_client_country_current)+ (gpbidb),postgres,"with a as(
select distinct t1.client_id,t2.name as client, min(t1.addendum_enrollment_date) as minimo
from goglobal_gp_goglobal.v_gp_gg_client_country_current t1
left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on t1.client_id=t2.id
group by 1,2)
select T1.ID,t1.client_id, t2.name as client,t2.is_demo_client,
				concat(t9.first_name,' ',t9.last_name) AS Account_Manager,
a.minimo, t1.country_id,t3.name as country,
t1.estimated_social_cost_pct,
t1.addendum_enrollment_date,
t4.date_created,
case when t4.markup_transaction_id='1' then 'INSURANCE PREMIUM MARKUP'
	 when t4.markup_transaction_id='3' then 'STATUTORY BENEFIT MARKUP'
	 when t4.markup_transaction_id='4' then 'MEDICAL INSURANCE MARKUP'
	 end as markup_transaction,
t4.is_applicable, t4.markup_transaction_amt,
t2._fivetran_synced
from goglobal_gp_goglobal.v_gp_gg_client_country_current t1
left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on t1.client_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t3 on t1.country_id=t3.id
left join a on a.client_id=t1.client_id
left join goglobal_gp_goglobal.v_gp_gg_client_country_markup_transaction_current t4 on t1.id=t4.client_country_id	
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9 on t9.id = t2.gp_account_manager_id
order by 3,8,12"
d1a63b80-7d16-06cf-09a4-34292ffa58b0,Contractor Reporting (gpbidb),postgres,"WITH SFDC AS (SELECT account.client_region_billing_country AS client_region,
	account.billing_country AS client_country,
	opps.id AS opp_id,
	opps.lead_source,
	opps.s_a_l_by__sales__c,
	dev_own.name AS partner_development_owner,
	acc_partn.name AS partner,
	--opps.record_type_bi__c AS record_type,
	--opps.partner_acquisition__c AS partner_acq_opps,
	opps.type AS opp_type,
	opps.stage_name,
	opps.created_date,
        opps.close_date,
        opps.sales__accepted__date__c,
			  opps.is_won,
	opps.what_is_your_primary_product_interest__c AS what_ppi,
    sbqq.is_gp_contractor_customer_c AS gp_contractor_customer,
    sbqq.pricing_model_c AS pricing_model_primary_quote,
    sbqq.sbqq_primary_c AS primary_quote
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
LEFT JOIN salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
LEFT JOIN
(SELECT id, sbqq_opportunity_2_c, is_gp_contractor_customer_c, pricing_model_c, sbqq_primary_c
	FROM salesforce.sbqq_quote_c
	WHERE is_deleted = FALSE
	AND sbqq_primary_c = TRUE
) sbqq ON opps.id=sbqq.sbqq_opportunity_2_c
WHERE 
(opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text)),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      created_date::date as Point_time_date,
      *
   From SFDC
   Where --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	opp_id is not null
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      sales__accepted__date__c::date as Point_time_date,
      *
   From SFDC
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	s_a_l_by__sales__c= 'Yes'
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      close_date::date as Point_time_date,
      *
   From SFDC
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	is_won ='true'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
   FULL_UNION as (
	SELECT * FROM MQL_to_SQL
UNION ALL
	SELECT * FROM SQL_to_SAL
UNION ALL
	SELECT * FROM SAL_to_MSA)
SELECT * FROM FULL_UNION"
d1a63b80-7d16-06cf-09a4-34292ffa58b0,Custom SQL Query (gpbidb),postgres,"With 
Leads_Opps as ( /*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
				Select Distinct
					CASE
                    	WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    	ELSE date_trunc('month'::text, opps.created_date)
                	END AS MQL_Cohort_Month,
					leads.id as lead_id,
					opps.id as opp_id,
					leads.is_converted,
					leads.converted_opportunity_id,
					CASE
						WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
						WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						ELSE NULL::text
					END AS client_region,
					leads.created_date AS mql_date,
					leads.converted_date,
					leads.partner_acquisition__c AS partner_acq_leads,
					leads_owner.name as leads_owner_name,
					leads_owner_manager.name as leads_owner_manager,
					opps_owner.name as opps_owner_name,
					opps_owner_manager.name as opps_owner_manager, 
					opps.created_date,
					opps.sales__accepted__date__c as SAL_Accepted_Date,
					opps.s_a_l__c,
                    opps.s_a_l_by__sales__c,
					opps.record_type_bi__c,
					opps.close_date AS msa_date,
					opps.stage_name,	
					opps.partner_acquisition__c AS partner_acq_opps,
					opps.type AS opportunity_type,
					opps.is_won AS opp_won, 
					opps.what_is_your_primary_product_interest__c AS what_is_opps,
					opps.record_type_text_id_c AS record_type_opps,
					opps.pricing_model__c AS pricing_model_opps,
					opps.id AS opps_id,
					CASE
                        WHEN leads.lead_source IS NULL THEN opps.lead_source
                        ELSE leads.lead_source
                    END::text as Lead_or_Opp_Source,
					CASE
						WHEN dev_own.name IS NULL THEN 1
						ELSE 0
						END AS Partner_develop_owner_flag,
					CASE
         				WHEN leads.converted_opportunity_id IS NULL THEN leads_owner.name
         				ELSE opps.bdr_owner_name
      					END AS bdr_owner_name,
					CASE
         				WHEN bdr_owner_name IS NULL THEN 1
         				ELSE 0
      					END AS bdr_owner_name_flag,
					CASE
         				WHEN acc_partn.name IS NULL THEN 1
         				ELSE 0
      					END AS Partner_flag,
					CASE
         				WHEN opps.b_d_r__date__c IS NULL THEN 1
         				ELSE 0
      					END AS b_d_r_date_c_flag,
					CASE 
						WHEN (opps.type <<>> 'Existing Business' OR opps.type IS NULL)
					     And (opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
  						 And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
						 And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
					Then 'Non Partner Opp or Existing Business'
					Else 'Partner Opp or Existing Business'
					End as Opp_Go_Flag
				From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             	Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
				Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
				Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner ON opps_owner.id = opps.owner_id
				Left Join salesforce.v_gp_sfdc_user_current leads_owner_manager ON leads_owner_manager.id = leads_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner_manager ON opps_owner_manager.id = opps_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
				LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c = acc_partn.id
				--Where  CASE WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
				--	   ELSE date_trunc('month'::text, opps.created_date)
                --END >>= '2019-01-01'
				), 
     MQL as (
				Select Distinct
					'MQL' as Cohort_Stage, 
		 			lead_id as lead_or_opp_id,
		 			MQL_Date::date as Point_time_date,
		 			leads_owner_name as Lead_or_Opp_Owner_name,
		 			leads_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where (partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) 
		 		And lead_id is not null
				),
MQL_to_SQL as (
				Select Distinct
					'MQL to SQL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					Created_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_id is not null
				),
SQL_to_SAL as (
				Select Distinct
					'SQL to SAL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					SAL_Accepted_Date::date as Point_time_date, 
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And s_a_l_by__sales__c = 'Yes'
				),
SAL_to_MSA as (
				Select Distinct
					'SAL to MSA' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					MSA_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_won ='true'
				AND (pricing_model_opps <<>> 'Contractor Only' OR pricing_model_opps IS NULL)
				),
Full_Union as (
				Select 
					* 
				From MQL
					Union All
				Select 
					* 
				From MQL_to_SQL
					Union AlL
				Select 
					* 
				From SQL_to_SAL
					Union AlL
				Select 
					* 
				From SAL_to_MSA
				),
				--SELECT DISTINCT * FROM Full_Union
				--where lead_or_opp_id in ('0066T000016KebcQAC','0066T000015ryGIQAY','0060W000014Tn0HQAS','0066T000015s5vyQAA','0066T000016Km8fQAC'
										--'0066T000016KsYHQA0','0066T000015rlGgQAI','0066T000016KqClQAK','0066T000015rsKVQAY')
				--where point_time_date between '2021-05-07' AND '2021-07-30'
				--AND cohort_stage='SAL to MSA'
Weekly_Funnel as ( 
				Select Distinct
					Cohort_stage, 
					Client_region,
					Partner_flag,
					Partner_develop_owner_flag,
					b_d_r_date_c_flag,
					bdr_owner_name_flag,
					Coalesce(Lead_or_Opp_Source, 'nulo') as Lead_or_Opp_Source,
					Coalesce(Lead_or_Opp_Owner_Name, 'nulo') as Lead_or_Opp_Owner_Name,
					Coalesce(Lead_or_Opp_Owner_Manager, 'nulo') as Lead_or_Opp_Owner_Manager,
					--point_time_date,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date - '12 weeks'::interval)::date as twelve_weeks_ago, 
					(date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date as Week_at_Friday,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date + '6 days'::interval)::date as Week_at_Next_Thursday,  
					Count(distinct lead_or_opp_id) as Count_Leads_or_opps
					--lead_or_opp_id
				From Full_Union 
				Group by 1,2,3,4,5,6,7,8,9,10,11,12
				Order by cohort_stage, (date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date asc --date_trunc('week', point_time_date + 5)- '5 days'::interval asc
				),
				--select distinct * from Weekly_Funnel 
				--where Week_at_Friday between '2021-05-07' AND '2021-08-05'
				--AND cohort_stage='SAL to MSA'
Date_Catalogue as (
				Select Distinct 
					WAF.Week_at_Friday as Week_at_Friday_C,
					WF.Cohort_stage as Cohort_Stage_c,
					WF.Client_region as Client_region_c,
					WF.Lead_or_Opp_Source as Lead_or_Opp_Source_c,
					WF.Lead_or_Opp_Owner_Name as Lead_or_Opp_Owner_Name_c,
					WF.Lead_or_Opp_Owner_Manager as Lead_or_Opp_Owner_Manager_c,
					WF.Partner_flag as Partner_flag_c,
					WF.Partner_develop_owner_flag as Partner_develop_owner_flag_c,
					WF.b_d_r_date_c_flag as b_d_r_date_c_flag_c,
					WF.bdr_owner_name_flag as bdr_owner_name_flag_c,
					0 as Count_Leads_or_opps_C
				From (Select Distinct Week_at_Friday From Weekly_Funnel) WAF, 
				(Select Distinct Cohort_stage, Client_region, Lead_or_Opp_Source, Lead_or_Opp_Owner_Name, Lead_or_Opp_Owner_Manager, Partner_flag, Partner_develop_owner_flag, b_d_r_date_c_flag, bdr_owner_name_flag from Weekly_funnel) WF 
				Order by WF.Cohort_stage, WAF.Week_at_Friday asc
				), --Select * from Date_Catalogue where cohort_stage_c = 'SAL to MSA' and week_at_friday_c between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC' 
Dates_Aligned as (
				Select Distinct
					DC.*,
					Coalesce(Funnel.twelve_weeks_ago::date, (DC.Week_at_Friday_C - '12 weeks'::interval)::date) as  twelve_weeks_ago,
					Coalesce(Funnel.week_at_next_thursday, (DC.Week_at_Friday_C + '6 days'::interval)::date) as week_at_next_thursday, 
					Coalesce(Funnel.count_leads_or_opps, DC.count_leads_or_opps_c) as Count_leads_or_opps_final
				From Date_Catalogue DC
				Left Join Weekly_funnel Funnel on Funnel.week_at_friday = DC.week_at_friday_c
					and Funnel.cohort_stage = DC.cohort_stage_c
					and Funnel.Client_region = DC.Client_region_c
					and Funnel.Lead_or_Opp_Source = DC.Lead_or_Opp_Source_c
					and Funnel.Lead_or_Opp_Owner_Name = DC.Lead_or_Opp_Owner_Name_C
					and Funnel.Lead_or_Opp_Owner_Manager = DC.Lead_or_Opp_Owner_Manager_C
					and Funnel.Partner_flag = DC.Partner_flag_c
					and Funnel.Partner_develop_owner_flag = DC.Partner_develop_owner_flag_c
					and Funnel.b_d_r_date_c_flag = DC.b_d_r_date_c_flag_c
					and Funnel.bdr_owner_name_flag = DC.bdr_owner_name_flag_c
				) --Select * from Dates_Aligned where Week_at_Friday_C between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC'
Select Distinct 
	WF.Cohort_stage_c,
	WF.Client_region_c,
	WF.Lead_or_Opp_Source_c,
	WF.Lead_or_Opp_Owner_Name_c,
	WF.Lead_or_Opp_Owner_Manager_c,
	WF.Partner_flag_c,
	WF.Partner_develop_owner_flag_c,
	WF.b_d_r_date_c_flag_c,
	WF.bdr_owner_name_flag_c,
	WF.twelve_weeks_ago, 
	WF.Week_at_Friday_c,
	WF.Week_at_Next_Thursday,
	WF.Count_Leads_or_opps_final,
	Sum(L12M.Count_Leads_or_opps_final) as Sum_L12M_Funnel
From Dates_aligned WF
Left Join (select Cohort_stage_c, Client_region_c, Lead_or_Opp_Source_c, Lead_or_Opp_Owner_Name_c, Lead_or_Opp_Owner_Manager_c, Partner_flag_c, Partner_develop_owner_flag_c, b_d_r_date_c_flag_c, bdr_owner_name_flag_c, Week_at_Friday_c, Count_Leads_or_opps_final From Dates_aligned where Count_Leads_or_opps_final<<>> 0) L12M 
	on L12M.Week_at_Friday_c between WF.twelve_weeks_ago and WF.Week_at_Friday_c
	and WF.Cohort_stage_c = L12M.Cohort_stage_c
	and WF.Client_region_c = L12M.Client_region_c
	and WF.Lead_or_Opp_Source_c = L12M.Lead_or_Opp_Source_c
	and WF.Lead_or_Opp_Owner_Name_c = L12M.Lead_or_Opp_Owner_Name_c
	and WF.Lead_or_Opp_Owner_Manager_c = L12M.Lead_or_Opp_Owner_Manager_c
	and WF.Partner_flag_c = L12M.Partner_flag_c
	and WF.Partner_develop_owner_flag_c = L12M.Partner_develop_owner_flag_c
	and WF.b_d_r_date_c_flag_c = L12M.b_d_r_date_c_flag_c
	and WF.bdr_owner_name_flag_c = L12M.bdr_owner_name_flag_c
Group by WF.Cohort_stage_c, WF.Client_region_c, WF.Lead_or_Opp_Source_c, WF.Lead_or_Opp_Owner_Name_c, WF.Lead_or_Opp_Owner_Manager_c, WF.Partner_flag_c, WF.Partner_develop_owner_flag_c, WF.b_d_r_date_c_flag_c, WF.bdr_owner_name_flag_c, WF.twelve_weeks_ago, WF.Week_at_Friday_c, WF.Week_at_Next_Thursday, WF.Count_Leads_or_opps_final
Having  Sum(L12M.Count_Leads_or_opps_final) is not null
Order by WF.Cohort_stage_c, WF.Week_at_Friday_c asc"
d2b79849-b20d-0ca8-280a-208582a60bc5,general_report (google_analytics.general_report) (gpbidb),,
d2b79849-b20d-0ca8-280a-208582a60bc5,general_report (google_analytics.general_report) (gpbidb),postgres,"SELECT date, goal_completion_location, SUM(goal_completions_all) AS goal_completions_all
FROM google_analytics.conversions_locations_report
WHERE date BETWEEN NOW() - INTERVAL '2 YEARS' AND NOW()
GROUP BY 1, 2
ORDER BY 1 DESC"
d3ce80c3-d0bd-0ec6-6134-a8b454621624,Custom SQL Query (gpbidb),postgres,"WITH gg_client AS(
	   SELECT
	   a.id AS client_id,
	   a.name AS client_name,
	   a.gp_account_manager_id,
	   CONCAT(b.first_name,' ', b.last_name) AS account_manager,
	   a.gp_current_sales_rep_id,
	   CONCAT(c.first_name,' ', c.last_name) AS account_executive,
	   d.name AS referral_name,
	   a.msa_contract_start_date_peo,
	   f.first_hire,
	   e.max_pay_end,
	   e.Failed,
	   e.New,
	   e.Onboarding,
	   e.Active,
	   e.Terminating,
	   e.Inactive,
	   a.salesforce_account_id
	   /*CASE WHEN a.salesforce_account_id IS NOT NULL THEN a.salesforce_account_id
	   ELSE mdm_GG.source_id
	   END as gpp_id_match*/
	   FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
	   LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS b
	   ON a.gp_account_manager_id = b.id
	   LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS c
	   ON a.gp_current_sales_rep_id = c.id
	   LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current AS d
	   ON a.partners_referral_id = d.id
	   LEFT JOIN (SELECT
	   	client_id, MAX(payroll_end_date) AS max_pay_end,
	   	SUM(CASE WHEN (is_failed_to_launch='true')THEN 1 ELSE NULL END) AS Failed,
	   	SUM(CASE WHEN (status= '1') AND (service_class IS NULL OR service_class <<>> '4') AND is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS New,
	   	SUM(CASE WHEN (status= '2') AND (service_class IS NULL OR service_class <<>> '4') AND is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS Onboarding,
	   	SUM(CASE WHEN (status= '3')AND (service_class IS NULL OR service_class <<>> '4') AND is_failed_to_launch = 'false'  THEN 1 ELSE NULL END) AS Active,
	   	SUM(CASE WHEN (status= '4') AND (service_class IS NULL OR service_class <<>> '4') AND is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS Terminating,
	   	SUM(CASE WHEN (status='5') AND (service_class IS NULL OR service_class <<>> '4') AND is_failed_to_launch = 'false' THEN 1 ELSE NULL END) AS Inactive
	   FROM goglobal_gp_goglobal.v_gp_gg_professional_current
	   GROUP BY client_id) AS e
	   ON a.id = e.client_id
	   LEFT JOIN (
	   	SELECT client_id, MIN(payroll_start_date) AS first_hire
	   	FROM goglobal_gp_goglobal.v_gp_gg_professional_current
	   	WHERE is_failed_to_launch = 'false'
	   	AND (service_class IS NULL OR service_class <<>> '4')
	   	GROUP BY client_id) AS f
	   ON a.id = f.client_id
	   /*LEFT JOIN repo.v_gp_mdm_customer AS g
	   ON a.id::VARCHAR = g.source_id
	   LEFT JOIN (SELECT *
	   	FROM repo.v_gp_mdm_customer
	   	WHERE source = 'SFDC Customer') AS mdm_GG
	   ON g.parent_name = mdm_GG.parent_name*/
	   WHERE a.msa_contract_start_date_peo >>= '2019-01-01'
	   AND d.name ILIKE('%ADP%')
	   OR a.id = 622),
salesforce AS(
	   SELECT
	   g.id AS opportunity_id,
	   g.type AS opportunity_type,
	   g.account_id,
	   g.lead_source,
	   g.is_won,
	   g.adp_lead_source__c,
	   g.close_date,
	   h1.name AS partner_name,
	   g.name AS opportunity_name,
	   g.stage_name,
	   h.pricing_model__c AS acc_pricing_model,
	   g.pricing_model__c AS opp_pricing_model,
	   partner_name.lead_source_defined_c AS opp_partner_name,
	   g.s_a_l_by__sales__c
	   FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time AS g
	   LEFT JOIN salesforce.v_gp_sfdc_account_current AS h
	   ON g.account_id = h.id
	   LEFT JOIN salesforce.v_gp_sfdc_account_current AS h1
	   ON g.partner2__c::text = h1.id::text
	   LEFT JOIN (
	   	SELECT id, lead_source_defined_c
	   	FROM salesforce.opportunity
	   	WHERE is_deleted IS FALSE) partner_name
	   ON g.id = partner_name.id
	   WHERE g.type = 'New Business'
	   AND  (LOWER(h1.name) = 'adp' OR g.name IN('Inspire Brands-4/29-19', 'AudioEye, Inc. 9/23/2020'))
	   AND (g.stage_name != 'Closed Lost' OR g.name = 'KMG Travel and Vacations - 08/31/20')
	   AND g.close_date >>= '2019-01-01'
	   AND (g.record_type_bi__c IS NULL OR g.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
	   AND (g.partner_acquisition__c IS NULL OR g.partner_acquisition__c::text <<>> 'Yes'::text)
	   AND (g.pricing_model__c IS NULL OR g.pricing_model__c::text <<>> 'Contractor only'::text)
	 ),
Final AS(
	   SELECT salesforce.*, gg_client.*,
	   CASE
	   	WHEN gg_client.onboarding IS NULL AND gg_client.active IS NULL and gg_client.terminating IS NULL AND gg_client.inactive IS NULL AND (current_date::DATE- gg_client.msa_contract_start_date_peo::DATE)<<90 THEN 'Newly Signed'
	   	WHEN (gg_client.active IS NOT NULL) OR (gg_client.terminating IS NOT NULL AND gg_client.active is NULL AND gg_client.max_pay_end >> current_date) OR (gg_client.terminating IS NOT NULL AND gg_client.active is NULL AND gg_client.max_pay_end IS NULL) THEN 'Active'
	   	WHEN gg_client.onboarding IS NOT NULL AND gg_client.active IS NULL AND gg_client.terminating IS NULL AND gg_client.inactive IS NULL THEN 'Onboarding'
	   	WHEN (gg_client.active IS NULL AND gg_client.inactive IS NOT NULL) OR (gg_client.active IS NULL AND gg_client.terminating IS NOT NULL AND gg_client.max_pay_end << current_date)THEN 'Inactive'
	   	WHEN gg_client.onboarding IS NULL AND active IS NULL and gg_client.terminating IS NULL AND gg_client.inactive IS NULL AND (current_date::DATE- gg_client.msa_contract_start_date_peo::DATE)>>90 THEN 'Stalled'
	   	WHEN salesforce.stage_name != 'Closed Won' THEN 'Pre-Sale'
	   END AS status
FROM salesforce
FULL JOIN gg_client
ON salesforce.account_id = gg_client.salesforce_account_id)
SELECT *
FROM FINAL"
d417d9ed-47b3-e05c-0a4a-b746c080c727,gpbidb,postgres,"select distinct t1.id ""Professional ID"", t1.status,
	   T2.NAME ""Client"",
	   t3.name ""Industry"",
	   t6.region ""Region"",
	   t5.name ""Country"",
	   case when t7.active_flag='Active' then 'Active' else 'Inactive' end as ""Active on Payroll"",
	   t1.title ""Job Title"",
	   t1.is_failed_to_launch ""Is Failed to Launch""
	   
from goglobal_gp_goglobal.v_gp_gg_professional_current t1
left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on t1.client_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_industry_current t3 on t2.industry_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t4 on t1.lsp_country_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t5 on t4.country_id=t5.id
LEFT JOIN repo.v_gp_mdm_region t6 ON t5.country_code = t6.country_code
LEFT JOIN (
			select distinct cal_date, professional_id,active_flag
			from goglobal_gp_goglobal.v_tableau_headcount_dashboard
			where cal_date=date_trunc('month',current_date)
		 ) t7 on t1.id=t7.professional_id"
dcadc020-1811-b849-cc60-b3a6902500be,Customer Master Data,postgres,"with CLIENT_COUNTRY AS 
		(
			select t1.id as client_id, t1.name as Client, T1.TIER_TYPE,t1.gp_account_manager_id,t1.gp_current_sales_rep_id,
				t2.id, t2.country_id, 
                         				DENSE_RANK()over (partition by T1.ID order by T3.NAME) AS COUNTRY_ORDER, 
				t3.name as Country, t2.is_original_msa, T1.IS_DEMO_CLIENT,T1.STATUS,
				t1.msa_contract_start_date_peo, t4.name as industry, t3.country_code,
				CASE WHEN t3.gp_region::text = '1'::text THEN 'EMEA'::text
            		 WHEN t3.gp_region::text = '2'::text THEN 'APAC'::text
            		 WHEN t3.gp_region::text = '3'::text THEN 'NA'::text
            		 WHEN t3.gp_region::text = '4'::text THEN 'LATAM'::text
            		 ELSE NULL::text
        		END AS country_region,
			t5.default_management_fee_pct, t5.tier as pricing_tier
				from goglobal_gp_goglobal.v_gp_gg_client_current t1
				left join goglobal_gp_goglobal.v_gp_gg_client_country_current t2
					on t1.id=t2.client_id 
				left join goglobal_gp_goglobal.v_gp_gg_country_current t3
					on t2.country_id=t3.id
				left join goglobal_gp_goglobal.v_gp_gg_industry_current t4
					on t1.industry_id=t4.id
				left join goglobal_gp_goglobal.client_country_rate_table t5 on t2.id=t5.client_country_id
				group by 1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18
				order by 1,COUNTRY
		),
PROFESSIONALS AS
	(
		SELECT T1.ID AS PRO_ID,T1.STATUS,T1.CLIENT_ID,
                T3.ID AS COUNTRY_ID,T3.NAME AS COUNTRY, t1.date_created, t1.job_category,t1.service_class
		FROM goglobal_gp_goglobal.V_GP_GG_PROFESSIONAL_CURRENT T1
			LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current T2
				ON T1.client_COUNTRY_ID=T2.ID
			LEFT JOIN goglobal_gp_goglobal.V_GP_GG_COUNTRY_CURRENT T3
				ON T2.COUNTRY_ID=T3.ID
                                where is_failed_to_launch='false'
	),
sfdc as 
	(
		SELECT parent_name
		,MAX(CASE WHEN source ='SFDC Customer' THEN source_id END) AS salesforce_id
		,MIN(CASE WHEN source ='SFDC Customer' THEN source_id END) AS salesforce_id_2
		,MAX(CASE WHEN source ='GoGlobal Client' THEN source_id END) AS goglobal_id
		FROM repo.v_gp_mdm_customer GROUP BY parent_name
	),
sfdc_health as
	(
		select sfdc.*, t2.client_health__c,t2.expansion_tier_level__c
		from sfdc
		left join salesforce.v_gp_sfdc_account_current t2
		on sfdc.salesforce_id=t2.id
	),
AM AS 
	(
		select distinct t4.id as client_id, 
					  t4.date_modified,t4.gp_account_manager_id,
					  row_number()over (partition by t4.id,t4.gp_account_manager_id order by T4.date_modified), 
				concat(t9.first_name,' ',t9.last_name) AS Account_Manager
			from goglobal_gp_goglobal.client t4
			left join goglobal_gp_goglobal.v_gp_gg_client_current customer
						on t4.id=customer.id
			left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9  	
				on t9.id = t4.gp_account_manager_id
			group by 1,2,3,5
			order by T4.ID
	),
AE as
	(
		select distinct t4.id as client_id, 
					  t4.date_modified,T4.gp_current_sales_rep_id ,
					  row_number()over (partition by t4.id,T4.gp_current_sales_rep_id order by T4.date_modified), 
				concat(Z.first_name,' ',Z.last_name) AS aCCOUNT_EXECUTIVE
			from goglobal_gp_goglobal.client t4
			left join goglobal_gp_goglobal.v_gp_gg_client_current customer
						on t4.id=customer.id
			left join goglobal_gp_goglobal.v_gp_gg_gp_person_current Z 
		  	on Z.id = t4.gp_current_sales_rep_id 
			group by 1,2,3,5
			order by T4.ID
	),
salary as
	(
		SELECT DISTINCT client_id,
					professional_id,
					annual_base_salary,
					local_salary_currency_code,currency_name
		 from goglobal_gp_goglobal.v_tableau_headcount_dashboard as hc
		WHERE professional_id IS NOT NULL and client_status_id='1' and cal_date=date_trunc('month',current_date) and active_flag='Active'
	),
conversion as
	(
		select t2.currency_code, t2.currency_name, t2.name,
		t1.currency_id,t1.target_currency_id,t3.name as target_currency, DATE(date_trunc('month',t1.date)) AS year_month, t1.date, t1.rate
	from goglobal_gp_goglobal.v_gp_gg_fxrate_current t1
	left join goglobal_gp_goglobal.v_gp_gg_country_current t2 on t1.currency_id=t2.id
	left join goglobal_gp_goglobal.v_gp_gg_country_current t3 on t1.target_currency_id=t3.id
	where target_currency_id='247' and date_trunc('month',current_date)=DATE(date_trunc('month',t1.date))
	),
usd_rate as
		(	
	SELECT currency_code, currency_name, currency_id,target_currency_id,year_month, AVG(rate) as avg_rate
	FROM conversion
	GROUP BY 1,2,3,4,5
		),
salary_usd_conv as 
		(
		select salary.CLIENT_ID,
		salary.professional_id,salary.local_salary_currency_code, annual_base_salary,
		case when (local_salary_currency_code='USD') THEN salary.ANNUAL_BASE_SALARY
			 when (local_salary_currency_code<<>>'USD') then (salary.ANNUAL_BASE_SALARY*usd_rate.avg_rate) END AS annual_SALARY_USD
		from salary
		left join usd_rate on salary.currency_name=usd_rate.currency_name 
		),
salary_DOLL as
	(
		SELECT client_id, avg(annual_salary_usd) as avg_usd_salary
			 FROM salary_usd_conv where annual_salary_usd IS NOT NULL
			 group by 1
	),
maximo as
	(
	select max(avg_usd_salary) as max_sal
	from salary_DOLL),
minimo as
	(
	select min(avg_usd_salary) as min_sal
	from salary_DOLL where avg_usd_salary>>1),
salary_usd as
	(
	select distinct t1.client_id, t1.avg_usd_salary, t2.max_sal, t3.min_sal
	from salary_DOLL t1, maximo t2, minimo t3
	)
SELECT CLIENT_COUNTRY.client_id, CLIENT_COUNTRY.client,
	CLIENT_COUNTRY.IS_DEMO_CLIENT,CLIENT_COUNTRY.STATUS AS CLIENT_STATUS,
	CLIENT_COUNTRY.tier_type,
	concat(t9.first_name,' ',t9.last_name) AS Account_Manager,
	concat(Z.first_name,' ',Z.last_name) AS ACCOUNT_EXECUTIVE,
	COUNT(DISTINCT AM.GP_ACCOUNT_MANAGER_ID) AS AM_COUNT_HISTORIC,
	COUNT(distinct AM.GP_ACCOUNT_MANAGER_ID) filter (where (AM.DATE_MODIFIED>> CURRENT_DATE - INTERVAL '6 months')) as AM_count_6_months,
	COUNT(DISTINCT AE.GP_CURRENT_SALES_REP_ID) AS AE_COUNT_HISTORIC,
	COUNT(distinct AE.GP_CURRENT_SALES_REP_ID) filter (where (AE.DATE_MODIFIED>> CURRENT_DATE - INTERVAL '6 months')) as AE_count_6_months,
	CASE WHEN (salary_usd.avg_usd_salary BETWEEN 50000 AND 100000) THEN '50,000-$100,000' 
	WHEN (salary_usd.avg_usd_salary BETWEEN 100001 AND 150000) THEN '$100,000-$150,000'
	WHEN (salary_usd.avg_usd_salary>>150000) THEN ' >>$150,000'
	else '<<$50,000'
	end as avg_usd_salary,
	salary_usd.avg_usd_salary as avg_usd_salary_amt,
	salary_usd.MAX_SAL,
	SALARY_USD.MIN_SAL,
	sfdc_health.client_health__c,sfdc_health.expansion_tier_level__c,
	CLIENT_COUNTRY.country_id,CLIENT_COUNTRY.COUNTRY_ORDER,CLIENT_COUNTRY.country,CLIENT_COUNTRY.is_original_msa,
	PROFESSIONALS.PRO_ID,PROFESSIONALS.STATUS,
	CLIENT_COUNTRY.msa_contract_start_date_peo,CLIENT_COUNTRY.industry,
        CLIENT_COUNTRY.country_code, 
		CLIENT_COUNTRY.country_region, 
		client_country.default_management_fee_pct, client_country.pricing_tier,
           salary_usd_conv.annual_SALARY_USD, 
professionals.job_category,professionals.service_class
FROM CLIENT_COUNTRY
LEFT JOIN PROFESSIONALS 
	ON CLIENT_COUNTRY.CLIENT_ID=PROFESSIONALS.CLIENT_ID AND CLIENT_COUNTRY.COUNTRY_ID=PROFESSIONALS.COUNTRY_ID
left join sfdc_health 
	on sfdc_health.goglobal_id::integer=CLIENT_COUNTRY.CLIENT_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9 
	on t9.id=CLIENT_COUNTRY.gp_account_manager_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current Z 
	on Z.id=CLIENT_COUNTRY.gp_current_sales_rep_id
LEFT JOIN AM 
	ON AM.CLIENT_ID=CLIENT_COUNTRY.CLIENT_ID
LEFT JOIN AE 
	ON AE.CLIENT_ID=CLIENT_COUNTRY.CLIENT_ID
left join salary_usd on salary_usd.client_id=cLIENT_COUNTRY.CLIENT_id
left join salary_usd_conv on salary_usd_conv.professional_id=professionals.pro_id
WHERE AM.ROW_NUMBER='1' AND AE.ROW_NUMBER='1'
GROUP BY 1,2,3,4,5,6,7,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32"
dcadc020-1811-b849-cc60-b3a6902500be,Customer Master Data,,
dcadc020-1811-b849-cc60-b3a6902500be,Customer Master Data,postgres,"WITH sm_temp AS
    (
        SELECT
            l1.""Associate ID""
          , l1.""Payroll Name""          AS ""M1 Name""
          , l1.""Job Title Description"" AS ""M1 Job Title""
          , l1.""Status""                AS ""M1 Status""
          , l2.""Payroll Name""          AS ""M2 Name""
          , l2.""Job Title Description"" AS ""M2 Job Title""
          , l3.""Payroll Name""          AS ""M3 Name""
          , l3.""Job Title Description"" AS ""M3 Job Title""
          , l1.""Work Contact: Work Email""
          , ROW_NUMBER() OVER (PARTITION BY l1.""Associate ID"") AS row_num
        FROM
            workday_hris.v_non_sensitive_workday_data l1
            LEFT JOIN
                workday_hris.v_non_sensitive_workday_data l2
                ON
                    l1.""Reports To Associate ID"" = l2.""Associate ID""
            LEFT JOIN
                workday_hris.v_non_sensitive_workday_data l3
                ON
                    l2.""Reports To Associate ID"" = l3.""Associate ID""
        --WHERE
            --l1.""Business Unit Description"" in ('Global Operations'
            --                               , 'Global Ops')
            --AND l1.""Home Department Description""='Account Management'
            --AND l1.""Job Title Description""      = 'Account Manager'
            --AND l1.""Status"" = 'Active'
        order by
            l1.""Reports To Name""
    )
  , sm_final as
    (
        SELECT
            CASE
                WHEN ""M1 Name"" like '%,%'
                    THEN CONCAT(SPLIT_PART(""M1 Name"",',',2),' ',SPLIT_PART(""M1 Name"",',',1))
                    ELSE ""M1 Name""
            END AS ""M1 Name""
          , ""M1 Job Title""
          , ""M1 Status""
          , lower(""Work Contact: Work Email"") AS ""M1 Work Email""
          , CASE
                WHEN ""M2 Job Title"" = 'Sr. Manager, Customer Experience'
                    THEN NULL
                    ELSE
                    CASE
                        WHEN ""M2 Name"" like '%,%'
                            THEN CONCAT(SPLIT_PART(""M2 Name"",',',2),' ',SPLIT_PART(""M2 Name"",',',1))
                            ELSE ""M2 Name""
                    END
            END ""M2 Name""
          , CASE
                WHEN ""M2 Job Title"" = 'Sr. Manager, Customer Experience'
                    THEN NULL
                    ELSE ""M2 Job Title""
            END ""M2 Job Title""
            --, CONCAT(SPLIT_PART(""M2 Name"",',',2),' ',SPLIT_PART(""M2 Name"",',',1)) AS ""M2 Name""
            --, ""M2 Job Title""
          , CASE
                WHEN ""M2 Job Title"" = 'Sr. Manager, Customer Experience'
                    THEN
                    CASE
                        WHEN ""M2 Name"" like '%,%'
                            THEN CONCAT(SPLIT_PART(""M2 Name"",',',2),' ',SPLIT_PART(""M2 Name"",',',1))
                            ELSE ""M2 Name""
                    END
                    ELSE
                    CASE
                        WHEN ""M3 Name"" like '%,%'
                            THEN CONCAT(SPLIT_PART(""M3 Name"",',',2),' ',SPLIT_PART(""M3 Name"",',',1))
                            ELSE ""M3 Name""
                    END
            END ""M3 Name""
          , CASE
                WHEN ""M2 Job Title"" = 'Sr. Manager, Customer Experience'
                    THEN ""M2 Job Title""
                    ELSE ""M3 Job Title""
            END ""M3 Job Title""
            --, CONCAT(SPLIT_PART(""M3 Name"",',',2),' ',SPLIT_PART(""M3 Name"",',',1)) AS ""M3 Name""
            --, ""M3 Job Title""
        from
            sm_temp
        WHERE
            row_num = 1
        order by
            ""M1 Name""
    )
  , ticket_sla AS
    (
        SELECT
            t.id AS ticket_id
          , CASE
                WHEN t.priority = 'urgent'
                    THEN 2880
                WHEN t.priority = 'high'
                    THEN 7200
                WHEN t.priority = 'normal'
                    THEN 28800
                WHEN t.priority = 'low'
                    THEN 64800
                    ELSE 129600
            END AS sla_limit
        FROM
            zendesk.ticket t
        WHERE
            t.status <<>> 'deleted'
    )
  , zd AS
    (
        SELECT
            u.organization_id
          , o.custom_customer_id AS zd_client_id
          , o.name               AS org_name
          , COUNT(t.id)             issues_raised
          , COUNT
                (
                    CASE
                        WHEN tm.full_resolution_time_in_minutes_business <<= sla_limit
                            AND status in ('closed'
                                         , 'solved')
                            THEN t.id
                            ELSE NULL
                    END
                )
            AS ticket_count_within_sla
          , COUNT
                (
                    CASE
                        WHEN tm.full_resolution_time_in_minutes_business >> sla_limit
                            AND status in ('closed'
                                         , 'solved')
                            THEN t.id
                            ELSE NULL
                    END
                )
            AS ticket_count_sla_breached
          , COUNT
                (
                    CASE
                        WHEN lower(status) not in ('closed'
                                                 , 'solved')
                            THEN t.id
                            ELSE NULL
                    END
                )
            AS open_ticket_count
        FROM
            zendesk.ticket t
            LEFT JOIN
                zendesk.""user"" u
                ON
                    t.requester_id = u.id
            LEFT JOIN
                zendesk.organization o
                ON
                    u.organization_id = o.id
            LEFT JOIN
                zendesk.ticket_metrics tm
                ON
                    t.id = tm.ticket_id
            LEFT JOIN
                ticket_sla ts
                ON
                    t.id = ts.ticket_id
        WHERE
            t.status              <<>> 'deleted'
            AND u.organization_id <<>>'369464938673'
            AND o.custom_customer_id notnull
        GROUP BY
            u.organization_id
          , o.custom_customer_id
          , o.name
    )
  , sfdc AS
    (
        SELECT
            parent_name
          , MAX
                (
                    CASE
                        WHEN source ='SFDC Customer'
                            THEN source_id
                    END
                )
            AS salesforce_id
          , MIN
                (
                    CASE
                        WHEN source ='SFDC Customer'
                            THEN source_id
                    END
                )
            AS salesforce_id_2
          , MAX
                (
                    CASE
                        WHEN source ='GoGlobal Client'
                            THEN source_id
                    END
                )
            AS goglobal_id
        FROM
            repo.v_gp_mdm_customer
        GROUP BY
            parent_name
    )
  , sfdc_health AS
    (
        SELECT
            sfdc.*
          , t2.factors_for_customer_health_c
          , t2.complexity_c
        FROM
            sfdc
            LEFT JOIN
                salesforce.account t2
                ON
                    sfdc.salesforce_id=t2.id
        WHERE
            t2._fivetran_active = true
    )
  , final AS
    (
        SELECT
            client.id::TEXT                         AS client_id
          , client.name                             AS client_name
          , CONCAT(am.first_name, ' ',am.last_name) AS account_manager
          , CONCAT(ae.first_name, ' ',ae.last_name) AS account_executive
          , zd.ticket_count_sla_breached
          , zd.ticket_count_within_sla
          , zd.open_ticket_count
          , sfdc_health.factors_for_customer_health_c
          , sfdc_health.complexity_c
          , us.email AS work_email
        FROM
            goglobal_gp_goglobal.v_gp_gg_client_current client
            LEFT JOIN
                goglobal_gp_goglobal.v_gp_gg_gp_person_current am
                ON
                    client.gp_account_manager_id = am.id
            LEFT JOIN
                goglobal_gp_goglobal.v_gp_gg_gp_person_current ae
                ON
                    client.gp_current_sales_rep_id = ae.id
            LEFT JOIN
                zd
                ON
                    client.id = zd.zd_client_id
            LEFT JOIN
                sfdc_health
                ON
                    sfdc_health.goglobal_id::integer=client.id
            LEFT JOIN
                (
                    SELECT *
                    FROM
                        goglobal_gp_goglobal.v_gp_gg_user_current
                    where
                        lower(email) like '%globalization-partners.com%'
                )
                us
                ON
                    am.user_id = us.id
        WHERE
            client.is_demo_client IS FALSE
    )
SELECT *
from
    final
    left join
        sm_final
        on
            final.work_email = sm_final.""M1 Work Email"""
dcadc020-1811-b849-cc60-b3a6902500be,Customer Master Data,postgres,"select distinct T1.client_id, T4.ID AS COUNTRY_ID, T4.NAME AS COUNTRY, T1.id,T1.DATE_CREATED
from goglobal_gp_goglobal.v_gp_gg_professional_current T1
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_CLIENT_country_current t2 
	on t1.CLIENT_country_id=t2.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_COUNTRY_current t4 
	on t2.COUNTRY_ID=t4.id
where is_failed_to_launch='true'"
dcadc020-1811-b849-cc60-b3a6902500be,Customer Master Data,postgres,"SELECT
	""Actual"".""active_professionals""           AS ""active_professionals""
  , ""Actual"".""active_profs_ratio""             AS ""active_profs_ratio""
  , ""Actual"".""businessEntityType_description"" AS ""businessEntityType_description""
  , ""Actual"".""charterType_description""        AS ""charterType_description""
  , ""Actual"".""client_id""                      AS ""client_id""
  , ""Actual"".""client_name""                    AS ""client_name""
  , ""Actual"".""comments_clean""                 AS ""comments_clean""
  , ""Actual"".""company_age_bins""               AS ""company_age_bins""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""company_age_in_gp"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""company_age_in_gp""
		END
	)
	                                                                   AS ""company_age_in_gp""
  , ""Actual"".""company_operational_age_bins""                            AS ""company_operational_age_bins""
  , CAST(""Actual"".""country_count"" AS BIGINT)                           AS ""country_count""
  , ""Actual"".""country_count_bins""                                      AS ""country_count_bins""
  , CAST(""Actual"".""customer_crossed_avg_age"" AS BOOL)                  AS ""customer_crossed_avg_age""
  , ""Actual"".""date_created""                                            AS ""date_created""
  , ""Actual"".""dunsControlStatus_operatingStatus_description""           AS ""dunsControlStatus_operatingStatus_description""
  , ""Actual"".""duns_number""                                             AS ""duns_number""
  , CAST(""Actual"".""dunscontrolstatus_isdelisted"" AS BOOL)              AS ""dunscontrolstatus_isdelisted""
  , CAST(""Actual"".""dunscontrolstatus_ismailundeliverable"" AS BOOL)     AS ""dunscontrolstatus_ismailundeliverable""
  , CAST(""Actual"".""dunscontrolstatus_ismarketable"" AS BOOL)            AS ""dunscontrolstatus_ismarketable""
  , CAST(""Actual"".""dunscontrolstatus_istelephonedisconnected"" AS BOOL) AS ""dunscontrolstatus_istelephonedisconnected""
  , ""Actual"".""failed_professionals""                                    AS ""failed_professionals""
  , ""Actual"".""first_hire""                                              AS ""first_hire""
  , ""Actual"".""gg_billing_country""                                      AS ""gg_billing_country""
  , CASE WHEN ""Actual"".""has_profs_in_country_w_own_entity"" = 'None'
  THEN CAST('false' AS BOOL) 
  ELSE CAST(""Actual"".""has_profs_in_country_w_own_entity"" AS BOOL) END AS ""has_profs_in_country_w_own_entity""
  , CAST(""Actual"".""has_urgent_tickets"" AS BOOL)                        AS ""has_urgent_tickets""
  , CAST(""Actual"".""is_bank_info_approved"" AS BOOL)                     AS ""is_bank_info_approved""
  , CAST(""Actual"".""is_churn"" AS BOOL)                                  AS ""is_churn""
  , CAST(""Actual"".""is_partner_referred"" AS BOOL)                       AS ""is_partner_referred""
  , CAST(""Actual"".""isexporter"" AS BOOL)                                AS ""isexporter""
  , CAST(""Actual"".""isfortune1000listed"" AS BOOL)                       AS ""isfortune1000listed""
  , CAST(""Actual"".""isimporter"" AS BOOL)                                AS ""isimporter""
  , CAST(""Actual"".""issmallbusiness"" AS BOOL)                           AS ""issmallbusiness""
  , CAST(""Actual"".""isstandalone"" AS BOOL)                              AS ""isstandalone""
  , ""Actual"".""inactive_professionals""                                  AS ""inactive_professionals""
  , ""Actual"".""industry_name""                                           AS ""industry_name""
  , ""Actual"".""health_sentiment""                                        AS ""health_sentiment""
  , ""Actual"".""legalForm_description""                                   AS ""legalForm_description""
  , ""Actual"".""max_prof_country""                                        AS ""max_prof_country""
  , ""Actual"".""max_prof_in_any_country""                                 AS ""max_prof_in_any_country""
  , ""Actual"".""max_prof_in_any_country_bins""                            AS ""max_prof_in_any_country_bins""
  , ""Actual"".""min_engagement_length""                                   AS ""min_engagement_length""
  , ""Actual"".""min_engagement_length_bins""                              AS ""min_engagement_length_bins""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT) = 'NaT'
				THEN NULL
			WHEN (
					CAST(CAST(TO_TIMESTAMP(CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT), 'YYYY-MM-DD') AS TIMESTAMP) AS DATE) NOTNULL
				)
				THEN CAST(CAST(TO_TIMESTAMP(CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT), 'YYYY-MM-DD') AS TIMESTAMP) AS DATE)
			WHEN (
					CAST(CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT) AS DATE) NOTNULL
				)
				THEN CAST(CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT) AS DATE)
				ELSE NULL
		END
	)
	                                                     AS ""msa_contract_start_date_peo""
  , ""Actual"".""net_professionals_terminated""              AS ""net_professionals_terminated""
  , ""Actual"".""net_professionals_terminated_bins""         AS ""net_professionals_terminated_bins""
  , ""Actual"".""net_professionals_terminated_percent""      AS ""net_professionals_terminated_percent""
  , ""Actual"".""new_professionals""                         AS ""new_professionals""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""no_countries_with_entity"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""no_countries_with_entity""
		END
	)
	                                                                   AS ""no_countries_with_entity""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""no_countries_with_entity_and_active_profs"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""no_countries_with_entity_and_active_profs""
		END
	)
	                                                                   AS ""no_countries_with_entity_and_active_profs""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""no_profs_moved_to_entity"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""no_profs_moved_to_entity""
		END
	)
	                                                                   AS ""no_profs_moved_to_entity""
  , ""Actual"".""num_stock_exchange_reg_bins""               AS ""num_stock_exchange_reg_bins""
  , ""Actual"".""num_years_since_incorporated""              AS ""num_years_since_incorporated""
  , ""Actual"".""num_years_since_operating""                 AS ""num_years_since_operating""
  , ""Actual"".""numberofemployees""                         AS ""numberofemployees""
  , ""Actual"".""numberofemployees_bins""                    AS ""numberofemployees_bins""
  , ""Actual"".""numberofregisteredstockexchanges""          AS ""numberofregisteredstockexchanges""
  , ""Actual"".""numberofregistrations""                     AS ""numberofregistrations""
  , ""Actual"".""offboarding_trend_bins""                    AS ""offboarding_trend_bins""
  , ""Actual"".""onboarding_finished""                       AS ""onboarding_finished""
  , ""Actual"".""onboarding_professionals""                  AS ""onboarding_professionals""
  , ""Actual"".""onboarding_trend_bins""                     AS ""onboarding_trend_bins""
  , ""Actual"".""org_type""                                  AS ""org_type""
  , CAST(""Actual"".""own_entity_ind"" AS BOOL)              AS ""own_entity_ind""
  , ""Actual"".""payroll_end_last_1_months_prof""            AS ""payroll_end_last_1_months_prof""
  , ""Actual"".""payroll_end_last_2_months_prof""            AS ""payroll_end_last_2_months_prof""
  , ""Actual"".""payroll_end_last_3_months_prof""            AS ""payroll_end_last_3_months_prof""
  , ""Actual"".""payroll_end_last_4_months_prof""            AS ""payroll_end_last_4_months_prof""
  , ""Actual"".""payroll_end_last_5_months_prof""            AS ""payroll_end_last_5_months_prof""
  , ""Actual"".""payroll_end_last_6_months_prof""            AS ""payroll_end_last_6_months_prof""
  , ""Actual"".""payroll_end_last_6_months_prof_bins""       AS ""payroll_end_last_6_months_prof_bins""
  , ""Actual"".""payroll_end_trend""                         AS ""payroll_end_trend""
  , ""Actual"".""payroll_start_last_1_months""               AS ""payroll_start_last_1_months""
  , ""Actual"".""payroll_start_last_2_months""               AS ""payroll_start_last_2_months""
  , ""Actual"".""payroll_start_last_3_months""               AS ""payroll_start_last_3_months""
  , ""Actual"".""payroll_start_last_4_months""               AS ""payroll_start_last_4_months""
  , ""Actual"".""payroll_start_last_5_months""               AS ""payroll_start_last_5_months""
  , ""Actual"".""payroll_start_last_6_months""               AS ""payroll_start_last_6_months""
  , ""Actual"".""payroll_start_last_6_months_bins""          AS ""payroll_start_last_6_months_bins""
  , ""Actual"".""payroll_start_trend""                       AS ""payroll_start_trend""
  , ""Actual"".""primaryAddress_addressCountry_name""        AS ""primaryAddress_addressCountry_name""
  , ""Actual"".""primaryAddress_continentalRegion_name""     AS ""primaryAddress_continentalRegion_name""
  , ""Actual"".""primaryIndustryCode_usSicV4Description""    AS ""primaryIndustryCode_usSicV4Description""
  , ""Actual"".""primaryaddress_ismanufacturinglocation""    AS ""primaryaddress_ismanufacturinglocation""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""profs_at_risk"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""profs_at_risk""
		END
	)
	                                                                   AS ""profs_at_risk""
  , CAST(""Actual"".""profs_moved_to_entity"" AS BOOL)              AS ""profs_moved_to_entity""
  , ""Actual"".""sfdc_client_health""                        AS ""sfdc_client_health""
  , ""Actual"".""sfdc_expansion_tier_level""                 AS ""sfdc_expansion_tier_level""
  , ""Actual"".""sfdc_pricing_model""                        AS ""sfdc_pricing_model""
  , ""Actual"".""sfdccustomer_health_notes""                 AS ""sfdccustomer_health_notes""
  , ""Actual"".""sfdccustomer_health_notes_agg""             AS ""sfdccustomer_health_notes_agg""
  , ""Actual"".""status""                                    AS ""status""
  , ""Actual"".""stockexchanges""                            AS ""stockexchanges""
  , ""Actual"".""terminating_professionals""                 AS ""terminating_professionals""
  , ""Actual"".""tier_type""                                 AS ""tier_type""
  , ""Actual"".""time_taken_for_first_hire""                 AS ""time_taken_for_first_hire""
  , ""Actual"".""time_taken_for_first_hire_bins""            AS ""time_taken_for_first_hire_bins""
  , ""Actual"".""time_taken_to_sign_msa""                    AS ""time_taken_to_sign_msa""
  , ""Actual"".""time_taken_to_sign_msa_bins""               AS ""time_taken_to_sign_msa_bins""
  , ""Actual"".""total_active_benefits""                     AS ""total_active_benefits""
  , ""Actual"".""total_active_benefits_bins""                AS ""total_active_benefits_bins""
  , ""Actual"".""total_benefits""                            AS ""total_benefits""
  , ""Actual"".""total_benefits_bins""                       AS ""total_benefits_bins""
  , ""Actual"".""total_benefits_created_last_6_months""      AS ""total_benefits_created_last_6_months""
  , ""Actual"".""total_benefits_created_last_6_months_bins"" AS ""total_benefits_created_last_6_months_bins""
  , ""Actual"".""total_professionals""                       AS ""total_professionals""
  , ""Actual"".""total_professionals_bins""                  AS ""total_professionals_bins""
  , ""Actual"".""yearly_revenue""                            AS ""yearly_revenue""
  , ""Actual"".""yearly_revenue_bins""                       AS ""yearly_revenue_bins""
  , ""Actual"".""zendesk_avg_sla_days""                      AS ""zendesk_avg_sla_days""
  , ""Actual"".""zendesk_issue_count""                       AS ""zendesk_issue_count""
  , ""Actual"".""zendesk_issue_count_bins""                  AS ""zendesk_issue_count_bins""
  , ""Actual"".""zendesk_issue_count_high""                  AS ""zendesk_issue_count_high""
  , ""Actual"".""zendesk_issue_count_urgent""                AS ""zendesk_issue_count_urgent""
FROM
	""preprocessed_data"".""customer_with_dnb_data"" ""Actual"""
dcadc020-1811-b849-cc60-b3a6902500be,Customer Master Data,postgres,"SELECT *
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
where cal_date>>'12-31-2018'"
dcadc020-1811-b849-cc60-b3a6902500be,Customer Master Data,postgres,"WITH AE AS (
	select distinct t4.id as client_id, 
					  t4.date_modified,T4.gp_current_sales_rep_id ,
					  row_number()over (partition by t4.id,T4.gp_current_sales_rep_id order by T4.date_modified), 
				concat(Z.first_name,' ',Z.last_name) AS aCCOUNT_EXECUTIVE
			from goglobal_gp_goglobal.client t4
			left join goglobal_gp_goglobal.v_gp_gg_client_current customer
						on t4.id=customer.id
			left join goglobal_gp_goglobal.v_gp_gg_gp_person_current Z 
		  	on Z.id = t4.gp_current_sales_rep_id 
			group by 1,2,3,5
			order by T4.ID)
SELECT *,row_number()over (partition by CLIENT_id order by date_modified)AS AE_ORDER
FROM AE WHERE ROW_NUMBER='1'"
dcadc020-1811-b849-cc60-b3a6902500be,Customer Master Data,postgres,"SELECT CAST(""Predicted"".""EXPLANATION_10_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_10_VALUE"",
  CAST(""Predicted"".""EXPLANATION_10_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_10_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_10_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_10_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_10_STRENGTH"" AS TEXT) AS ""EXPLANATION_10_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_1_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_1_VALUE"",
  CAST(""Predicted"".""EXPLANATION_1_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_1_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_1_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_1_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_1_STRENGTH"" AS TEXT) AS ""EXPLANATION_1_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_2_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_2_VALUE"",
  CAST(""Predicted"".""EXPLANATION_2_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_2_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_2_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_2_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_2_STRENGTH"" AS TEXT) AS ""EXPLANATION_2_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_3_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_3_VALUE"",
  CAST(""Predicted"".""EXPLANATION_3_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_3_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_3_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_3_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_3_STRENGTH"" AS TEXT) AS ""EXPLANATION_3_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_4_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_4_VALUE"",
  CAST(""Predicted"".""EXPLANATION_4_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_4_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_4_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_4_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_4_STRENGTH"" AS TEXT) AS ""EXPLANATION_4_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_5_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_5_VALUE"",
  CAST(""Predicted"".""EXPLANATION_5_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_5_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_5_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_5_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_5_STRENGTH"" AS TEXT) AS ""EXPLANATION_5_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_6_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_6_VALUE"",
  CAST(""Predicted"".""EXPLANATION_6_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_6_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_6_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_6_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_6_STRENGTH"" AS TEXT) AS ""EXPLANATION_6_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_7_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_7_VALUE"",
  CAST(""Predicted"".""EXPLANATION_7_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_7_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_7_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_7_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_7_STRENGTH"" AS TEXT) AS ""EXPLANATION_7_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_8_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_8_VALUE"",
  CAST(""Predicted"".""EXPLANATION_8_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_8_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_8_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_8_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_8_STRENGTH"" AS TEXT) AS ""EXPLANATION_8_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_9_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_9_VALUE"",
  CAST(""Predicted"".""EXPLANATION_9_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_9_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_9_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_9_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_9_STRENGTH"" AS TEXT) AS ""EXPLANATION_9_STRENGTH_NUMERIC"",
  CASE 
    WHEN ""Predicted"".""POSITIVE_CLASS"" ISNULL OR 
         TRIM(""Predicted"".""POSITIVE_CLASS"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""POSITIVE_CLASS"" AS BOOLEAN) END AS ""POSITIVE_CLASS"",
  CASE 
    WHEN ""Predicted"".""THRESHOLD"" ISNULL OR 
         TRIM(""Predicted"".""THRESHOLD"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""THRESHOLD"" AS FLOAT) END AS ""THRESHOLD"",
  CAST(""Predicted"".""client_id"" AS TEXT) AS ""client_id (customer_churn_with_dnb_latest)"",
  CAST(""Predicted"".""deployment_id"" AS TEXT) AS ""deployment_id"",
  CASE 
    WHEN ""Predicted"".""is_churn_False_PREDICTION"" ISNULL OR 
         TRIM(""Predicted"".""is_churn_False_PREDICTION"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""is_churn_False_PREDICTION"" AS FLOAT) END AS ""is_churn_False_PREDICTION"",
  CASE 
    WHEN ""Predicted"".""is_churn_PREDICTION"" ISNULL OR 
         TRIM(""Predicted"".""is_churn_PREDICTION"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""is_churn_PREDICTION"" AS BOOLEAN) END AS ""is_churn_PREDICTION"",
  CASE 
    WHEN ""Predicted"".""is_churn_True_PREDICTION"" ISNULL OR 
         TRIM(""Predicted"".""is_churn_True_PREDICTION"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""is_churn_True_PREDICTION"" AS FLOAT) END AS ""is_churn_True_PREDICTION"",
  CAST(""Predicted"".""prediction_status"" AS TEXT) AS ""prediction_status"",
  ""Predicted"".""update_time"" AS ""update_time"",
  ""Predicted"".""use_case"" AS ""use_case""
FROM ""datarobot_predictions"".""customer_churn_with_dnb_latest"" ""Predicted""
WHERE ""Predicted"".""prediction_status"" = 'OK'"
dcadc020-1811-b849-cc60-b3a6902500be,Customer Master Data,postgres,"WITH satisfaction AS (SELECT id, s.ticket_id, score, created_at, last_date, comment, reason
	FROM ""zendesk"".""satisfaction_rating"" AS s
	INNER JOIN (
	SELECT ticket_id, MAX(created_at) AS last_date
	FROM ""zendesk"".""satisfaction_rating""
	GROUP BY ticket_id) AS m
	ON (s.ticket_id = m.ticket_id AND created_at = last_date)),
zendesk as(
SELECT
t.created_at,
t.organization_id AS customer_id,
o.name AS customer,
g.name AS group,
t.requester_id,
u.name AS requester,
t.id AS ticket_id,
status,
s.score,
T.PRIORITY,
T.CUSTOM_CATEGORY,
U.organization_id AS USER_ORGANIZATION_ID,
T.organization_id
	FROM ""zendesk"".""ticket"" AS t
	LEFT JOIN ""zendesk"".""user"" AS u
	ON t.requester_id = u.id
	LEFT JOIN ""zendesk"".""group"" AS g
	ON t.group_id = g.id
	LEFT JOIN ""zendesk"".""user"" AS u2
	ON t.assignee_id = u2.id
	LEFT JOIN ""zendesk"".""organization"" AS o
	ON t.organization_id = o.id
	LEFT JOIN ""satisfaction"" AS s
	ON t.id = s.ticket_id
	ORDER BY 1,3,7)
	SELECT O.NAME AS CLIENT, zendesk.*
	from zendesk.organization o
	left join zendesk on o.id=zendesk.user_organization_id"
dcadc020-1811-b849-cc60-b3a6902500be,Customer Master Data,postgres,"With AM AS (select distinct t4.id as client_id, 
					  t4.date_modified,t4.gp_account_manager_id,
					  row_number()over (partition by t4.id,t4.gp_account_manager_id order by T4.date_modified), 
				concat(t9.first_name,' ',t9.last_name) AS Account_Manager
			from goglobal_gp_goglobal.client t4
			left join goglobal_gp_goglobal.v_gp_gg_client_current customer
						on t4.id=customer.id
			left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9  	
				on t9.id = t4.gp_account_manager_id
		group by 1,2,3,5
			order by T4.ID)
SELECT *, row_number()over (partition by CLIENT_id order by date_modified)AS AM_ORDER 
FROM AM WHERE ROW_NUMBER='1'"
dcadc020-1811-b849-cc60-b3a6902500be,TotalBillsMat,postgres,"select *
from goglobal_gp_goglobal.v_gp_gg_total_bills_mat
where type='Management Fee'"
dcadc020-1811-b849-cc60-b3a6902500be,Avg pop,postgres,"with a as
	(select distinct client_id, count(distinct id) as POP
	from goglobal_gp_goglobal.v_gp_gg_professional_current
	where status in ('2','3','4')
	group by 1
	)
select avg(POP) AS avg_gp_pop
FROM A"
dced077f-e8fe-3fbb-cb84-7c17607ad879,Polaris KPIs - Phase 1,databricks,"SELECT 
CONCAT(RIGHT(billing.accounting_period,4),'-',LEFT(billing.accounting_period,2),'-01')::date AS period_date,
billing.accounting_period,
billing.project_id,
billing.transaction_type,
billing.customer_id,
billing.gp_customer_accounting_id,
billing.service_class,
billing.pricing_model,
billing.employment_country,
billing.invoice_type,
billing.transaction_fee_type,
billing.gaap_reporting_region,
billing.billing_region,
billing.is_gp_recruit_customer,
billing.is_gp_contractor_customer,
billing.customer_name,
billing.is_demo_client,
billing.professional_employed_region,
billing.msa_contract_start_date_eor,
billing.employment_country_iso_code_2,
billing.base_currency,
billing.invoice_line_currency,
billing.recurring_category,
billing.recurring_detailed_category,
CASE WHEN billing.transaction_type='CRM' THEN -billing.extended_amount_in_company_base_currency ELSE billing.extended_amount_in_company_base_currency end as Extended_amount_USD,
CASE WHEN billing.transaction_type='CRM' THEN -billing.gross_billings_value ELSE billing.gross_billings_value end as Gross_Billings_Value,
CASE WHEN billing.transaction_type='CRM' THEN -billing.gaap_revenue_value else billing.gaap_revenue_value end as gaap_revenue_value ,
CASE WHEN billing.transaction_type='CRM' THEN -billing.recurring_eor_platform_fee_billing_value ELSE billing.recurring_eor_platform_fee_billing_value end as recurring_eor_platform_fee_billing_value ,
CASE WHEN billing.transaction_type='CRM' THEN -billing.recurring_eor_transaction_fee_billing_value ELSE billing.recurring_eor_transaction_fee_billing_value end as recurring_eor_transaction_fee_billing_value,
CASE WHEN billing.transaction_type='CRM' THEN -billing.total_eor_recurring_fee_billing_value ELSE billing.total_eor_recurring_fee_billing_value end as total_eor_recurring_fee_billing_value,
CASE WHEN billing.transaction_type='CRM' THEN -billing.recurring_eor_billings_value ELSE billing.recurring_eor_billings_value end as recurring_eor_billings_value,
CASE WHEN billing.transaction_type='CRM' THEN -billing.recurring_contractor_revenue ELSE billing.recurring_contractor_revenue end as recurring_contractor_revenue
FROM gp_prod.gold_kpi.billing_kpi_view as billing
WHERE billing.accounting_period is not null
ORDER BY 1"
dced077f-e8fe-3fbb-cb84-7c17607ad879,Polaris KPIs - Phase 1,databricks,"--Employees
SELECT CONCAT(RIGHT(hc.accounting_period,4),'-',LEFT(hc.accounting_period,2),'-01')::date AS period_date,
hc.worker_headcount,
hc.employee_headcount
FROM gp_prod.gold_kpi.employee_monthly_headcount_view as hc"
dced077f-e8fe-3fbb-cb84-7c17607ad879,Polaris KPIs - Phase 1,databricks,"SELECT CONCAT(RIGHT(capm.accounting_period,4),'-',LEFT(capm.accounting_period,2),'-01')::date AS period_date,
capm.gp_customer_accounting_id,
capm.active_product_mix,
capm.new_eor,
capm.customer_reactivation,
capm.pricing_model
FROM gp_prod.gold_kpi.customer_active_product_mix_view as capm"
dced077f-e8fe-3fbb-cb84-7c17607ad879,Polaris KPIs - Phase 1,databricks,"WITH p AS (
SELECT ps.accounting_period, ps.gp_customer_accounting_id,
COUNT (distinct ps.project_id) AS active_professional_count
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view AS ps
WHERE total >> 0
GROUP BY ps.accounting_period, ps.gp_customer_accounting_id
)
,
A AS(
SELECT b.accounting_period,
--CONCAT(right(b.accounting_period,4),'-',left(b.accounting_period,2),'-01')::date AS period_date,
--datediff(MONTH, c.first_fee_paid_date, CONCAT(right(b.accounting_period,4),'-',left(b.accounting_period,2),'-01')::date) AS months,
b.gp_customer_accounting_id,
b.total AS month_revenue,
--c.first_fee_paid_date,
p.active_professional_count
FROM gp_prod.gold_kpi.customer_monthly_billing_summary_view AS b
LEFT JOIN gp_prod.gold_kpi.customer_kpi_view AS c USING (gp_customer_accounting_id)
LEFT JOIN p ON p.gp_customer_accounting_id = b.gp_customer_accounting_id AND p.accounting_period = b.accounting_period
WHERE 
datediff(MONTH, c.first_fee_paid_date, CONCAT(right(b.accounting_period,4),'-',left(b.accounting_period,2),'-01')::date) >>= 12

)
,
B AS(
SELECT A.accounting_period,
count(DISTINCT gp_customer_accounting_id) AS customer_count,
sum(month_revenue) AS revenue,
sum(active_professional_count) AS professionals
FROM A
GROUP BY A.accounting_period
)


SELECT
CONCAT(RIGHT(B.accounting_period,4),'-',LEFT(B.accounting_period,2),'-01')::date AS period_date,
B.customer_count,
B.revenue,
B.professionals,
B.professionals/B.customer_count AS prof_per_cust,
B.revenue/B.customer_count AS revenue_per_cust,
B.revenue/B.professionals AS revenue_per_prof
FROM B

ORDER BY 1"
dced077f-e8fe-3fbb-cb84-7c17607ad879,Polaris KPIs - Phase 1,databricks,"SELECT pmbs.period_date,fkpi.ledger_revenue,
pmbs.total_billing_value,pmbs.total_eor_billing_value,
pmbs.total_contractor_billing_value,
cmbs.take_rate,
cmbs_uat.total_setup_fees_revenue
FROM(
   SELECT
    CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
    sum(total) AS total_billing_value, 
    sum(total_eor_recurring_fee_billing_value) AS total_eor_billing_value,
    sum(total_recurring_contractor_revenue) AS total_contractor_billing_value
    FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view
    GROUP BY period_date) as pmbs
LEFT JOIN(
    SELECT 
    CONCAT(RIGHT(ledger_period,4),'-',LEFT(ledger_period,2),'-01')::date AS period_date,
    value AS ledger_revenue
    FROM gp_prod.gold_kpi.finance_gl_kpi_aggregate_view
    WHERE finance_kpi = 'revenue') as fkpi
ON fkpi.period_date=pmbs.period_date
LEFT JOIN (
    SELECT CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
    AVG(take_rate) as take_rate
    FROM gp_prod.gold_kpi.customer_monthly_billing_summary_view
    GROUP BY 1
    ORDER BY 1
    ) as cmbs
ON cmbs.period_date=pmbs.period_date
LEFT JOIN (
    SELECT CONCAT(RIGHT(a.accounting_period,4),'-',LEFT(a.accounting_period,2),'-01')::date AS period_date,
    SUM(a.total_setup_fees_revenue) as total_setup_fees_revenue
    FROM gp_uat.gold_kpi.customer_monthly_billing_summary_view as a
    LEFT JOIN gp_prod.gold_kpi.customer_active_product_mix_view as b
    ON (a.accounting_period=b.accounting_period and a.gp_customer_accounting_id=b.gp_customer_accounting_id)
    WHERE b.new_eor=True
    GROUP BY 1
    ORDER BY 1
    ) as cmbs_uat
ON cmbs_uat.period_date=pmbs.period_date
WHERE pmbs.period_date is not null
ORDER BY 1"
dced077f-e8fe-3fbb-cb84-7c17607ad879,Polaris KPIs - Phase 1,postgres,"SELECT a.cal_date::date,a.professional_id,
a.payroll_start_date::date,
a.payroll_end_date::date,
a.country_name,a.active_flag,a.termination_flag,a.new_flag,
b.accounting_id,b.internal_id,b.external_id
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard as a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_professional as b
ON a.professional_id=b.internal_id
WHERE a.active_flag = 'Active' AND (a.service_class IS NULL OR a.service_class <<>> '4')
AND  a.cal_date BETWEEN '2020-01-01'::date AND current_date"
dced077f-e8fe-3fbb-cb84-7c17607ad879,Polaris KPIs - Phase 1,databricks,"--Retention
SELECT CONCAT(RIGHT(cr.accounting_period,4),'-',LEFT(cr.accounting_period,2),'-01')::date AS period_date,
cr.useful_life,
cr.churn as customer_churn,
cr.annual_gross_revenue_churn,
churn_c.churn_count,
cr.retention as customer_retention,
pr.retention as professional_retention,
try_divide(pr.active_now_and_year_ago, cr.active_now_and_year_ago) AS profs_per_customer
FROM gp_prod.gold_kpi.eor_customer_retention_rate_summary_view as cr
LEFT JOIN
(
SELECT accounting_period, COUNT(*)::int AS churn_count
FROM gp_prod.gold_kpi.customer_active_product_mix_view 
WHERE last_month_active='true'
GROUP BY accounting_period
ORDER BY 1
) AS churn_c USING(accounting_period)
LEFT JOIN gp_prod.gold_kpi.professional_retention_rate_summary_view as pr
ON cr.accounting_period=pr.accounting_period"
dced077f-e8fe-3fbb-cb84-7c17607ad879,Polaris KPIs - Phase 1,databricks,"--Marketing
SELECT CONCAT(RIGHT(mfv.month_period,4),'-',LEFT(mfv.month_period,2),'-01')::date AS period_date,
mfv.MSA_count,mfv.SAL_count,mfv.SQL_count,mfv.MQL_count,
mfv.avg_MQL_MSA,
mfv.avg_MQL_SQL,
mfv.avg_SQL_SAL,
mfv.avg_SAL_MSA,
mfc.MQL_SQL_conversion_rate,mfc.SQL_SAL_conversion_rate,mfc.SAL_MSA_conversion_rate
FROM gp_prod.gold_marketing.marketing_funnel_view as mfv
LEFT JOIN gp_prod.gold_marketing.funnel_conversion_view mfc
ON mfv.month_period=mfc.month_period"
dced077f-e8fe-3fbb-cb84-7c17607ad879,Polaris KPIs - Phase 1,databricks,"--------Counts
WITH eor_prof as (
--eor professionals
SELECT 
CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,accounting_period,
COUNT(DISTINCT(project_id)) as active_professional_eor_count
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view 
WHERE total_eor_recurring_fee_billing_value >> 0 
GROUP BY 1,2
ORDER BY 1),

--contractor
contractor as(
SELECT 
CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,accounting_period,
COUNT(DISTINCT(project_id)) as active_professional_contracted_count
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view
WHERE total_recurring_contractor_revenue  >> 0 
GROUP BY 1,2
ORDER BY 1),

total_prof as (
--total
SELECT 
CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,accounting_period,
COUNT(DISTINCT(project_id)) as active_professional_count
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view
WHERE total  >> 0 
GROUP BY 1,2
ORDER BY 1)

SELECT
CONCAT(RIGHT(cmbc.accounting_period,4),'-',LEFT(cmbc.accounting_period,2),'-01')::date AS period_date,
cmbc.active_customer_eor_count,
cmbc.active_customer_count,
cmbc.TTM_average_recurring_revenue,
a.active_professional_count,
b.active_professional_eor_count,
c.active_professional_contracted_count,
pmbc.failed_to_launch_volume
FROM gp_prod.gold_kpi.customer_monthly_billing_counts_view as cmbc
LEFT JOIN total_prof as a
ON cmbc.accounting_period=a.accounting_period
LEFT JOIN eor_prof as b
ON cmbc.accounting_period=b.accounting_period
LEFT JOIN contractor as c
ON cmbc.accounting_period=c.accounting_period
LEFT JOIN gp_prod.gold_kpi.professional_monthly_billing_counts_view as pmbc
ON cmbc.accounting_period=pmbc.accounting_period
ORDER BY 1"
dced077f-e8fe-3fbb-cb84-7c17607ad879,Polaris KPIs - Phase 1,databricks,"--4.1 Active Prof Recurring Fees
WITH billings as (
SELECT  
CONCAT(RIGHT(b.accounting_period,4),'-',LEFT(b.accounting_period,2),'-01')::date AS period_date,
b.project_id,
b.customer_name as Client_Name,


CASE WHEN b.transaction_type ='CRM' THEN 
CASE WHEN b.recurring_detailed_category IN ('Fees EOR MGMT FEE') 
and (b.service_class == ""EOR"" or b.service_class is null)
THEN -b.extended_amount_in_company_base_currency else 0  end 
ELSE
CASE WHEN b.recurring_detailed_category IN ('Fees EOR MGMT FEE') 
and (b.service_class == ""EOR"" or b.service_class is null)
THEN b.extended_amount_in_company_base_currency else 0 end end
as Recurring_EOR_Platform_Fee_Billings_USD,


CASE WHEN b.transaction_type ='CRM' THEN
CASE WHEN b.recurring_detailed_category IN ('Fee EOR CURRENCY TRANSACTION FEE','Fees EOR OTHER FEES',
'Fee EOR EMPLOYER BURDEN MARK-UP','Fee EOR INSURANCE MARK-UP') 
and (b.service_class == ""EOR"" or b.service_class is null)
THEN -b.extended_amount_in_company_base_currency else 0 end
ELSE
CASE WHEN b.recurring_detailed_category IN ('Fee EOR CURRENCY TRANSACTION FEE','Fees EOR OTHER FEES',
'Fee EOR EMPLOYER BURDEN MARK-UP','Fee EOR INSURANCE MARK-UP') 
and (b.service_class == ""EOR"" or b.service_class is null)
THEN b.extended_amount_in_company_base_currency else 0 end end
as Recurring_EOR_Transaction_Fee_Billings_USD,

CASE WHEN b.transaction_type ='CRM' THEN 
CASE WHEN b.recurring_category in (""Recurring Fees and Mark-ups"")  
THEN -b.extended_amount_in_company_base_currency else 0 end 
ELSE
CASE WHEN b.recurring_category in (""Recurring Fees and Mark-ups"")
THEN b.extended_amount_in_company_base_currency else 0 end end
as Total_Recurring_Fees_USD

FROM gp_prod.gold_kpi.billing_kpi_view  as b
WHERE b.accounting_period is not null
--where accounting_period='04-2023' 
--GROUP BY 1,2,3,4
ORDER BY 1,2)

SELECT 
period_date,
project_id,
Client_Name,

SUM(Recurring_EOR_Platform_Fee_Billings_USD) as Recurring_EOR_Platform_Fee_Billings_USD,
SUM(Recurring_EOR_Transaction_Fee_Billings_USD) as Recurring_EOR_Transaction_Fee_Billings_USD,
SUM(Total_Recurring_Fees_USD) as Total_Recurring_Fees_USD,
CASE WHEN SUM(Recurring_EOR_Platform_Fee_Billings_USD) + SUM(Recurring_EOR_Transaction_Fee_Billings_USD) >>0 THEN 1 else 0 end as Active_EOR_Professional
FROM billings
WHERE period_date>>='2020-01-01'
GROUP BY 1,2,3
ORDER BY 1"
dd09c828-f0f0-34be-2a79-f17c6ff43232,DW - SFDC,postgres,"SELECT acc_partn.name AS partner,
account.id AS account_id,
account.name AS account_name,
date_trunc('month', oc.close_date)::date AS close_date,
oc.id AS opp_id,
oc.update_time AS fivetran_synced_opps,
dev_own.name AS partner_dev_owner
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time oc
LEFT JOIN salesforce.v_gp_sfdc_account_current account ON oc.account_id::text = account.id::text
LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON oc.partner2__c::text = acc_partn.id::text
LEFT JOIN salesforce.v_gp_sfdc_user_current dev_own ON oc.partner_development_owner_lookup__c::text = dev_own.id::text
WHERE (oc.type::text <<>> 'Existing Business'::text OR oc.type IS NULL) 
AND (oc.record_type_bi__c IS NULL OR oc.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
AND (oc.partner_acquisition__c IS NULL OR oc.partner_acquisition__c::text <<>> 'Yes'::text)
AND oc.is_won = TRUE AND (oc.pricing_model__c <<>> 'Contractor only' OR oc.pricing_model__c IS NULL)
AND acc_partn.vital_few__c = true
ORDER BY oc.close_date DESC"
dd09c828-f0f0-34be-2a79-f17c6ff43232,DB - GPP,databricks,"SELECT
date_trunc('month', period_date)::date AS period_date,
--gp_customer_internal_id,
partners_referral_name,
gp_customer_accounting_id,
sfdc_account,
SUM(total_eor_recurring_fee_billing_value) AS eor_recurring_fee,
COUNT(DISTINCT(project_id)) as active_professional_eor_count
FROM
(
SELECT CONCAT(RIGHT(b.accounting_period,4),'-',LEFT(b.accounting_period,2),'-01')::date AS period_date,
b.project_id,
b.gp_customer_accounting_id,
--b.gp_customer_internal_id,
c.partners_referral_name,
c.sfdc_account,
-- EOR sum
(
  SUM(
    CASE 
      WHEN b.recurring_category IN (""Recurring Fees and Mark-ups"") 
      AND (service_class = 'EOR' OR service_class = 'EOR (Services)' OR service_class IS NULL OR service_class == 'Grow Global') 
      AND (b.transaction_type= 'INV' OR b.transaction_type= 'DBM')
      THEN b.extended_amount_in_company_base_currency 
      ELSE 0 END)
  -
  sum(
    case 
    WHEN b.recurring_category IN (""Recurring Fees and Mark-ups"") 
    AND (service_class = 'EOR' OR service_class = 'EOR (Services)' OR service_class IS NULL OR service_class == 'Grow Global') 
    AND b.transaction_type= 'CRM' 
    THEN b.extended_amount_in_company_base_currency 
    ELSE 0 END) 
) AS total_eor_recurring_fee_billing_value
FROM gold_kpi.billing_kpi_view b
LEFT JOIN gold_kpi.customer_kpi_view c ON b.gp_customer_internal_id = c.customer_internal_id
GROUP BY 1, 2, 3, 4, 5
) 
WHERE total_eor_recurring_fee_billing_value >> 0
AND partners_referral_name IS NOT NULL
GROUP BY 1, 2, 3, 4
ORDER BY 1, 2"
dd09c828-f0f0-34be-2a79-f17c6ff43232,DB - GPP,postgres,"SELECT a.id AS account_id, a.partner__c AS partner_id, b.name AS partner_name, b.vital_few__c
FROM salesforce.v_gp_sfdc_account_current AS a
LEFT JOIN salesforce.v_gp_sfdc_account_current AS b ON a.partner__c = b.id"
eded2bae-b206-49c0-c0cf-382bc37acfd4,Salesforce Pacific Time,,
eded2bae-b206-49c0-c0cf-382bc37acfd4,Salesforce Pacific Time,postgres,"select distinct 
    created_date as MQL_Created_Date, converted_opportunity_id,
    lead_source
 
from salesforce.v_marketing_dashboard_pacific_time
where Pipeline_stage = 'MQL' 
and converted_opportunity_id is not null"
ef5904b1-0a1c-251c-8f53-78c44fbce048,Custom SQL Query (default),databricks,"--BASE query
select 
row_number() over( partition by table_name_physical,`Column`, dq_id,job_trigger_ts order by job_trigger_ts desc) rn,
upper(substring_index((substring_index(table_name_physical,""."",-1)),""_"",1)) as Domain,
(CASE WHEN `Column` IS NULL THEN 'Recon check between layers' else `Column` END) Rule_Column, 
(CAST((validation_value/total_count)*100 as decimal(5,2))) Fail_Percent, 
* 
from hive_metastore.default.data_quality_check_kpi_results_final
order by job_trigger_ts"
efd1cf83-c8d5-b035-6683-7b53c2c7f914,Custom SQL Query (gpbidb),postgres,"WITH AM AS (select distinct t4.id as client_id, 
					  t4.date_modified,t4.gp_account_manager_id,
					  row_number()over (partition by t4.id,t4.gp_account_manager_id order by T4.date_modified), 
				concat(t9.first_name,' ',t9.last_name) AS Account_Manager
			from goglobal_gp_goglobal.client t4
			left join goglobal_gp_goglobal.v_gp_gg_client_current customer
						on t4.id=customer.id
			left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9  	
				on t9.id = t4.gp_account_manager_id
			where  customer.is_demo_client='false'  
			group by 1,2,3,5)
select c.id as client_id,c.msa_contract_start_date_peo,
COUNT(DISTINCT AM.GP_ACCOUNT_MANAGER_ID) AS AM_COUNT_HISTORIC,
COUNT(distinct AM.GP_ACCOUNT_MANAGER_ID) filter (where (AM.DATE_MODIFIED>> CURRENT_DATE - INTERVAL '6 months')) as AM_count_6_months,
COUNT(distinct AM.GP_ACCOUNT_MANAGER_ID) filter (where (AM.DATE_MODIFIED>> CURRENT_DATE - INTERVAL '12 months')) as AM_count_12_months
FROM goglobal_gp_goglobal.v_gp_gg_client_current C
LEFT JOIN AM ON AM.CLIENT_ID=C.ID
WHERE AM.ROW_NUMBER='1' AND C.IS_DEMO_CLIENT='false' 
GROUP BY 1,2"
efd1cf83-c8d5-b035-6683-7b53c2c7f914,Custom SQL Query (gpbidb),postgres,"WITH HEADCOUNT AS
	(
		select distinct cal_date AS CAL_DATE_1,
				client_id AS C_ID,
				client_name AS CLIENT_N,
				professional_id, 
				hc.active_flag,
				CONCAT(hc.first_name, ' ', hc.last_name) as prof_name,
				country_name
		from goglobal_gp_goglobal.v_tableau_headcount_dashboard as hc
		LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current as client ON client_id = client.id
		where cal_date <<= CURRENT_DATE AND active_flag = 'Active' 
	), 
a as 
	(
		select distinct cal_date  
		from goglobal_gp_goglobal.v_tableau_headcount_dashboard 
		where  cal_date <<= CURRENT_DATE order by 1
	),
B AS
	(
		select a.*,
				T1.ID AS CLIENT_ID, 
				t1.name as Client_NAME, 
				T1.STATUS AS CLIENT_STATUS_1,
				t1.gp_account_manager_id,
				t1.gp_current_sales_rep_id,
				case when  t2.max_date is null then (current_date +interval '1 month')
					else t2.max_date
				end as max_date_1
		from goglobal_gp_goglobal.v_gp_gg_client_current t1
		left join (select distinct t1.id, 
				   			min(payroll_end_date) as max_date
				   from goglobal_gp_goglobal.v_gp_gg_client_current t1
				   left join goglobal_gp_goglobal.v_gp_gg_professional_current t2 on t1.id=t2.client_id
				   where t1.status='2' 
				   group by 1) t2 on t1.id=t2.id,
		a
		where t1.is_demo_client='false' and a.cal_date>>=date_trunc('month',least(msa_contract_start_date_peo,msa_contract_start_date_services, msa_contract_start_date_sourcing,msa_contract_start_date_aso)) 
	),
c as
	(
		select *
		from b 
		where b.cal_date<<=date_trunc('month',max_date_1)
	),
sfdc as
	(
		SELECT t1.id AS customer_id, 
		         t1.name AS customer_name, 
                 t1.salesforce_account_id AS id_match
		FROM goglobal_gp_goglobal.v_gp_gg_client_current AS t1
		WHERE t1.is_demo_client = 'False'
	),
sfdc_health as
	(
		select sfdc.*, 
				t2.id as sfdc_id,
				t2.client_health__c,
				t2.customer_health_notes__c, 
				T3.COMPLEXITY__C,
				t2.customer_advocate_source_c,
				t2.all_time_nps_c,
				t2.company_size_c,
				t2.review_link_c,
                                t3.expansion_tier_level__c
		from sfdc
		left join salesforce.v_gp_sfdc_account_current_pacific_time t2 on sfdc.id_match=t2.id
		left join salesforce.v_gp_sfdc_account_current t3 on sfdc.id_match=t3.id
		
	)
SELECT c.*,
		HEADCOUNT.*, 
		CONCAT(gpperson.first_name, ' ', gpperson.last_name) AS Account_manager,
		concat(Z.first_name,' ',Z.last_name) AS aCCOUNT_EXECUTIVE,
		gpuser.email, 
		sfdc_health.sfdc_id,
		sfdc_health.client_health__c,
		sfdc_health.customer_health_notes__c,
		sfdc_health.COMPLEXITY__C,
		sfdc_health.customer_advocate_source_c,
		sfdc_health.all_time_nps_c,
		sfdc_health.company_size_c,
		sfdc_health.review_link_c,
                 sfdc_health.expansion_tier_level__c,
		adp.""Job Title Description"", 
		adp.""Hire Date"", 
		adp.""Reports To Name"", 
		adp.""Worked In Country"",
		adp.""Status"",
		case when cal_date=date_trunc('month',current_date) then 'Yes'
			else 'No' 
		end as current_date_
FROM c 
LEFT JOIN HEADCOUNT ON c.CLIENT_ID=HEADCOUNT.C_ID AND c.CAL_DATE=HEADCOUNT.CAL_DATE_1
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current as gpperson ON c.gp_account_manager_id=gpperson.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_user_current as gpuser ON gpperson.user_id = gpuser.id	
left join goglobal_gp_goglobaL.v_gp_gg_gp_person_current Z  on z.id = c.gp_current_sales_rep_id 
left join sfdc_health on sfdc_health.customer_id=c.client_id
LEFT JOIN workday_hris.v_non_sensitive_workday_data as adp ON LOWER(gpuser.email) = LOWER(adp.""Work Contact: Work Email"")"
efd1cf83-c8d5-b035-6683-7b53c2c7f914,Custom SQL Query (gpbidb),postgres,"SELECT DISTINCT cl.id,
			cl.external_id ""GP Customer ID"",
			cl.accounting_id ""Acumatica ID"",
			cl.name,
			cl.status,
			Case When cl.pricing_model = 0 then 'Enterprise' 
					When cl.pricing_model = 1 then 'Standard'
					Else 'Verify Pricing Model' 
			end ""Pricing Model"",
			least(cl.msa_contract_start_date_peo,cl.msa_contract_start_date_services, cl.msa_contract_start_date_sourcing,cl.msa_contract_start_date_aso)::DATE ""Contract Signature Date"",
			ind.name ""Industry"",
			prt.name ""Partner Referral"",
			case when prl.max_payroll_end_date is not null then prl.max_payroll_end_date
					else current_date
			end as max_payroll_end,
			count(distinct co.id) filter (where cl.status='1') as active_countries,
			COUNT(distinct pro.id) filter (where pro.status IN ('1') and pro.is_failed_to_launch='false' 
								   and (pro.service_class is NULL OR pro.service_class <<>> '4')) as NEW_STATUS,
			COUNT(distinct pro.id) filter (where pro.status IN ('2') and pro.is_failed_to_launch='false'
								  and (pro.service_class is NULL OR pro.service_class <<>> '4')) as Onb_STATUS,
			COUNT(distinct pro.id) filter (where pro.status IN ('3') and pro.is_failed_to_launch='false'
								  and (pro.service_class is NULL OR pro.service_class <<>> '4')) as ACTIVE_STATUS,
			COUNT(distinct pro.id) filter (where pro.status IN ('4') and pro.is_failed_to_launch='false'
								  and (pro.service_class is NULL OR pro.service_class <<>> '4')) as TERM_STATUS,
			COUNT(distinct pro.id) filter (where pro.status IN ('5') and pro.is_failed_to_launch='false'
								  and (pro.service_class is NULL OR pro.service_class <<>> '4')) as INACT_STATUS,
			COUNT(distinct pro.id) filter (where pro.is_failed_to_launch='true') as FTL,
			COUNT(distinct pro.id) filter (where pro.service_class in('1','2') and pro.is_failed_to_launch='false') as ""PEO/ASO pros"",
			COUNT(distinct pro.id) filter (where pro.service_class='3' and pro.is_failed_to_launch='false') as ""Services Pros"",
			COUNT(distinct pro.id) filter (where pro.service_class='4' and pro.is_failed_to_launch='false') as ""Contractor Pros""
FROM goglobal_gp_goglobal.v_gp_gg_client_current as cl
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_professional_current pro ON  cl.id = pro.client_id 
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_client_country_current ccc ON  pro.client_country_id = ccc.id 
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_country_current co ON  ccc.country_id = co.id 
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_industry_current ind on cl.industry_id=ind.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current prt ON prt.id=cl.PARTNERS_REFERRAL_ID
left join (select client_id,
		  		  max(payroll_end_date) as max_payroll_end_date
		   from goglobal_gp_goglobal.v_gp_gg_professional_current
		   where is_failed_to_launch='false'
		   group by 1 
		  ) prl on cl.id=prl.client_id
WHERE cl.is_demo_client = false  
Group by 1,2,3,4,5,6,7,8,9,10"
efd1cf83-c8d5-b035-6683-7b53c2c7f914,Custom SQL Query (gpbidb),postgres,"with conversion as (
					select co.currency_code, 
						   co.currency_name,
						   co.name,
						   fxr.currency_id,
						   fxr.target_currency_id,
						   co2.name as target_currency, 
						   DATE(date_trunc('month',fxr.date)) AS year_month, 
						   AVG(fxr.rate) as avg_monthly_rate
					from goglobal_gp_goglobal.v_gp_gg_fxrate_current fxr
					left join goglobal_gp_goglobal.v_gp_gg_country_current co on fxr.currency_id=co.id
					left join goglobal_gp_goglobal.v_gp_gg_country_current co2 on fxr.target_currency_id=co2.id
					where target_currency_id='247' 
					GROUP BY 1,2,3,4,5,6,7
					)

SELECT DISTINCT BILLS.START_DATE,
		bills.CLIENT_ID,
		BILLS.CLIENT,
		case when bills.billing_currency='United States Dollar' then SUM(bills.billing_amount)
				else (SUM(bills.billing_amount) * conversion.avg_monthly_rate) 
		end as management_fee
FROM goglobal_gp_goglobal.v_gp_gg_total_bills_mat bills
left join conversion on conversion.year_month=bills.start_date and conversion.currency_name=bills.billing_currency
WHERE type  = 'Management Fee' and document_type='1' and bills.billing_amount>>0 and start_date>>='01-01-2020'
group by BILLS.START_DATE, bills.CLIENT_ID, BILLS.CLIENT, bills.billing_currency, conversion.avg_monthly_rate
ORDER BY 2,1"
efd1cf83-c8d5-b035-6683-7b53c2c7f914,Custom SQL Query (gpbidb),postgres,"select cl.id as client_id,
		c3.name as billing_country
from goglobal_gp_goglobal.v_gp_gg_client_current cl
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current addr ON cl.billing_address_id = addr.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current_mat c3 ON addr.country_id = c3.id"
efd1cf83-c8d5-b035-6683-7b53c2c7f914,Custom SQL Query (gpbidb),postgres,"with conversion as (
					select DISTINCT co.currency_code, 
						   co.currency_name,
						   fxr.currency_id,
						   fxr.target_currency_id,
						   co2.name as target_currency,
						   first_value(fxr.date) OVER (PARTITION BY fxr.currency_id ORDER BY fxr.date DESC) as max_conv_rate_date,
						   first_value(fxr.Rate) OVER (PARTITION BY fxr.currency_id ORDER BY fxr.date DESC) as conv_rate 
					from goglobal_gp_goglobal.v_gp_gg_fxrate_current fxr
					left join goglobal_gp_goglobal.v_gp_gg_country_current co on fxr.currency_id=co.id
					left join goglobal_gp_goglobal.v_gp_gg_country_current co2 on fxr.target_currency_id=co2.id
					where target_currency_id='247' 
					group by 1,2,3,4,5,fxr.RATE,fxr.DATE
					ORDER BY 1,6 desc
				)
select pro.id as professional_id,
		(pro.annual_base_salary*conversion.conv_rate) AS annual_salary_usd
from goglobal_gp_goglobal.v_gp_gg_professional_current pro
left join conversion on pro.annual_base_salary_currency=conversion.currency_id
where pro.is_failed_to_launch='false'"
f21c6635-a88f-6846-2fc0-93cdcf67afe2,GPP,postgres,"SELECT inf.country_name,
       inf.gp_id AS country_id,
	   unnest(array['2000','2001','2002','2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022']) as date_year,
	   unnest(array[inf.""2000"",inf.""2001"",inf.""2002"",inf.""2003"", inf.""2004"", inf.""2005"", inf.""2006"", inf.""2007"", inf.""2008"", inf.""2009"", inf.""2010"", inf.""2011"", inf.""2012"", inf.""2013"", inf.""2014"", inf.""2015"", inf.""2016"", inf.""2017"", inf.""2018"", inf.""2019"", inf.""2020"", inf.""2021"", inf.""2022""]) as inflation
	   
FROM repo.core_inflation_oecd AS inf"
f21c6635-a88f-6846-2fc0-93cdcf67afe2,GPP,,
f21c6635-a88f-6846-2fc0-93cdcf67afe2,GPP,postgres,"SELECT 
       client.id AS customer_id,
       client.name AS customer_name,
       client_country.name AS customer_billing_country,
       CASE WHEN client_country.gp_region = '1' THEN 'EMEA'
            WHEN client_country.gp_region = '2' THEN 'APAC'
	    WHEN client_country.gp_region = '3' THEN 'NA'
	    WHEN client_country.gp_region = '4' THEN 'LATAM'
		    END AS customer_billing_region,
       industry.name AS industry_name,
       prof.id AS professional_id,
       CONCAT(prof.first_name, ' ', prof.last_name) AS prof_name,
       prof_country.name AS prof_country,
       CASE WHEN prof_country.gp_region = '1' THEN 'EMEA'
            WHEN prof_country.gp_region = '2' THEN 'APAC'
            WHEN prof_country.gp_region = '3' THEN 'NA'
            WHEN prof_country.gp_region = '4' THEN 'LATAM'
		    END AS prof_region
	
	   
FROM goglobal_gp_goglobal.v_gp_gg_client_current            AS client
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_current AS prof           ON client.id = prof.client_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_industry_current     AS industry       ON client.industry_id = industry.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current      AS client_address ON client.billing_address_id = client_address.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current      AS client_country ON client_address.country_id = client_country.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current  AS prof_lsp       ON prof.lsp_country_id = prof_lsp.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current      AS prof_country   ON prof_lsp.country_id = prof_country.id



WHERE client.is_demo_client = FALSE
AND prof.is_failed_to_launch = FALSE  
AND (prof.service_class <<>> '4' OR prof.service_class IS NULL) -- This excludes contractors

ORDER BY  client.id, prof.id"
f21c6635-a88f-6846-2fc0-93cdcf67afe2,GPP,postgres,"SELECT ab.country_name,
       ab.gp_id AS country_id,
	   unnest(array['2000','2001','2002','2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022']) as date,
	   unnest(array[ab.""2000"",ab.""2001"",ab.""2002"",ab.""2003"", ab.""2004"", ab.""2005"", ab.""2006"", ab.""2007"", ab.""2008"", ab.""2009"", ab.""2010"", ab.""2011"", ab.""2012"", ab.""2013"", ab.""2014"", ab.""2015"", ab.""2016"", ab.""2017"", ab.""2018"", ab.""2019"", ab.""2020"", ab.""2021"", ab.""2022""]) as account_balance
	   
FROM repo.current_account_balance AS ab"
f21c6635-a88f-6846-2fc0-93cdcf67afe2,GPP,postgres,"SELECT 
    cal_date, 
    client_id,
    professional_id, 
    new_flag,
    active_flag, 
    termination_flag,
    country_name
		
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
WHERE (service_class <<>> '4' OR service_class IS NULL)
ORDER BY  client_id, professional_id, cal_date"
f21c6635-a88f-6846-2fc0-93cdcf67afe2,GPP,postgres,"SELECT 
                country.id AS country_id,
		country.country_code,
		country.name AS country_name
FROM goglobal_gp_goglobal.v_gp_gg_country_current AS country
WHERE country.is_currency_only = FALSE
ORDER BY country.id"
f21c6635-a88f-6846-2fc0-93cdcf67afe2,GPP,postgres,"SELECT hci.country_name, 
       hci.gp_id AS country_id,
	   unnest(array['2010','2017','2018','2020']) as date,
	   unnest(array[hci.""2010"",hci.""2017"",hci.""2018"",hci.""2020""]) as human_capital_index
	
FROM repo.human_capital_index hci"
f28e6e2d-50b3-ec99-be1b-c4a418623412,Custom SQL Query (gpbidb) (2),postgres,"WITH sfdc as (SELECT DISTINCT 
				*
			  FROM 
			  	salesforce.v_gp_sfdc_marketing_dashboard AS sfdc		
			  WHERE 
				sfdc.cohort_stage='SAL to MSA'
				AND (sfdc.partner_acq_opps IS NULL OR sfdc.partner_acq_opps <<>> 'Yes')
				AND (sfdc.record_type_bi__c IS NULL OR sfdc.record_type_bi__c <<>> 'Potential Partner Opportunity')),
sbqq_1 as (SELECT DISTINCT 
           		sbqq_1.id as quote_id,
				sbqq_1.created_date as created_date_quote,
				sbqq_1.name as quote_name,
				sbqq_1.owner_id as owner_id_quote,
				sbqq_1.last_modified_date as last_modified_date_quote,
		        sbqq_1.sbqq_status_c,
		        sbqq_1.sbqq_billing_name_c,
			    sbqq_1.sbqq_opportunity_2_c,
				sbqq_1.approval_status_c,
		        sbqq_1.approval_indicator_c,
				sbqq_1.last_modified_by_id,
				sbqq_1.sbqq_account_c,
				sbqq_1.sbqq_days_quote_open_c,
				sbqq_1.sbqq_primary_c,
				sbqq_1.number_of_professionals_on_quote_c,
				sbqq_1.pricing_model_c,
                sbqq_1.sbqq_net_amount_c as net_amount_total,
                sbqq_1.pre_approved_minimum_fee_c,
				sbqq_1.currency_symbol_alike_quote_line_c,
				sbqq_1.is_gp_recruit_customer_c,
				sbqq_1.is_gp_contractor_customer_c,
				sbqq_1.complete_price_book_name_c,
				sbqq_1.estimated_monthly_cost_c,
			   	sbqq_1.currency_iso_code,
				sbqq_1.test_group_c
			FROM 
		   	  salesforce.sbqq_quote_c as sbqq_1
			WHERE 
		   		sbqq_1.is_deleted='FALSE'),
first_table as ( SELECT DISTINCT 
					sfdc.*, 
					sbqq_1.quote_id,
					sbqq_1.created_date_quote,
					sbqq_1.quote_name,
					sbqq_1.owner_id_quote,
					sbqq_1.last_modified_date_quote,
					sbqq_1.sbqq_status_c,
					sbqq_1.sbqq_billing_name_c,
					sbqq_1.approval_status_c,
		        	sbqq_1.approval_indicator_c,
					sbqq_1.last_modified_by_id,
					sbqq_1.sbqq_account_c,
					sbqq_1.sbqq_days_quote_open_c,
					sbqq_1.sbqq_primary_c,
					sbqq_1.number_of_professionals_on_quote_c,
					sbqq_1.pricing_model_c,
                    sbqq_1.net_amount_total,
                    sbqq_1.pre_approved_minimum_fee_c,
					sbqq_1.currency_symbol_alike_quote_line_c,
					sbqq_1.is_gp_recruit_customer_c,
					sbqq_1.is_gp_contractor_customer_c,
					sbqq_1.complete_price_book_name_c,
					sbqq_1.estimated_monthly_cost_c,
					sbqq_1.test_group_c,
					rate.conversion_rate,
					users.name as last_modified_name	
				FROM sfdc
				LEFT JOIN sbqq_1
				ON sfdc.lead_or_opp_id=sbqq_1.sbqq_opportunity_2_c
				LEFT JOIN salesforce.currency_type as rate
				ON sbqq_1.currency_iso_code=rate.iso_code
				LEFT JOIN salesforce.v_gp_sfdc_user_current as users
				ON sbqq_1.last_modified_by_id=users.id),
sbqq_2 as ( SELECT DISTINCT
		        sbqq_2.id AS quote_line_id, 
				sbqq_2.name AS quote_line_name, 
				sbqq_2.is_deleted,
				sbqq_2.currency_iso_code, 
				sbqq_2.created_date as created_date_line, 
				sbqq_2.last_modified_date, 
				sbqq_2.sbqq_quote_c, 
				sbqq_2.sbqq_additional_discount_c , 
				sbqq_2.sbqq_component_list_total_c , 
				sbqq_2.sbqq_component_total_c , 
				sbqq_2.sbqq_customer_price_c , 
				sbqq_2.sbqq_customer_total_c , 
				sbqq_2.sbqq_list_price_c , 
				sbqq_2.sbqq_list_total_c , 
				sbqq_2.sbqq_net_price_c , 
				sbqq_2.sbqq_net_total_c , 
				sbqq_2.sbqq_number_c , 
				sbqq_2.sbqq_original_price_c , 
				sbqq_2.sbqq_package_list_total_c , 
				sbqq_2.sbqq_package_total_c , 
				sbqq_2.sbqq_partner_price_c , 
				sbqq_2.sbqq_partner_total_c , 
				sbqq_2.sbqq_product_code_c , 
				sbqq_2.sbqq_product_name_c , 
				sbqq_2.sbqq_prorated_list_price_c , 
				sbqq_2.sbqq_prorated_price_c , 
				sbqq_2.sbqq_regular_price_c , 
				sbqq_2.sbqq_regular_total_c , 
				sbqq_2.sbqq_special_price_c , 
				sbqq_2.sbqq_total_discount_amount_c , 
				sbqq_2.sbqq_total_discount_rate_c , 
				sbqq_2.accruing_statutory_severance_c , 
				sbqq_2.additional_month_payment_c , 
				sbqq_2.x_13_th_month_payment_notes_c , 
				sbqq_2.estimated_social_charges_c , 
				sbqq_2.markup_on_expenses_c , 
				sbqq_2.monthly_service_fee_c , 
				sbqq_2.setup_fee_professional_c , 
				sbqq_2.vat_gst_c , 
				sbqq_2.base_c , 
				sbqq_2.variable_c , 
				sbqq_2.monthly_service_fee_calculated_c , 
				sbqq_2.setup_fee_per_additional_professional_c , 
				sbqq_2.minimum_monthly_service_fee_c , 
				sbqq_2.salary_bonus_c , 
				sbqq_2.minimum_monthly_service_fee_calculated_c , 
				sbqq_2.setup_total_all_hc_c , 
				sbqq_2.addendum_monthly_service_fee_original_c , 
				sbqq_2.estimated_employer_social_charges_on_bas_c , 
				sbqq_2.gp_fee_base_per_hc_c , 
				sbqq_2.estimated_employer_social_charges_on_var_c , 
				sbqq_2.gp_fee_variable_per_hc_c , 
				sbqq_2.fee_structure_c , 
				sbqq_2.monthly_fee_total_c , 
				sbqq_2.country_product_c , 
				sbqq_2.total_social_charges_hc_c , 
				sbqq_2.footnote_c , 
				sbqq_2.markup_on_expenses_notes_c , 
				sbqq_2.monthly_fee_variable_c , 
				sbqq_2.vat_per_hc_c , 
				sbqq_2.currency_transaction_and_wiring_c , 
				sbqq_2.total_monthly_cost_c , 
				sbqq_2.monthly_cost_of_doing_all_hc_c , 
				sbqq_2.product_name_text_c , 
				sbqq_2.monthly_currency_fee_c , 
				sbqq_2.currency_symbol_c , 
				sbqq_2.unique_identifier_c , 
				sbqq_2.x_13_th_14_th_month_addendum_notes_c , 
				sbqq_2.severance_addendum_notes_c , 
				sbqq_2.setup_fee_addendum_notes_c , 
				sbqq_2.vacation_pay_c , 
				sbqq_2.estimated_provident_fund_contribution_c , 
				sbqq_2.statutory_vacation_allowance_c , 
				sbqq_2.mandatory_pension_contribution_c , 
				sbqq_2.disability_insurance_per_professional_c , 
				sbqq_2.statutory_vacation_pay_bonus_c , 
				sbqq_2.statutory_unemployment_fund_cts_c , 
				sbqq_2.social_charges_addendum_notes_c , 
				sbqq_2.mandatory_financial_reserve_accrual_c , 
				sbqq_2.statutory_vacation_bonus_c , 
				sbqq_2.statutory_transient_bonus_c , 
				sbqq_2.monthly_service_fee_total_disc_c , 
				sbqq_2.monthly_service_fee_final_c , 
				sbqq_2.min_service_fee_total_disc_c , 
				sbqq_2.min_monthly_service_fee_final_c , 
				sbqq_2.total_discount_amount_c , 
				sbqq_2.statutory_vacation_pay_c , 
				sbqq_2.mandatory_medical_insurance_c , 
				sbqq_2.proposal_footnotes_c , 
				sbqq_2.base_monthly_c , 
				sbqq_2.variable_monthly_c , 
				sbqq_2.currency_transaction_and_wiring_monthly_c , 
				sbqq_2.mandatory_free_trade_zone_office_space_c , 
				sbqq_2.discount_tiers_applied_c , 
				sbqq_2.refundable_deposit_in_months_c , 
				sbqq_2.invoices_withdrawal_type_c , 
				sbqq_2.markup_on_expenses_amount_c , 
				sbqq_2.discount_tier_text_c , 
				sbqq_2.monthly_service_fee_discount_c , 
				sbqq_2.min_monthly_service_fee_discount_c , 
				sbqq_2.total_rep_s_discount_c , 
				sbqq_2.se_allowable_discount_c , 
				sbqq_2.rsd_discount_c , 
				sbqq_2.vp_discount_c , 
				sbqq_2.c_level_discount_c , 
				sbqq_2.need_rsd_approval_c , 
				sbqq_2.need_vp_approval_c , 
				sbqq_2.need_c_level_approval_c , 
				sbqq_2.estimated_social_charges_override_c , 
				sbqq_2.addendum_template_id_c , 
				sbqq_2.country_product_name_text_c , 
				sbqq_2.visa_fee_per_prof_including_g_l_fees_c , 
				sbqq_2.visa_fee_ren_per_prof_incl_g_l_fees_c , 
				sbqq_2.visa_renwl_fee_for_spouse_dependents_c , 
				sbqq_2.visa_fee_for_spouse_dependents_c , 
				sbqq_2.employment_pass_if_applicable_c , 
				sbqq_2.employment_pass_per_dependent_c , 
				sbqq_2.renewal_every_2_years_c , 
				sbqq_2.renewal_every_2_years_per_dependent_c , 
				sbqq_2.stat_employer_healthcare_contrib_c , 
				sbqq_2.foreign_worker_epi_c , 
				sbqq_2.issuance_of_req_letters_and_or_noc_s_c , 
				sbqq_2.if_required_arabic_translation_e_m_bc_c , 
				sbqq_2.x_1_time_3_rd_party_fees_for_pension_plan_c , 
				sbqq_2.statutory_pre_employment_medical_check_c , 
				sbqq_2.estimated_social_charges_ref_c , 
				sbqq_2.proposal_accrued_statory_severance_c , 
				sbqq_2.proposal_estimated_social_charges_c , 
				sbqq_2.proposal_indirect_tax_c , 
				sbqq_2.proposal_estimated_social_charges_in_c , 
				sbqq_2.monthly_service_fee_original_c , 
				sbqq_2.addendum_monthly_service_fee_c , 
				sbqq_2.addendum_estimated_social_charges_c , 
				sbqq_2.addendum_accrued_severance_c , 
				sbqq_2.addendum_markup_on_expenses_c , 
				sbqq_2.addendum_monthly_currency_transaction_c , 
				sbqq_2.addendum_indirect_tax_c , 
				sbqq_2.addendum_vacation_allowance_c , 
				sbqq_2.addendum_vacation_pay_c , 
				sbqq_2.addendum_financial_reserve_c , 
				sbqq_2.addendum_provident_fund_c , 
				sbqq_2.discounted_to_netprice_c , 
				sbqq_2.ann_tax_filling_fee_list_price_child_c , 
				sbqq_2.ann_tax_filling_fee_net_price_child_c , 
				sbqq_2.wiring_fee_list_price_child_c , 
				sbqq_2.wiring_fee_net_price_child_c , 
				sbqq_2.tran_admin_fee_list_price_child_c , 
				sbqq_2.tran_admin_fee_net_price_child_c , 
				sbqq_2.travel_fee_list_price_child_c , 
				sbqq_2.travel_fee_net_price_child_c , 
				sbqq_2.addendum_monthly_service_fee_initial_c , 
				sbqq_2.discounted_to_monthly_service_fee_c , 
				sbqq_2.discounted_to_minimum_monthly_service_c , 
				sbqq_2.discounted_to_social_charges_c , 
				sbqq_2.discounted_to_annual_tx_c , 
				sbqq_2.discounted_to_wiring_fee_c , 
				sbqq_2.discounted_to_one_time_trans_c , 
				sbqq_2.discounted_to_travel_insurance_c , 
				sbqq_2.switzerlandtext_1_c , 
				sbqq_2.switzerlandtext_2_c , 
				sbqq_2.monthly_fee_variable_original_c , 
				sbqq_2.addendum_net_price_c , 
				sbqq_2.monthly_service_overriding_disc_c , 
				sbqq_2.additional_month_payment_proposal_c , 
				sbqq_2.set_up_fee_currency_symbol_c , 
				sbqq_2.min_month_ser_fee_currency_symbol_c , 
				sbqq_2.annual_tax_currency_symbol_c , 
				sbqq_2.wiring_fee_currency_symbol_c , 
				sbqq_2.trans_fee_currency_symbol_c , 
				sbqq_2.travel_fee_currency_symbol_c , 
				sbqq_2.addendum_min_monthly_service_fee_c , 
				sbqq_2.addendum_annual_tax_fee_c , 
				sbqq_2.addendum_trans_fee_c , 
				sbqq_2.addendum_wiring_fee_c , 
				sbqq_2.addendum_travel_fee_c , 
				sbqq_2.markup_currency_symbol_c , 
				sbqq_2.monthly_service_fee_tier_notes_c , 
				sbqq_2.minimum_monthly_service_fee_tier_notes_c , 
				sbqq_2.monthly_service_fee_tier_c , 
				sbqq_2.minimum_monthly_service_fee_tier_c , 
				sbqq_2.additional_professional_checkbox_c , 
				sbqq_2.setup_fee_additional_professional_label_c , 
				sbqq_2.setup_fee_additional_professional_value_c , 
				sbqq_2.monthly_variable_overriding_disc_c , 
				sbqq_2.addendum_monthly_fee_variable_c , 
				sbqq_2.discounted_to_monthly_serv_fee_variable_c , 
				sbqq_2.additional_professional_currency_symbol_c , 
				sbqq_2.price_info_populated_c , 
				sbqq_2.country_number_c , 
				sbqq_2.proposal_total_monthly_cost_c , 
				sbqq_2.monthly_fee_variable_discount_c , 
				sbqq_2.monthly_fee_variable_final_c , 
				sbqq_2.estimated_social_charges_from_pbe_c , 
				sbqq_2.min_monthly_service_fee_original_c , 
				sbqq_2.monthly_service_variable_actual_disc_c , 
				sbqq_2.min_monthly_service_overriding_disc_c , 
				sbqq_2.original_monthly_total_fee_c , 
				sbqq_2.addendum_monthly_service_fee_variable_og_c , 
				sbqq_2.monthly_total_fee_discount_c , 
				sbqq_2.primary_product_c , 
				sbqq_2.ann_13_14_th_month_billed_amount_all_hc_c , 
				sbqq_2.ann_tax_trav_ins_all_hc_c , 
				sbqq_2.year_1_cost_c , 
				sbqq_2.subsequent_years_total_c , 
				sbqq_2.accruing_statutory_severance_currency_c , 
				sbqq_2.monthly_sum_of_salary_c , 
				sbqq_2.uae_office_space_fee_c , 
				sbqq_2.usa_state_c , 
				sbqq_2.usa_state_attrib_c , 
				sbqq_2.estimated_social_charges_from_pbe_value_c , 
				sbqq_2.x_14_th_month_note_c , 
				sbqq_2.custom_product_name_c , 
				sbqq_2.visa_cost_new_hire_1_year_lp_c , 
				sbqq_2.visa_cost_dependent_renewal_lp_c , 
				sbqq_2.visa_cost_other_resident_renewal_lp_c , 
				sbqq_2.visa_cost_new_hire_and_renewal_c , 
				sbqq_2.visa_cost_other_eu_eea_swiss_lp_c , 
				sbqq_2.visa_cost_new_hire_lp_c , 
				sbqq_2.visa_cost_renewal_lp_c , 
				sbqq_2.visa_cost_new_hire_2_year_lp_c , 
				sbqq_2.visa_cost_dependent_lp_c , 
				sbqq_2.visa_cost_other_eu_eea_swiss_natio_lp_c , 
				sbqq_2.adjusted_discount_c , 
				sbqq_2.visa_product_name_c , 
				sbqq_2.product_pricing_model_c , 
				sbqq_2.discount_beyond_preapproved_mgmt_fee_c , 
				sbqq_2.discount_beyond_preapproved_one_time_fee_c , 
				sbqq_2.pre_approved_management_fee_percentage_c , 
				sbqq_2.discount_beyond_preapproved_minimum_fee_c , 
				sbqq_2.country_product_iso_c
FROM salesforce.sbqq_quote_line_c AS sbqq_2
WHERE sbqq_2.is_deleted='FALSE')
SELECT DISTINCT 
first_table.*,
sbqq_2.*
FROM first_table
LEFT JOIN sbqq_2
ON first_table.quote_id=sbqq_2.sbqq_quote_c"
f28e6e2d-50b3-ec99-be1b-c4a418623412,Custom SQL Query (gpbidb) (2),postgres,"WITH platform_match AS(
SELECT      sfdc.id AS sfdc_account_id,
            mdm_match.source_id AS mdm_match,
			gpp.id AS integration_match,
			CASE WHEN gpp.id::VARCHAR IS NOT NULL THEN gpp.id::VARCHAR
            ELSE mdm_match.source_id END AS id_match

FROM salesforce.v_gp_sfdc_account_current AS sfdc
LEFT JOIN repo.v_gp_mdm_customer AS mdm ON sfdc.id = mdm.source_id
LEFT JOIN (SELECT *
    FROM repo.v_gp_mdm_customer
    WHERE source = 'GoGlobal Client'
    ) AS mdm_match
    ON mdm.parent_name = mdm_match.parent_name	
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS gpp
			  ON sfdc.id = gpp.salesforce_account_id)

SELECT platform_match.*,gpp.id as gpp_id,gpp.name, gpp.accounting_id AS accumatica_id
FROM platform_match
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS gpp ON platform_match.id_match = gpp.id::VARCHAR"
f2a4114c-52d6-01ca-17c0-13f51547f519,Global Ops Hires Report,postgres,"SELECT DISTINCT a.id,b.name,b.department_name,b.office_name,
c.resolved_at,c.created_at,c.starts_at,
d.custom_sub_department,d.custom_hiring_manager
FROM ""greenhouse"".""v_gp_greenhouse_applications_current"" as a
LEFT JOIN ""greenhouse"".""v_gp_greenhouse_jobs_all_current"" as b
ON (a.job_id=b.id)
LEFT JOIN ""greenhouse"".""v_gp_greenhouse_offers_current"" as c
ON (a.id=c.application_id)
LEFT JOIN greenhouse.job as d
ON b.requisition_id=d.requisition_id
WHERE a.status='hired' AND c.starts_at>>='2022/01/01' AND b.department_name IN ('Global Operations','Global Ops') AND
a.name NOT IN ('Internal Applicant')"
f2a4114c-52d6-01ca-17c0-13f51547f519,Global Ops Hires Report,postgres,"SELECT DISTINCT
  a.""application_id"",
  a.""first_name"" AS ""first_name"",
  a.""id"" AS ""candidate id"",
  a.""last_name"" AS ""last_name""
FROM greenhouse.v_gp_greenhouse_candidate_current as a
LEFT JOIN greenhouse.v_gp_greenhouse_applications_current as b
ON  (a.""application_id""=b.id)
LEFT JOIN ""greenhouse"".""v_gp_greenhouse_jobs_all_current"" as c
ON (b.job_id=c.id)
WHERE b.status='hired' AND c.department_name IN ('Global Operations','Global Ops')"
f2d5262d-9db6-a0be-dd60-7d9465bb725b,EOR Customer and Professional,,
f4f442af-3b7b-964d-13be-1334c5bd719a,Custom SQL Query (gpbidb),postgres,"-- SALESFORCE

WITH SALESFORCE AS ( SELECT sf.*
 FROM salesforce.v_gp_sfdc_marketing_dashboard AS sf
 WHERE sf.point_time_date >>= '2020-01-01'
 AND sf.point_time_date <<= CURRENT_DATE),
		      

GPP AS (
SELECT DISTINCT 
	    a.salesforce_account_id,
	      a.id,
	      a.name,
          a.pricing_model,
	     CASE WHEN a.msa_contract_start_date_peo IS NOT NULL THEN a.msa_contract_start_date_peo
	    WHEN a.msa_contract_start_date_peo IS NULL AND a.msa_contract_start_date_services IS NOT NULL THEN a.msa_contract_start_date_services
	    WHEN a.msa_contract_start_date_services IS NULL AND a.msa_contract_start_date_sourcing IS NOT NULL THEN a.msa_contract_start_date_sourcing
	    WHEN a.msa_contract_start_date_sourcing IS NULL AND a.msa_contract_start_date_aso IS NOT NULL THEN a.msa_contract_start_date_aso
	  ELSE a.msa_contract_start_date_peo END AS ma_start_date,
	      b.pop_current, 
	      c.pop_to_date,
	      d.min_pay_start,
	      d.max_pay_start,
	      d.min_pay_end,
	      d.max_pay_end
	       
	FROM (SELECT a.id, a.salesforce_account_id,a.pricing_model,a.name,a.msa_contract_start_date_services,a.msa_contract_start_date_peo, a.msa_contract_start_date_aso,a.msa_contract_start_date_sourcing
		 FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
		 WHERE a.is_demo_client = false) AS a
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_current
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC ('month', cal_date)= DATE_TRUNC ('month', CURRENT_DATE)
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS b
	ON a.id = b.client_id
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_to_date
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC('month',payroll_start_date) <<= DATE_TRUNC ('month', CURRENT_DATE)
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS c
	ON a.id = c.client_id
	
	LEFT JOIN (SELECT client_id, MAX(payroll_start_date)AS max_pay_start, MAX (payroll_end_date)AS max_pay_end,
				  MIN(payroll_end_date)AS min_pay_end, MIN(payroll_start_date) AS min_pay_start
				 FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			   WHERE (product_type_id <<>> '4' OR product_type_id IS NULL)
				 GROUP BY 1) d
	ON a.id = d.client_id
	
	
),

FINAL AS(SELECT 
		 SALESFORCE.*,
         GPP.*,
	
	   
	   	CASE 
		   
			 WHEN GPP.id IS NOT NULL AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) <<= 90
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.min_pay_start IS NULL
			 THEN 'Newly Signed'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND date_trunc('month', GPP.min_pay_start) >>= date_trunc('month',CURRENT_DATE) THEN 'Onboarding' 
			  
		   WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current >>0  THEN 'Currently Active'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current IS NULL
			 AND (GPP.max_pay_end << CURRENT_DATE OR (date_trunc('month', GPP.max_pay_start) >>= date_trunc('month',CURRENT_DATE) AND GPP.max_pay_end >> CURRENT_DATE))
			 THEN 'Currently Inactive'
			 
			 
			 WHEN (GPP.id IS NOT NULL 
			 AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) >>90
			 AND GPP.pop_to_date IS NULL)
		   OR (GPP.id IS NOT NULL AND GPP.ma_start_date IS NULL AND SALESFORCE.msa_date IS NULL )
       THEN 'Never Active' 
		 
		   WHEN (GPP. id IS NULL
				 AND SALESFORCE.cohort_stage = 'SAL to MSA'
         AND SALESFORCE.opp_type = 'New Business'
         AND SALESFORCE.stage_name = 'Closed Won')
				 THEN 'Unknown'
	 END AS gpp_account_status
			 
			
FROM SALESFORCE
LEFT JOIN GPP
ON SALESFORCE.account_id = GPP.salesforce_account_id
AND SALESFORCE.cohort_stage = 'SAL to MSA'
AND SALESFORCE.opp_type = 'New Business'
AND SALESFORCE.stage_name = 'Closed Won'
		 )

SELECT *
FROM FINAL"
f59dcbb8-2037-78d1-ab63-d69b607c3dbe,gp_tableau_ltv_monthly_client_only (ltv.gp_tableau_ltv_monthly_client_only) (gpbidb),,
f59dcbb8-2037-78d1-ab63-d69b607c3dbe,v_tableau_pvm_historical_wip (goglobal_goglobal.v_tableau_pvm_historical_wip) (gpbidb),,
f59dcbb8-2037-78d1-ab63-d69b607c3dbe,v_tableau_ltv_monthly_client_agg (ltv.v_tableau_ltv_monthly_client_agg) (gpbidb),,
f59dcbb8-2037-78d1-ab63-d69b607c3dbe,v_tableau_client_revenue_combined (repo.v_tableau_client_revenue_combined) (gpbidb),,
f7d19d08-1414-5c55-3804-26f44a706219,Toggle,,
f7d19d08-1414-5c55-3804-26f44a706219,Professional_Data_Cleaned.csv+ (Multiple Connections),,
f89b4e4a-c5b5-e841-9e54-0e4115cb4a54,Fees transpose+ (Template Calculator v2),,
f89b4e4a-c5b5-e841-9e54-0e4115cb4a54,Fees transpose+ (Template Calculator v2),postgres,"select mat.start_date,
		mat.client_id,
		cc.accounting_id,
		mat.client,
		mat.type,
		mat.billing_currency,
		sum(mat.billing_amount) as bill_amount
from goglobal_gp_goglobal.v_gp_gg_total_bills_mat mat
left join goglobal_gp_goglobal.v_gp_gg_client_current cc on mat.client_id=cc.id
where --client_id in ('1272','2766','329','786','1518','1651','2565','528') and
start_date>>='2022-01-01' 
group by 1,2,3,4,5,6"
f89b4e4a-c5b5-e841-9e54-0e4115cb4a54,Fees transpose+ (Template Calculator v2),postgres,"select distinct client as ""Customer POP"",
		start_date as ""Date POP"",
		country as ""Country POP"",
		count(distinct professional_id) ""POP COUNT""
from goglobal_gp_goglobal.v_gp_gg_total_bills_mat
where type in ('Management Fee',
'Employer Burden Markup',
'Currency Transaction Fee',
'Insurance Premium Markup',
'Wiring Fee',
'Travel Insurance',
'Annual Fee',
'Medical Insurance Markup',
'Banking Fee',
'Professional Costs',
'Transaction Fee',
'G-P Contractor Fee',
'Discount',
'fxRate Variance')
and  start_date>>='2022-01-01' 
--and client_id in ('1272','2766','329','786','1518','1651','2565','528')
group by 1,2,3"
f8f14e02-bc93-cc22-f809-10d89cb03b6c,Custom SQL Query (gpbidb),postgres,"With 
Crunchbase as (
        Select Distinct
            cc.id as Client_id,
            cc.name as client,
            cb_org.name as org_name,
            cb_org.status,
            ipos.ipo_status,
            cb_org.founded_on,
            cb_org.employee_count,
            cb_org.num_funding_rounds,
            cb_org.total_funding_usd
        From goglobal_gp_goglobal.v_gp_gg_client_current cc
        Left Join client_investor.client_investor_gp_cb as gp_cb on cc.id = gp_cb.client_id
        Left Join crunchbase.v_cb_organizations_latest_mat cb_org on gp_cb.uuid = cb_org.uuid
        Left Join crunchbase.v_cb_funding_rounds_latest_mat funding_rounds on gp_cb.uuid = funding_rounds.org_uuid
        Left Join crunchbase.v_cb_investments_latest_mat as investments on funding_rounds.uuid =investments.funding_round_uuid
        Left Join crunchbase.cb_organizations_ipos ipos on gp_cb.uuid = ipos.uuid
        Where cc.is_demo_client = 'False'
        And cb_org.name IS NOT NULL
        order by cc.id
    ), 
 
DnB_Company_Info as (
        Select Distinct
            Customer_duns.""GPP Customer ID"" as Client_id,
            Company_Information.duns_number,
            Company_Information.""primaryName"" as DnB_Name,
            Company_Information.""incorporatedDate"",
            Company_Information.""dunsControlStatus_operatingStatus_startDate"",
            Company_Information.""isSmallBusiness"",  
            Company_Information.""startDate"", 
            Company_Information.""controlOwnershipType_description"", 
            Company_Information.""isFortune1000Listed"", 
            Company_Information.""isForbesLargestPrivateCompaniesListed"",
            Company_Information.""businessEntityType_description"",
            Company_Information.""legalForm_description"" 
        From dnb.company_information Company_Information
        Left Join dnb.gpp_clients_duns_numbers Customer_duns on replace(Customer_duns.""DUNS Number"",'.0','') =  Company_Information.duns_number::text
        Order by Customer_duns.""GPP Customer ID"" asc
    ),  
    
DnB as (
        Select Distinct 
            Customer_Base.""GPP Customer ID"" as DnB_GPP_Customer_id, 
            Customer_Base.""GPP Customer Name"" as DnB_GPP_Customer_Name, 
            replace(Customer_Base.""DUNS Number"",'.0','') as Duns_number,
            Yearly_Revenue.""financials_yearlyRevenue_value"" as DnB_Yearly_Revenue_USD,
            Customer_Base.run_date as DnB_run_date, 
            First.""numberOfEmployees_value"" as DnB_Individual_HC, 
            Second.""numberOfEmployees_value"" as DnB_Consolidated_HC,
            Third.""numberOfEmployees_value"" as DnB_HQ_Only_Employs_Here
        From dnb.gpp_clients_duns_numbers Customer_Base
		Left Join dnb.""ci_financials_yearlyRevenue"" Yearly_Revenue on 
			replace(Customer_Base.""DUNS Number"",'.0','') = Yearly_Revenue.Duns_number::text 
			and Yearly_Revenue.""financials_yearlyRevenue_currency"" = 'USD'
		Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9066 ) First  on 
			replace(Customer_Base.""DUNS Number"",'.0','') = First.Duns_number::text
		Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9067 ) Second on 
			replace(Customer_Base.""DUNS Number"",'.0','') = Second.Duns_number::text
		Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9068 ) Third  on 
			Customer_Base.""DUNS Number""::text = Third.Duns_number::text
        Order by Customer_Base.""GPP Customer ID"" asc
       ), 
       
DnB_Industry as (
        Select Distinct
            Duns_base.Duns_number, 
            Ind_Type_1.""industryCodes_description"" as ""D&B Standard Industry Code"",
            Ind_Type_2.""industryCodes_description"" as ""US Standard Industry Code 1987 - 4 digit"",
            Ind_Type_3.""industryCodes_code"" as ""North American Industry Classification System 2022 ID"",
            Ind_Type_3.""industryCodes_description"" as ""North American Industry Classification System 2022"",
            Ind_Type_4.""industryCodes_description"" as ""NACE Revision 2"",
            Ind_Type_5.""industryCodes_description"" as ""D&B Hoovers Industry Code"",
            Ind_Type_6.""industryCodes_description"" as ""D&B Standard Major Industry Code""
        From dnb.""ci_industryCodes"" Duns_base
        Left Join dnb.""ci_industryCodes"" Ind_Type_1 on Duns_base.Duns_number = Ind_Type_1.Duns_number and Ind_Type_1.""industryCodes_typeDnBCode"" = 3599  and Ind_Type_1.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_2 on Duns_base.Duns_number = Ind_Type_2.Duns_number and Ind_Type_2.""industryCodes_typeDnBCode"" = 399   and Ind_Type_2.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_3 on Duns_base.Duns_number = Ind_Type_3.Duns_number and Ind_Type_3.""industryCodes_typeDnBCode"" = 37788 and Ind_Type_3.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_4 on Duns_base.Duns_number = Ind_Type_4.Duns_number and Ind_Type_4.""industryCodes_typeDnBCode"" = 29104 and Ind_Type_4.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_5 on Duns_base.Duns_number = Ind_Type_5.Duns_number and Ind_Type_5.""industryCodes_typeDnBCode"" = 25838 and Ind_Type_5.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_6 on Duns_base.Duns_number = Ind_Type_6.Duns_number and Ind_Type_6.""industryCodes_typeDnBCode"" = 24657 and Ind_Type_6.""industryCodes_priority"" = 1
        Order by Duns_base.duns_number  asc
        )
        
Select Distinct 
    Customer.id as Customer_Id, 
    Customer.Accounting_id as Acumatica_id,
    Customer.name as Customer_Name,
    Case 
        When Customer.status = '1' Then 'Active'
        Else 'Inactive'
     End as Customer_Status,
     Case 
        When Customer.pricing_model = 0 then 'Enterprise' 
 	  	When Customer.pricing_model = 1 then 'Standard'
 		Else 'Verify Pricing Model' 
     End as Customer_Pricing_Model,
    Partner.Name as Partner_Name, 
    Billing_country.Name as Billing_Country,
    DnB.Duns_number,
    HCon.""hierarchyLevel"", 
    HCon.""globalUltimateFamilyTreeMembersCount"", 
    HCon.""branchesCount"",
    HCon.""globalUltimate_duns"",
    HCon.""globalUltimate_primaryName"",
    HCon.""gloUlt_priAddr_addressCountry_name"",
    HCon.""domesticUltimate_duns"",
    HCon.""domesticUltimate_primaryName"",
    HCon.""domUlt_priAddr_addressCountry_name"",
    HCon.parent_duns,
    HCon.""industrialPlantsCount"",
    HCon.""headQuarter_duns"",
    DnB.DnB_Yearly_Revenue_USD,
    DnB.DnB_run_date, 
    DnB.DnB_Individual_HC, 
    DnB.DnB_Consolidated_HC,
    DnB.DnB_HQ_Only_Employs_Here,
    DnB_Industry.""D&B Standard Industry Code"",
    DnB_Industry.""US Standard Industry Code 1987 - 4 digit"",
	DnB_Industry.""North American Industry Classification System 2022 ID"",
    DnB_Industry.""North American Industry Classification System 2022"",
    DnB_Industry.""NACE Revision 2"",
    DnB_Industry.""D&B Hoovers Industry Code"",
    DnB_Industry.""D&B Standard Major Industry Code"", 
    DnB_Company.DnB_Name,
    DnB_Company.""incorporatedDate"",
    DnB_Company.""dunsControlStatus_operatingStatus_startDate"",
    DnB_Company.""isSmallBusiness"",  
    DnB_Company.""controlOwnershipType_description"", 
    DnB_Company.""isFortune1000Listed"", 
    DnB_Company.""isForbesLargestPrivateCompaniesListed"",
    DnB_Company.""businessEntityType_description"",
    DnB_Company.""legalForm_description"",
    Crunchbase.org_name as org_name,
    Crunchbase.status,
    Crunchbase.ipo_status,
    Crunchbase.founded_on,
    Crunchbase.employee_count,
    Crunchbase.num_funding_rounds,
    Crunchbase.total_funding_usd
From goglobal_gp_goglobal.v_gp_gg_client_current Customer
Left Join DnB on DnB.DnB_GPP_Customer_id = Customer.id
Left Join DnB_Industry on DnB.Duns_number::text = DnB_Industry.Duns_number::text
Left Join goglobal_gp_goglobal.v_gp_gg_partners_referral_current Partner on Customer.partners_referral_id = Partner.id
Left Join goglobal_gp_goglobal.v_gp_gg_address_current   Billing_Address on Customer.billing_address_id = Billing_Address.id
Left Join goglobal_gp_goglobal.v_gp_gg_country_current   Billing_Country on Billing_Address.country_id = Billing_Country.id 
Left Join DnB_Company_Info as DnB_Company on DnB_Company.client_id = Customer.id
Left Join Crunchbase on Crunchbase.Client_id = Customer.id
Left Join dnb.hierarchy_connections as HCon on HCon.duns_number::text = DnB.Duns_number::text
--where Customer.id=89
Order by Customer.id asc"
f8f14e02-bc93-cc22-f809-10d89cb03b6c,Custom SQL Query (gpbidb),,
fbeabe6a-1d33-c12c-cfb7-72858c26793a,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT project_name, site_name, actor_user_id, actor_user_name, e.event_name, event_type, event_id, event_date, actor_license_role, actor_site_role, item_type, e.item_id, e.item_name, workbook_name, historical_item_name, item_owner_email, item_repository_url, historical_item_repository_url, run_date,
	suspend.event_name as suspended, md.max_date
	FROM tableau.ts_events e

	left join (select item_id, event_name from tableau.ts_events WHERE event_name = 'Suspend Extract Refresh Due to Inactivity' ) suspend on
	e.item_id = suspend.item_id
	
	left join (SELECT  item_id, item_name, event_name , MAX(event_date) as max_event_date, 1 as max_date
	FROM tableau.ts_events
	where event_name = 'Publish Workbook'
	group by 1,2,3) as md on (e.item_id = md.item_id and e.event_name = md.event_name and e.event_date = md.max_event_date)"
fbeabe6a-1d33-c12c-cfb7-72858c26793a,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT podname, site_luid, u.site_name, site_create_date, site_creator_capacity, site_explorer_capacity, site_user_quota, site_viewer_capacity, user_id, user_luid, user_email, created_at, user_account_age, last_login_date, days_since_last_login, license_type, site_role, owned_projects, owned_data_sources, owned_certified_data_sources, owned_data_sources_size, owned_workbooks, owned_workbooks_size, owned_views, access_data_source_events_count, access_view_events, publish_data_source_events, publish_workbook_events, last_datasource_access_date, last_datasource_publish_date, last_view_access_date, last_workbook_publish_date, data_source_access_count_total, data_source_access_count_unique_users, view_access_count_total, view_access_count_unique_users, run_date,
	COUNT_TOTAL_USERS.count_t_users
	FROM tableau.ts_users u
	LEFT JOIN (SELECT site_name, COUNT(DISTINCT user_email) as count_t_users
			  FROM tableau.ts_users group by 1) COUNT_TOTAL_USERS on u.site_name = COUNT_TOTAL_USERS.site_name"
fbeabe6a-1d33-c12c-cfb7-72858c26793a,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT ""Payroll Name"", ""Job Title Description"", ""Business Unit Description"", ""Home Department Description"", ""Worked In Country"", ""Status"", ""Hire Date"", LOWER(""Work Contact: Work Email"") AS ""Work Contact: Work Email""
	FROM workday_hris.v_non_sensitive_workday_data"
fc74b202-d9ca-fbf7-9311-ed738a004802,Custom SQL Query (gpbidb),postgres,"With 
Crunchbase as (
        Select Distinct
            cc.id as Client_id,
            cc.name as client,
            cb_org.name as org_name,
            cb_org.status,
            ipos.ipo_status,
            cb_org.founded_on,
            cb_org.employee_count,
            cb_org.num_funding_rounds,
            cb_org.total_funding_usd
        From goglobal_gp_goglobal.v_gp_gg_client_current cc
        Left Join client_investor.client_investor_gp_cb as gp_cb on cc.id = gp_cb.client_id
        Left Join crunchbase.v_cb_organizations_latest_mat cb_org on gp_cb.uuid = cb_org.uuid
        Left Join crunchbase.v_cb_funding_rounds_latest_mat funding_rounds on gp_cb.uuid = funding_rounds.org_uuid
        Left Join crunchbase.v_cb_investments_latest_mat as investments on funding_rounds.uuid =investments.funding_round_uuid
        Left Join crunchbase.cb_organizations_ipos ipos on gp_cb.uuid = ipos.uuid
        Where cc.is_demo_client = 'False'
        And cb_org.name IS NOT NULL
        order by cc.id
    ), 
 
DnB_Company_Info as (
        Select Distinct
            Customer_duns.""GPP Customer ID"" as Client_id,
            Company_Information.duns_number,
            Company_Information.""primaryName"" as DnB_Name,
            Company_Information.""incorporatedDate"",
            Company_Information.""dunsControlStatus_operatingStatus_startDate"",
            Company_Information.""isSmallBusiness"",  
            Company_Information.""startDate"", 
            Company_Information.""controlOwnershipType_description"", 
            Company_Information.""isFortune1000Listed"", 
            Company_Information.""isForbesLargestPrivateCompaniesListed"",
            Company_Information.""businessEntityType_description"",
            Company_Information.""legalForm_description"" 
        From dnb.company_information Company_Information
        Left Join dnb.gpp_clients_duns_numbers Customer_duns on Customer_duns.""DUNS Number"" =  Company_Information.duns_number
        Order by Customer_duns.""GPP Customer ID"" asc
    ),  
    
DnB as (
        Select Distinct 
            Customer_Base.""GPP Customer ID"" as DnB_GPP_Customer_id, 
            Customer_Base.""GPP Customer Name"" as DnB_GPP_Customer_Name, 
            Customer_Base.""DUNS Number"" as Duns_number,
            Yearly_Revenue.""financials_yearlyRevenue_value"" as DnB_Yearly_Revenue_USD,
            Customer_Base.run_date as DnB_run_date, 
            First.""numberOfEmployees_value"" as DnB_Individual_HC, 
            Second.""numberOfEmployees_value"" as DnB_Consolidated_HC,
            Third.""numberOfEmployees_value"" as DnB_HQ_Only_Employs_Here
        From dnb.gpp_clients_duns_numbers Customer_Base
        Left Join dnb.""ci_financials_yearlyRevenue"" Yearly_Revenue on Customer_Base.""DUNS Number"" = Yearly_Revenue.Duns_number and Yearly_Revenue.""financials_yearlyRevenue_currency"" = 'USD'
        Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9066 ) First  on Customer_Base.""DUNS Number"" = First.Duns_number
        Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9067 ) Second on Customer_Base.""DUNS Number"" = Second.Duns_number
        Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9068 ) Third  on Customer_Base.""DUNS Number"" = Third.Duns_number
        Order by Customer_Base.""GPP Customer ID"" asc
       ), 
       
DnB_Industry as (
        Select Distinct
            Duns_base.Duns_number, 
            Ind_Type_1.""industryCodes_description"" as ""D&B Standard Industry Code"",
            Ind_Type_2.""industryCodes_description"" as ""US Standard Industry Code 1987 - 4 digit"",
            Ind_Type_3.""industryCodes_description"" as ""North American Industry Classification System 2017"",
            Ind_Type_4.""industryCodes_description"" as ""NACE Revision 2"",
            Ind_Type_5.""industryCodes_description"" as ""D&B Hoovers Industry Code"",
            Ind_Type_6.""industryCodes_description"" as ""D&B Standard Major Industry Code""
        From dnb.""ci_industryCodes"" Duns_base
        Left Join dnb.""ci_industryCodes"" Ind_Type_1 on Duns_base.Duns_number = Ind_Type_1.Duns_number and Ind_Type_1.""industryCodes_typeDnBCode"" = 3599  and Ind_Type_1.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_2 on Duns_base.Duns_number = Ind_Type_2.Duns_number and Ind_Type_2.""industryCodes_typeDnBCode"" = 399   and Ind_Type_2.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_3 on Duns_base.Duns_number = Ind_Type_3.Duns_number and Ind_Type_3.""industryCodes_typeDnBCode"" = 30832 and Ind_Type_3.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_4 on Duns_base.Duns_number = Ind_Type_4.Duns_number and Ind_Type_4.""industryCodes_typeDnBCode"" = 29104 and Ind_Type_4.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_5 on Duns_base.Duns_number = Ind_Type_5.Duns_number and Ind_Type_5.""industryCodes_typeDnBCode"" = 25838 and Ind_Type_5.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_6 on Duns_base.Duns_number = Ind_Type_6.Duns_number and Ind_Type_6.""industryCodes_typeDnBCode"" = 24657 and Ind_Type_6.""industryCodes_priority"" = 1
        Order by Duns_base.duns_number  asc
        )
        
Select Distinct 
    Customer.id as Customer_Id, 
    Customer.Accounting_id as Acumatica_id,
    Customer.name as Customer_Name,
    Case 
        When Customer.status = '1' Then 'Active'
        Else 'Inactive'
     End as Customer_Status,
     Case 
        When Customer.pricing_model = 0 then 'Enterprise' 
 	  	When Customer.pricing_model = 1 then 'Standard'
 		Else 'Verify Pricing Model' 
     End as Customer_Pricing_Model,
    Partner.Name as Partner_Name, 
    Billing_country.Name as Billing_Country,
    DnB.Duns_number,
    HCon.""hierarchyLevel"", 
    HCon.""globalUltimateFamilyTreeMembersCount"", 
    HCon.""branchesCount"",
    HCon.""globalUltimate_duns"",
    HCon.""globalUltimate_primaryName"",
    HCon.""gloUlt_priAddr_addressCountry_name"",
    HCon.""domesticUltimate_duns"",
    HCon.""domesticUltimate_primaryName"",
    HCon.""domUlt_priAddr_addressCountry_name"",
    HCon.parent_duns,
    HCon.""industrialPlantsCount"",
    HCon.""headQuarter_duns"",
    DnB.DnB_Yearly_Revenue_USD,
    DnB.DnB_run_date, 
    DnB.DnB_Individual_HC, 
    DnB.DnB_Consolidated_HC,
    DnB.DnB_HQ_Only_Employs_Here,
    DnB_Industry.""D&B Standard Industry Code"",
    DnB_Industry.""US Standard Industry Code 1987 - 4 digit"",
    DnB_Industry.""North American Industry Classification System 2017"",
    DnB_Industry.""NACE Revision 2"",
    DnB_Industry.""D&B Hoovers Industry Code"",
    DnB_Industry.""D&B Standard Major Industry Code"", 
    DnB_Company.DnB_Name,
    DnB_Company.""incorporatedDate"",
    DnB_Company.""dunsControlStatus_operatingStatus_startDate"",
    DnB_Company.""isSmallBusiness"",  
    DnB_Company.""controlOwnershipType_description"", 
    DnB_Company.""isFortune1000Listed"", 
    DnB_Company.""isForbesLargestPrivateCompaniesListed"",
    DnB_Company.""businessEntityType_description"",
    DnB_Company.""legalForm_description"",
    Crunchbase.org_name as org_name,
    Crunchbase.status,
    Crunchbase.ipo_status,
    Crunchbase.founded_on,
    Crunchbase.employee_count,
    Crunchbase.num_funding_rounds,
    Crunchbase.total_funding_usd
From goglobal_gp_goglobal.v_gp_gg_client_current Customer
Left Join DnB on DnB.DnB_GPP_Customer_id = Customer.id
Left Join DnB_Industry on DnB.Duns_number = DnB_Industry.Duns_number
Left Join goglobal_gp_goglobal.v_gp_gg_partners_referral_current Partner on Customer.partners_referral_id = Partner.id
Left Join goglobal_gp_goglobal.v_gp_gg_address_current   Billing_Address on Customer.billing_address_id = Billing_Address.id
Left Join goglobal_gp_goglobal.v_gp_gg_country_current   Billing_Country on Billing_Address.country_id = Billing_Country.id 
Left Join DnB_Company_Info as DnB_Company on DnB_Company.client_id = Customer.id
Left Join Crunchbase on Crunchbase.Client_id = Customer.id
Left Join dnb.hierarchy_connections as HCon on HCon.duns_number = DnB.Duns_number
WHERE Customer.is_demo_client = FALSE 
Order by Customer.id asc"
fc74b202-d9ca-fbf7-9311-ed738a004802,Custom SQL Query (gpbidb),postgres,"SELECT DISTINCT cl.id AS client_id, cl.name AS client_name, billing_address_id, 
a.postal_code,
CASE 
WHEN a.address2 IS NULL THEN a.address1
ELSE CONCAT(a.address1, ' ', a.address2)
END AS client_address,
city AS client_city, 
province_id, a.country_id, country_code AS client_country_code, co.name AS client_country, 
p.code AS client_province_code, p.name AS client_province
	FROM ""goglobal_gp_goglobal"".v_gp_gg_client_current as cl
	LEFT JOIN ""goglobal_gp_goglobal"".""address""	AS a
	ON cl.billing_address_id = a.id
	LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_country_current"" AS co
	ON a.country_id = co.id
	LEFT JOIN ""goglobal_gp_goglobal"".""province"" AS p
	ON a.province_id = p.id
	WHERE is_demo_client = FALSE
	ORDER BY 1"
fe0f482b-2146-b46e-ba86-e5ee54e93161,Column Profile,postgres,"select * from get_univariate_anaysis_for_column(<[Parameters].[Parameter 3]>,<[Parameters].[Parameter 1]>,<[Parameters].[Parameter 2]>,<[Parameters].[Parameter 4]>)"
fe0f482b-2146-b46e-ba86-e5ee54e93161,Sample Column Values,postgres,"select get_sample_values(<[Parameters].[Parameter 3]>,<[Parameters].[Parameter 1]>,<[Parameters].[Parameter 2]>)"
fe0f482b-2146-b46e-ba86-e5ee54e93161,Schema/Table Info,postgres,"select 
  ns.nspname AS schemaName,
  c.relname   AS tableName,
  c.reltuples AS rowCount,
  c.relnatts AS columnCount,
  c.relkind as typeOfObject,
  a.attname as colName,
  t.typname as dataType,
  t.typcategory as typecategory
FROM pg_catalog.pg_attribute AS a
JOIN pg_catalog.pg_type AS t
  ON a.atttypid = t.oid
JOIN pg_catalog.pg_class AS c
  ON a.attrelid = c.oid
JOIN pg_catalog.pg_namespace AS ns
  ON c.relnamespace = ns.oid
WHERE
  ns.nspname NOT IN ('pg_catalog', 'information_schema', 'mdm','pg_toast') AND 
  c.relkind IN ('r', 'v') AND 
  a.attisdropped=FALSE AND
  a.attname NOT IN ('tableoid','cmax','xmax','cmin','xmin','ctid')"
fe0f482b-2146-b46e-ba86-e5ee54e93161,Schema/Table Info,postgres,"select *
from get_max_measurementdatetime()"
fe0f482b-2146-b46e-ba86-e5ee54e93161,Histogram,postgres,"select * from get_histogram_for_column(<[Parameters].[Parameter 3]>,<[Parameters].[Parameter 1]>,<[Parameters].[Parameter 2]>,<[Parameters].[Parameter 4]>)"
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Releases details (Jira),postgres,"SELECT CAST(""issue_multiselect_history"".""_fivetran_id"" AS TEXT) AS ""_fivetran_id"",
  ""issue_multiselect_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_multiselect_history)"",
  CAST(""issue_multiselect_history"".""author_id"" AS TEXT) AS ""author_id"",
  CAST(""issue_multiselect_history"".""field_id"" AS TEXT) AS ""field_id"",
  ""issue_multiselect_history"".""is_active"" AS ""is_active"",
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id"",
  ""issue_multiselect_history"".""time"" AS ""time"",
  CAST(""issue_multiselect_history"".""value"" AS TEXT) AS ""value""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where

""issue_multiselect_history"".field_id = 'labels' and ""issue_multiselect_history"".is_active = true and ""issue_multiselect_history"".value in  ('automated-level0',
'automated-level1',
'automated-level2',
'automated-level3')"
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Releases details (Jira),postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
 CAST(""fixVersions"".""value"" as INT) as fixVersionID
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
JOIN ""jira_integration"".""issue_multiselect_history"" ""fixVersions"" on ""fixVersions"".issue_id = ""issue"".id and ""fixVersions"".field_id = 'fixVersions' and ""fixVersions"".is_active = true and ""fixVersions"".value is not NULL
where project in (10000,10103,10166,10164,10153,10010,10145) and _fivetran_deleted = false"
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Releases details (Jira),postgres,"with valueStreamDomain as (
select domain.name as TDomain, domain.Id as TDomainId, valueStream.name as TValueStream from jira_integration.field_option domain
left join jira_integration.field_option valueStream on valueStream.id = domain.parent_id
)

SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)"",
  valueStreamDomain.TDomain,
  valueStreamDomain.TValueStream
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" 
LEFT JOIN valueStreamDomain on CAST(valueStreamDomain.TDomainId as TEXT) = issue_field_history.value
where issue_field_history.is_active = true and issue_field_history.field_id in ('customfield_10459')"
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Releases details (Jira),postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Zendesk from DW,postgres,"SELECT ""ticket"".""_fivetran_synced"" AS ""_fivetran_synced"",
  ""ticket"".""allow_channelback"" AS ""allow_channelback"",
  ""ticket"".""created_at"" AS ""created_at"",
  ""ticket"".""custom_acumatica_related"" AS ""custom_acumatica_related"",
  CAST(""ticket"".""custom_tech_case_type"" AS TEXT) AS ""custom_tech_case_type"",
  ""ticket"".""has_incidents"" AS ""has_incidents"",
  ""ticket"".""id"" AS ""id"",
  ""ticket"".""is_public"" AS ""is_public"",
  ""ticket"".""merged_ticket_ids"" AS ""merged_ticket_ids"",
  ""ticket"".""requester_id"" AS ""requester_id"",
  CAST(""ticket"".""type"" AS TEXT) AS ""type"",
  ""ticket"".""updated_at"" AS ""updated_at"",
  CAST(""ticket"".""url"" AS TEXT) AS ""url""
FROM ""zendesk"".""ticket"" ""ticket""
where ""ticket"".""organization_id"" is NOT null"
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Zendesk from DW,postgres,"SELECT ""ticket_tag"".""_fivetran_synced"" AS ""_fivetran_synced (ticket_tag)"",
  CAST(""ticket_tag"".""tag"" AS TEXT) AS ""tag"",
  ""ticket_tag"".""ticket_id"" AS ""ticket_id""
FROM ""zendesk"".""ticket_tag"" ""ticket_tag"" where ""tag"" in ('jira_escalated')"
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Escalated tickets,postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
""issue_type"".""name"" as ""issueTypeName""
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
LEfT JOIN ""jira_integration"".""issue_type"" ""issue_type"" on ""issue_type"".id = ""issue"".""issue_type""

JOIN ""jira_integration"".""issue_multiselect_history"" ""labels"" on ""labels"".issue_id = ""issue"".id and ""labels"".field_id = 'labels' and ""labels"".is_active = true and ""labels"".value in  ('jira_escalated', 'tech_escalated', 'jira-escalated', 'apr-2021-bug-bash') 
where project in (10000,10103) and _fivetran_deleted = false"
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Escalated tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)""
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_10390','customfield_10397', 'customfield_10450','customfield_10470')"
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Escalated tickets,postgres,"with valueStreamDomain as (
select domain.name as TDomain, domain.Id as TDomainId, valueStream.name as TValueStream from jira_integration.field_option domain
left join jira_integration.field_option valueStream on valueStream.id = domain.parent_id
)

SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)"",
  valueStreamDomain.TDomain,
  valueStreamDomain.TValueStream
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" 
LEFT JOIN valueStreamDomain on CAST(valueStreamDomain.TDomainId as TEXT) = issue_field_history.value
where issue_field_history.is_active = true and issue_field_history.field_id in ('customfield_10459')"
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Escalated tickets,postgres,"with fixVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (fixVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""fixVersionID"",
  ""issue_multiselect_history"".""value"" AS ""fixVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'fixVersions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from fixVersion
left join version on version.""id (version)"" = fixVersion.""fixVersionID"""
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Escalated tickets,postgres,"with affectsVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (affectsVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""affectsVersionID"",
  ""issue_multiselect_history"".""value"" AS ""affectsVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'versions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from version
left join affectsVersion on version.""id (version)"" = affectsVersion.""affectsVersionID"""
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Escalated tickets,postgres,"SELECT CAST(""issue_multiselect_history"".""_fivetran_id"" AS TEXT) AS ""_fivetran_id"",
  ""issue_multiselect_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_multiselect_history)"",
  CAST(""issue_multiselect_history"".""author_id"" AS TEXT) AS ""author_id"",
  CAST(""issue_multiselect_history"".""field_id"" AS TEXT) AS ""field_id"",
  ""issue_multiselect_history"".""is_active"" AS ""is_active"",
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id"",
  ""issue_multiselect_history"".""time"" AS ""time"",
  CAST(""issue_multiselect_history"".""value"" AS TEXT) AS ""value""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where

""issue_multiselect_history"".field_id = 'labels' and ""issue_multiselect_history"".is_active = true and ""issue_multiselect_history"".value in  ('affects_payroll')"
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Escalated tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  cast(""issue_field_history"".""value"" as DATE) AS RCADate
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_11015')"
fee9a6f0-41e8-ce46-a981-a44f3122fdae,Escalated tickets,postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
ecc459ab-596a-57f5-3bbf-d17dad5babee,Data Quality,,
ecae05a9-bcdf-99be-7330-30d747754600,goglobal_goglobal view,postgres,"SELECT DISTINCT cl.id AS client_id, cl.name AS client_name, billing_address_id, city AS client_city, 
province_id, a.country_id, country_code AS client_country_code, co.name AS client_country, 
p.code AS client_province_code, p.name AS client_province,
map.row, map.column
	FROM ""goglobal_gp_goglobal"".v_gp_gg_client_current as cl
	LEFT JOIN ""goglobal_gp_goglobal"".""address""	AS a
	ON cl.billing_address_id = a.id
	LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_country_current"" AS co
	ON a.country_id = co.id
	LEFT JOIN ""goglobal_gp_goglobal"".""province"" AS p
	ON a.province_id = p.id
        LEFT JOIN ""repo"".""gp_us_hexmap_coords"" AS map
	ON p.code = map.abbreviation
	WHERE is_demo_client = FALSE AND city <<>> 'test'"
ecae05a9-bcdf-99be-7330-30d747754600,goglobal_goglobal view,postgres,"SELECT DISTINCT e.gpp_name,
	   e.entity_type,
	   e.name AS GEMS_name,
	   e.status,
	   CASE
	   	    WHEN e.category = 'Local Counsel' THEN 'LC'
		    WHEN e.category = 'LSP/LC' THEN 'LC'
		    ELSE e.category
		END AS category,
	   CASE
            WHEN e.jurisdiction IS NULL THEN a.country
            ELSE e.jurisdiction
        END AS jurisdiction,
	   e.legal_entity AS legal_entity_type,
	   tax.tax_id,
	   tax.cit_due_date, 
	   tax.cit_preparer, 
	   tax.cit_rate, 
	   tax.cit_statutory_of_limitation,
	   tax.currency_local_books_and_records, 
	   tax.date_us_ctb_election, 
	   tax.indirect_tax_rate_for_gp,
	   tax.language_books_records_cit_return,
	   tax.party_prepare_statutory_reporting,
	   tax.standard_indirect_tax_rate,
	   tax.statutory_reporting_requirement,
	   tax.taxable_base,
	   tax.us_checkbox_entity AS us_entity,
	   tax.us_tax_id,
	   tax.vat_number, 
	   tax.vat_return_filing, 
	   tax.vat_return_preparer, 
	   tax.vat_statute_of_limitation, 
	   tax.vat_gst_is_registered
	 
FROM gems.entities AS e
LEFT JOIN gems.addresses AS a
ON e.primaryentitykeyid = a.id
LEFT JOIN gems.business_activity AS ba
ON e.primaryentitykeyid = ba.id
LEFT JOIN gems.taxation_details AS tax
ON e.primaryentitykeyid = tax.id
WHERE gpp_name IS NOT NULL AND primary_activity <<>> 'Operating'
ORDER BY gpp_name"
ecae05a9-bcdf-99be-7330-30d747754600,goglobal_goglobal view,,
ecae05a9-bcdf-99be-7330-30d747754600,goglobal_goglobal view,postgres,"SELECT DISTINCT professional_id,CONCAT(v.first_name, ' ', v.last_name)AS professional_name, 
province_id, pr.name AS professional_province,
map.row AS prof_row, map.column AS prof_column 
	FROM ""goglobal_gp_goglobal"".""v_tableau_headcount_dashboard"" as v
	LEFT JOIN ""goglobal_gp_goglobal"".""professional"" as p
	ON v.professional_id = p.id
	LEFT JOIN ""goglobal_gp_goglobal"".""address"" as a
	ON p.home_address_id = a.id
	LEFT JOIN ""goglobal_gp_goglobal"".""province"" as pr
	ON a.province_id = pr.id
        LEFT JOIN ""repo"".""gp_us_hexmap_coords"" AS map
        ON pr.code = map.abbreviation 
	WHERE active_flag = 'Active'
	AND cal_date <<= CURRENT_DATE
	ORDER BY professional_id"
ecae05a9-bcdf-99be-7330-30d747754600,goglobal_goglobal view,postgres,"SELECT DISTINCT t.professional_id, t.cal_date, currency,  SUM(net_revenue) AS net_revenue, SUM (gross_revenue) AS gross_revenue
    FROM ""goglobal_gp_goglobal"".""v_tableau_headcount_dashboard"" AS t
    LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_tableau_ltv_base"" AS d
    USING (professional_id)
    WHERE d.start_date = t.cal_date
    GROUP BY t.professional_id, t.cal_date, currency
    ORDER BY t.cal_date"
ec4ce5e9-9dd5-6d5e-0873-95702e2533d7,Benefits by country,postgres,"with A as(
	SELECT t1.id, concat(t1.first_name,' ',t1.last_name) as Professional,
	   case when t1.status='1' then 'New' 
	   		when t1.status='2' then 'Onboarding'
	   		when t1.status='3' then 'Active'
	   		when t1.status='4' then 'Terminating'
	   		when t1.status='5' then 'Inactive'
			end as Pro_Status,
	   t2.name as Client, 
	   T9.NAME AS LSP_NAME,
	   t4.name as Country,
	   t7.name as Benefit_type,
	   case when t8.mandatory='1' then 'Mandatory'
	   		when t8.mandatory='0' then 'Supplemental'
	   end as Plan_Type,
	T6.ID AS BENEFIT_ID,
	T6.COUNTRY_EXTERNAL_ID as COUNTRY_ID,
	   t6.name as Plan_Name,
		t6.custom,
		case when t6.active='1' then 'Yes'
	when t6.active='0' then 'No' else null
	end as Active_plan,
	   t5.status,
	   case when t5.status='1' then 'Offered' when t5.status='2' then 'Enrolled'
	   		when t5.status='3' then 'Declined' when t5.status='4' then 'Unenrolled'
			else t5.status
		end as benefit_status
from goglobal_goglobal.v_gp_gg_professional_current t1
	left join goglobal_goglobal.v_gp_gg_client_current t2
		on t1.client_id=t2.id
	left join goglobal_goglobal.v_gp_gg_lsp_country_current t3 
		on t1.lsp_country_id=t3.id
	left join goglobal_goglobal.v_gp_gg_country_current t4
		on t3.country_id=t4.id
	left join benefits_benefits.v_benefits_professional_benefit_enrollment_current t5
		on t1.id=t5.professional_external_id::INTEGER
	LEFT join benefits_benefits.v_benefits_benefit_current t6
		on t5.benefit_id=t6.id::INTEGER and t4.id=t6.country_external_id::INTEGER
	left join benefits_benefits.v_benefits_benefit_type_current t7
		on t6.benefit_type_id=t7.id::INTEGER
	left join benefits_benefits.v_benefits_country_benefit_type_current t8
		on t7.id::INTEGER=t8.benefit_type_id and t8.country_external_id::INTEGER=t4.id
	LEFT JOIN goglobal_goglobal.V_GP_GG_LSP_CURRENT T9
		ON T3.LSP_ID=T9.ID
	where is_failed_to_launch='false' and is_demo_client='false'
					order by professional),
b as(SELECT  DISTINCT T4.NAME AS COUNTRY,
		t7.name as Benefit_type,
	   case when t8.mandatory='1' then 'Mandatory'
	   		when t8.mandatory='0' then 'Supplemental'
	   end as Plan_Type,
	   T6.ID AS BENEFIT_ID,
	T6.COUNTRY_EXTERNAL_ID as COUNTRY_ID,
	   t6.name as Plan_Name,
		t6.custom,
		case when t6.active='1' then 'Yes'
	when t6.active='0' then 'No' else null
	end as Active_plan
from  benefits_benefits.v_benefits_benefit_current t6	 
left join benefits_benefits.v_benefits_benefit_type_current t7
		on t6.benefit_type_id=t7.id::INTEGER
left join benefits_benefits.v_benefits_country_benefit_type_current t8
		on t7.id::INTEGER=t8.benefit_type_id  AND T6.COUNTRY_EXTERNAL_ID=T8.COUNTRY_EXTERNAL_ID
LEFT JOIN goglobal_goglobal.V_GP_GG_COUNTRY_CURRENT T4 ON T6.COUNTRY_EXTERNAL_ID::INTEGER=T4.ID),
C AS(select distinct a.country, a.benefit_type,a.plan_type,a.BENEFIT_ID,a.COUNTRY_ID,a.plan_name,a.custom,a.active_plan, count (distinct a.id) as Professionals,
COUNT(distinct a.id) filter (where a.benefit_status = 'ENROLLED') as Enrolled,
COUNT(distinct a.id) filter (where a.benefit_status = 'OFFERED') as Offered,
COUNT(distinct a.id) filter (where a.benefit_status = 'DECLINED') as Declined,
COUNT(distinct a.id) filter (where a.benefit_status = 'UNENROLLED') as Unenrolled,
COUNT(distinct a.id) filter (where a.pro_status = 'New') as New,
COUNT(distinct a.id) filter (where a.pro_status = 'Onboarding') as Onboarding,
COUNT(distinct a.id) filter (where a.pro_status = 'Active') as Active,
COUNT(distinct a.id) filter (where a.pro_status = 'Terminating') as Terminating,
COUNT(distinct a.id) filter (where a.pro_status = 'Inactive') as Inactive
from a 
where country is not null
group by 1,2,3,4,5,6,7,8
order by PLAN_NAME,country),
d as (SELECT b.country as country_b,b.benefit_type as benefit_type_b, b.plan_type as plan_type_b,b.benefit_id as benefit_id_b,
b.country_id as country_id_b,b.plan_name as plan_name_b,b.custom as custom_b,b.active_plan as active_plan_b,
c.*
from b full join c on b.benefit_id=c.benefit_id and b.country_id=c.country_id
order by c.country)
select case when country_b is null then country else country_b end as Country,
case when benefit_type_b is null then benefit_type else benefit_type_b end as BENEFIT_TYPE,
case when PLAN_TYPE_b is null then PLAN_TYPE else PLAN_TYPE_b end as PLAN_TYPE,
case when BENEFIT_ID_b is null then BENEFIT_ID else BENEFIT_ID_b end as BENEFIT_ID,
case when COUNTRY_ID_b is null then COUNTRY_ID else COUNTRY_ID_b end as COUNTRY_ID,
case when PLAN_NAME_b is null then PLAN_NAME else PLAN_NAME_b end as PLAN_NAME,
case when CUSTOM_b is null then CUSTOM else CUSTOM_b end as CUSTOM,
case when ACTIVE_PLAN_B is null then ACTIVE_PLAN else ACTIVE_PLAN_B end as ACTIVE_PLAN,
PROFESSIONALS,ENROLLED,OFFERED,DECLINED,UNENROLLED,NEW,ONBOARDING,ACTIVE,TERMINATING,INACTIVE
FROM D
ORDER BY COUNTRY, BENEFIT_TYPE,PLAN_NAME"
ec4ce5e9-9dd5-6d5e-0873-95702e2533d7,Benefits Client Country,postgres,"with 
a as (
	select distinct c.id as Country_id,
		c.name as Country, 
		bt.name as Benefit_type, 
		btc.mandatory, 
		bt.id as btc_id 
	from benefits_gp_benefits.v_benefits_country_benefit_type_current btc
	left join goglobal_gp_goglobal.v_gp_gg_country_current c
		on btc.country_external_id::integer = c.id
	left join benefits_gp_benefits.v_benefits_benefit_type_current bt
		on bt.id=btc.benefit_type_id),
b as (
	select distinct 
		t1.client_id, 
		t1.country_id,
		t2.name as country 
	from goglobal_gp_goglobal.v_gp_gg_client_country_current t1 
	left join goglobal_gp_goglobal.v_gp_gg_country_current t2 on t1.country_id=t2.id 
	order by 1,2),
c as(
	select distinct 
		b.client_id,
		b.country_id, 
		a.country_id as country_id_1,
		b.country,
		a.benefit_type,
		a.mandatory,
		a.btc_id
	from b 
	left join a on b.country_id=a.country_id),
d as(
	select distinct 
		bc.id,
		bc.active,
		b.name as plan_name,
		b.custom,
		case 
			when b.active=true then 'Yes'
			when b.active=false then 'No' 
			else null
		end as Active_plan, 
		bc.customer_external_id as client_id, 
		c.id as country_id,
		c.name as Country, 
		bt.id as btc_id, 
		bt.name as benefit_type
	from benefits_gp_benefits.v_benefits_customer_benefit_offering_current bc 
	left join benefits_gp_benefits.v_benefits_benefit_current b on bc.benefit_id = b.id::integer 
	left join goglobal_gp_goglobal.v_gp_gg_country_current c    on b.country_external_id::integer = c.id 
	left join benefits_gp_benefits.v_benefits_benefit_type_current bt on b.benefit_type_id = bt.id::integer
	where bc.active = true),
e as (
	select distinct
		c.*, 
		d.plan_name,
		d.active_plan, 
		d.custom, 
		d.active
	from c 
	left join d on c.client_id=d.client_id::integer and c.country_id=d.country_id and c.btc_id=d.btc_id),
f as (
	select distinct 
		e.client_id, 
		z.name as Client,
		z.status as client_status, 
		z.is_demo_client,
		e.country_id,
		e.country,
		e.benefit_type, 
		e.mandatory,
		e.plan_name,
		e.active_plan,
		e.custom, 
		e.active, 
	case 
		when (e.mandatory=true and  e.plan_name is not null) then 'Offering'
		when (e.mandatory=true and  e.plan_name is null) then 'Setup Incomplete'
		when (e.mandatory=false and e.plan_name is not null) then 'Offering'
		when (e.mandatory=false and e.plan_name is  null) then 'Not Offering'
		else null
	END AS STATUS
	from e 
	left join goglobal_gp_goglobal.v_gp_gg_client_current z on e.client_id=z.id 
	order by 2,4)
select distinct
	f.*, 
	t1.id as client_country, 
	count(distinct t2.id) as Pros, 
	COUNT(distinct t2.id) filter (where t2.status IN ('2','3','4')) as aCTIVE_PROS,
	COUNT(distinct t2.id) filter (where t2.status = '1') as New,
	COUNT(distinct t2.id) filter (where t2.status = '2') as Onb,
	COUNT(distinct t2.id) filter (where t2.status = '3') as Act,
	COUNT(distinct t2.id) filter (where t2.status = '4') as Term,
	COUNT(distinct t2.id) filter (where t2.status = '5') as inac,
	case when (COUNT(distinct t2.id) filter (where t2.status IN ('2','3','4')))>>0 then 'a' else 'b' end as ActivePros
from f 
left join goglobal_gp_goglobal.v_gp_gg_client_country_current t1 on f.client_id=t1.client_id and f.country_id=t1.country_id
left join goglobal_gp_goglobal.v_gp_gg_professional_current t2 on t1.id=t2.client_country_id
where is_demo_client = false
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14"
ec4ce5e9-9dd5-6d5e-0873-95702e2533d7,by pro,postgres,"with A as(
	SELECT t1.id, 
		concat(t1.first_name,' ',t1.last_name) as Professional,
	   	case 
	   		when t1.status='1' then 'New' 
	   		when t1.status='2' then 'Onboarding'
	   		when t1.status='3' then 'Active'
	   		when t1.status='4' then 'Terminating'
	   		when t1.status='5' then 'Inactive'
		end as Pro_Status,
	   	t2.name as Client,
	   	t2.status as client_status, 
	   	T9.NAME AS LSP_NAME,
	   	t4.name as Country,
	   	t7.name as Benefit_type,
	   	case 
	   		when t8.mandatory='1' then 'Mandatory'
	   		when t8.mandatory='0' then 'Supplemental'
	   	end as Plan_Type,
	   	t6.name as Plan_Name,
		t6.custom,
		case 
			when t6.active='1' then 'Yes'
			when t6.active='0' then 'No' 
			else null
		end as Active_plan,
		t5.benefit_id,
	   	t5.status,
	   	case 
	   		when t5.status='1' then 'Offered' 
	   		when t5.status='2' then 'Enrolled'
	   		when t5.status='3' then 'Declined' 
	   		when t5.status='4' then 'Unenrolled'
			else t5.status
		end as benefit_status,
		t5.enrollment_date,
		t5.unenrollment_date,
		t1.payroll_start_date, 
		t1.payroll_end_date
	from goglobal_goglobal.v_gp_gg_professional_current t1
	left join goglobal_goglobal.v_gp_gg_client_current t2 on t1.client_id=t2.id
	left join goglobal_goglobal.v_gp_gg_lsp_country_current t3  on t1.lsp_country_id=t3.id
	left join goglobal_goglobal.v_gp_gg_country_current t4 on t3.country_id=t4.id
	left join benefits_benefits.v_benefits_professional_benefit_enrollment_current t5 on t1.id=t5.professional_external_id::integer
	left join benefits_benefits.v_benefits_benefit_current t6 on t5.benefit_id=t6.id::INTEGER and t4.id=t6.country_external_id::integer
	left join benefits_benefits.v_benefits_benefit_type_current t7 on t6.benefit_type_id=t7.id::INTEGER
	left join benefits_benefits.v_benefits_country_benefit_type_current t8 on t7.id::INTEGER=t8.benefit_type_id and t8.country_external_id::integer=t4.id 
	LEFT JOIN goglobal_goglobal.V_GP_GG_LSP_CURRENT T9 ON T3.LSP_ID=T9.ID
	where is_failed_to_launch='false' 
		and is_demo_client='false' 
	order by professional),
b as(
	select *, 
	case 
		when (benefit_type is null and status is null) then 'A'
		when (benefit_type is null and status is NOT null) THEN 'B'
	END AS FLAG FROM A)	
select * from b"
ec4ce5e9-9dd5-6d5e-0873-95702e2533d7,Benefits by client,postgres,"with A as(
	SELECT t1.id, concat(t1.first_name,' ',t1.last_name) as Professional,
	   case when t1.status='1' then 'New' 
	   		when t1.status='2' then 'Onboarding'
	   		when t1.status='3' then 'Active'
	   		when t1.status='4' then 'Terminating'
	   		when t1.status='5' then 'Inactive'
			end as Pro_Status,
	   t2.name as Client,t2.status as client_status, 
	   T9.NAME AS LSP_NAME,
	   t4.name as Country,
	   t7.name as Benefit_type,
	   case when t8.mandatory='1' then 'Mandatory'
	   		when t8.mandatory='0' then 'Supplemental'
	   end as Plan_Type,
	   t6.name as Plan_Name,
		t6.custom,
		case when t6.active='1' then 'Yes'
	when t6.active='0' then 'No' else null
	end as Active_plan,
		t5.benefit_id,
	   t5.status,
	   t5.status as benefit_status
from goglobal_goglobal.v_gp_gg_professional_current t1
	left join goglobal_goglobal.v_gp_gg_client_current t2
		on t1.client_id=t2.id
	left join goglobal_goglobal.v_gp_gg_lsp_country_current t3 
		on t1.lsp_country_id=t3.id
	left join goglobal_goglobal.v_gp_gg_country_current t4
		on t3.country_id=t4.id
	left join benefits_benefits.v_benefits_professional_benefit_enrollment_current t5
		on t1.id=t5.professional_external_id::INTEGER
	left join benefits_benefits.v_benefits_benefit_current t6
		on t5.benefit_id=t6.id::INTEGER and t4.id=t6.country_external_id::INTEGER
	left join benefits_benefits.v_benefits_benefit_type_current t7
		on t6.benefit_type_id=t7.id::INTEGER
	left join benefits_benefits.v_benefits_country_benefit_type_current t8
		on t7.id::INTEGER=t8.benefit_type_id and t8.country_external_id::INTEGER=t4.id::INTEGER
	LEFT JOIN goglobal_goglobal.V_GP_GG_LSP_CURRENT T9
		ON T3.LSP_ID=T9.ID
	where is_failed_to_launch='false' and is_demo_client='false' 
					order by professional),
b as(select *, case when (benefit_type is null and status is null) then 'A'
			when (benefit_type is null and status is NOT null) THEN 'B'
			END AS FLAG FROM A)	
select distinct client, client_status, country, benefit_type,plan_type,plan_name,active_plan,
COUNT(distinct id) filter (where benefit_status = 'ENROLLED') as Enrolled,
COUNT(distinct id) filter (where benefit_status = 'OFFERED') as Offered,
COUNT(distinct id) filter (where benefit_status = 'DECLINED') as Declined,
COUNT(distinct id) filter (where benefit_status = 'UNENROLLED') as Unenrolled,
COUNT(distinct id) filter (where pro_status = 'New') as New,
COUNT(distinct id) filter (where pro_status = 'Onboarding') as Onboarding,
COUNT(distinct id) filter (where pro_status = 'Active') as Active,
COUNT(distinct id) filter (where pro_status = 'Terminating') as Terminating,
COUNT(distinct id) filter (where pro_status = 'Inactive') as Inactive
from b
group by 1,2,3,4,5,6,7"
ec4ce5e9-9dd5-6d5e-0873-95702e2533d7,gpbidb,postgres,"with a as 
(select c.id as Country_id,
	c.name as Country, 
	bt.name as Benefit_type, 
	btc.mandatory, 
	bt.id as btc_id 
from 
benefits_benefits.v_benefits_country_benefit_type_current btc, 
goglobal_goglobal.v_gp_gg_country_current c, 
benefits_benefits.v_benefits_benefit_type_current bt
where btc.country_external_id::INTEGER = c.id and btc.benefit_type_id = bt.id::integer),
b as (
	select t1.client_id, 
	t1.country_id,t2.name as country 
	  from goglobal_goglobal.v_gp_gg_client_country_current t1 
		left join goglobal_goglobal.v_gp_gg_country_current t2 on t1.country_id=t2.id order by 1,2),
c as(
	select b.client_id,b.country_id, 
	a.country_id as country_id_1,
	b.country,
	a.benefit_type,
	a.mandatory,a.btc_id
from b left join a on b.country_id=a.country_id),
d as(
	select bc.id,
	bc.active, 
	b.name as plan_name,
	case 
	when b.active='1' then 'Yes'
	when b.active='0' then 'No' 
	else null
	end as Active_plan, 
	bc.customer_external_id as client_id, 
	c.id as country_id,
	c.name as Country, 
	bt.id as btc_id, 
	bt.name as benefit_type
from benefits_benefits.v_benefits_customer_benefit_offering_current bc, 
benefits_benefits.v_benefits_benefit_current b, 
goglobal_goglobal.v_gp_gg_country_current c, 
benefits_benefits.v_benefits_benefit_type_current bt
where bc.benefit_id = b.id::integer 
and b.country_external_id::INTEGER = c.id 
and b.benefit_type_id = bt.id::integer
and bc.active is true),
e as (select c.*, 
	d.plan_name,
	d.active_plan 
	from c 
	left join d on c.client_id=d.client_id::INTEGER and c.country_id=d.country_id and c.btc_id=d.btc_id),
f as (
	select e.client_id, 
	z.name as Client,
	z.status as client_status, 
	z.is_demo_client,
	e.country_id,e.country,
	e.benefit_type, 
	e.mandatory,
	e.plan_name,
	e.active_plan,
	case when (e.mandatory='1' and e.plan_name is not null) then 'Offering'
	when (e.mandatory='1' and plan_name is null) then 'Setup Incomplete'
	when (e.mandatory='0' and plan_name is not null) then 'Offering'
	when (e.mandatory='0' and plan_name is  null) then 'Not Offering'
	else null
	END AS STATUS
from e 
left join goglobal_goglobal.v_gp_gg_client_current z on e.client_id=z.id order by 2,4)
select f.*, 
t1.id as client_country, 
count(distinct t2.id) as Pros, 
COUNT(distinct t2.id) filter (where t2.status IN ('2','3','4')) as aCTIVE_PROS,
COUNT(distinct t2.id) filter (where t2.status = '1') as New,
COUNT(distinct t2.id) filter (where t2.status = '2') as Onb,
COUNT(distinct t2.id) filter (where t2.status = '3') as Act,
COUNT(distinct t2.id) filter (where t2.status = '4') as Term,
COUNT(distinct t2.id) filter (where t2.status = '5') as inac,
case when (COUNT(distinct t2.id) filter (where t2.status IN ('2','3','4')))>>0 then 'a' else 'b' end as ActivePros
from f 
left join goglobal_goglobal.v_gp_gg_client_country_current t1 on f.client_id=t1.client_id and f.country_id=t1.country_id
left join goglobal_goglobal.v_gp_gg_professional_current t2 on t1.id=t2.client_country_id
group by 1,2,3,4,5,6,7,8,9,10,11,12"
e984b60b-98ec-cf9c-e332-c82a17d53ae5,client (bronze_classic_goglobal.client) (bronze_classic_goglobal),,
dd4bd74e-993c-07c7-27fe-58a987c168f2,Custom SQL Query (gpbidb) (2),postgres,"WITH vital_few as (SELECT DISTINCT
a.id as acc_id,
a.name as acc_name,
a.partner_agreement_effective_date__c,
a.vital_few__c,
b.vital_few_account_health_status__c
FROM salesforce.v_gp_sfdc_account_current as a 
LEFT JOIN salesforce.v_gp_sfdc_account_current_pacific_time as b 
ON a.id=b.id),
SFDC AS (WITH SQLs as (SELECT DISTINCT  
				date_trunc('quarter',point_time_date)::date as quarter, 
				account_id,
				COUNT(DISTINCT lead_or_opp_id)  AS sqls
	FROM salesforce.v_gp_sfdc_marketing_mat_view
	WHERE (opp_type <<>> 'Existing Business' OR opp_type IS NULL)
	AND cohort_stage='MQL to SQL'
	AND (partner_acq_opps IS NULL OR partner_acq_opps <<>> 'Yes')
	AND (record_type_opps IS NULL OR record_type_opps <<>> 'Potential Partner Opportunity')
	AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
	AND point_time_date BETWEEN '2023-01-01' AND '2023-07-01'
	GROUP BY 1,2)
select account_id,
sum	(CASE WHEN quarter='2023-01-01' THEN sqls ELSE 0 END) as Q12023,
sum	(CASE WHEN quarter='2023-04-01' THEN sqls ELSE 0 END) as Q22023,
sum	(CASE WHEN quarter='2023-07-01' THEN sqls ELSE 0 END) as Q32023	
FROM SQLs
GROUP BY 1)

SELECT vital_few.*, SFDC.Q12023, SFDC.Q22023, SFDC.Q32023
FROM vital_few
LEFT JOIN SFDC
ON vital_few.acc_id=SFDC.account_id"
dd4bd74e-993c-07c7-27fe-58a987c168f2,Custom SQL Query (gpbidb),postgres,"WITH v_gp_sfdc_leads_and_opportunities AS (
         SELECT DISTINCT account.id AS account_id,
            account.name AS account_name,
                CASE
                    WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    ELSE date_trunc('month'::text, opps.created_date)
                END AS mql_cohort_month,
            leads.id AS lead_id,
            opps.b_d_r__date__c,
            opps.id AS opp_id,
            leads.is_converted,
            leads.converted_opportunity_id,
            leads.country AS lead_country,
            leads.campaign__source__c AS campaign_name,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    ELSE NULL::text
                END AS lead_disqualified_reason,
            leads.status AS lead_status,
            opps.opportunity__status__c AS opp_status,
            opps.closed__lost__c,
            leads.country_code AS lead_country_code,
            leads.lead_tier_c,
            opps.lead_source_tier_c,
            leads.bdr_unqualified_reason__c AS bdr_unqualified_reason,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    ELSE NULL::text
                END AS country_code,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    ELSE NULL::text
                END AS client_country,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    ELSE NULL::text
                END AS client_region,
            leads.created_date AS mql_date,
            leads.converted_date,
            leads.partner_acquisition__c AS partner_acq_leads,
            -- usr_lead_opp.leads_owner_name,
            -- usr_lead_opp.leads_owner_manager,
            opps.created_date,
            opps.sales__accepted__date__c AS sal_accepted_date,
            opps.s_a_l__c,
            opps.s_a_l_by__sales__c,
            opps.record_type_bi__c,
            opps.close_date AS msa_date,
            opps.stage_name,
            opps.partner_acquisition__c AS partner_acq_opps,
            opps.is_won AS opp_won,
            opps.record_type_text_id_c AS record_type_opps,
            -- usr_lead_opp.opps_owner_name,
            -- usr_lead_opp.opps_owner_manager,
            opps.name AS opp_name,
            opps.type AS opp_type,
            acc_partn.partner_level__c AS partner_level,
            opps.pricing_model__c AS pricing_model_opps,
                CASE
                    WHEN leads.lead_source IS NULL THEN opps.lead_source
                    ELSE leads.lead_source
                END::text AS lead_or_opp_source,
            -- usr_lead_opp.partner_development_owner,
            -- usr_lead_opp.bdr_owner_name,
            -- usr_lead_opp.bdr_manager_name,
            acc_partn.name AS partner,
            acc_partn.client_region_billing_country AS partner_region,
            account.type AS account_type,
            account.pricing_model__c AS acc_pricing_model,
                CASE
                    WHEN (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) 
	 				AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) 
	 				-- AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text) 
	 				THEN 'Non Partner Opp or Existing Business'::text
                    ELSE 'Partner Opp or Existing Business'::text
                END AS opp_go_flag,
            opps.immediate_headcount_c,
            opps.headcount_c,
            opps.de_country_c,
            opps.closed_lost_category_detail_c,
            opps.incumbent_solution_c,
            opps.competitorsthatare_involved_c,
            opps.contact_id,
            opps.primary_quotes_pricing_model_c,
            opps.competitors__involved__c,
            opps.other__competitor__c,
            opps.update_time AS fivetran_synced_opps,
            opps.total_professionals_c,
            leads.update_time AS fivetran_synced_leads,
            leads.company,
            leads.name,
            leads.email,
            acc_partn.billing_country AS partner_country,
            opps.existing_business_deal_classification_c,
            opps.existing_business_opp_type_c,
            opps.existing_business_opp_type_detail_c,
            users.name AS opp_owner_name,
            acc_partn.partner_agreement_effective_date__c AS partner_agreement_effective_date_c,
                CASE
                    WHEN leads.converted_opportunity_id IS NULL THEN 1::bigint
                    ELSE rank() OVER (PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date)
                END AS row_num,
            acc_partn.partner_vertical__c,
            acc_partn.vital_few__c as vital_few_partner,
			account.vital_few__c as vital_few_account,
            opps.opportunity_score_segment_c AS opps_score_segment,
            leads.opportunity_score_segment_c AS lead_score_segment,
			leads.sales_motion_formula__c AS sales_motion_lead,
            opps.sales_motion_formula__c AS sales_motion_opp
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
             LEFT JOIN salesforce.v_gp_sfdc_user_current users ON users.id::text = opps.owner_id::text
             --LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_or_opp_id::text =
    				-- CASE
                    -- WHEN leads.id IS NULL THEN opps.id
                    -- ELSE leads.id
                -- END::text
        ), mql AS (
         SELECT DISTINCT 'MQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.lead_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.mql_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            -- v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            -- v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.sales_motion_lead AS sales_motion
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE (v_gp_sfdc_leads_and_opportunities.partner_acq_leads::text <<>> 'Yes'::text OR v_gp_sfdc_leads_and_opportunities.partner_acq_leads IS NULL) AND v_gp_sfdc_leads_and_opportunities.lead_id IS NOT NULL
        ), mql_to_sql AS (
         SELECT DISTINCT 'MQL to SQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.created_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_id IS NOT NULL
        ), sql_to_sal AS (
         SELECT DISTINCT 'SQL to SAL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c::text = 'Yes'::text
        ), sal_to_msa AS (
         SELECT DISTINCT 'SAL to MSA'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = true
        ), closed_lost AS (
         SELECT DISTINCT 'Closed Lost'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = false AND v_gp_sfdc_leads_and_opportunities.stage_name::text = 'Closed Lost'::text
        ), full_union AS (
         SELECT mql.cohort_stage,
            mql.account_id,
            mql.account_name,
            mql.b_d_r__date__c,
            mql.lead_or_opp_id,
            mql.point_time_date,
            mql.mql_cohort_month,
            mql.lead_id,
            mql.opp_id,
            mql.is_converted,
            mql.converted_opportunity_id,
            mql.lead_country,
            mql.campaign_name,
            mql.lead_disqualified_reason,
            mql.lead_status,
            mql.opp_status,
            mql.closed__lost__c,
            mql.lead_country_code,
            mql.country_code,
            mql.tier,
            mql.bdr_unqualified_reason,
            mql.client_region,
            mql.client_country,
            mql.mql_date,
            mql.converted_date,
            mql.partner_acq_leads,
            --mql.leads_owner_name,
            --mql.leads_owner_manager,
            mql.created_date,
            mql.sal_accepted_date,
            mql.s_a_l__c,
            mql.s_a_l_by__sales__c,
            mql.record_type_bi__c,
            mql.msa_date,
            mql.stage_name,
            mql.partner_acq_opps,
            mql.opp_won,
            mql.record_type_opps,
            mql.pricing_model_opps,
            --mql.opps_owner_name,
            --mql.opps_owner_manager,
            mql.opp_name,
            mql.opp_type,
            mql.partner_level,
            mql.lead_or_opp_source,
            --mql.partner_development_owner,
            --mql.bdr_owner_name,
            --mql.bdr_manager_name,
            mql.partner,
            mql.partner_region,
            mql.account_type,
            mql.acc_pricing_model,
            mql.opp_go_flag,
            mql.immediate_headcount_c,
            mql.headcount_c,
            mql.de_country_c,
            mql.closed_lost_category_detail_c,
            mql.incumbent_solution_c,
            mql.competitorsthatare_involved_c,
            mql.contact_id,
            mql.primary_quotes_pricing_model_c,
            mql.competitors__involved__c,
            mql.other__competitor__c,
            mql.fivetran_synced_opps,
            mql.fivetran_synced_leads,
            mql.partner_country,
            mql.existing_business_deal_classification_c,
            mql.existing_business_opp_type_c,
            mql.existing_business_opp_type_detail_c,
            mql.opp_owner_name,
            mql.row_num,
            mql.partner_vertical__c,
            mql.vital_few_partner,
			mql.vital_few_account,
            mql.partner_agreement_effective_date_c,
            mql.opps_score_segment,
            mql.lead_score_segment,
			mql.sales_motion
           FROM mql
        UNION ALL
         SELECT mql_to_sql.cohort_stage,
            mql_to_sql.account_id,
            mql_to_sql.account_name,
            mql_to_sql.b_d_r__date__c,
            mql_to_sql.lead_or_opp_id,
            mql_to_sql.point_time_date,
            mql_to_sql.mql_cohort_month,
            mql_to_sql.lead_id,
            mql_to_sql.opp_id,
            mql_to_sql.is_converted,
            mql_to_sql.converted_opportunity_id,
            mql_to_sql.lead_country,
            mql_to_sql.campaign_name,
            mql_to_sql.lead_disqualified_reason,
            mql_to_sql.lead_status,
            mql_to_sql.opp_status,
            mql_to_sql.closed__lost__c,
            mql_to_sql.lead_country_code,
            mql_to_sql.country_code,
            mql_to_sql.tier,
            mql_to_sql.bdr_unqualified_reason,
            mql_to_sql.client_region,
            mql_to_sql.client_country,
            mql_to_sql.mql_date,
            mql_to_sql.converted_date,
            mql_to_sql.partner_acq_leads,
            --mql_to_sql.leads_owner_name,
           -- mql_to_sql.leads_owner_manager,
            mql_to_sql.created_date,
            mql_to_sql.sal_accepted_date,
            mql_to_sql.s_a_l__c,
            mql_to_sql.s_a_l_by__sales__c,
            mql_to_sql.record_type_bi__c,
            mql_to_sql.msa_date,
            mql_to_sql.stage_name,
            mql_to_sql.partner_acq_opps,
            mql_to_sql.opp_won,
            mql_to_sql.record_type_opps,
            mql_to_sql.pricing_model_opps,
            --mql_to_sql.opps_owner_name,
            --mql_to_sql.opps_owner_manager,
            mql_to_sql.opp_name,
            mql_to_sql.opp_type,
            mql_to_sql.partner_level,
            mql_to_sql.lead_or_opp_source,
            --mql_to_sql.partner_development_owner,
            --mql_to_sql.bdr_owner_name,
            --mql_to_sql.bdr_manager_name,
            mql_to_sql.partner,
            mql_to_sql.partner_region,
            mql_to_sql.account_type,
            mql_to_sql.acc_pricing_model,
            mql_to_sql.opp_go_flag,
            mql_to_sql.immediate_headcount_c,
            mql_to_sql.headcount_c,
            mql_to_sql.de_country_c,
            mql_to_sql.closed_lost_category_detail_c,
            mql_to_sql.incumbent_solution_c,
            mql_to_sql.competitorsthatare_involved_c,
            mql_to_sql.contact_id,
            mql_to_sql.primary_quotes_pricing_model_c,
            mql_to_sql.competitors__involved__c,
            mql_to_sql.other__competitor__c,
            mql_to_sql.fivetran_synced_opps,
            mql_to_sql.fivetran_synced_leads,
            mql_to_sql.partner_country,
            mql_to_sql.existing_business_deal_classification_c,
            mql_to_sql.existing_business_opp_type_c,
            mql_to_sql.existing_business_opp_type_detail_c,
            mql_to_sql.opp_owner_name,
            mql_to_sql.row_num,
            mql_to_sql.partner_vertical__c,
            mql_to_sql.vital_few_partner,
			mql_to_sql.vital_few_account,
            mql_to_sql.partner_agreement_effective_date_c,
            mql_to_sql.opps_score_segment,
            mql_to_sql.lead_score_segment,
			mql_to_sql.sales_motion
           FROM mql_to_sql
        UNION ALL
         SELECT sql_to_sal.cohort_stage,
            sql_to_sal.account_id,
            sql_to_sal.account_name,
            sql_to_sal.b_d_r__date__c,
            sql_to_sal.lead_or_opp_id,
            sql_to_sal.point_time_date,
            sql_to_sal.mql_cohort_month,
            sql_to_sal.lead_id,
            sql_to_sal.opp_id,
            sql_to_sal.is_converted,
            sql_to_sal.converted_opportunity_id,
            sql_to_sal.lead_country,
            sql_to_sal.campaign_name,
            sql_to_sal.lead_disqualified_reason,
            sql_to_sal.lead_status,
            sql_to_sal.opp_status,
            sql_to_sal.closed__lost__c,
            sql_to_sal.lead_country_code,
            sql_to_sal.country_code,
            sql_to_sal.tier,
            sql_to_sal.bdr_unqualified_reason,
            sql_to_sal.client_region,
            sql_to_sal.client_country,
            sql_to_sal.mql_date,
            sql_to_sal.converted_date,
            sql_to_sal.partner_acq_leads,
            --sql_to_sal.leads_owner_name,
            --sql_to_sal.leads_owner_manager,
            sql_to_sal.created_date,
            sql_to_sal.sal_accepted_date,
            sql_to_sal.s_a_l__c,
            sql_to_sal.s_a_l_by__sales__c,
            sql_to_sal.record_type_bi__c,
            sql_to_sal.msa_date,
            sql_to_sal.stage_name,
            sql_to_sal.partner_acq_opps,
            sql_to_sal.opp_won,
            sql_to_sal.record_type_opps,
            sql_to_sal.pricing_model_opps,
            --sql_to_sal.opps_owner_name,
            --sql_to_sal.opps_owner_manager,
            sql_to_sal.opp_name,
            sql_to_sal.opp_type,
            sql_to_sal.partner_level,
            sql_to_sal.lead_or_opp_source,
            --sql_to_sal.partner_development_owner,
            --sql_to_sal.bdr_owner_name,
            --sql_to_sal.bdr_manager_name,
            sql_to_sal.partner,
            sql_to_sal.partner_region,
            sql_to_sal.account_type,
            sql_to_sal.acc_pricing_model,
            sql_to_sal.opp_go_flag,
            sql_to_sal.immediate_headcount_c,
            sql_to_sal.headcount_c,
            sql_to_sal.de_country_c,
            sql_to_sal.closed_lost_category_detail_c,
            sql_to_sal.incumbent_solution_c,
            sql_to_sal.competitorsthatare_involved_c,
            sql_to_sal.contact_id,
            sql_to_sal.primary_quotes_pricing_model_c,
            sql_to_sal.competitors__involved__c,
            sql_to_sal.other__competitor__c,
            sql_to_sal.fivetran_synced_opps,
            sql_to_sal.fivetran_synced_leads,
            sql_to_sal.partner_country,
            sql_to_sal.existing_business_deal_classification_c,
            sql_to_sal.existing_business_opp_type_c,
            sql_to_sal.existing_business_opp_type_detail_c,
            sql_to_sal.opp_owner_name,
            sql_to_sal.row_num,
            sql_to_sal.partner_vertical__c,
            sql_to_sal.vital_few_partner,
			sql_to_sal.vital_few_account,
            sql_to_sal.partner_agreement_effective_date_c,
            sql_to_sal.opps_score_segment,
            sql_to_sal.lead_score_segment,
			sql_to_sal.sales_motion
           FROM sql_to_sal
        UNION ALL
         SELECT sal_to_msa.cohort_stage,
            sal_to_msa.account_id,
            sal_to_msa.account_name,
            sal_to_msa.b_d_r__date__c,
            sal_to_msa.lead_or_opp_id,
            sal_to_msa.point_time_date,
            sal_to_msa.mql_cohort_month,
            sal_to_msa.lead_id,
            sal_to_msa.opp_id,
            sal_to_msa.is_converted,
            sal_to_msa.converted_opportunity_id,
            sal_to_msa.lead_country,
            sal_to_msa.campaign_name,
            sal_to_msa.lead_disqualified_reason,
            sal_to_msa.lead_status,
            sal_to_msa.opp_status,
            sal_to_msa.closed__lost__c,
            sal_to_msa.lead_country_code,
            sal_to_msa.country_code,
            sal_to_msa.tier,
            sal_to_msa.bdr_unqualified_reason,
            sal_to_msa.client_region,
            sal_to_msa.client_country,
            sal_to_msa.mql_date,
            sal_to_msa.converted_date,
            sal_to_msa.partner_acq_leads,
            --sal_to_msa.leads_owner_name,
            --sal_to_msa.leads_owner_manager,
            sal_to_msa.created_date,
            sal_to_msa.sal_accepted_date,
            sal_to_msa.s_a_l__c,
            sal_to_msa.s_a_l_by__sales__c,
            sal_to_msa.record_type_bi__c,
            sal_to_msa.msa_date,
            sal_to_msa.stage_name,
            sal_to_msa.partner_acq_opps,
            sal_to_msa.opp_won,
            sal_to_msa.record_type_opps,
            sal_to_msa.pricing_model_opps,
            --sal_to_msa.opps_owner_name,
            --sal_to_msa.opps_owner_manager,
            sal_to_msa.opp_name,
            sal_to_msa.opp_type,
            sal_to_msa.partner_level,
            sal_to_msa.lead_or_opp_source,
            --sal_to_msa.partner_development_owner,
            --sal_to_msa.bdr_owner_name,
            --sal_to_msa.bdr_manager_name,
            sal_to_msa.partner,
            sal_to_msa.partner_region,
            sal_to_msa.account_type,
            sal_to_msa.acc_pricing_model,
            sal_to_msa.opp_go_flag,
            sal_to_msa.immediate_headcount_c,
            sal_to_msa.headcount_c,
            sal_to_msa.de_country_c,
            sal_to_msa.closed_lost_category_detail_c,
            sal_to_msa.incumbent_solution_c,
            sal_to_msa.competitorsthatare_involved_c,
            sal_to_msa.contact_id,
            sal_to_msa.primary_quotes_pricing_model_c,
            sal_to_msa.competitors__involved__c,
            sal_to_msa.other__competitor__c,
            sal_to_msa.fivetran_synced_opps,
            sal_to_msa.fivetran_synced_leads,
            sal_to_msa.partner_country,
            sal_to_msa.existing_business_deal_classification_c,
            sal_to_msa.existing_business_opp_type_c,
            sal_to_msa.existing_business_opp_type_detail_c,
            sal_to_msa.opp_owner_name,
            sal_to_msa.row_num,
            sal_to_msa.partner_vertical__c,
            sal_to_msa.vital_few_partner,
			sal_to_msa.vital_few_account,
            sal_to_msa.partner_agreement_effective_date_c,
            sal_to_msa.opps_score_segment,
            sal_to_msa.lead_score_segment,
			sal_to_msa.sales_motion
           FROM sal_to_msa
        UNION ALL
         SELECT closed_lost.cohort_stage,
            closed_lost.account_id,
            closed_lost.account_name,
            closed_lost.b_d_r__date__c,
            closed_lost.lead_or_opp_id,
            closed_lost.point_time_date,
            closed_lost.mql_cohort_month,
            closed_lost.lead_id,
            closed_lost.opp_id,
            closed_lost.is_converted,
            closed_lost.converted_opportunity_id,
            closed_lost.lead_country,
            closed_lost.campaign_name,
            closed_lost.lead_disqualified_reason,
            closed_lost.lead_status,
            closed_lost.opp_status,
            closed_lost.closed__lost__c,
            closed_lost.lead_country_code,
            closed_lost.country_code,
            closed_lost.tier,
            closed_lost.bdr_unqualified_reason,
            closed_lost.client_region,
            closed_lost.client_country,
            closed_lost.mql_date,
            closed_lost.converted_date,
            closed_lost.partner_acq_leads,
            --closed_lost.leads_owner_name,
            --closed_lost.leads_owner_manager,
            closed_lost.created_date,
            closed_lost.sal_accepted_date,
            closed_lost.s_a_l__c,
            closed_lost.s_a_l_by__sales__c,
            closed_lost.record_type_bi__c,
            closed_lost.msa_date,
            closed_lost.stage_name,
            closed_lost.partner_acq_opps,
            closed_lost.opp_won,
            closed_lost.record_type_opps,
            closed_lost.pricing_model_opps,
            --closed_lost.opps_owner_name,
            --closed_lost.opps_owner_manager,
            closed_lost.opp_name,
            closed_lost.opp_type,
            closed_lost.partner_level,
            closed_lost.lead_or_opp_source,
            --closed_lost.partner_development_owner,
            --closed_lost.bdr_owner_name,
            --closed_lost.bdr_manager_name,
            closed_lost.partner,
            closed_lost.partner_region,
            closed_lost.account_type,
            closed_lost.acc_pricing_model,
            closed_lost.opp_go_flag,
            closed_lost.immediate_headcount_c,
            closed_lost.headcount_c,
            closed_lost.de_country_c,
            closed_lost.closed_lost_category_detail_c,
            closed_lost.incumbent_solution_c,
            closed_lost.competitorsthatare_involved_c,
            closed_lost.contact_id,
            closed_lost.primary_quotes_pricing_model_c,
            closed_lost.competitors__involved__c,
            closed_lost.other__competitor__c,
            closed_lost.fivetran_synced_opps,
            closed_lost.fivetran_synced_leads,
            closed_lost.partner_country,
            closed_lost.existing_business_deal_classification_c,
            closed_lost.existing_business_opp_type_c,
            closed_lost.existing_business_opp_type_detail_c,
            closed_lost.opp_owner_name,
            closed_lost.row_num,
            closed_lost.partner_vertical__c,
            closed_lost.vital_few_partner,
			closed_lost.vital_few_account,
            closed_lost.partner_agreement_effective_date_c,
            closed_lost.opps_score_segment,
            closed_lost.lead_score_segment,
			closed_lost.sales_motion
           FROM closed_lost
        )
 SELECT DISTINCT full_union.cohort_stage,
    full_union.account_id,
    full_union.account_name,
    full_union.b_d_r__date__c,
    full_union.lead_or_opp_id,
    full_union.point_time_date,
    full_union.mql_cohort_month,
    full_union.lead_id,
    full_union.opp_id,
    full_union.is_converted,
    full_union.converted_opportunity_id,
    full_union.lead_country,
    full_union.campaign_name,
    full_union.lead_disqualified_reason,
    full_union.lead_status,
    full_union.opp_status,
    full_union.closed__lost__c,
    full_union.lead_country_code,
    full_union.country_code,
    full_union.tier,
    full_union.bdr_unqualified_reason,
    full_union.client_region,
    full_union.client_country,
    full_union.mql_date,
    full_union.converted_date,
    full_union.partner_acq_leads,
    --full_union.leads_owner_name,
    --full_union.leads_owner_manager,
    full_union.created_date,
    full_union.sal_accepted_date,
    full_union.s_a_l__c,
    full_union.s_a_l_by__sales__c,
    full_union.record_type_bi__c,
    full_union.msa_date,
    full_union.stage_name,
    full_union.partner_acq_opps,
    full_union.opp_won,
    full_union.record_type_opps,
    full_union.pricing_model_opps,
    --full_union.opps_owner_name,
    --full_union.opps_owner_manager,
    full_union.opp_name,
    full_union.opp_type,
    full_union.partner_level,
    full_union.lead_or_opp_source,
    --full_union.partner_development_owner,
    --full_union.bdr_owner_name,
    --full_union.bdr_manager_name,
    full_union.partner,
    full_union.partner_region,
    full_union.account_type,
    full_union.acc_pricing_model,
    full_union.opp_go_flag,
    full_union.immediate_headcount_c,
    full_union.headcount_c,
    full_union.de_country_c,
    full_union.closed_lost_category_detail_c,
    full_union.incumbent_solution_c,
    full_union.competitorsthatare_involved_c,
    full_union.contact_id,
    full_union.primary_quotes_pricing_model_c,
    full_union.competitors__involved__c,
    full_union.other__competitor__c,
    full_union.fivetran_synced_opps,
    full_union.fivetran_synced_leads,
    full_union.partner_country,
    full_union.existing_business_deal_classification_c,
    full_union.existing_business_opp_type_c,
    full_union.existing_business_opp_type_detail_c,
    full_union.opp_owner_name,
    full_union.row_num,
    full_union.partner_vertical__c,
    full_union.vital_few_partner,
	full_union.vital_few_account,
    full_union.partner_agreement_effective_date_c,
    full_union.opps_score_segment,
    full_union.lead_score_segment,
	full_union.sales_motion
   FROM full_union
  WHERE full_union.row_num = 1"
dd50cdb4-0471-9950-69a5-7ba443233256,Contractor Reporting (gpbidb),postgres,"WITH SFDC AS (SELECT account.client_region_billing_country AS client_region,
	account.billing_country AS client_country,
	opps.id AS opp_id,
	opps.lead_source,
	opps.s_a_l_by__sales__c,
	dev_own.name AS partner_development_owner,
	acc_partn.name AS partner,
	--opps.record_type_bi__c AS record_type,
	--opps.partner_acquisition__c AS partner_acq_opps,
	opps.type AS opp_type,
	opps.stage_name,
	opps.created_date,
        opps.close_date,
        opps.sales__accepted__date__c,
			  opps.is_won,
	opps.what_is_your_primary_product_interest__c AS what_ppi,
    sbqq.is_gp_contractor_customer_c AS gp_contractor_customer,
    sbqq.pricing_model_c AS pricing_model_primary_quote,
    sbqq.sbqq_primary_c AS primary_quote
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
LEFT JOIN salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
LEFT JOIN
(SELECT id, sbqq_opportunity_2_c, is_gp_contractor_customer_c, pricing_model_c, sbqq_primary_c
	FROM salesforce.sbqq_quote_c
	WHERE is_deleted = FALSE
	AND sbqq_primary_c = TRUE
) sbqq ON opps.id=sbqq.sbqq_opportunity_2_c
WHERE 
(opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text)),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      created_date::date as Point_time_date,
      *
   From SFDC
   Where --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	opp_id is not null
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      sales__accepted__date__c::date as Point_time_date,
      *
   From SFDC
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	s_a_l_by__sales__c= 'Yes'
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      close_date::date as Point_time_date,
      *
   From SFDC
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	is_won ='true'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
   FULL_UNION as (
	SELECT * FROM MQL_to_SQL
UNION ALL
	SELECT * FROM SQL_to_SAL
UNION ALL
	SELECT * FROM SAL_to_MSA)
SELECT * FROM FULL_UNION"
dd50cdb4-0471-9950-69a5-7ba443233256,Custom SQL Query (gpbidb),postgres,"With 
Leads_Opps as ( /*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
				Select Distinct
					CASE
                    	WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    	ELSE date_trunc('month'::text, opps.created_date)
                	END AS MQL_Cohort_Month,
					leads.id as lead_id,
					opps.id as opp_id,
					leads.is_converted,
					leads.converted_opportunity_id,
					CASE
						WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
						WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						ELSE NULL::text
					END AS client_region,
					leads.created_date AS mql_date,
					leads.converted_date,
					leads.partner_acquisition__c AS partner_acq_leads,
					leads_owner.name as leads_owner_name,
					leads_owner_manager.name as leads_owner_manager,
					opps_owner.name as opps_owner_name,
					opps_owner_manager.name as opps_owner_manager, 
					opps.created_date,
					opps.sales__accepted__date__c as SAL_Accepted_Date,
					opps.s_a_l__c,
                    opps.s_a_l_by__sales__c,
					opps.record_type_bi__c,
					opps.close_date AS msa_date,
					opps.stage_name,	
					opps.partner_acquisition__c AS partner_acq_opps,
					opps.type AS opportunity_type,
					opps.is_won AS opp_won, 
					opps.what_is_your_primary_product_interest__c AS what_is_opps,
					opps.record_type_text_id_c AS record_type_opps,
					opps.pricing_model__c AS pricing_model_opps,
					opps.id AS opps_id,
					CASE
                        WHEN leads.lead_source IS NULL THEN opps.lead_source
                        ELSE leads.lead_source
                    END::text as Lead_or_Opp_Source,
					CASE
						WHEN dev_own.name IS NULL THEN 1
						ELSE 0
						END AS Partner_develop_owner_flag,
					CASE
         				WHEN leads.converted_opportunity_id IS NULL THEN leads_owner.name
         				ELSE opps.bdr_owner_name
      					END AS bdr_owner_name,
					CASE
         				WHEN bdr_owner_name IS NULL THEN 1
         				ELSE 0
      					END AS bdr_owner_name_flag,
					CASE
         				WHEN acc_partn.name IS NULL THEN 1
         				ELSE 0
      					END AS Partner_flag,
					CASE
         				WHEN opps.b_d_r__date__c IS NULL THEN 1
         				ELSE 0
      					END AS b_d_r_date_c_flag,
					CASE 
						WHEN (opps.type <<>> 'Existing Business' OR opps.type IS NULL)
					     And (opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
  						 And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
						 And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
					Then 'Non Partner Opp or Existing Business'
					Else 'Partner Opp or Existing Business'
					End as Opp_Go_Flag
				From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             	Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
				Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
				Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner ON opps_owner.id = opps.owner_id
				Left Join salesforce.v_gp_sfdc_user_current leads_owner_manager ON leads_owner_manager.id = leads_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner_manager ON opps_owner_manager.id = opps_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
				LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c = acc_partn.id
				--Where  CASE WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
				--	   ELSE date_trunc('month'::text, opps.created_date)
                --END >>= '2019-01-01'
				), 
     MQL as (
				Select Distinct
					'MQL' as Cohort_Stage, 
		 			lead_id as lead_or_opp_id,
		 			MQL_Date::date as Point_time_date,
		 			leads_owner_name as Lead_or_Opp_Owner_name,
		 			leads_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where (partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) 
		 		And lead_id is not null
				),
MQL_to_SQL as (
				Select Distinct
					'MQL to SQL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					Created_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_id is not null
				),
SQL_to_SAL as (
				Select Distinct
					'SQL to SAL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					SAL_Accepted_Date::date as Point_time_date, 
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And s_a_l_by__sales__c = 'Yes'
				),
SAL_to_MSA as (
				Select Distinct
					'SAL to MSA' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					MSA_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_won ='true'
				AND (pricing_model_opps <<>> 'Contractor Only' OR pricing_model_opps IS NULL)
				),
Full_Union as (
				Select 
					* 
				From MQL
					Union All
				Select 
					* 
				From MQL_to_SQL
					Union AlL
				Select 
					* 
				From SQL_to_SAL
					Union AlL
				Select 
					* 
				From SAL_to_MSA
				),
				--SELECT DISTINCT * FROM Full_Union
				--where lead_or_opp_id in ('0066T000016KebcQAC','0066T000015ryGIQAY','0060W000014Tn0HQAS','0066T000015s5vyQAA','0066T000016Km8fQAC'
										--'0066T000016KsYHQA0','0066T000015rlGgQAI','0066T000016KqClQAK','0066T000015rsKVQAY')
				--where point_time_date between '2021-05-07' AND '2021-07-30'
				--AND cohort_stage='SAL to MSA'
Weekly_Funnel as ( 
				Select Distinct
					Cohort_stage, 
					Client_region,
					Partner_flag,
					Partner_develop_owner_flag,
					b_d_r_date_c_flag,
					bdr_owner_name_flag,
					Coalesce(Lead_or_Opp_Source, 'nulo') as Lead_or_Opp_Source,
					Coalesce(Lead_or_Opp_Owner_Name, 'nulo') as Lead_or_Opp_Owner_Name,
					Coalesce(Lead_or_Opp_Owner_Manager, 'nulo') as Lead_or_Opp_Owner_Manager,
					--point_time_date,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date - '12 weeks'::interval)::date as twelve_weeks_ago, 
					(date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date as Week_at_Friday,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date + '6 days'::interval)::date as Week_at_Next_Thursday,  
					Count(distinct lead_or_opp_id) as Count_Leads_or_opps
					--lead_or_opp_id
				From Full_Union 
				Group by 1,2,3,4,5,6,7,8,9,10,11,12
				Order by cohort_stage, (date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date asc --date_trunc('week', point_time_date + 5)- '5 days'::interval asc
				),
				--select distinct * from Weekly_Funnel 
				--where Week_at_Friday between '2021-05-07' AND '2021-08-05'
				--AND cohort_stage='SAL to MSA'
Date_Catalogue as (
				Select Distinct 
					WAF.Week_at_Friday as Week_at_Friday_C,
					WF.Cohort_stage as Cohort_Stage_c,
					WF.Client_region as Client_region_c,
					WF.Lead_or_Opp_Source as Lead_or_Opp_Source_c,
					WF.Lead_or_Opp_Owner_Name as Lead_or_Opp_Owner_Name_c,
					WF.Lead_or_Opp_Owner_Manager as Lead_or_Opp_Owner_Manager_c,
					WF.Partner_flag as Partner_flag_c,
					WF.Partner_develop_owner_flag as Partner_develop_owner_flag_c,
					WF.b_d_r_date_c_flag as b_d_r_date_c_flag_c,
					WF.bdr_owner_name_flag as bdr_owner_name_flag_c,
					0 as Count_Leads_or_opps_C
				From (Select Distinct Week_at_Friday From Weekly_Funnel) WAF, 
				(Select Distinct Cohort_stage, Client_region, Lead_or_Opp_Source, Lead_or_Opp_Owner_Name, Lead_or_Opp_Owner_Manager, Partner_flag, Partner_develop_owner_flag, b_d_r_date_c_flag, bdr_owner_name_flag from Weekly_funnel) WF 
				Order by WF.Cohort_stage, WAF.Week_at_Friday asc
				), --Select * from Date_Catalogue where cohort_stage_c = 'SAL to MSA' and week_at_friday_c between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC' 
Dates_Aligned as (
				Select Distinct
					DC.*,
					Coalesce(Funnel.twelve_weeks_ago::date, (DC.Week_at_Friday_C - '12 weeks'::interval)::date) as  twelve_weeks_ago,
					Coalesce(Funnel.week_at_next_thursday, (DC.Week_at_Friday_C + '6 days'::interval)::date) as week_at_next_thursday, 
					Coalesce(Funnel.count_leads_or_opps, DC.count_leads_or_opps_c) as Count_leads_or_opps_final
				From Date_Catalogue DC
				Left Join Weekly_funnel Funnel on Funnel.week_at_friday = DC.week_at_friday_c
					and Funnel.cohort_stage = DC.cohort_stage_c
					and Funnel.Client_region = DC.Client_region_c
					and Funnel.Lead_or_Opp_Source = DC.Lead_or_Opp_Source_c
					and Funnel.Lead_or_Opp_Owner_Name = DC.Lead_or_Opp_Owner_Name_C
					and Funnel.Lead_or_Opp_Owner_Manager = DC.Lead_or_Opp_Owner_Manager_C
					and Funnel.Partner_flag = DC.Partner_flag_c
					and Funnel.Partner_develop_owner_flag = DC.Partner_develop_owner_flag_c
					and Funnel.b_d_r_date_c_flag = DC.b_d_r_date_c_flag_c
					and Funnel.bdr_owner_name_flag = DC.bdr_owner_name_flag_c
				) --Select * from Dates_Aligned where Week_at_Friday_C between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC'
Select Distinct 
	WF.Cohort_stage_c,
	WF.Client_region_c,
	WF.Lead_or_Opp_Source_c,
	WF.Lead_or_Opp_Owner_Name_c,
	WF.Lead_or_Opp_Owner_Manager_c,
	WF.Partner_flag_c,
	WF.Partner_develop_owner_flag_c,
	WF.b_d_r_date_c_flag_c,
	WF.bdr_owner_name_flag_c,
	WF.twelve_weeks_ago, 
	WF.Week_at_Friday_c,
	WF.Week_at_Next_Thursday,
	WF.Count_Leads_or_opps_final,
	Sum(L12M.Count_Leads_or_opps_final) as Sum_L12M_Funnel
From Dates_aligned WF
Left Join (select Cohort_stage_c, Client_region_c, Lead_or_Opp_Source_c, Lead_or_Opp_Owner_Name_c, Lead_or_Opp_Owner_Manager_c, Partner_flag_c, Partner_develop_owner_flag_c, b_d_r_date_c_flag_c, bdr_owner_name_flag_c, Week_at_Friday_c, Count_Leads_or_opps_final From Dates_aligned where Count_Leads_or_opps_final<<>> 0) L12M 
	on L12M.Week_at_Friday_c between WF.twelve_weeks_ago and WF.Week_at_Friday_c
	and WF.Cohort_stage_c = L12M.Cohort_stage_c
	and WF.Client_region_c = L12M.Client_region_c
	and WF.Lead_or_Opp_Source_c = L12M.Lead_or_Opp_Source_c
	and WF.Lead_or_Opp_Owner_Name_c = L12M.Lead_or_Opp_Owner_Name_c
	and WF.Lead_or_Opp_Owner_Manager_c = L12M.Lead_or_Opp_Owner_Manager_c
	and WF.Partner_flag_c = L12M.Partner_flag_c
	and WF.Partner_develop_owner_flag_c = L12M.Partner_develop_owner_flag_c
	and WF.b_d_r_date_c_flag_c = L12M.b_d_r_date_c_flag_c
	and WF.bdr_owner_name_flag_c = L12M.bdr_owner_name_flag_c
Group by WF.Cohort_stage_c, WF.Client_region_c, WF.Lead_or_Opp_Source_c, WF.Lead_or_Opp_Owner_Name_c, WF.Lead_or_Opp_Owner_Manager_c, WF.Partner_flag_c, WF.Partner_develop_owner_flag_c, WF.b_d_r_date_c_flag_c, WF.bdr_owner_name_flag_c, WF.twelve_weeks_ago, WF.Week_at_Friday_c, WF.Week_at_Next_Thursday, WF.Count_Leads_or_opps_final
Having  Sum(L12M.Count_Leads_or_opps_final) is not null
Order by WF.Cohort_stage_c, WF.Week_at_Friday_c asc"
dd50cdb4-0471-9950-69a5-7ba443233256,NEW View,,
dd50cdb4-0471-9950-69a5-7ba443233256,NEW View,postgres,"SELECT DISTINCT is_gp_recruit_customer_c,
is_gp_contractor_customer_c,
pricing_model_c,
sbqq_primary_c,
is_deleted,
sbqq_opportunity_2_c
FROM salesforce.sbqq_quote_c
WHERE sbqq_primary_c='TRUE'
and is_deleted='FALSE'"
ddb3fddb-e203-0ba4-12bd-06217a23d3eb,Paid Sources,postgres,"WITH leads AS (
SELECT cal_date, pipeline_stage, stage_name,
CASE WHEN aggregated_lead_source ILIKE '%facebook%' THEN 'Facebook Ads'::text
  WHEN aggregated_lead_source ILIKE '%Adwords%' OR aggregated_lead_source ILIKE '%Google%' THEN 'Google Ads'::text
  WHEN aggregated_lead_source ILIKE '%Linkedin%' OR aggregated_lead_source ILIKE '%LinkedinAds%' THEN 'LinkedIn Ads'::text
  WHEN aggregated_lead_source ILIKE '%Bing%' THEN 'Microsoft Ads'::text
  WHEN aggregated_lead_source ILIKE '%Twitter%' THEN 'Twitter Ads'::text
  WHEN aggregated_lead_source ILIKE '%Website%' THEN 'Website'::text
 ELSE aggregated_lead_source END AS aggregated_lead_source,
 lead_or_opp_id
FROM
(select distinct date_trunc('day', cal_date)::date as cal_date, 'MQL' as Pipeline_stage, stage_name,
 lead_source AS aggregated_lead_source, lead_or_opp_id
from salesforce.v_marketing_dashboard_pacific_time
where pipeline_stage = 'MQL'
and (partner_acquisition__c isnull or partner_acquisition__c = 'No')
--and cal_date between '2021-10-01' and '2021-10-31'
UNION
select distinct date_trunc('day', cal_date)::date as cal_date, 'SQL' as Pipeline_stage,  stage_name,
 CASE WHEN lead_source ISNULL THEN opportunity_lead_source ELSE lead_source END AS aggregated_lead_source, lead_or_opp_id
from salesforce.v_marketing_dashboard_pacific_time
where pipeline_stage = 'SQL'
and (partner_acquisition__c isnull or partner_acquisition__c = 'No')
and (oppotunity_type = 'New Business' or oppotunity_type isnull)
and record_type_text_id_c != 'Potential Partner Opportunity'
--and cal_date between '2021-10-01' and '2021-10-31'
UNION
select distinct date_trunc('day', cal_date)::date as cal_date, 'SAL' as Pipeline_stage, stage_name,
 CASE WHEN lead_source ISNULL THEN opportunity_lead_source ELSE lead_source END AS aggregated_lead_source, lead_or_opp_id
from salesforce.v_marketing_dashboard_pacific_time
where pipeline_stage = 'SAL'
and (partner_acquisition__c isnull or partner_acquisition__c = 'No')
and (oppotunity_type = 'New Business' or oppotunity_type isnull)
and record_type_text_id_c != 'Potential Partner Opportunity'
and s_a_l__c = 'true'
--and cal_date between '2021-10-01' and '2021-10-31'
UNION
select distinct date_trunc('day', cal_date)::date as cal_date,'Closed_Won' as Pipeline_stage, stage_name,
 CASE WHEN lead_source ISNULL THEN opportunity_lead_source ELSE lead_source END AS aggregated_lead_source, lead_or_opp_id
from salesforce.v_marketing_dashboard_pacific_time
where pipeline_stage = 'Qualified Opportunity'
and (partner_acquisition__c isnull or partner_acquisition__c = 'No')
and (oppotunity_type = 'New Business' or oppotunity_type isnull)
and record_type_text_id_c != 'Potential Partner Opportunity'
and is_won = 'True'
--and cal_date between '2021-10-01' and '2021-10-31'
order by 1 desc) Unformat
WHERE aggregated_lead_source ILIKE '%facebook%'
OR (aggregated_lead_source ILIKE '%Adwords%' OR aggregated_lead_source ILIKE '%Google%')
OR (aggregated_lead_source ILIKE '%Linkedin%' OR aggregated_lead_source ILIKE '%LinkedinAds%')
OR aggregated_lead_source ILIKE '%Bing%'
OR aggregated_lead_source ILIKE '%Twitter%'
OR aggregated_lead_source ILIKE '%Website%'
                ),
STAGES AS (
            SELECT CAL_DATE, AGGREGATED_LEAD_SOURCE, 
            COUNT(DISTINCT LEAD_OR_OPP_ID) FILTER (WHERE PIPELINE_STAGE='MQL') AS MQL,
            COUNT(DISTINCT LEAD_OR_OPP_ID) FILTER (WHERE PIPELINE_STAGE='SQL') AS SQL,
            COUNT(DISTINCT LEAD_OR_OPP_ID) FILTER (WHERE PIPELINE_STAGE='SAL') AS SAL,
			COUNT(DISTINCT LEAD_OR_OPP_ID) FILTER (WHERE PIPELINE_STAGE='Closed_Won') AS Closed_Won
            FROM LEADS
            GROUP BY 1,2
            ),
-- SELECT * FROM STAGES
Campaigns as(
SELECT DISTINCT bc.date AS cal_date,
 'Facebook Ads'::text AS channel,
 bc.campaign_id::text,
 bc.campaign_name::text,
 NULL::text AS campaign_type,
 bc.country AS country_code,
 SUM(bc.inline_link_clicks) AS clicks,
 SUM(bc.impressions) AS impressions,
 0::numeric AS conversions,
 SUM(bc.spend) AS spend
FROM facebook_ad_insights_hist.basic_campaign_per_country bc
GROUP BY 1, 2, 3, 4, 5, 6
UNION ALL
SELECT gpr.date AS cal_date,
 CASE WHEN (gpr.ad_network_type = 'YOUTUBE_WATCH' OR gpr.ad_network_type = 'YOUTUBE_SEARCH') THEN 'YouTube' ELSE 'Google Ads' END AS channel,
 gpr.campaign_id::text,
 gpr.campaign_name,
 ch.advertising_channel_type AS campaign_type,
 gpr.country_criterion_id::character varying AS country_code,
 SUM(gpr.clicks) AS clicks,
 SUM(gpr.impressions) AS impressions,
 SUM(gpr.conversions) AS conversions,
 ROUND((SUM(gpr.cost_micros)/1000000::numeric),2) AS spend
FROM google_ads_new_api.geo_performance_report gpr
LEFT JOIN
(SELECT id, advertising_channel_type
 FROM google_ads_new_api.campaign_history t1
 WHERE updated_at = (SELECT MAX(tmax.updated_at) FROM google_ads.campaign_history tmax WHERE t1.id = tmax.id)) ch ON gpr.campaign_id = ch.id
LEFT JOIN google_ads_new_api.campaign_criterion_proximity_history ccph
ON gpr.country_criterion_id = ccph.criterion_id
LEFT JOIN repo.v_gp_mdm_region mdm ON ccph.country_code = mdm.country_code
GROUP BY 1, 2, 3, 4, 5, 6
UNION ALL
SELECT DISTINCT ca.date::date AS cal_date,
 'LinkedIn Ads'::text AS channel,
 ca.campaign_id::text,
 ch.name::text AS campaign_name,
 ch.type AS campaign_type,
 mdm.country_code,
 SUM(ca.click) AS clicks,
 SUM(ca.impression) AS impressions,
 SUM(ca.external_website_conversion) AS conversions,
 SUM(ca.cost_in_usd::numeric) AS spend
FROM linkedin_ads.demographic_campaign_metrics ca
LEFT JOIN
(SELECT DISTINCT id, name, type
FROM linkedin_ads.campaign_history t1
WHERE last_modified_time = (SELECT MAX(last_modified_time) FROM linkedin_ads.campaign_history tmax WHERE t1.id = tmax.id)
ORDER BY 1) ch ON ca.campaign_id = ch.id::text
LEFT JOIN linkedin_ads.demographic_country dc ON ca.demographic_country_id = dc.id
LEFT JOIN repo.v_gp_mdm_region mdm ON dc.name = mdm.country
GROUP BY 1, 2, 3, 4, 5, 6
UNION ALL
SELECT DISTINCT cdp.date AS cal_date,
 'Microsoft Ads'::text AS channel,
 cdp.campaign_id::text,
 ch.name::text AS campaign_name,
 ch.type AS campaign_type,
 /*CASE WHEN cdp.country = 'Czechia' THEN  'Czech Republic'
 WHEN cdp.country = 'Hong Kong SAR' THEN 'Hong Kong (China)'
 WHEN (cdp.country = 'Congo' OR cdp.country = 'Congo (DRC)') THEN 'Congo, Democratic Republic of the'
 WHEN cdp.country = 'Puerto Rico' THEN 'Puerto Rico (USA)' ELSE cdp.country END AS country,*/
 mdm.country_code,
 SUM(cdp.clicks) AS clicks,
 SUM(cdp.impressions) AS impressions,
 SUM(cdp.conversions) AS conversions,
 SUM(cdp.spend) AS spend
FROM microsoft_ads.user_location_performance_daily_report cdp
LEFT JOIN
(SELECT DISTINCT id, name, type
FROM microsoft_ads.campaign_history t1
WHERE modified_time = (SELECT MAX(modified_time) FROM microsoft_ads.campaign_history tmax WHERE t1.id = tmax.id)
ORDER BY 1) ch ON cdp.campaign_id = ch.id
LEFT JOIN repo.v_gp_mdm_region mdm ON cdp.country = mdm.country
GROUP BY 1, 2 , 3, 4, 5, 6
UNION ALL
SELECT DISTINCT cr.date AS cal_date,
 'Twitter Ads'::text AS channel,
 cr.campaign_id::text,
 ch.name::text AS campaign_name,
 NULL::text AS campaign_type,
 mdm.country_code,
 SUM(cr.clicks) AS clicks,
 SUM(cr.impressions) AS impressions,
 SUM(cr.follows) AS follows,
 ROUND((SUM(cr.billed_charge_local_micro)/1000000::numeric),2) AS spend
FROM twitter_ads.campaign_locations_report cr
LEFT JOIN
(SELECT DISTINCT id, name
FROM twitter_ads.campaign_history t1
WHERE updated_at = (SELECT MAX(updated_at) FROM twitter_ads.campaign_history tmax WHERE t1.id = tmax.id)
ORDER BY 1) ch ON cr.campaign_id = ch.id
LEFT JOIN repo.v_gp_mdm_region mdm ON cr.segment = mdm.country
GROUP BY 1, 2, 3, 4, 5, 6
ORDER BY 1 DESC, 2
)
, PREV AS (select CASE WHEN campaigns.cal_date IS NULL THEN stages.cal_date ELSE campaigns.cal_date END AS cal_date,
CASE WHEN stages.aggregated_lead_source = 'Website' THEN 'Website' ELSE campaigns.channel END AS channel,
campaigns.campaign_id,
campaigns.campaign_name,
campaigns.campaign_type,
campaigns.country_code,
campaigns.clicks,
campaigns.impressions,
campaigns.conversions,
campaigns.spend,
stages.mql,
stages.sql,
stages.sal,
stages.closed_won
from stages
    full join campaigns
        on campaigns.channel = stages.aggregated_lead_source AND campaigns.cal_date = stages.cal_date
ORDER BY 1, 2, 3)
SELECT * FROM PREV WHERE channel IS NOT NULL"
ddb3fddb-e203-0ba4-12bd-06217a23d3eb,Paid Sources,,
ddb3fddb-e203-0ba4-12bd-06217a23d3eb,Parameter,,
ddb3fddb-e203-0ba4-12bd-06217a23d3eb,general_report_with_goals (google_analytics.general_report_with_goals) (gpbidb),,
ddb3fddb-e203-0ba4-12bd-06217a23d3eb,email_event (hubspot.email_event) (gpbidb),postgres,"SELECT *
FROM hubspot.v_digital_dashboard 
limit 500000"
ddb3fddb-e203-0ba4-12bd-06217a23d3eb,Airtable,postgres,"WITH A AS(
			SELECT date_trunc('month'::text, gp_master_marketing_calendar.start_date::timestamp with time zone) AS month,
	gp_master_marketing_calendar.geo::text,
	gp_master_marketing_calendar.audience::text,
	gp_master_marketing_calendar.type,
			count(gp_master_marketing_calendar.id) AS count
		   	FROM airtable.gp_master_marketing_calendar
		   	where collaborators is not null and name is not null
		  	GROUP BY (date_trunc('month'::text, gp_master_marketing_calendar.start_date::timestamp with time zone)), 
					 gp_master_marketing_calendar.geo::text, gp_master_marketing_calendar.audience::text,gp_master_marketing_calendar.type
		  	ORDER BY (date_trunc('month'::text, gp_master_marketing_calendar.start_date::timestamp with time zone)) DESC, gp_master_marketing_calendar.type),
b as(select a.*, extract(year from a.month) as year,extract(quarter from a.month) as quarter from a)
select b.*
from b"
df60136a-6239-3f56-3565-401bf4b1ce3c,NEW View,,
df60136a-6239-3f56-3565-401bf4b1ce3c,NEW View,postgres,"SELECT DISTINCT is_gp_recruit_customer_c,
is_gp_contractor_customer_c,
pricing_model_c,
sbqq_primary_c,
is_deleted,
sbqq_opportunity_2_c
FROM salesforce.sbqq_quote_c
WHERE sbqq_primary_c='TRUE'
and is_deleted='FALSE'"
df60136a-6239-3f56-3565-401bf4b1ce3c,Contractor Reporting (gpbidb),postgres,"WITH SFDC AS (SELECT account.client_region_billing_country AS client_region,
	account.billing_country AS client_country,
	opps.id AS opp_id,
	opps.lead_source,
	opps.s_a_l_by__sales__c,
	dev_own.name AS partner_development_owner,
	acc_partn.name AS partner,
	--opps.record_type_bi__c AS record_type,
	--opps.partner_acquisition__c AS partner_acq_opps,
	opps.type AS opp_type,
	opps.stage_name,
	opps.created_date,
        opps.close_date,
        opps.sales__accepted__date__c,
			  opps.is_won,
	opps.what_is_your_primary_product_interest__c AS what_ppi,
    sbqq.is_gp_contractor_customer_c AS gp_contractor_customer,
    sbqq.pricing_model_c AS pricing_model_primary_quote,
    sbqq.sbqq_primary_c AS primary_quote
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
LEFT JOIN salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
LEFT JOIN
(SELECT id, sbqq_opportunity_2_c, is_gp_contractor_customer_c, pricing_model_c, sbqq_primary_c
	FROM salesforce.sbqq_quote_c
	WHERE is_deleted = FALSE
	AND sbqq_primary_c = TRUE
) sbqq ON opps.id=sbqq.sbqq_opportunity_2_c
WHERE 
(opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text)),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      created_date::date as Point_time_date,
      *
   From SFDC
   Where --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	opp_id is not null
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      sales__accepted__date__c::date as Point_time_date,
      *
   From SFDC
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	s_a_l_by__sales__c= 'Yes'
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      close_date::date as Point_time_date,
      *
   From SFDC
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	is_won ='true'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
   FULL_UNION as (
	SELECT * FROM MQL_to_SQL
UNION ALL
	SELECT * FROM SQL_to_SAL
UNION ALL
	SELECT * FROM SAL_to_MSA)
SELECT * FROM FULL_UNION"
df60136a-6239-3f56-3565-401bf4b1ce3c,Custom SQL Query (gpbidb),postgres,"With 
Leads_Opps as ( /*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
				Select Distinct
					CASE
                    	WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    	ELSE date_trunc('month'::text, opps.created_date)
                	END AS MQL_Cohort_Month,
					leads.id as lead_id,
					opps.id as opp_id,
					leads.is_converted,
					leads.converted_opportunity_id,
					CASE
						WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
						WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						ELSE NULL::text
					END AS client_region,
					leads.created_date AS mql_date,
					leads.converted_date,
					leads.partner_acquisition__c AS partner_acq_leads,
					leads_owner.name as leads_owner_name,
					leads_owner_manager.name as leads_owner_manager,
					opps_owner.name as opps_owner_name,
					opps_owner_manager.name as opps_owner_manager, 
					opps.created_date,
					opps.sales__accepted__date__c as SAL_Accepted_Date,
					opps.s_a_l__c,
                    opps.s_a_l_by__sales__c,
					opps.record_type_bi__c,
					opps.close_date AS msa_date,
					opps.stage_name,	
					opps.partner_acquisition__c AS partner_acq_opps,
					opps.type AS opportunity_type,
					opps.is_won AS opp_won, 
					opps.what_is_your_primary_product_interest__c AS what_is_opps,
					opps.record_type_text_id_c AS record_type_opps,
					opps.pricing_model__c AS pricing_model_opps,
					opps.id AS opps_id,
					CASE
                        WHEN leads.lead_source IS NULL THEN opps.lead_source
                        ELSE leads.lead_source
                    END::text as Lead_or_Opp_Source,
					CASE
						WHEN dev_own.name IS NULL THEN 1
						ELSE 0
						END AS Partner_develop_owner_flag,
					CASE
         				WHEN leads.converted_opportunity_id IS NULL THEN leads_owner.name
         				ELSE opps.bdr_owner_name
      					END AS bdr_owner_name,
					CASE
         				WHEN bdr_owner_name IS NULL THEN 1
         				ELSE 0
      					END AS bdr_owner_name_flag,
					CASE
         				WHEN acc_partn.name IS NULL THEN 1
         				ELSE 0
      					END AS Partner_flag,
					CASE
         				WHEN opps.b_d_r__date__c IS NULL THEN 1
         				ELSE 0
      					END AS b_d_r_date_c_flag,
					CASE 
						WHEN (opps.type <<>> 'Existing Business' OR opps.type IS NULL)
					     And (opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
  						 And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
						 And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
					Then 'Non Partner Opp or Existing Business'
					Else 'Partner Opp or Existing Business'
					End as Opp_Go_Flag
				From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             	Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
				Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
				Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner ON opps_owner.id = opps.owner_id
				Left Join salesforce.v_gp_sfdc_user_current leads_owner_manager ON leads_owner_manager.id = leads_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner_manager ON opps_owner_manager.id = opps_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
				LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c = acc_partn.id
				--Where  CASE WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
				--	   ELSE date_trunc('month'::text, opps.created_date)
                --END >>= '2019-01-01'
				), 
     MQL as (
				Select Distinct
					'MQL' as Cohort_Stage, 
		 			lead_id as lead_or_opp_id,
		 			MQL_Date::date as Point_time_date,
		 			leads_owner_name as Lead_or_Opp_Owner_name,
		 			leads_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where (partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) 
		 		And lead_id is not null
				),
MQL_to_SQL as (
				Select Distinct
					'MQL to SQL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					Created_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_id is not null
				),
SQL_to_SAL as (
				Select Distinct
					'SQL to SAL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					SAL_Accepted_Date::date as Point_time_date, 
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And s_a_l_by__sales__c = 'Yes'
				),
SAL_to_MSA as (
				Select Distinct
					'SAL to MSA' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					MSA_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_won ='true'
				AND (pricing_model_opps <<>> 'Contractor Only' OR pricing_model_opps IS NULL)
				),
Full_Union as (
				Select 
					* 
				From MQL
					Union All
				Select 
					* 
				From MQL_to_SQL
					Union AlL
				Select 
					* 
				From SQL_to_SAL
					Union AlL
				Select 
					* 
				From SAL_to_MSA
				),
				--SELECT DISTINCT * FROM Full_Union
				--where lead_or_opp_id in ('0066T000016KebcQAC','0066T000015ryGIQAY','0060W000014Tn0HQAS','0066T000015s5vyQAA','0066T000016Km8fQAC'
										--'0066T000016KsYHQA0','0066T000015rlGgQAI','0066T000016KqClQAK','0066T000015rsKVQAY')
				--where point_time_date between '2021-05-07' AND '2021-07-30'
				--AND cohort_stage='SAL to MSA'
Weekly_Funnel as ( 
				Select Distinct
					Cohort_stage, 
					Client_region,
					Partner_flag,
					Partner_develop_owner_flag,
					b_d_r_date_c_flag,
					bdr_owner_name_flag,
					Coalesce(Lead_or_Opp_Source, 'nulo') as Lead_or_Opp_Source,
					Coalesce(Lead_or_Opp_Owner_Name, 'nulo') as Lead_or_Opp_Owner_Name,
					Coalesce(Lead_or_Opp_Owner_Manager, 'nulo') as Lead_or_Opp_Owner_Manager,
					--point_time_date,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date - '12 weeks'::interval)::date as twelve_weeks_ago, 
					(date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date as Week_at_Friday,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date + '6 days'::interval)::date as Week_at_Next_Thursday,  
					Count(distinct lead_or_opp_id) as Count_Leads_or_opps
					--lead_or_opp_id
				From Full_Union 
				Group by 1,2,3,4,5,6,7,8,9,10,11,12
				Order by cohort_stage, (date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date asc --date_trunc('week', point_time_date + 5)- '5 days'::interval asc
				),
				--select distinct * from Weekly_Funnel 
				--where Week_at_Friday between '2021-05-07' AND '2021-08-05'
				--AND cohort_stage='SAL to MSA'
Date_Catalogue as (
				Select Distinct 
					WAF.Week_at_Friday as Week_at_Friday_C,
					WF.Cohort_stage as Cohort_Stage_c,
					WF.Client_region as Client_region_c,
					WF.Lead_or_Opp_Source as Lead_or_Opp_Source_c,
					WF.Lead_or_Opp_Owner_Name as Lead_or_Opp_Owner_Name_c,
					WF.Lead_or_Opp_Owner_Manager as Lead_or_Opp_Owner_Manager_c,
					WF.Partner_flag as Partner_flag_c,
					WF.Partner_develop_owner_flag as Partner_develop_owner_flag_c,
					WF.b_d_r_date_c_flag as b_d_r_date_c_flag_c,
					WF.bdr_owner_name_flag as bdr_owner_name_flag_c,
					0 as Count_Leads_or_opps_C
				From (Select Distinct Week_at_Friday From Weekly_Funnel) WAF, 
				(Select Distinct Cohort_stage, Client_region, Lead_or_Opp_Source, Lead_or_Opp_Owner_Name, Lead_or_Opp_Owner_Manager, Partner_flag, Partner_develop_owner_flag, b_d_r_date_c_flag, bdr_owner_name_flag from Weekly_funnel) WF 
				Order by WF.Cohort_stage, WAF.Week_at_Friday asc
				), --Select * from Date_Catalogue where cohort_stage_c = 'SAL to MSA' and week_at_friday_c between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC' 
Dates_Aligned as (
				Select Distinct
					DC.*,
					Coalesce(Funnel.twelve_weeks_ago::date, (DC.Week_at_Friday_C - '12 weeks'::interval)::date) as  twelve_weeks_ago,
					Coalesce(Funnel.week_at_next_thursday, (DC.Week_at_Friday_C + '6 days'::interval)::date) as week_at_next_thursday, 
					Coalesce(Funnel.count_leads_or_opps, DC.count_leads_or_opps_c) as Count_leads_or_opps_final
				From Date_Catalogue DC
				Left Join Weekly_funnel Funnel on Funnel.week_at_friday = DC.week_at_friday_c
					and Funnel.cohort_stage = DC.cohort_stage_c
					and Funnel.Client_region = DC.Client_region_c
					and Funnel.Lead_or_Opp_Source = DC.Lead_or_Opp_Source_c
					and Funnel.Lead_or_Opp_Owner_Name = DC.Lead_or_Opp_Owner_Name_C
					and Funnel.Lead_or_Opp_Owner_Manager = DC.Lead_or_Opp_Owner_Manager_C
					and Funnel.Partner_flag = DC.Partner_flag_c
					and Funnel.Partner_develop_owner_flag = DC.Partner_develop_owner_flag_c
					and Funnel.b_d_r_date_c_flag = DC.b_d_r_date_c_flag_c
					and Funnel.bdr_owner_name_flag = DC.bdr_owner_name_flag_c
				) --Select * from Dates_Aligned where Week_at_Friday_C between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC'
Select Distinct 
	WF.Cohort_stage_c,
	WF.Client_region_c,
	WF.Lead_or_Opp_Source_c,
	WF.Lead_or_Opp_Owner_Name_c,
	WF.Lead_or_Opp_Owner_Manager_c,
	WF.Partner_flag_c,
	WF.Partner_develop_owner_flag_c,
	WF.b_d_r_date_c_flag_c,
	WF.bdr_owner_name_flag_c,
	WF.twelve_weeks_ago, 
	WF.Week_at_Friday_c,
	WF.Week_at_Next_Thursday,
	WF.Count_Leads_or_opps_final,
	Sum(L12M.Count_Leads_or_opps_final) as Sum_L12M_Funnel
From Dates_aligned WF
Left Join (select Cohort_stage_c, Client_region_c, Lead_or_Opp_Source_c, Lead_or_Opp_Owner_Name_c, Lead_or_Opp_Owner_Manager_c, Partner_flag_c, Partner_develop_owner_flag_c, b_d_r_date_c_flag_c, bdr_owner_name_flag_c, Week_at_Friday_c, Count_Leads_or_opps_final From Dates_aligned where Count_Leads_or_opps_final<<>> 0) L12M 
	on L12M.Week_at_Friday_c between WF.twelve_weeks_ago and WF.Week_at_Friday_c
	and WF.Cohort_stage_c = L12M.Cohort_stage_c
	and WF.Client_region_c = L12M.Client_region_c
	and WF.Lead_or_Opp_Source_c = L12M.Lead_or_Opp_Source_c
	and WF.Lead_or_Opp_Owner_Name_c = L12M.Lead_or_Opp_Owner_Name_c
	and WF.Lead_or_Opp_Owner_Manager_c = L12M.Lead_or_Opp_Owner_Manager_c
	and WF.Partner_flag_c = L12M.Partner_flag_c
	and WF.Partner_develop_owner_flag_c = L12M.Partner_develop_owner_flag_c
	and WF.b_d_r_date_c_flag_c = L12M.b_d_r_date_c_flag_c
	and WF.bdr_owner_name_flag_c = L12M.bdr_owner_name_flag_c
Group by WF.Cohort_stage_c, WF.Client_region_c, WF.Lead_or_Opp_Source_c, WF.Lead_or_Opp_Owner_Name_c, WF.Lead_or_Opp_Owner_Manager_c, WF.Partner_flag_c, WF.Partner_develop_owner_flag_c, WF.b_d_r_date_c_flag_c, WF.bdr_owner_name_flag_c, WF.twelve_weeks_ago, WF.Week_at_Friday_c, WF.Week_at_Next_Thursday, WF.Count_Leads_or_opps_final
Having  Sum(L12M.Count_Leads_or_opps_final) is not null
Order by WF.Cohort_stage_c, WF.Week_at_Friday_c asc"
df8aed76-0de6-5f7f-f472-1f47bf17f9f4,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),,
df8aed76-0de6-5f7f-f472-1f47bf17f9f4,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"SELECT * 
FROM REPO.GP_ACUMATICA_GL_TRANSACTION 
WHERE ACCOUNT in('27500')"
df8aed76-0de6-5f7f-f472-1f47bf17f9f4,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"select distinct id as professional_id, accounting_id as accounting_id_HISTO
			  from goglobal_gp_goglobal.professional_aud
			  where ACCOUNtING_ID IS NOT NULL"
dfa6a0b2-f807-4b6f-8c39-abf96e9be2d3,linkedin_ads,,
dfa6a0b2-f807-4b6f-8c39-abf96e9be2d3,linkedin_ads,postgres,"SELECT a.*
FROM linkedin_ads.campaign_history a
INNER JOIN (
    SELECT id, MAX(version_tag::INT) version_tag
    FROM linkedin_ads.campaign_history
    GROUP BY id
) b ON a.id = b.id AND a.version_tag::INT = b.version_tag::INT"
dfa6a0b2-f807-4b6f-8c39-abf96e9be2d3,linkedin_ads,postgres,"SELECT 
	ch.*,
	ce.title as ce_title,
	ce.description as ce_description,
	ce.entity as ce_entity,
	ce.share_media_category as ce_share_media_category,
	ce.entity_location as ce_entity_location,
	v_ad.name as v_ad_name,
	v_ad.type as v_ad_type,
	v_ad.created_time as v_ad_created_time
FROM (SELECT a.*,
	  reverse(SPLIT_PART(reverse(a.reference), ':',1))::BIGINT as ad_ref_id
		FROM linkedin_ads.creative_history a
		INNER JOIN (
			SELECT id, MAX(version_tag::INT) version_tag
			FROM linkedin_ads.creative_history
			GROUP BY id
		) b ON a.id = b.id AND a.version_tag::INT = b.version_tag::INT
) ch
left join 
(SELECT a.*
FROM linkedin_ads.content_entity a
INNER JOIN (
    SELECT id, MAX(last_modified_time) last_modified_time
    FROM linkedin_ads.content_entity
    GROUP BY id
) b ON a.id = b.id AND a.last_modified_time = b.last_modified_time
) ce on ch.id=ce.id
left join (SELECT a.*
FROM linkedin_ads.video_ad_history a
INNER JOIN (
    SELECT id, MAX(last_modified_time) last_modified_time
    FROM linkedin_ads.video_ad_history
    GROUP BY id
) b ON a.id = b.id AND a.last_modified_time = b.last_modified_time
) v_ad
on v_ad.id=ch.ad_ref_id"
dfa6a0b2-f807-4b6f-8c39-abf96e9be2d3,linkedin_ads,postgres,"SELECT a.*
FROM linkedin_ads.campaign_group_history a
INNER JOIN (
    SELECT id, MAX(last_modified_time) last_modified_time
    FROM linkedin_ads.campaign_group_history
    GROUP BY id
) b ON a.id = b.id AND a.last_modified_time = b.last_modified_time"
dfc49ca2-accb-dc28-f99b-7458a67331f4,Sheet1 (Master Agreement Dates) (local copy),postgres,"WITH sfdc as (SELECT DISTINCT 
				*
			  FROM 
			  	salesforce.v_gp_sfdc_marketing_dashboard AS sfdc		
			  WHERE 
				sfdc.cohort_stage='SAL to MSA'
				AND (sfdc.partner_acq_opps IS NULL OR sfdc.partner_acq_opps <<>> 'Yes')
				AND (sfdc.record_type_bi__c IS NULL OR sfdc.record_type_bi__c <<>> 'Potential Partner Opportunity')),
sbqq_1 as (SELECT DISTINCT 
           		sbqq_1.id as quote_id,
				sbqq_1.created_date as created_date_quote,
				sbqq_1.name as quote_name,
				sbqq_1.owner_id as owner_id_quote,
				sbqq_1.last_modified_date as last_modified_date_quote,
		        sbqq_1.sbqq_status_c,
		        sbqq_1.sbqq_billing_name_c,
			    sbqq_1.sbqq_opportunity_2_c,
				sbqq_1.approval_status_c,
		        sbqq_1.approval_indicator_c,
				sbqq_1.last_modified_by_id,
				sbqq_1.sbqq_account_c,
				sbqq_1.sbqq_days_quote_open_c,
				sbqq_1.sbqq_primary_c,
				sbqq_1.number_of_professionals_on_quote_c,
				sbqq_1.pricing_model_c,
                sbqq_1.sbqq_net_amount_c as net_amount_total,
                sbqq_1.pre_approved_minimum_fee_c,
				sbqq_1.currency_symbol_alike_quote_line_c,
				sbqq_1.is_gp_recruit_customer_c,
				sbqq_1.is_gp_contractor_customer_c,
				sbqq_1.complete_price_book_name_c,
				sbqq_1.estimated_monthly_cost_c,
			   	sbqq_1.currency_iso_code,
				sbqq_1.test_group_c
			FROM 
		   	  salesforce.sbqq_quote_c as sbqq_1
			WHERE 
		   		sbqq_1.is_deleted='FALSE'),
first_table as ( SELECT DISTINCT 
					sfdc.*, 
					sbqq_1.quote_id,
					sbqq_1.created_date_quote,
					sbqq_1.quote_name,
					sbqq_1.owner_id_quote,
					sbqq_1.last_modified_date_quote,
					sbqq_1.sbqq_status_c,
					sbqq_1.sbqq_billing_name_c,
					sbqq_1.approval_status_c,
		        	sbqq_1.approval_indicator_c,
					sbqq_1.last_modified_by_id,
					sbqq_1.sbqq_account_c,
					sbqq_1.sbqq_days_quote_open_c,
					sbqq_1.sbqq_primary_c,
					sbqq_1.number_of_professionals_on_quote_c,
					sbqq_1.pricing_model_c,
                    sbqq_1.net_amount_total,
                    sbqq_1.pre_approved_minimum_fee_c,
					sbqq_1.currency_symbol_alike_quote_line_c,
					sbqq_1.is_gp_recruit_customer_c,
					sbqq_1.is_gp_contractor_customer_c,
					sbqq_1.complete_price_book_name_c,
					sbqq_1.estimated_monthly_cost_c,
					sbqq_1.test_group_c,
					rate.conversion_rate,
					users.name as last_modified_name	
				FROM sfdc
				LEFT JOIN sbqq_1
				ON sfdc.lead_or_opp_id=sbqq_1.sbqq_opportunity_2_c
				LEFT JOIN salesforce.currency_type as rate
				ON sbqq_1.currency_iso_code=rate.iso_code
				LEFT JOIN salesforce.v_gp_sfdc_user_current as users
				ON sbqq_1.last_modified_by_id=users.id),
sbqq_2 as ( SELECT DISTINCT
		        sbqq_2.id AS quote_line_id, 
				sbqq_2.name AS quote_line_name, 
				sbqq_2.is_deleted,
				sbqq_2.currency_iso_code, 
				sbqq_2.created_date as created_date_line, 
				sbqq_2.last_modified_date, 
				sbqq_2.sbqq_quote_c, 
				sbqq_2.sbqq_additional_discount_c , 
				sbqq_2.sbqq_component_list_total_c , 
				sbqq_2.sbqq_component_total_c , 
				sbqq_2.sbqq_customer_price_c , 
				sbqq_2.sbqq_customer_total_c , 
				sbqq_2.sbqq_list_price_c , 
				sbqq_2.sbqq_list_total_c , 
				sbqq_2.sbqq_net_price_c , 
				sbqq_2.sbqq_net_total_c , 
				sbqq_2.sbqq_number_c , 
				sbqq_2.sbqq_original_price_c , 
				sbqq_2.sbqq_package_list_total_c , 
				sbqq_2.sbqq_package_total_c , 
				sbqq_2.sbqq_partner_price_c , 
				sbqq_2.sbqq_partner_total_c , 
				sbqq_2.sbqq_product_code_c , 
				sbqq_2.sbqq_product_name_c , 
				sbqq_2.sbqq_prorated_list_price_c , 
				sbqq_2.sbqq_prorated_price_c , 
				sbqq_2.sbqq_regular_price_c , 
				sbqq_2.sbqq_regular_total_c , 
				sbqq_2.sbqq_special_price_c , 
				sbqq_2.sbqq_total_discount_amount_c , 
				sbqq_2.sbqq_total_discount_rate_c , 
				sbqq_2.accruing_statutory_severance_c , 
				sbqq_2.additional_month_payment_c , 
				sbqq_2.x_13_th_month_payment_notes_c , 
				sbqq_2.estimated_social_charges_c , 
				sbqq_2.markup_on_expenses_c , 
				sbqq_2.monthly_service_fee_c , 
				sbqq_2.setup_fee_professional_c , 
				sbqq_2.vat_gst_c , 
				sbqq_2.base_c , 
				sbqq_2.variable_c , 
				sbqq_2.monthly_service_fee_calculated_c , 
				sbqq_2.setup_fee_per_additional_professional_c , 
				sbqq_2.minimum_monthly_service_fee_c , 
				sbqq_2.salary_bonus_c , 
				sbqq_2.minimum_monthly_service_fee_calculated_c , 
				sbqq_2.setup_total_all_hc_c , 
				sbqq_2.addendum_monthly_service_fee_original_c , 
				sbqq_2.estimated_employer_social_charges_on_bas_c , 
				sbqq_2.gp_fee_base_per_hc_c , 
				sbqq_2.estimated_employer_social_charges_on_var_c , 
				sbqq_2.gp_fee_variable_per_hc_c , 
				sbqq_2.fee_structure_c , 
				sbqq_2.monthly_fee_total_c , 
				sbqq_2.country_product_c , 
				sbqq_2.total_social_charges_hc_c , 
				sbqq_2.footnote_c , 
				sbqq_2.markup_on_expenses_notes_c , 
				sbqq_2.monthly_fee_variable_c , 
				sbqq_2.vat_per_hc_c , 
				sbqq_2.currency_transaction_and_wiring_c , 
				sbqq_2.total_monthly_cost_c , 
				sbqq_2.monthly_cost_of_doing_all_hc_c , 
				sbqq_2.product_name_text_c , 
				sbqq_2.monthly_currency_fee_c , 
				sbqq_2.currency_symbol_c , 
				sbqq_2.unique_identifier_c , 
				sbqq_2.x_13_th_14_th_month_addendum_notes_c , 
				sbqq_2.severance_addendum_notes_c , 
				sbqq_2.setup_fee_addendum_notes_c , 
				sbqq_2.vacation_pay_c , 
				sbqq_2.estimated_provident_fund_contribution_c , 
				sbqq_2.statutory_vacation_allowance_c , 
				sbqq_2.mandatory_pension_contribution_c , 
				sbqq_2.disability_insurance_per_professional_c , 
				sbqq_2.statutory_vacation_pay_bonus_c , 
				sbqq_2.statutory_unemployment_fund_cts_c , 
				sbqq_2.social_charges_addendum_notes_c , 
				sbqq_2.mandatory_financial_reserve_accrual_c , 
				sbqq_2.statutory_vacation_bonus_c , 
				sbqq_2.statutory_transient_bonus_c , 
				sbqq_2.monthly_service_fee_total_disc_c , 
				sbqq_2.monthly_service_fee_final_c , 
				sbqq_2.min_service_fee_total_disc_c , 
				sbqq_2.min_monthly_service_fee_final_c , 
				sbqq_2.total_discount_amount_c , 
				sbqq_2.statutory_vacation_pay_c , 
				sbqq_2.mandatory_medical_insurance_c , 
				sbqq_2.proposal_footnotes_c , 
				sbqq_2.base_monthly_c , 
				sbqq_2.variable_monthly_c , 
				sbqq_2.currency_transaction_and_wiring_monthly_c , 
				sbqq_2.mandatory_free_trade_zone_office_space_c , 
				sbqq_2.discount_tiers_applied_c , 
				sbqq_2.refundable_deposit_in_months_c , 
				sbqq_2.invoices_withdrawal_type_c , 
				sbqq_2.markup_on_expenses_amount_c , 
				sbqq_2.discount_tier_text_c , 
				sbqq_2.monthly_service_fee_discount_c , 
				sbqq_2.min_monthly_service_fee_discount_c , 
				sbqq_2.total_rep_s_discount_c , 
				sbqq_2.se_allowable_discount_c , 
				sbqq_2.rsd_discount_c , 
				sbqq_2.vp_discount_c , 
				sbqq_2.c_level_discount_c , 
				sbqq_2.need_rsd_approval_c , 
				sbqq_2.need_vp_approval_c , 
				sbqq_2.need_c_level_approval_c , 
				sbqq_2.estimated_social_charges_override_c , 
				sbqq_2.addendum_template_id_c , 
				sbqq_2.country_product_name_text_c , 
				sbqq_2.visa_fee_per_prof_including_g_l_fees_c , 
				sbqq_2.visa_fee_ren_per_prof_incl_g_l_fees_c , 
				sbqq_2.visa_renwl_fee_for_spouse_dependents_c , 
				sbqq_2.visa_fee_for_spouse_dependents_c , 
				sbqq_2.employment_pass_if_applicable_c , 
				sbqq_2.employment_pass_per_dependent_c , 
				sbqq_2.renewal_every_2_years_c , 
				sbqq_2.renewal_every_2_years_per_dependent_c , 
				sbqq_2.stat_employer_healthcare_contrib_c , 
				sbqq_2.foreign_worker_epi_c , 
				sbqq_2.issuance_of_req_letters_and_or_noc_s_c , 
				sbqq_2.if_required_arabic_translation_e_m_bc_c , 
				sbqq_2.x_1_time_3_rd_party_fees_for_pension_plan_c , 
				sbqq_2.statutory_pre_employment_medical_check_c , 
				sbqq_2.estimated_social_charges_ref_c , 
				sbqq_2.proposal_accrued_statory_severance_c , 
				sbqq_2.proposal_estimated_social_charges_c , 
				sbqq_2.proposal_indirect_tax_c , 
				sbqq_2.proposal_estimated_social_charges_in_c , 
				sbqq_2.monthly_service_fee_original_c , 
				sbqq_2.addendum_monthly_service_fee_c , 
				sbqq_2.addendum_estimated_social_charges_c , 
				sbqq_2.addendum_accrued_severance_c , 
				sbqq_2.addendum_markup_on_expenses_c , 
				sbqq_2.addendum_monthly_currency_transaction_c , 
				sbqq_2.addendum_indirect_tax_c , 
				sbqq_2.addendum_vacation_allowance_c , 
				sbqq_2.addendum_vacation_pay_c , 
				sbqq_2.addendum_financial_reserve_c , 
				sbqq_2.addendum_provident_fund_c , 
				sbqq_2.discounted_to_netprice_c , 
				sbqq_2.ann_tax_filling_fee_list_price_child_c , 
				sbqq_2.ann_tax_filling_fee_net_price_child_c , 
				sbqq_2.wiring_fee_list_price_child_c , 
				sbqq_2.wiring_fee_net_price_child_c , 
				sbqq_2.tran_admin_fee_list_price_child_c , 
				sbqq_2.tran_admin_fee_net_price_child_c , 
				sbqq_2.travel_fee_list_price_child_c , 
				sbqq_2.travel_fee_net_price_child_c , 
				sbqq_2.addendum_monthly_service_fee_initial_c , 
				sbqq_2.discounted_to_monthly_service_fee_c , 
				sbqq_2.discounted_to_minimum_monthly_service_c , 
				sbqq_2.discounted_to_social_charges_c , 
				sbqq_2.discounted_to_annual_tx_c , 
				sbqq_2.discounted_to_wiring_fee_c , 
				sbqq_2.discounted_to_one_time_trans_c , 
				sbqq_2.discounted_to_travel_insurance_c , 
				sbqq_2.switzerlandtext_1_c , 
				sbqq_2.switzerlandtext_2_c , 
				sbqq_2.monthly_fee_variable_original_c , 
				sbqq_2.addendum_net_price_c , 
				sbqq_2.monthly_service_overriding_disc_c , 
				sbqq_2.additional_month_payment_proposal_c , 
				sbqq_2.set_up_fee_currency_symbol_c , 
				sbqq_2.min_month_ser_fee_currency_symbol_c , 
				sbqq_2.annual_tax_currency_symbol_c , 
				sbqq_2.wiring_fee_currency_symbol_c , 
				sbqq_2.trans_fee_currency_symbol_c , 
				sbqq_2.travel_fee_currency_symbol_c , 
				sbqq_2.addendum_min_monthly_service_fee_c , 
				sbqq_2.addendum_annual_tax_fee_c , 
				sbqq_2.addendum_trans_fee_c , 
				sbqq_2.addendum_wiring_fee_c , 
				sbqq_2.addendum_travel_fee_c , 
				sbqq_2.markup_currency_symbol_c , 
				sbqq_2.monthly_service_fee_tier_notes_c , 
				sbqq_2.minimum_monthly_service_fee_tier_notes_c , 
				sbqq_2.monthly_service_fee_tier_c , 
				sbqq_2.minimum_monthly_service_fee_tier_c , 
				sbqq_2.additional_professional_checkbox_c , 
				sbqq_2.setup_fee_additional_professional_label_c , 
				sbqq_2.setup_fee_additional_professional_value_c , 
				sbqq_2.monthly_variable_overriding_disc_c , 
				sbqq_2.addendum_monthly_fee_variable_c , 
				sbqq_2.discounted_to_monthly_serv_fee_variable_c , 
				sbqq_2.additional_professional_currency_symbol_c , 
				sbqq_2.price_info_populated_c , 
				sbqq_2.country_number_c , 
				sbqq_2.proposal_total_monthly_cost_c , 
				sbqq_2.monthly_fee_variable_discount_c , 
				sbqq_2.monthly_fee_variable_final_c , 
				sbqq_2.estimated_social_charges_from_pbe_c , 
				sbqq_2.min_monthly_service_fee_original_c , 
				sbqq_2.monthly_service_variable_actual_disc_c , 
				sbqq_2.min_monthly_service_overriding_disc_c , 
				sbqq_2.original_monthly_total_fee_c , 
				sbqq_2.addendum_monthly_service_fee_variable_og_c , 
				sbqq_2.monthly_total_fee_discount_c , 
				sbqq_2.primary_product_c , 
				sbqq_2.ann_13_14_th_month_billed_amount_all_hc_c , 
				sbqq_2.ann_tax_trav_ins_all_hc_c , 
				sbqq_2.year_1_cost_c , 
				sbqq_2.subsequent_years_total_c , 
				sbqq_2.accruing_statutory_severance_currency_c , 
				sbqq_2.monthly_sum_of_salary_c , 
				sbqq_2.uae_office_space_fee_c , 
				sbqq_2.usa_state_c , 
				sbqq_2.usa_state_attrib_c , 
				sbqq_2.estimated_social_charges_from_pbe_value_c , 
				sbqq_2.x_14_th_month_note_c , 
				sbqq_2.custom_product_name_c , 
				sbqq_2.visa_cost_new_hire_1_year_lp_c , 
				sbqq_2.visa_cost_dependent_renewal_lp_c , 
				sbqq_2.visa_cost_other_resident_renewal_lp_c , 
				sbqq_2.visa_cost_new_hire_and_renewal_c , 
				sbqq_2.visa_cost_other_eu_eea_swiss_lp_c , 
				sbqq_2.visa_cost_new_hire_lp_c , 
				sbqq_2.visa_cost_renewal_lp_c , 
				sbqq_2.visa_cost_new_hire_2_year_lp_c , 
				sbqq_2.visa_cost_dependent_lp_c , 
				sbqq_2.visa_cost_other_eu_eea_swiss_natio_lp_c , 
				sbqq_2.adjusted_discount_c , 
				sbqq_2.visa_product_name_c , 
				sbqq_2.product_pricing_model_c , 
				sbqq_2.discount_beyond_preapproved_mgmt_fee_c , 
				sbqq_2.discount_beyond_preapproved_one_time_fee_c , 
				sbqq_2.pre_approved_management_fee_percentage_c , 
				sbqq_2.discount_beyond_preapproved_minimum_fee_c , 
				sbqq_2.country_product_iso_c
FROM salesforce.sbqq_quote_line_c AS sbqq_2
WHERE sbqq_2.is_deleted='FALSE')
SELECT DISTINCT 
first_table.*,
sbqq_2.*
FROM first_table
LEFT JOIN sbqq_2
ON first_table.quote_id=sbqq_2.sbqq_quote_c"
dfc49ca2-accb-dc28-f99b-7458a67331f4,Sheet1 (Master Agreement Dates) (local copy),,
dfc49ca2-accb-dc28-f99b-7458a67331f4,Sheet1 (Master Agreement Dates) (local copy),postgres,"select distinct 
				country.id,
				country.country_code,
				markup.amount_pct
from goglobal_gp_goglobal.v_gp_gg_country_current as country
left join goglobal_gp_goglobal.markup_transaction_country_config as markup
on country.id=markup.country_id
where markup.markup_transaction_id='3'"
dfc49ca2-accb-dc28-f99b-7458a67331f4,Sheet1 (Master Agreement Dates) (local copy),postgres,"WITH SALESFORCE AS (
	
SELECT opp.*
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time AS opp
WHERE (opp.type <<>> 'Existing Business' OR opp.type IS NULL)
AND   (opp.partner_acquisition__c IS NULL OR opp.partner_acquisition__c <<>> 'Yes')
AND   (opp.is_won= 'TRUE')
AND   (opp.record_type_bi__c IS NULL OR opp.record_type_bi__c <<>> 'Potential Partner Opportunity')
AND   ( opp.pricing_model__c <<>> 'Contractor only' OR opp.pricing_model__c is NULL)
	
			       )
,
GPP AS (
SELECT DISTINCT 
	    
	      a.id AS client_id,
	a.salesforce_account_id,
	      a.name,
          a.pricing_model,
	      CASE WHEN a.msa_contract_start_date_peo IS NOT NULL THEN a.msa_contract_start_date_peo
	           WHEN a.msa_contract_start_date_peo IS NULL AND a.msa_contract_start_date_services IS NOT NULL THEN a.msa_contract_start_date_services
	           WHEN a.msa_contract_start_date_services IS NULL AND a.msa_contract_start_date_sourcing IS NOT NULL THEN a.msa_contract_start_date_sourcing
	           WHEN a.msa_contract_start_date_sourcing IS NULL AND a.msa_contract_start_date_aso IS NOT NULL THEN a.msa_contract_start_date_aso
	      ELSE a.msa_contract_start_date_peo END AS ma_start_date,
	      b.pop_current, 
	      c.pop_to_date,
	      d.min_pay_start,
	      d.max_pay_start,
	      d.min_pay_end,
	      d.max_pay_end
	       
	FROM (SELECT a.id,
		         a.salesforce_account_id,
		         a.pricing_model,
		         a.name,
		         a.msa_contract_start_date_services,
		         a.msa_contract_start_date_peo, 
		         a.msa_contract_start_date_aso,
		         a.msa_contract_start_date_sourcing
		 FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
		 WHERE a.is_demo_client = false) AS a
	
LEFT JOIN (SELECT client_id,
		          COUNT(DISTINCT professional_id) pop_current
	     FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
		 WHERE active_flag = 'Active'
		 AND DATE_TRUNC ('month', cal_date)= DATE_TRUNC ('month', CURRENT_DATE)
		 AND (product_type_id <<>> '4' OR product_type_id IS NULL)
		 GROUP BY 1) AS b
	ON a.id = b.client_id
LEFT JOIN (SELECT client_id,
		          COUNT(DISTINCT professional_id) pop_to_date
		   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
		   WHERE active_flag = 'Active'
		   AND DATE_TRUNC('month',payroll_start_date) <<= DATE_TRUNC ('month', CURRENT_DATE)
		   AND (product_type_id <<>> '4' OR product_type_id IS NULL)
		   GROUP BY 1) AS c
	ON a.id = c.client_id
	
LEFT JOIN (SELECT client_id, 
		          MAX(payroll_start_date)AS max_pay_start, 
		          MAX (payroll_end_date)AS max_pay_end,
				  MIN(payroll_end_date)AS min_pay_end, 
		          MIN(payroll_start_date) AS min_pay_start
				 
		   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
		   WHERE (product_type_id <<>> '4' OR product_type_id IS NULL)
		   GROUP BY 1) d
	ON a.id = d.client_id
	
),
FINAL AS(SELECT 
		 SALESFORCE.*,
     GPP.*,  
	  	CASE 
		   
			 WHEN GPP.client_id IS NOT NULL AND (CURRENT_DATE - (CASE WHEN SALESFORCE.close_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.close_date END)) <<= 90
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.min_pay_start IS NULL
			 THEN 'Newly Signed'
			 
			 WHEN GPP.client_id IS NOT NULL 
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND date_trunc('month', GPP.min_pay_start) >>= date_trunc('month',CURRENT_DATE) THEN 'Onboarding' 
			  
		   WHEN GPP.client_id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current >>0  THEN 'Currently Active'
			 
			 WHEN GPP.client_id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current IS NULL
			 AND (GPP.max_pay_end << CURRENT_DATE OR (date_trunc('month', GPP.max_pay_start) >>= date_trunc('month',CURRENT_DATE) AND GPP.max_pay_end >> CURRENT_DATE))
			 THEN 'Currently Inactive'
			 
			 
			 WHEN (GPP.client_id IS NOT NULL 
			 AND (CURRENT_DATE - (CASE WHEN SALESFORCE.close_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.close_date END)) >>90
			 AND GPP.pop_to_date IS NULL)
		   OR (GPP.client_id IS NOT NULL AND GPP.ma_start_date IS NULL AND SALESFORCE.close_date IS NULL )
       THEN 'Never Active' 
		 
		   WHEN (GPP.client_id IS NULL
         AND SALESFORCE.type = 'New Business'
         AND SALESFORCE.stage_name = 'Closed Won')
				 THEN 'Unknown'
			
			 END AS gpp_account_status_calc
			
FROM SALESFORCE
LEFT JOIN GPP
ON   SALESFORCE.account_id = GPP.salesforce_account_id
		 )
SELECT account_id,
       id AS opp_id,
	   close_date,
       client_id, 
	   gpp_account_status_calc
FROM FINAL"
dff5178d-b03d-cf4e-b0ef-6bd3a1df92e3,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"Select distinct * from goglobal_gp_goglobal.v_gp_gg_professional_current 
 LEFT JOIN (select 
      *
  from acumatica_integration.gp_acumatica_gl_transaction
  where account = '22020'
) ""gp_acumatica_gl_transaction"" ON (REPLACE(CAST(""v_gp_gg_professional_current"".""accounting_id"" AS TEXT), CAST('-' AS TEXT), CAST('' AS TEXT)) = CAST(""gp_acumatica_gl_transaction"".""projectid"" AS TEXT))

LEFT JOIN (
SELECT
        professional_id,
	1 AS deposit_flag
	FROM goglobal_gp_goglobal.v_gp_gg_total_bills_mat as bill
        WHERE bill_type_name = 'Deposit'
        AND document_type = '1'

) as Dep_Flag on goglobal_gp_goglobal.v_gp_gg_professional_current.id = Dep_Flag.professional_id

LEFT JOIN (
SELECT
        professional_id as prof_id,
	    1 AS deposit_refund_flag,
        bill_status
	FROM goglobal_gp_goglobal.v_gp_gg_total_bills_mat as bill
        WHERE (bill_type_name = 'Deposit Refund' or type = 'Deposit Refund')
	    OR (bill_type_name = 'Deposit' AND document_type = '2')

) as Dep_R_Flag on goglobal_gp_goglobal.v_gp_gg_professional_current.id = Dep_R_Flag.prof_id"
dff5178d-b03d-cf4e-b0ef-6bd3a1df92e3,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,select * from goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current
dff5178d-b03d-cf4e-b0ef-6bd3a1df92e3,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,select * from goglobal_gp_goglobal.v_gp_gg_client_current
dff5178d-b03d-cf4e-b0ef-6bd3a1df92e3,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,select * from goglobal_gp_goglobal.v_gp_gg_gp_person_current
dff5178d-b03d-cf4e-b0ef-6bd3a1df92e3,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"select 
    *
from repo.gp_acumatica_gl_transaction
where account = '22020'"
dff5178d-b03d-cf4e-b0ef-6bd3a1df92e3,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"WITH prof_bill AS(SELECT 
  c.professional_id,
  concat(t2.first_name,' ',t2.last_name) AS professional_name,
  a.client_bill_id,
  c.billing_cycle_id,
  c.bill_type,
  c.document_type,
  c.accounting_id, 
  b.ar_account_id, 
  
 CASE WHEN c.status='1' THEN 'Draft'
 WHEN c.status='2' THEN 'Client Approval'
 WHEN c.status='3' THEN 'Submitted'
 WHEN c.status='4' THEN 'LSP Approval'
 WHEN c.status='5' THEN 'LSP Submitted'
 WHEN c.status='6' THEN 'Ready to Validate'
 WHEN c.status='7' THEN 'Preparing Bill'
 WHEN c.status='8' THEN 'Generate Invoice'
 WHEN c.status='9' THEN 'Ready to Send'
 WHEN c.status='10' THEN 'Billed'
 WHEN c.status='11' THEN 'Paid'
 WHEN c.status='12' THEN 'Invoice in Progress'
 WHEN c.status='13' THEN 'Invoice Error'
  END as bill_status, 
  
  t2.accounting_id as Pro_Acumatica_id,
  b.name as type,
  b.id as transaction_type_id,
 -- a.currency,
  t3.preferring_billing_currency,
  e.currency_name AS PREFERRING_CURRENCY_NAME
  
FROM goglobal_gp_goglobal.v_gp_gg_client_bill_transaction_current a 
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_billing_transaction_type_current b 
	ON a.billing_transaction_type_id=b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_bill_current c 
	ON c.id=a.client_bill_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_billing_cycle_current d 
	ON c.billing_cycle_id=d.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_current t2 
	ON c.professional_id=t2.id 
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current t3 
	on t2.client_id=t3.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS e
ON t3.preferring_billing_currency = e.id::INT

ORDER BY 1,4)

SELECT professional_id, professional_name, preferring_currency_name AS Bill_Currency,

CASE WHEN SUM(CASE WHEN document_type = '1' AND bill_status != 'Paid' THEN 1 ELSE 0 END) = 0 
AND SUM(CASE WHEN document_type = '2' AND bill_status != 'Billed' THEN 1
WHEN document_type = '2' AND bill_status= 'Billed' THEN 0
									END) = 0
THEN 'Only CM in billed status'

WHEN SUM(CASE WHEN document_type = '1' AND bill_status != 'Paid' THEN 1 ELSE 0 END)= 0 


THEN 'Ok to Refund'

ELSE 'Not Ok to Refund' END AS prof_billing_status



FROM prof_bill

GROUP BY professional_id, professional_name,preferring_currency_name"
dff5178d-b03d-cf4e-b0ef-6bd3a1df92e3,v_gp_gg_professional_current (repo.v_gp_gg_professional_current)+ (gpbidb),postgres,"SELECT G.PROJECTID, SUM(G.REMAINING_BALANCE_) FROM
(SELECT A.TRANTYPE,A.projectid, A.referencenbr, B.usdbalanceremain AS REMAINING_BALANCE, 
 		CASE WHEN A.TRANTYPE = 'CRM' THEN -B.USDBALANCEREMAIN ELSE B.USDBALANCEREMAIN END AS REMAINING_BALANCE_ ,SUM(A.usdtranamount) AS GENERATED_AR
	FROM acumatica_integration.gp_acumatica_ar_transaction A LEFT JOIN 
		(SELECT PROJECTID, REFERENCENBR, MAX(USDBALANCEREMAIN) AS USDBALANCEREMAIN 
		 		FROM acumatica_integration.gp_acumatica_ar_transaction GROUP BY 1,2) B 
		ON A.PROJECTID = B.PROJECTID AND A.REFERENCENBR = B.REFERENCENBR
	where A.usdbalanceremain >> 0 
	GROUP BY 1,2,3,4,5
	order by A.projectid, A.referencenbr asc) G
GROUP BY 1"
c683f13c-a494-463d-1778-222f23f496a3,v_gp_gg_professional_current (goglobal_gp_goglobal.v_gp_gg_professional_current)+ (gpbidb),,
e0ca397e-5979-c89a-725f-6fc510b1d390,User Satisfaction Survey (gpbidb),postgres,"WITH region1 AS (
SELECT
	ra.response_id,
	qo.text as region
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '400008101' and q.subtype <<>> 'descriptive_text' and q.id='60041033'
	GROUP BY 1,2
),
department1 AS (
SELECT
	ra.response_id,
	qo.text as department
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '400008101' and q.subtype <<>> 'descriptive_text' and q.id='60041034'
	GROUP BY 1,2
),
tableau_user1 AS (
SELECT
	ra.response_id,
	qo.text as active_user
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '400008101' and q.subtype <<>> 'descriptive_text' and q.id='60042724'
	GROUP BY 1,2
),
region2 AS (
SELECT
	ra.response_id,
	qo.text as Region
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310236566' and q.subtype <<>> 'descriptive_text' and q.id='690234916'
	GROUP BY 1,2
),
department2 AS (
SELECT
	ra.response_id,
	qo.text as Department
	FROM survey_monkey.question q
	LEFT JOIN  survey_monkey.survey_page sp
	ON q.survey_page_id = sp.id
	LEFT JOIN survey_monkey.survey_history sh
	ON sp.survey_id = sh.id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.question_option qo
	on ra.choice_id = qo.id
	
WHERE sh._fivetran_active = true and sh.id = '310236566' and q.subtype <<>> 'descriptive_text' and q.id='690236885'
	GROUP BY 1,2
)
SELECT
	sh.id AS survey_id,
	c.id AS collector_id,
	c.created_at AS collector_created_date,
	c.name AS collector_name,
	sh.title AS suvey_name,
	region1.region,
	department1.department,
	tableau_user1.active_user,
	q.survey_page_id,
	q.id AS question_id ,
	q.family,
	q.subtype,
	q.required_text,
	CASE WHEN q.id = '60041033' THEN 'Based Region'
	WHEN q.id = '60041034' THEN 'Department'
	WHEN q.id = '60042724' THEN 'Are you an active Tableau user?' 
	WHEN q.id = '60041035' THEN 'Relevance of Information' 
	WHEN q.id = '60041036' THEN 'Report Layout' 
	WHEN q.id = '60041037' THEN 'Reliability on BI as partnership for Data' 
	WHEN q.id = '60043903' THEN 'Why?'
	WHEN q.id = '60041038' THEN 'What can the BI team do to improve its service?' 
	END AS heading,
	sq.text AS subquestion,
	r.email AS recipient_email,
	rh.response_status,
	rh.total_time as total_time,
	rh.created_at as start_date,
	rh.updated_at as end_date,
	ra.response_id,
	ra.choice_id,
	qo.text,
	qo.weight,
	MAX(ra._fivetran_synced)
	FROM survey_monkey.survey_history sh
	LEFT JOIN  survey_monkey.survey_page sp
	ON sh.id = sp.survey_id
	LEFT JOIN survey_monkey.question q
	on sp.id = q.survey_page_id
	LEFT JOIN survey_monkey.question_heading qh
	on q.id = qh.question_id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.sub_question sq
 	on ra.row_id = sq.id
	LEFT JOIN survey_monkey.response_page rp
	ON ra.response_page_id = rp.id
	LEFT JOIN survey_monkey.response_history rh
	ON ra.response_id = rh.id
	LEFT JOIN survey_monkey.recipient r
	ON rh.recipient_id = r.id
	LEFT JOIN survey_monkey.question_option qo
	ON ra.choice_id = qo.id
	LEFT JOIN region1
	on ra.response_id = region1.response_id
	LEFT JOIN department1
	on ra.response_id = department1.response_id
	LEFT JOIN tableau_user1
	on ra.response_id = tableau_user1.response_id
	LEFT JOIN survey_monkey.collector c
	ON rh.collector_id = c.id
WHERE sh._fivetran_active = true AND
rh._fivetran_active = true AND
sh.id = '400008101' -- '310236566' and q.subtype <<>> 'descriptive_text'
AND c.id IN ('420195781','424951544')
--AND --q.id NOT IN ('60041033','60041034','60042724')
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24
UNION
SELECT
	sh.id AS survey_id,
	c.id AS collector_id,
	c.created_at AS collector_created_date,
	c.name AS collector_name,
	sh.title AS suvey_name,
	region2.region,
	department2.department,
	NULL AS active_user,
	q.survey_page_id,
	q.id AS question_id ,
	q.family,
	q.subtype,
	q.required_text,
	CASE WHEN q.id = '690234916' THEN 'Based Region'
	WHEN q.id = '690236885' THEN 'Department'
	WHEN q.id = '690242612' THEN 'Relevance of Information' 
	WHEN q.id = '690244481' THEN 'Report Layout' 
	WHEN q.id = '690245467' THEN 'Reliability on BI as partnership for Data' 
	WHEN q.id = '715920040' THEN 'What can the BI team do to improve its service?'
	ELSE qh.heading END AS heading,
	sq.text AS subquestion,
	r.email AS recipient_email,
	rh.response_status,
	rh.total_time as total_time,
	rh.created_at as start_date,
	rh.updated_at as end_date,
	ra.response_id,
	ra.choice_id,
	qo.text,
	qo.weight,
	MAX(ra._fivetran_synced)
	FROM survey_monkey.survey_history sh
	LEFT JOIN  survey_monkey.survey_page sp
	ON sh.id = sp.survey_id
	LEFT JOIN survey_monkey.question q
	on sp.id = q.survey_page_id
	LEFT JOIN survey_monkey.question_heading qh
	on q.id = qh.question_id
	LEFT JOIN survey_monkey.response_answer ra
	on q.id = ra.question_id
	LEFT JOIN survey_monkey.sub_question sq
 	on ra.row_id = sq.id
	LEFT JOIN survey_monkey.response_page rp
	ON ra.response_page_id = rp.id
	LEFT JOIN survey_monkey.response_history rh
	ON ra.response_id = rh.id
	LEFT JOIN survey_monkey.recipient r
	ON rh.recipient_id = r.id
	LEFT JOIN survey_monkey.question_option qo
	ON ra.choice_id = qo.id
	LEFT JOIN region2
	on ra.response_id = region2.response_id
	LEFT JOIN department2
	on ra.response_id = department2.response_id
	LEFT JOIN survey_monkey.collector c
	ON rh.collector_id = c.id
WHERE sh._fivetran_active = true AND
rh._fivetran_active = true AND
sh.id = '310236566' -- '310236566' and q.subtype <<>> 'descriptive_text'
AND c.id = '410685906'
--AND --q.id NOT IN ('60041033','60041034','60042724')
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24
ORDER BY 1"
e1ae19ba-2040-181c-85f1-49d51db634d4,by pro,postgres,"with A as(
	SELECT t1.id, 
		concat(t1.first_name,' ',t1.last_name) as Professional,T1.EXTERNAL_ID,
	   	case 
	   		when t1.status='1' then 'New' 
	   		when t1.status='2' then 'Onboarding'
	   		when t1.status='3' then 'Active'
	   		when t1.status='4' then 'Terminating'
	   		when t1.status='5' then 'Inactive'
		end as Pro_Status,
	   	t2.name as Client,
	   	t2.status as client_status, 
	   	T9.NAME AS LSP_NAME,
	   	t4.name as Country,
	   	t7.name as Benefit_type,
	   	case 
	   		when t8.mandatory='1' then 'Mandatory'
	   		when t8.mandatory='0' then 'Supplemental'
	   	end as Plan_Type,
	   	t6.name as Plan_Name,
		t6.custom,
		case 
			when t6.active='1' then 'Yes'
			when t6.active='0' then 'No' 
			else null
		end as Active_plan,
		t5.benefit_id,
	   	t5.status,
	   	case 
	   		when t5.status='1' then 'Offered' 
	   		when t5.status='2' then 'Enrolled'
	   		when t5.status='3' then 'Declined' 
	   		when t5.status='4' then 'Unenrolled'
			else t5.status
		end as benefit_status,
		t5.enrollment_date,
		t5.unenrollment_date,
		t1.payroll_start_date, 
		t1.payroll_end_date
	from goglobal_gp_goglobal.v_gp_gg_professional_current t1
	left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on t1.client_id=t2.id
	left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t3  on t1.lsp_country_id=t3.id
	left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco  on t1.client_country_id=cco.id
	left join goglobal_gp_goglobal.v_gp_gg_country_current t4 on cco.country_id=t4.id
	left join benefits_gp_benefits.v_benefits_professional_benefit_enrollment_current t5 on t1.id=t5.professional_external_id::integer
	left join benefits_gp_benefits.v_benefits_benefit_current t6 on t5.benefit_id=t6.id::INTEGER and t4.id=t6.country_external_id::integer
	left join benefits_gp_benefits.v_benefits_benefit_type_current t7 on t6.benefit_type_id=t7.id::INTEGER
	left join benefits_gp_benefits.v_benefits_country_benefit_type_current t8 on t7.id::INTEGER=t8.benefit_type_id and t8.country_external_id::integer=t4.id 
	LEFT JOIN goglobal_gp_goglobal.V_GP_GG_LSP_CURRENT T9 ON T3.LSP_ID=T9.ID
	where is_failed_to_launch='false' 
		and is_demo_client='false' 
	order by professional),
b as(
	select *, 
	case 
		when (benefit_type is null and status is null) then 'A'
		when (benefit_type is null and status is NOT null) THEN 'B'
	END AS FLAG FROM A)	
select * from b"
e1ae19ba-2040-181c-85f1-49d51db634d4,by pro,postgres,"select *
from goglobal_gp_goglobal.v_gp_gg_transactions_mat
where transaction in ('Medical Insurance','Insurance Premium','Insurance Premium - Life')"
e28ff672-fd7e-0847-a23c-c05b6591868d,TECH_DEBT,postgres,"with affectsVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (affectsVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""affectsVersionID"",
  ""issue_multiselect_history"".""value"" AS ""affectsVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'versions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from version
left join affectsVersion on version.""id (version)"" = affectsVersion.""affectsVersionID"""
e28ff672-fd7e-0847-a23c-c05b6591868d,TECH_DEBT,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)""
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_10390','customfield_10397', 'customfield_10450','customfield_10470')"
e28ff672-fd7e-0847-a23c-c05b6591868d,TECH_DEBT,postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
""issue_type"".""name"" as ""issueTypeName""
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
LEfT JOIN ""jira_integration"".""issue_type"" ""issue_type"" on ""issue_type"".id = ""issue"".""issue_type""

JOIN ""jira_integration"".""issue_multiselect_history"" ""labels"" on ""labels"".issue_id = ""issue"".id and ""labels"".field_id = 'labels' and ""labels"".is_active = true and ""labels"".value in  ('TECH_DEBT', 'tech_debt') 
where project in (10000,10103) and _fivetran_deleted = false"
e28ff672-fd7e-0847-a23c-c05b6591868d,TECH_DEBT,postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
e28ff672-fd7e-0847-a23c-c05b6591868d,TECH_DEBT,postgres,"with fixVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (fixVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""fixVersionID"",
  ""issue_multiselect_history"".""value"" AS ""fixVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'fixVersions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from fixVersion
left join version on version.""id (version)"" = fixVersion.""fixVersionID"""
e28ff672-fd7e-0847-a23c-c05b6591868d,TECH_DEBT,postgres,"with valueStreamDomain as (
select domain.name as TDomain, domain.Id as TDomainId, valueStream.name as TValueStream from jira_integration.field_option domain
left join jira_integration.field_option valueStream on valueStream.id = domain.parent_id
)

SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)"",
  valueStreamDomain.TDomain,
  valueStreamDomain.TValueStream
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" 
LEFT JOIN valueStreamDomain on CAST(valueStreamDomain.TDomainId as TEXT) = issue_field_history.value
where issue_field_history.is_active = true and issue_field_history.field_id in ('customfield_10459')"
e28ff672-fd7e-0847-a23c-c05b6591868d,Releases details (Jira),postgres,"SELECT CAST(""issue_multiselect_history"".""_fivetran_id"" AS TEXT) AS ""_fivetran_id"",
  ""issue_multiselect_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_multiselect_history)"",
  CAST(""issue_multiselect_history"".""author_id"" AS TEXT) AS ""author_id"",
  CAST(""issue_multiselect_history"".""field_id"" AS TEXT) AS ""field_id"",
  ""issue_multiselect_history"".""is_active"" AS ""is_active"",
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id"",
  ""issue_multiselect_history"".""time"" AS ""time"",
  CAST(""issue_multiselect_history"".""value"" AS TEXT) AS ""value""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where

""issue_multiselect_history"".field_id = 'labels' and ""issue_multiselect_history"".is_active = true and ""issue_multiselect_history"".value in  ('automated-level0',
'automated-level1',
'automated-level2',
'automated-level3')"
e28ff672-fd7e-0847-a23c-c05b6591868d,Releases details (Jira),postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
 CAST(""fixVersions"".""value"" as INT) as fixVersionID
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
JOIN ""jira_integration"".""issue_multiselect_history"" ""fixVersions"" on ""fixVersions"".issue_id = ""issue"".id and ""fixVersions"".field_id = 'fixVersions' and ""fixVersions"".is_active = true and ""fixVersions"".value is not NULL
where project in (10000,10103,10166,10164,10153,10010,10145) and _fivetran_deleted = false"
e28ff672-fd7e-0847-a23c-c05b6591868d,Releases details (Jira),postgres,"with valueStreamDomain as (
select domain.name as TDomain, domain.Id as TDomainId, valueStream.name as TValueStream from jira_integration.field_option domain
left join jira_integration.field_option valueStream on valueStream.id = domain.parent_id
)

SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)"",
  valueStreamDomain.TDomain,
  valueStreamDomain.TValueStream
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" 
LEFT JOIN valueStreamDomain on CAST(valueStreamDomain.TDomainId as TEXT) = issue_field_history.value
where issue_field_history.is_active = true and issue_field_history.field_id in ('customfield_10459')"
e28ff672-fd7e-0847-a23c-c05b6591868d,Releases details (Jira),postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
e28ff672-fd7e-0847-a23c-c05b6591868d,Zendesk from DW,postgres,"SELECT ""ticket"".""_fivetran_synced"" AS ""_fivetran_synced"",
  ""ticket"".""allow_channelback"" AS ""allow_channelback"",
  ""ticket"".""created_at"" AS ""created_at"",
  ""ticket"".""custom_acumatica_related"" AS ""custom_acumatica_related"",
  CAST(""ticket"".""custom_tech_case_type"" AS TEXT) AS ""custom_tech_case_type"",
  ""ticket"".""has_incidents"" AS ""has_incidents"",
  ""ticket"".""id"" AS ""id"",
  ""ticket"".""is_public"" AS ""is_public"",
  ""ticket"".""merged_ticket_ids"" AS ""merged_ticket_ids"",
  ""ticket"".""requester_id"" AS ""requester_id"",
  CAST(""ticket"".""type"" AS TEXT) AS ""type"",
  ""ticket"".""updated_at"" AS ""updated_at"",
  CAST(""ticket"".""url"" AS TEXT) AS ""url""
FROM ""zendesk"".""ticket"" ""ticket""
where ""ticket"".""organization_id"" is NOT null"
e28ff672-fd7e-0847-a23c-c05b6591868d,Zendesk from DW,postgres,"SELECT ""ticket_tag"".""_fivetran_synced"" AS ""_fivetran_synced (ticket_tag)"",
  CAST(""ticket_tag"".""tag"" AS TEXT) AS ""tag"",
  ""ticket_tag"".""ticket_id"" AS ""ticket_id""
FROM ""zendesk"".""ticket_tag"" ""ticket_tag"" where ""tag"" in ('jira_escalated')"
e4395bbc-9050-14b9-0fbd-2f18a467a56f,Marketo,,
e5cdc250-f641-79d5-db21-cd9a72fa1341,Sales Navigator - Seats,,
e5cdc250-f641-79d5-db21-cd9a72fa1341,Sales Navigator Connection,,
e6998666-5946-8143-d4ab-07522b416cb4,plano_diffs,,
e7370309-6a8e-63fd-cfc4-9bf496dde8f0,Custom SQL Query (gpbidb),postgres,"SELECT ""comment"".""_fivetran_synced"" AS ""_fivetran_synced"",
  ""comment"".""created_by"" AS ""created_by"",
  ""comment"".""date_created"" AS ""date_created"",
  ""comment"".""date_due"" AS ""date_due"",
  ""comment"".""date_modified"" AS ""date_modified"",
  ""comment"".""id"" AS ""id"",
  ""comment"".""modified_by"" AS ""modified_by"",
  ""comment"".""owner_class"" AS ""owner_class"",
  ""comment"".""owner_id"" AS ""owner_id"",
  ""comment"".""parent_comment_id"" AS ""parent_comment_id"",
  ""comment"".""type"" AS ""type"",
  ""comment"".""user_id"" AS ""user_id"",
  ""comment"".""value"" AS ""value"",
  ""comment"".""version"" AS ""version""
FROM ""goglobal_gp_goglobal"".""comment"" ""comment""
where owner_class='com.gp.persistence.model.main.Professional'"
e7370309-6a8e-63fd-cfc4-9bf496dde8f0,Custom SQL Query (gpbidb),postgres,"WITH CPF_NUMBER AS (
	SELECT f.professional_id, f.country_custom_field_id, f.value 
	FROM goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current AS f
	WHERE country_custom_field_id= 11

),

ID_NUMBER AS (
	SELECT f.professional_id, f.country_custom_field_id, f.value 
	FROM goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current AS f
	WHERE country_custom_field_id= 8
),

CTPS_NUMBER AS (
	SELECT f.professional_id, f.country_custom_field_id, f.value 
	FROM goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current AS f
	WHERE country_custom_field_id= 9
),

CTPS_SERIES_STATE AS (
	SELECT f.professional_id, f.country_custom_field_id, f.value 
	FROM goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current AS f
	WHERE country_custom_field_id= 10
)


SELECT p.client_id as Cutomer_id,
	   cc.name as Customer, 
       p.id AS professional_id,
	   CASE WHEN  p.goes_by is null then CONCAT(p.first_name, ' ',p.last_name)
	   ELSE CONCAT(p.first_name, ' ',p.last_name,' (',p.goes_by,')') END AS professional_name,
	   p.legal_full_name as full_name_prof,
	   p.job_category,
	   p.title,
       p.birth_date,
	   p.status,
	   p.is_failed_to_launch,
	   p.work_email,
	   p.personal_email,
	   p.annual_base_salary,
           p.service_class,
	   p4.name AS professional_working_country,
	   CASE
            WHEN  p4.gp_region::text = '1'::text THEN 'EMEA'::text
            WHEN  p4.gp_region::text = '2'::text THEN 'APAC'::text
            WHEN  p4.gp_region::text = '3'::text THEN 'NA'::text
            WHEN  p4.gp_region::text = '4'::text THEN 'LATAM'::text
            ELSE NULL::text
        END AS professional_working_region,
	   p.work_address_id,
	   p.home_address_id,
	   p5.address1 AS home_address_1,
	   p5.address2 AS home_address_2,
	   p5.address3 AS home_address_3,
	   p5.city AS home_city,
	   p5.postal_code AS home_postalcode,
	   p6.name AS home_country,
	   p7.name AS home_province,
	   p16.address1 AS work_address_1,
	   p16.address2 AS work_address_2,
	   p16.address3 AS work_address_3,
	   p16.city AS work_city,
	   p16.postal_code AS work_postalcode,
	   p17.name AS work_country,
	   p18.name AS work_province,
	   p.emergency_email,
	   p.emergency_name,
	   p.emergency_phone,
	   p.bus_phone,
	   p.mobile_phone,
	   p.payroll_start_date,
	   p.payroll_end_date,
	   CPF_NUMBER.value as CPF_NUMBER,
	   ID_NUMBER.value as ID_NUMBER ,
	   CTPS_NUMBER.value as CTPS_NUMBER,
	   CTPS_SERIES_STATE.value as CTPS_SERIES_STATE,
	   cc.is_demo_client

FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS p
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS p3
ON p.lsp_country_id=p3.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current cco ON p.client_country_id=cco.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS p4 ON cco.country_id=p4.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS p5
ON p.home_address_id = p5.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS p6
ON p5.country_id = p6.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_province_current AS p7
ON p5.province_id = p7.id
LEFT JOIN repo.v_gp_mdm_region AS p8
ON p4.country_code = p8.country_code
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS p9
on p.lsp_country_id=p9.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS p16
ON p.work_address_id = p16.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS p17
ON p16.country_id = p17.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_province_current AS p18
ON p16.province_id = p18.id
LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_country_current as p22 
on p9.country_id = p22.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current as cc
on p.client_id = cc.id
LEFT JOIN CPF_NUMBER
on p.id = CPF_NUMBER.professional_id
LEFT JOIN ID_NUMBER
on p.id = ID_NUMBER.professional_id
LEFT JOIN CTPS_NUMBER
on p.id = CTPS_NUMBER.professional_id
LEFT JOIN CTPS_SERIES_STATE
on p.id = CTPS_SERIES_STATE.professional_id

WHERE p4.name = 'Brazil' 
ORDER BY 3"
e7b4de6f-fc6a-0555-2d4c-88dd65bd9641,Custom SQL Query (gpbidb) (2),,
e7b4de6f-fc6a-0555-2d4c-88dd65bd9641,Custom SQL Query (gpbidb) (2),postgres,"WITH GPP AS (
SELECT DISTINCT 

	      a.id,
	      a.name,
          a.status as client_status,
          a.pricing_model,
	     CASE WHEN a.msa_contract_start_date_peo IS NOT NULL THEN a.msa_contract_start_date_peo
	     WHEN a.msa_contract_start_date_peo IS NULL AND a.msa_contract_start_date_services IS NOT NULL THEN a.msa_contract_start_date_services
	     WHEN a.msa_contract_start_date_services IS NULL AND a.msa_contract_start_date_sourcing IS NOT NULL THEN a.msa_contract_start_date_sourcing
	     WHEN a.msa_contract_start_date_sourcing IS NULL AND a.msa_contract_start_date_aso IS NOT NULL THEN a.msa_contract_start_date_aso
	     ELSE a.msa_contract_start_date_peo END AS ma_start_date,
	      b.pop_current, 
	      c.pop_to_date,
	      d.min_pay_start,
	      d.max_pay_start,
	      d.min_pay_end,
	      d.max_pay_end
	       
	FROM (SELECT a.id,a.pricing_model,a.name,a.status,a.msa_contract_start_date_services,a.msa_contract_start_date_peo, a.msa_contract_start_date_aso,a.msa_contract_start_date_sourcing
		 FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
		 WHERE a.is_demo_client = false) AS a
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_current
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC ('month', cal_date)= DATE_TRUNC ('month', CURRENT_DATE)
			  GROUP BY 1) AS b
	ON a.id = b.client_id
	
	LEFT JOIN (  SELECT client_id,COUNT(DISTINCT professional_id) pop_to_date
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			   AND DATE_TRUNC ('month', cal_date)<<= DATE_TRUNC ('month', CURRENT_DATE)
			  GROUP BY 1) AS c
	ON a.id = c.client_id
	
	LEFT JOIN (SELECT client_id, MAX(payroll_start_date)AS max_pay_start, MAX (payroll_end_date)AS max_pay_end,
				  MIN(payroll_end_date)AS min_pay_end, MIN(payroll_start_date) AS min_pay_start
				 FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 

				 GROUP BY 1) d
	ON a.id = d.client_id
	

),
FINAL AS(SELECT 
		
     GPP.*,
	
	  
	  	CASE 
		   
			 WHEN (CURRENT_DATE -  GPP.ma_start_date ) <<= 90
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.min_pay_start IS NULL
			 THEN 'Newly Signed'
			 
			 WHEN  GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND date_trunc('month', GPP.min_pay_start) >>= date_trunc('month',CURRENT_DATE) THEN 'Onboarding' 
			  
		    WHEN  GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current >>0  THEN 'Currently Active'
			 
			 WHEN  GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.max_pay_end << CURRENT_DATE OR (date_trunc('month', GPP.max_pay_start) >>= date_trunc('month',CURRENT_DATE) AND GPP.max_pay_end >> CURRENT_DATE)
			 THEN 'Currently Inactive'
			 
			 
			 WHEN ( (CURRENT_DATE -  GPP.ma_start_date )>>90
			 AND GPP.pop_to_date IS NULL)
             THEN 'Never Active' 
		 
		  
			
			 END AS gpp_account_status
		 FROM GPP
)

SELECT * 
FROM FINAL"
e7b4de6f-fc6a-0555-2d4c-88dd65bd9641,Custom SQL Query (gpbidb) (2),postgres,"SELECT 
client_id,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('1') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS NEW_STATUS,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('2') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS Onb_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('3') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS ACTIVE_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('4') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS TERM_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('5') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS INACT_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= TRUE AND (service_class IS NULL OR service_class <<>>'4')) AS ftl_prof,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= FALSE AND service_class ='4' AND pro.status IN ('1') ) AS new_contractor,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= FALSE AND service_class ='4' AND pro.status IN ('2') ) AS onboarding_contractor,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= FALSE AND service_class ='4' AND pro.status IN ('3') ) AS active_contractor,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= FALSE AND service_class ='4' AND pro.status IN ('4') ) AS terminating_contractor,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= FALSE AND service_class ='4' AND pro.status IN ('5') ) AS inactive_contractor

FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS pro
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS client ON pro.client_id = client.id
WHERE client.is_demo_client = FALSE
GROUP BY pro.client_id"
e89cc81f-6819-c57f-f600-c640c6da8633,Customer historic professionals,postgres,"select cc.id ""Customer ID"",
	   cc.name ""Customer"",
	   cc.status ""Customer Status"",
	   cc.msa_contract_start_date_peo ""MA Contract Start Date PEO"",
	   CONCAT (person.first_name, ' ', person.last_name)""Account_manager"",
	   pc.id ""Pro ID"",
	   concat(pc.first_name,' ',pc.last_name) ""Professional"",
	   pc.is_failed_to_launch ""is FTL"",
	   pc.status ""Professional Status"",
	   pc.payroll_start_date ""Payroll Start Date"",
	   pc.payroll_end_date ""Payroll End Date"",		  
	   poc.onboard_start_date ""Onboard Start Date"",
	   co.name ""Country"",
	   fat.title ""Category"",
	   fa.title ""Title"", 
	   fa.original_file_name ""Original File Name"",
	   fa.created_by,
	   concat(person2.first_name,' ',person2.last_name) ""Posted by"",
	   date(fa.date_created) ""Date Created"",
	   case when fa.created_by='7200' then 'System User'
		   	when fa.created_by is null then NULL
	   		else 'ABANDONED' 
	   END ""ECG"",
	   case when lower(fa.title) LIKE '%employ%' then 1 
	   		when fa.titlE is null then NULL
		    else 0 
	   end as ""'Employ' in Title""
from  goglobal_gp_goglobal.v_gp_gg_professional_current pc 
full join goglobal_gp_goglobal.v_gp_gg_client_current cc on cc.id=pc.client_id
left join  goglobal_gp_goglobal.v_gp_gg_gp_person_current person ON  cc.gp_account_manager_id = person.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current lspcc on pc.lsp_country_id=lspcc.id
left join goglobal_gp_goglobal.v_gp_gg_country_current co on co.id=lspcc.country_id
left join goglobal_GP_goglobal.v_gp_gg_file_attachment_current fa on fa.owner_id=pc.id
left join goglobal_GP_goglobal.v_gp_gg_file_attachment_category_current fat on fat.id=fa.file_category_id
left join goglobal_GP_goglobal.v_gp_gg_gp_person_current person2 on person2.user_id=fa.created_by
left join goglobal_GP_goglobal.v_gp_gg_professional_onboarding_current poc on poc.id=pc.professional_onboarding_id
where cc.is_demo_client='false'"
e0d4055b-b50f-d7d9-1805-60a699c684e0,v_gp_sfdc_master_marketing_dashboard (salesforce.v_gp_sfdc_master_marketing_dashboard)+ (gpbidb),,
00207d74-9229-fc49-e970-04d96ee33584,Customer Data,postgres,"SELECT CAST(""Predicted"".""EXPLANATION_10_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_10_VALUE"",
  CAST(""Predicted"".""EXPLANATION_10_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_10_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_10_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_10_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_10_STRENGTH"" AS TEXT) AS ""EXPLANATION_10_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_1_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_1_VALUE"",
  CAST(""Predicted"".""EXPLANATION_1_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_1_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_1_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_1_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_1_STRENGTH"" AS TEXT) AS ""EXPLANATION_1_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_2_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_2_VALUE"",
  CAST(""Predicted"".""EXPLANATION_2_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_2_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_2_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_2_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_2_STRENGTH"" AS TEXT) AS ""EXPLANATION_2_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_3_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_3_VALUE"",
  CAST(""Predicted"".""EXPLANATION_3_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_3_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_3_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_3_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_3_STRENGTH"" AS TEXT) AS ""EXPLANATION_3_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_4_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_4_VALUE"",
  CAST(""Predicted"".""EXPLANATION_4_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_4_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_4_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_4_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_4_STRENGTH"" AS TEXT) AS ""EXPLANATION_4_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_5_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_5_VALUE"",
  CAST(""Predicted"".""EXPLANATION_5_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_5_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_5_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_5_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_5_STRENGTH"" AS TEXT) AS ""EXPLANATION_5_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_6_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_6_VALUE"",
  CAST(""Predicted"".""EXPLANATION_6_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_6_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_6_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_6_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_6_STRENGTH"" AS TEXT) AS ""EXPLANATION_6_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_7_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_7_VALUE"",
  CAST(""Predicted"".""EXPLANATION_7_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_7_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_7_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_7_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_7_STRENGTH"" AS TEXT) AS ""EXPLANATION_7_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_8_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_8_VALUE"",
  CAST(""Predicted"".""EXPLANATION_8_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_8_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_8_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_8_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_8_STRENGTH"" AS TEXT) AS ""EXPLANATION_8_STRENGTH_NUMERIC"",
  CAST(""Predicted"".""EXPLANATION_9_ACTUAL_VALUE"" AS TEXT) AS ""EXPLANATION_9_VALUE"",
  CAST(""Predicted"".""EXPLANATION_9_FEATURE_NAME"" AS TEXT) AS ""EXPLANATION_9_FEATURE"",
  CAST(""Predicted"".""EXPLANATION_9_QUALITATIVE_STRENGTH"" AS TEXT) AS ""EXPLANATION_9_STRENGTH"",
  CAST(""Predicted"".""EXPLANATION_9_STRENGTH"" AS TEXT) AS ""EXPLANATION_9_STRENGTH_NUMERIC"",
  CASE 
    WHEN ""Predicted"".""POSITIVE_CLASS"" ISNULL OR 
         TRIM(""Predicted"".""POSITIVE_CLASS"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""POSITIVE_CLASS"" AS BOOLEAN) END AS ""POSITIVE_CLASS"",
  CASE 
    WHEN ""Predicted"".""THRESHOLD"" ISNULL OR 
         TRIM(""Predicted"".""THRESHOLD"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""THRESHOLD"" AS FLOAT) END AS ""THRESHOLD"",
  CAST(""Predicted"".""client_id"" AS TEXT) AS ""client_id (customer_churn_with_dnb_latest)"",
  CAST(""Predicted"".""deployment_id"" AS TEXT) AS ""deployment_id"",
  CASE 
    WHEN ""Predicted"".""is_churn_False_PREDICTION"" ISNULL OR 
         TRIM(""Predicted"".""is_churn_False_PREDICTION"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""is_churn_False_PREDICTION"" AS FLOAT) END AS ""is_churn_False_PREDICTION"",
  CASE 
    WHEN ""Predicted"".""is_churn_PREDICTION"" ISNULL OR 
         TRIM(""Predicted"".""is_churn_PREDICTION"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""is_churn_PREDICTION"" AS BOOLEAN) END AS ""is_churn_PREDICTION"",
  CASE 
    WHEN ""Predicted"".""is_churn_True_PREDICTION"" ISNULL OR 
         TRIM(""Predicted"".""is_churn_True_PREDICTION"") = ''
    THEN NULL
    ELSE CAST(""Predicted"".""is_churn_True_PREDICTION"" AS FLOAT) END AS ""is_churn_True_PREDICTION"",
  CAST(""Predicted"".""prediction_status"" AS TEXT) AS ""prediction_status"",
  ""Predicted"".""update_time"" AS ""update_time"",
  ""Predicted"".""use_case"" AS ""use_case""
FROM ""datarobot_predictions"".""customer_churn_with_dnb_latest"" ""Predicted""
WHERE ""Predicted"".""prediction_status"" = 'OK'"
00207d74-9229-fc49-e970-04d96ee33584,Customer Data,postgres,"SELECT
	""Actual"".""active_professionals""           AS ""active_professionals""
  , ""Actual"".""active_profs_ratio""             AS ""active_profs_ratio""
  , ""Actual"".""businessEntityType_description"" AS ""businessEntityType_description""
  , ""Actual"".""charterType_description""        AS ""charterType_description""
  , ""Actual"".""client_id""                      AS ""client_id""
  , ""Actual"".""client_name""                    AS ""client_name""
  , ""Actual"".""comments_clean""                 AS ""comments_clean""
  , ""Actual"".""company_age_bins""               AS ""company_age_bins""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""company_age_in_gp"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""company_age_in_gp""
		END
	)
	                                                                   AS ""company_age_in_gp""
  , ""Actual"".""company_operational_age_bins""                            AS ""company_operational_age_bins""
  , CAST(""Actual"".""country_count"" AS BIGINT)                           AS ""country_count""
  , ""Actual"".""country_count_bins""                                      AS ""country_count_bins""
  , CAST(""Actual"".""customer_crossed_avg_age"" AS BOOL)                  AS ""customer_crossed_avg_age""
  , ""Actual"".""date_created""                                            AS ""date_created""
  , ""Actual"".""dunsControlStatus_operatingStatus_description""           AS ""dunsControlStatus_operatingStatus_description""
  , ""Actual"".""duns_number""                                             AS ""duns_number""
  , CAST(""Actual"".""dunscontrolstatus_isdelisted"" AS BOOL)              AS ""dunscontrolstatus_isdelisted""
  , CAST(""Actual"".""dunscontrolstatus_ismailundeliverable"" AS BOOL)     AS ""dunscontrolstatus_ismailundeliverable""
  , CAST(""Actual"".""dunscontrolstatus_ismarketable"" AS BOOL)            AS ""dunscontrolstatus_ismarketable""
  , CAST(""Actual"".""dunscontrolstatus_istelephonedisconnected"" AS BOOL) AS ""dunscontrolstatus_istelephonedisconnected""
  , ""Actual"".""failed_professionals""                                    AS ""failed_professionals""
  , ""Actual"".""first_hire""                                              AS ""first_hire""
  , ""Actual"".""gg_billing_country""                                      AS ""gg_billing_country""
  , CASE WHEN ""Actual"".""has_profs_in_country_w_own_entity"" = 'None'
  THEN CAST('false' AS BOOL) 
  ELSE CAST(""Actual"".""has_profs_in_country_w_own_entity"" AS BOOL) END AS ""has_profs_in_country_w_own_entity""
  , CAST(""Actual"".""has_urgent_tickets"" AS BOOL)                        AS ""has_urgent_tickets""
  , CAST(""Actual"".""is_bank_info_approved"" AS BOOL)                     AS ""is_bank_info_approved""
  , CAST(""Actual"".""is_churn"" AS BOOL)                                  AS ""is_churn""
  , CAST(""Actual"".""is_partner_referred"" AS BOOL)                       AS ""is_partner_referred""
  , CAST(""Actual"".""isexporter"" AS BOOL)                                AS ""isexporter""
  , CAST(""Actual"".""isfortune1000listed"" AS BOOL)                       AS ""isfortune1000listed""
  , CAST(""Actual"".""isimporter"" AS BOOL)                                AS ""isimporter""
  , CAST(""Actual"".""issmallbusiness"" AS BOOL)                           AS ""issmallbusiness""
  , CAST(""Actual"".""isstandalone"" AS BOOL)                              AS ""isstandalone""
  , ""Actual"".""inactive_professionals""                                  AS ""inactive_professionals""
  , ""Actual"".""industry_name""                                           AS ""industry_name""
  , ""Actual"".""health_sentiment""                                        AS ""health_sentiment""
  , ""Actual"".""legalForm_description""                                   AS ""legalForm_description""
  , ""Actual"".""max_prof_country""                                        AS ""max_prof_country""
  , ""Actual"".""max_prof_in_any_country""                                 AS ""max_prof_in_any_country""
  , ""Actual"".""max_prof_in_any_country_bins""                            AS ""max_prof_in_any_country_bins""
  , ""Actual"".""min_engagement_length""                                   AS ""min_engagement_length""
  , ""Actual"".""min_engagement_length_bins""                              AS ""min_engagement_length_bins""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT) = 'NaT'
				THEN NULL
			WHEN (
					CAST(CAST(TO_TIMESTAMP(CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT), 'YYYY-MM-DD') AS TIMESTAMP) AS DATE) NOTNULL
				)
				THEN CAST(CAST(TO_TIMESTAMP(CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT), 'YYYY-MM-DD') AS TIMESTAMP) AS DATE)
			WHEN (
					CAST(CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT) AS DATE) NOTNULL
				)
				THEN CAST(CAST(""Actual"".""msa_contract_start_date_peo"" AS TEXT) AS DATE)
				ELSE NULL
		END
	)
	                                                     AS ""msa_contract_start_date_peo""
  , ""Actual"".""net_professionals_terminated""              AS ""net_professionals_terminated""
  , ""Actual"".""net_professionals_terminated_bins""         AS ""net_professionals_terminated_bins""
  , ""Actual"".""net_professionals_terminated_percent""      AS ""net_professionals_terminated_percent""
  , ""Actual"".""new_professionals""                         AS ""new_professionals""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""no_countries_with_entity"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""no_countries_with_entity""
		END
	)
	                                                                   AS ""no_countries_with_entity""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""no_countries_with_entity_and_active_profs"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""no_countries_with_entity_and_active_profs""
		END
	)
	                                                                   AS ""no_countries_with_entity_and_active_profs""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""no_profs_moved_to_entity"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""no_profs_moved_to_entity""
		END
	)
	                                                                   AS ""no_profs_moved_to_entity""
  , ""Actual"".""num_stock_exchange_reg_bins""               AS ""num_stock_exchange_reg_bins""
  , ""Actual"".""num_years_since_incorporated""              AS ""num_years_since_incorporated""
  , ""Actual"".""num_years_since_operating""                 AS ""num_years_since_operating""
  , ""Actual"".""numberofemployees""                         AS ""numberofemployees""
  , ""Actual"".""numberofemployees_bins""                    AS ""numberofemployees_bins""
  , ""Actual"".""numberofregisteredstockexchanges""          AS ""numberofregisteredstockexchanges""
  , ""Actual"".""numberofregistrations""                     AS ""numberofregistrations""
  , ""Actual"".""offboarding_trend_bins""                    AS ""offboarding_trend_bins""
  , ""Actual"".""onboarding_finished""                       AS ""onboarding_finished""
  , ""Actual"".""onboarding_professionals""                  AS ""onboarding_professionals""
  , ""Actual"".""onboarding_trend_bins""                     AS ""onboarding_trend_bins""
  , ""Actual"".""org_type""                                  AS ""org_type""
  , CAST(""Actual"".""own_entity_ind"" AS BOOL)              AS ""own_entity_ind""
  , ""Actual"".""payroll_end_last_1_months_prof""            AS ""payroll_end_last_1_months_prof""
  , ""Actual"".""payroll_end_last_2_months_prof""            AS ""payroll_end_last_2_months_prof""
  , ""Actual"".""payroll_end_last_3_months_prof""            AS ""payroll_end_last_3_months_prof""
  , ""Actual"".""payroll_end_last_4_months_prof""            AS ""payroll_end_last_4_months_prof""
  , ""Actual"".""payroll_end_last_5_months_prof""            AS ""payroll_end_last_5_months_prof""
  , ""Actual"".""payroll_end_last_6_months_prof""            AS ""payroll_end_last_6_months_prof""
  , ""Actual"".""payroll_end_last_6_months_prof_bins""       AS ""payroll_end_last_6_months_prof_bins""
  , ""Actual"".""payroll_end_trend""                         AS ""payroll_end_trend""
  , ""Actual"".""payroll_start_last_1_months""               AS ""payroll_start_last_1_months""
  , ""Actual"".""payroll_start_last_2_months""               AS ""payroll_start_last_2_months""
  , ""Actual"".""payroll_start_last_3_months""               AS ""payroll_start_last_3_months""
  , ""Actual"".""payroll_start_last_4_months""               AS ""payroll_start_last_4_months""
  , ""Actual"".""payroll_start_last_5_months""               AS ""payroll_start_last_5_months""
  , ""Actual"".""payroll_start_last_6_months""               AS ""payroll_start_last_6_months""
  , ""Actual"".""payroll_start_last_6_months_bins""          AS ""payroll_start_last_6_months_bins""
  , ""Actual"".""payroll_start_trend""                       AS ""payroll_start_trend""
  , ""Actual"".""primaryAddress_addressCountry_name""        AS ""primaryAddress_addressCountry_name""
  , ""Actual"".""primaryAddress_continentalRegion_name""     AS ""primaryAddress_continentalRegion_name""
  , ""Actual"".""primaryIndustryCode_usSicV4Description""    AS ""primaryIndustryCode_usSicV4Description""
  , ""Actual"".""primaryaddress_ismanufacturinglocation""    AS ""primaryaddress_ismanufacturinglocation""
  ,
	(
		CASE
			WHEN CAST(""Actual"".""profs_at_risk"" AS TEXT) = 'nan'
				THEN NULL
				ELSE ""Actual"".""profs_at_risk""
		END
	)
	                                                                   AS ""profs_at_risk""
  , CAST(""Actual"".""profs_moved_to_entity"" AS BOOL)              AS ""profs_moved_to_entity""
  , ""Actual"".""sfdc_client_health""                        AS ""sfdc_client_health""
  , ""Actual"".""sfdc_expansion_tier_level""                 AS ""sfdc_expansion_tier_level""
  , ""Actual"".""sfdc_pricing_model""                        AS ""sfdc_pricing_model""
  , ""Actual"".""sfdccustomer_health_notes""                 AS ""sfdccustomer_health_notes""
  , ""Actual"".""sfdccustomer_health_notes_agg""             AS ""sfdccustomer_health_notes_agg""
  , ""Actual"".""status""                                    AS ""status""
  , ""Actual"".""stockexchanges""                            AS ""stockexchanges""
  , ""Actual"".""terminating_professionals""                 AS ""terminating_professionals""
  , ""Actual"".""tier_type""                                 AS ""tier_type""
  , ""Actual"".""time_taken_for_first_hire""                 AS ""time_taken_for_first_hire""
  , ""Actual"".""time_taken_for_first_hire_bins""            AS ""time_taken_for_first_hire_bins""
  , ""Actual"".""time_taken_to_sign_msa""                    AS ""time_taken_to_sign_msa""
  , ""Actual"".""time_taken_to_sign_msa_bins""               AS ""time_taken_to_sign_msa_bins""
  , ""Actual"".""total_active_benefits""                     AS ""total_active_benefits""
  , ""Actual"".""total_active_benefits_bins""                AS ""total_active_benefits_bins""
  , ""Actual"".""total_benefits""                            AS ""total_benefits""
  , ""Actual"".""total_benefits_bins""                       AS ""total_benefits_bins""
  , ""Actual"".""total_benefits_created_last_6_months""      AS ""total_benefits_created_last_6_months""
  , ""Actual"".""total_benefits_created_last_6_months_bins"" AS ""total_benefits_created_last_6_months_bins""
  , ""Actual"".""total_professionals""                       AS ""total_professionals""
  , ""Actual"".""total_professionals_bins""                  AS ""total_professionals_bins""
  , ""Actual"".""yearly_revenue""                            AS ""yearly_revenue""
  , ""Actual"".""yearly_revenue_bins""                       AS ""yearly_revenue_bins""
  , ""Actual"".""zendesk_avg_sla_days""                      AS ""zendesk_avg_sla_days""
  , ""Actual"".""zendesk_issue_count""                       AS ""zendesk_issue_count""
  , ""Actual"".""zendesk_issue_count_bins""                  AS ""zendesk_issue_count_bins""
  , ""Actual"".""zendesk_issue_count_high""                  AS ""zendesk_issue_count_high""
  , ""Actual"".""zendesk_issue_count_urgent""                AS ""zendesk_issue_count_urgent""
FROM
	""preprocessed_data"".""customer_with_dnb_data"" ""Actual"""
00207d74-9229-fc49-e970-04d96ee33584,Customer Data,postgres,"WITH sm_temp AS
    (
        SELECT
            l1.""Associate ID""
          , l1.""Payroll Name""          AS ""M1 Name""
          , l1.""Job Title Description"" AS ""M1 Job Title""
          , l1.""Status""                AS ""M1 Status""
          , l2.""Payroll Name""          AS ""M2 Name""
          , l2.""Job Title Description"" AS ""M2 Job Title""
          , l3.""Payroll Name""          AS ""M3 Name""
          , l3.""Job Title Description"" AS ""M3 Job Title""
          , l1.""Work Contact: Work Email""
          , ROW_NUMBER() OVER (PARTITION BY l1.""Associate ID"") AS row_num
        FROM
            workday_hris.v_non_sensitive_workday_data l1
            LEFT JOIN
                workday_hris.v_non_sensitive_workday_data l2
                ON
                    l1.""Reports To Associate ID"" = l2.""Associate ID""
            LEFT JOIN
                workday_hris.v_non_sensitive_workday_data l3
                ON
                    l2.""Reports To Associate ID"" = l3.""Associate ID""
        --WHERE
            --l1.""Business Unit Description"" in ('Global Operations'
            --                               , 'Global Ops')
            --AND l1.""Home Department Description""='Account Management'
            --AND l1.""Job Title Description""      = 'Account Manager'
            --AND l1.""Status"" = 'Active'
        order by
            l1.""Reports To Name""
    )
  , sm_final as
    (
        SELECT
            CASE
                WHEN ""M1 Name"" like '%,%'
                    THEN CONCAT(SPLIT_PART(""M1 Name"",',',2),' ',SPLIT_PART(""M1 Name"",',',1))
                    ELSE ""M1 Name""
            END AS ""M1 Name""
          , ""M1 Job Title""
          , ""M1 Status""
          , lower(""Work Contact: Work Email"") AS ""M1 Work Email""
          , CASE
                WHEN ""M2 Job Title"" = 'Sr. Manager, Customer Experience'
                    THEN NULL
                    ELSE
                    CASE
                        WHEN ""M2 Name"" like '%,%'
                            THEN CONCAT(SPLIT_PART(""M2 Name"",',',2),' ',SPLIT_PART(""M2 Name"",',',1))
                            ELSE ""M2 Name""
                    END
            END ""M2 Name""
          , CASE
                WHEN ""M2 Job Title"" = 'Sr. Manager, Customer Experience'
                    THEN NULL
                    ELSE ""M2 Job Title""
            END ""M2 Job Title""
            --, CONCAT(SPLIT_PART(""M2 Name"",',',2),' ',SPLIT_PART(""M2 Name"",',',1)) AS ""M2 Name""
            --, ""M2 Job Title""
          , CASE
                WHEN ""M2 Job Title"" = 'Sr. Manager, Customer Experience'
                    THEN
                    CASE
                        WHEN ""M2 Name"" like '%,%'
                            THEN CONCAT(SPLIT_PART(""M2 Name"",',',2),' ',SPLIT_PART(""M2 Name"",',',1))
                            ELSE ""M2 Name""
                    END
                    ELSE
                    CASE
                        WHEN ""M3 Name"" like '%,%'
                            THEN CONCAT(SPLIT_PART(""M3 Name"",',',2),' ',SPLIT_PART(""M3 Name"",',',1))
                            ELSE ""M3 Name""
                    END
            END ""M3 Name""
          , CASE
                WHEN ""M2 Job Title"" = 'Sr. Manager, Customer Experience'
                    THEN ""M2 Job Title""
                    ELSE ""M3 Job Title""
            END ""M3 Job Title""
            --, CONCAT(SPLIT_PART(""M3 Name"",',',2),' ',SPLIT_PART(""M3 Name"",',',1)) AS ""M3 Name""
            --, ""M3 Job Title""
        from
            sm_temp
        WHERE
            row_num = 1
        order by
            ""M1 Name""
    )
  , ticket_sla AS
    (
        SELECT
            t.id AS ticket_id
          , CASE
                WHEN t.priority = 'urgent'
                    THEN 2880
                WHEN t.priority = 'high'
                    THEN 7200
                WHEN t.priority = 'normal'
                    THEN 28800
                WHEN t.priority = 'low'
                    THEN 64800
                    ELSE 129600
            END AS sla_limit
        FROM
            zendesk.ticket t
        WHERE
            t.status <<>> 'deleted'
    )
  , zd AS
    (
        SELECT
            u.organization_id
          , o.custom_customer_id AS zd_client_id
          , o.name               AS org_name
          , COUNT(t.id)             issues_raised
          , COUNT
                (
                    CASE
                        WHEN tm.full_resolution_time_in_minutes_business <<= sla_limit
                            AND status in ('closed'
                                         , 'solved')
                            THEN t.id
                            ELSE NULL
                    END
                )
            AS ticket_count_within_sla
          , COUNT
                (
                    CASE
                        WHEN tm.full_resolution_time_in_minutes_business >> sla_limit
                            AND status in ('closed'
                                         , 'solved')
                            THEN t.id
                            ELSE NULL
                    END
                )
            AS ticket_count_sla_breached
          , COUNT
                (
                    CASE
                        WHEN lower(status) not in ('closed'
                                                 , 'solved')
                            THEN t.id
                            ELSE NULL
                    END
                )
            AS open_ticket_count
        FROM
            zendesk.ticket t
            LEFT JOIN
                zendesk.""user"" u
                ON
                    t.requester_id = u.id
            LEFT JOIN
                zendesk.organization o
                ON
                    u.organization_id = o.id
            LEFT JOIN
                zendesk.ticket_metrics tm
                ON
                    t.id = tm.ticket_id
            LEFT JOIN
                ticket_sla ts
                ON
                    t.id = ts.ticket_id
        WHERE
            t.status              <<>> 'deleted'
            AND u.organization_id <<>>'369464938673'
            AND o.custom_customer_id notnull
        GROUP BY
            u.organization_id
          , o.custom_customer_id
          , o.name
    )
  , sfdc AS
    (
        SELECT
            parent_name
          , MAX
                (
                    CASE
                        WHEN source ='SFDC Customer'
                            THEN source_id
                    END
                )
            AS salesforce_id
          , MIN
                (
                    CASE
                        WHEN source ='SFDC Customer'
                            THEN source_id
                    END
                )
            AS salesforce_id_2
          , MAX
                (
                    CASE
                        WHEN source ='GoGlobal Client'
                            THEN source_id
                    END
                )
            AS goglobal_id
        FROM
            repo.v_gp_mdm_customer
        GROUP BY
            parent_name
    )
  , sfdc_health AS
    (
        SELECT
            sfdc.*
          , t2.factors_for_customer_health_c
          , t2.complexity_c
        FROM
            sfdc
            LEFT JOIN
                salesforce.account t2
                ON
                    sfdc.salesforce_id=t2.id
        WHERE
            t2._fivetran_active = true
    )
  , final AS
    (
        SELECT
            client.id::TEXT                         AS client_id
          , client.name                             AS client_name
          , CONCAT(am.first_name, ' ',am.last_name) AS account_manager
          , CONCAT(ae.first_name, ' ',ae.last_name) AS account_executive
          , zd.ticket_count_sla_breached
          , zd.ticket_count_within_sla
          , zd.open_ticket_count
          , sfdc_health.factors_for_customer_health_c
          , sfdc_health.complexity_c
          , us.email AS work_email
        FROM
            goglobal_gp_goglobal.v_gp_gg_client_current client
            LEFT JOIN
                goglobal_gp_goglobal.v_gp_gg_gp_person_current am
                ON
                    client.gp_account_manager_id = am.id
            LEFT JOIN
                goglobal_gp_goglobal.v_gp_gg_gp_person_current ae
                ON
                    client.gp_current_sales_rep_id = ae.id
            LEFT JOIN
                zd
                ON
                    client.id = zd.zd_client_id
            LEFT JOIN
                sfdc_health
                ON
                    sfdc_health.goglobal_id::integer=client.id
            LEFT JOIN
                (
                    SELECT *
                    FROM
                        goglobal_gp_goglobal.v_gp_gg_user_current
                    where
                        lower(email) like '%globalization-partners.com%'
                )
                us
                ON
                    am.user_id = us.id
        WHERE
            client.is_demo_client IS FALSE
    )
SELECT *
from
    final
    left join
        sm_final
        on
            final.work_email = sm_final.""M1 Work Email"""
c5a4a938-339f-fd73-0227-4c044b6dea37,Escalated tickets,postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
""issue_type"".""name"" as ""issueTypeName""
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
LEfT JOIN ""jira_integration"".""issue_type"" ""issue_type"" on ""issue_type"".id = ""issue"".""issue_type""

JOIN ""jira_integration"".""issue_multiselect_history"" ""labels"" on ""labels"".issue_id = ""issue"".id and ""labels"".field_id = 'labels' and ""labels"".is_active = true and ""labels"".value in  ('jira_escalated', 'tech_escalated', 'jira-escalated', 'apr-2021-bug-bash') 
where project in (10000,10103) and _fivetran_deleted = false"
c5a4a938-339f-fd73-0227-4c044b6dea37,Escalated tickets,postgres,"SELECT ""issue_field_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_field_history)"",
  CAST(""issue_field_history"".""author_id"" AS TEXT) AS ""author_id (issue_field_history)"",
  CAST(""issue_field_history"".""field_id"" AS TEXT) AS ""field_id (issue_field_history)"",
  ""issue_field_history"".""is_active"" AS ""is_active (issue_field_history)"",
  ""issue_field_history"".""issue_id"" AS ""issue_id (issue_field_history)"",
  ""issue_field_history"".""time"" AS ""time (issue_field_history)"",
  CAST(""issue_field_history"".""value"" AS TEXT) AS ""value (issue_field_history)""
FROM ""jira_integration"".""issue_field_history"" ""issue_field_history"" where is_active = true and field_id in ('customfield_10390','customfield_10397', 'customfield_10450','customfield_10470')"
c5a4a938-339f-fd73-0227-4c044b6dea37,Escalated tickets,postgres,"with fixVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (fixVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""fixVersionID"",
  ""issue_multiselect_history"".""value"" AS ""fixVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'fixVersions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from fixVersion
left join version on version.""id (version)"" = fixVersion.""fixVersionID"""
c5a4a938-339f-fd73-0227-4c044b6dea37,Escalated tickets,postgres,"with affectsVersion as (SELECT 
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id (affectsVersion)"", 
   CAST(""issue_multiselect_history"".""value"" AS INT) as ""affectsVersionID"",
  ""issue_multiselect_history"".""value"" AS ""affectsVersion""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where is_active = true and field_id = 'versions'),

version as (


SELECT ""version"".""_fivetran_synced"" AS ""_fivetran_synced (version)"",
  ""version"".""archived"" AS ""archived"",
  CAST(""version"".""description"" AS TEXT) AS ""description (version)"",
  ""version"".""id"" AS ""id (version)"",
  CAST(""version"".""name"" AS TEXT) AS ""name (version)"",
  ""version"".""overdue"" AS ""overdue"",
  ""version"".""project_id"" AS ""project_id"",
  ""version"".""release_date"" AS ""release_date"",
  ""version"".""released"" AS ""released"",
  ""version"".""start_date"" AS ""start_date""
FROM ""jira_integration"".""version"" ""version"")

select * from version
left join affectsVersion on version.""id (version)"" = affectsVersion.""affectsVersionID"""
c5a4a938-339f-fd73-0227-4c044b6dea37,Escalated tickets,postgres,"SELECT CAST(""issue_multiselect_history"".""_fivetran_id"" AS TEXT) AS ""_fivetran_id"",
  ""issue_multiselect_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_multiselect_history)"",
  CAST(""issue_multiselect_history"".""author_id"" AS TEXT) AS ""author_id"",
  CAST(""issue_multiselect_history"".""field_id"" AS TEXT) AS ""field_id"",
  ""issue_multiselect_history"".""is_active"" AS ""is_active"",
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id"",
  ""issue_multiselect_history"".""time"" AS ""time"",
  CAST(""issue_multiselect_history"".""value"" AS TEXT) AS ""value""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where

""issue_multiselect_history"".field_id = 'labels' and ""issue_multiselect_history"".is_active = true and ""issue_multiselect_history"".value in  ('affects_payroll')"
c5a4a938-339f-fd73-0227-4c044b6dea37,Releases details (Jira),postgres,"SELECT 
  ""issue"".""created"" AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""issue"".""resolution"" AS ""resolution"",
  ""issue"".""resolved"" AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""resolution"".""name"" as ""resolutionName"",
 ""status"".""name"" as ""statusName"",
 ""priority"".""name"" as ""priorityName"",
 CAST(""fixVersions"".""value"" as INT) as fixVersionID
FROM ""jira_integration"".""issue"" ""issue""
LEfT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEfT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEfT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
JOIN ""jira_integration"".""issue_multiselect_history"" ""fixVersions"" on ""fixVersions"".issue_id = ""issue"".id and ""fixVersions"".field_id = 'fixVersions' and ""fixVersions"".is_active = true and ""fixVersions"".value is not NULL
where project in (10000,10103,10166,10164,10153,10010,10145) and _fivetran_deleted = false"
c5a4a938-339f-fd73-0227-4c044b6dea37,Releases details (Jira),postgres,"SELECT CAST(""issue_multiselect_history"".""_fivetran_id"" AS TEXT) AS ""_fivetran_id"",
  ""issue_multiselect_history"".""_fivetran_synced"" AS ""_fivetran_synced (issue_multiselect_history)"",
  CAST(""issue_multiselect_history"".""author_id"" AS TEXT) AS ""author_id"",
  CAST(""issue_multiselect_history"".""field_id"" AS TEXT) AS ""field_id"",
  ""issue_multiselect_history"".""is_active"" AS ""is_active"",
  ""issue_multiselect_history"".""issue_id"" AS ""issue_id"",
  ""issue_multiselect_history"".""time"" AS ""time"",
  CAST(""issue_multiselect_history"".""value"" AS TEXT) AS ""value""
FROM ""jira_integration"".""issue_multiselect_history"" ""issue_multiselect_history"" where

""issue_multiselect_history"".field_id = 'labels' and ""issue_multiselect_history"".is_active = true and ""issue_multiselect_history"".value in  ('automated-level0',
'automated-level1',
'automated-level2',
'automated-level3')"
c5a4a938-339f-fd73-0227-4c044b6dea37,Releases details (Jira),postgres,"select ""field_option"".name as featureTeam,
""issue_multiselect_history"".issue_id as issueID,
""issue_multiselect_history"".value as value
from ""jira_integration"".""issue_multiselect_history""
left join ""jira_integration"".""field_option"" ""field_option"" on ""field_option"".id = CAST(""issue_multiselect_history"".""value"" as INT)
where ""issue_multiselect_history"".field_id = 'customfield_10354'and is_active= true and ""issue_multiselect_history"".value is not null"
c5a4a938-339f-fd73-0227-4c044b6dea37,Releases details (Jira),,
c52f85a5-00fe-5953-e1fd-757753e3adea,Benefits by client,postgres,"with A as(
		SELECT t1.id, concat(t1.first_name,' ',t1.last_name) as Professional,
		   case when t1.status='1' then 'New' 
				when t1.status='2' then 'Onboarding'
				when t1.status='3' then 'Active'
				when t1.status='4' then 'Terminating'
				when t1.status='5' then 'Inactive'
				end as Pro_Status,
		   t2.name as Client,t2.status as client_status, 
		   T9.NAME AS LSP_NAME,
		   t4.name as Country,
		   t7.name as Benefit_type,
		   case when t8.mandatory='1' then 'Mandatory'
				when t8.mandatory='0' then 'Supplemental'
		   end as Plan_Type,
		   t6.name as Plan_Name,
			t6.custom,
			case when t6.active='1' then 'Yes'
		when t6.active='0' then 'No' else null
		end as Active_plan,
			t5.benefit_id,
		   t5.status,
		   t5.status as benefit_status
	from goglobal_gp_goglobal.v_gp_gg_professional_current t1
		left join goglobal_gp_goglobal.v_gp_gg_client_current t2
			on t1.client_id=t2.id
		left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t3 
			on t1.lsp_country_id=t3.id
		left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco
			on t1.client_country_id=cco.id
		left join goglobal_gp_goglobal.v_gp_gg_country_current t4
			on cco.country_id=t4.id
		left join benefits_gp_benefits.v_benefits_professional_benefit_enrollment_current t5
			on t1.id=t5.professional_external_id::INTEGER
		left join benefits_gp_benefits.v_benefits_benefit_current t6
			on t5.benefit_id=t6.id::INTEGER and t4.id=t6.country_external_id::INTEGER
		left join benefits_gp_benefits.v_benefits_benefit_type_current t7
			on t6.benefit_type_id=t7.id::INTEGER
		left join benefits_gp_benefits.v_benefits_country_benefit_type_current t8
			on t7.id::INTEGER=t8.benefit_type_id and t8.country_external_id::INTEGER=t4.id::INTEGER
		LEFT JOIN goglobal_gp_goglobal.V_GP_GG_LSP_CURRENT T9
			ON T3.LSP_ID=T9.ID
		where is_failed_to_launch='false' and is_demo_client='false' and service_class<<>>'4'
		order by professional),
	b as
		(select *, 
				case when (benefit_type is null and status is null) then 'A'
					 when (benefit_type is null and status is NOT null) THEN 'B'
				END AS FLAG FROM A
		)	
	select distinct client,
			client_status, 
			country, 
			benefit_type,
			plan_type,
			plan_name,
			active_plan,
			COUNT(distinct id) filter (where benefit_status = 'ENROLLED') as Enrolled,
			COUNT(distinct id) filter (where benefit_status = 'OFFERED') as Offered,
			COUNT(distinct id) filter (where benefit_status = 'DECLINED') as Declined,
			COUNT(distinct id) filter (where benefit_status = 'UNENROLLED') as Unenrolled,
			COUNT(distinct id) filter (where pro_status = 'New') as New,
			COUNT(distinct id) filter (where pro_status = 'Onboarding') as Onboarding,
			COUNT(distinct id) filter (where pro_status = 'Active') as Active,
			COUNT(distinct id) filter (where pro_status = 'Terminating') as Terminating,
			COUNT(distinct id) filter (where pro_status = 'Inactive') as Inactive
	from b
	group by 1,2,3,4,5,6,7"
c52f85a5-00fe-5953-e1fd-757753e3adea,by pro,postgres,"with A as(
	SELECT t1.id, 
		concat(t1.first_name,' ',t1.last_name) as Professional,
                t1.service_class,
	   	case 
	   		when t1.status='1' then 'New' 
	   		when t1.status='2' then 'Onboarding'
	   		when t1.status='3' then 'Active'
	   		when t1.status='4' then 'Terminating'
	   		when t1.status='5' then 'Inactive'
		end as Pro_Status,
	   	t2.id as client_id,
		t2.name as Client,
	   	t2.status as client_status, 
	   	T9.NAME AS LSP_NAME,
		t4.id as prueba,
	   	t4.name as Country,
	   	t7.name as Benefit_type,
	   	case 
	   		when t8.mandatory='1' then 'Mandatory'
	   		when t8.mandatory='0' then 'Supplemental'
	   	end as Plan_Type,
	   	t6.name as Plan_Name,
		t6.custom,
		case 
			when t6.active='1' then 'Yes'
			when t6.active='0' then 'No' 
			else null
		end as Active_plan,
		t5.benefit_id,
	   	t5.status,
	   	case 
	   		when t5.status='1' then 'Offered' 
	   		when t5.status='2' then 'Enrolled'
	   		when t5.status='3' then 'Declined' 
	   		when t5.status='4' then 'Unenrolled'
			else t5.status
		end as benefit_status,
		t5.enrollment_date,
		t5.unenrollment_date,
		t1.payroll_start_date, 
		t1.payroll_end_date,
		t10.active as ""Benefit Offering is Active"",
		t10.exception
	from goglobal_gp_goglobal.v_gp_gg_professional_current t1
	left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on t1.client_id=t2.id
	left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t3  on t1.lsp_country_id=t3.id
	left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco  on t1.client_country_id=cco.id
	left join goglobal_gp_goglobal.v_gp_gg_country_current t4 on cco.country_id=t4.id
	left join benefits_gp_benefits.v_benefits_professional_benefit_enrollment_current t5 on t1.id=t5.professional_external_id::integer
	left join benefits_gp_benefits.v_benefits_benefit_current t6 on t5.benefit_id=t6.id::INTEGER and t4.id=t6.country_external_id::integer
	left join benefits_gp_benefits.v_benefits_benefit_type_current t7 on t6.benefit_type_id=t7.id::INTEGER
	left join benefits_gp_benefits.v_benefits_country_benefit_type_current t8 on t7.id::INTEGER=t8.benefit_type_id and t8.country_external_id::integer=t4.id 
	LEFT JOIN goglobal_gp_goglobal.V_GP_GG_LSP_CURRENT T9 ON T3.LSP_ID=T9.ID
	left join benefits_gp_benefits.v_benefits_customer_benefit_offering_current t10 on t6.id=t10.benefit_id and t2.id::text=t10.customer_external_id::text
	where is_failed_to_launch='false' 
		and is_demo_client='false' 
	order by professional),
b as(
	select *, 
	case 
		when (benefit_type is null and status is null) then 'A'
		when (benefit_type is null and status is NOT null) THEN 'B'
	END AS FLAG FROM A)	
select * from b
WHERE SERVICE_CLASS<<>>'4'"
c52f85a5-00fe-5953-e1fd-757753e3adea,gpbidb,postgres,"with a as 
(select c.id as Country_id,
	c.name as Country, 
	bt.name as Benefit_type, 
	btc.mandatory, 
	bt.id as btc_id 
from 
benefits_gp_benefits.v_benefits_country_benefit_type_current btc, 
goglobal_gp_goglobal.v_gp_gg_country_current c, 
benefits_gp_benefits.v_benefits_benefit_type_current bt
where btc.country_external_id::INTEGER = c.id and btc.benefit_type_id = bt.id::integer),
b as (
	select t1.client_id, 
	t1.country_id,t2.name as country 
	  from goglobal_gp_goglobal.v_gp_gg_client_country_current t1 
		left join goglobal_gp_goglobal.v_gp_gg_country_current t2 on t1.country_id=t2.id order by 1,2),
c as(
	select b.client_id,b.country_id, 
	a.country_id as country_id_1,
	b.country,
	a.benefit_type,
	a.mandatory,a.btc_id
from b left join a on b.country_id=a.country_id),
d as(
	select bc.id,
	bc.active, 
	b.name as plan_name,
	case 
	when b.active='1' then 'Yes'
	when b.active='0' then 'No' 
	else null
	end as Active_plan, 
	bc.customer_external_id as client_id, 
	c.id as country_id,
	c.name as Country, 
	bt.id as btc_id, 
	bt.name as benefit_type
from benefits_gp_benefits.v_benefits_customer_benefit_offering_current bc, 
benefits_gp_benefits.v_benefits_benefit_current b, 
goglobal_gp_goglobal.v_gp_gg_country_current c, 
benefits_gp_benefits.v_benefits_benefit_type_current bt
where bc.benefit_id = b.id::integer 
and b.country_external_id::INTEGER = c.id 
and b.benefit_type_id = bt.id::integer
and bc.active is true),
e as (select c.*, 
	d.plan_name,
	d.active_plan 
	from c 
	left join d on c.client_id=d.client_id::INTEGER and c.country_id=d.country_id and c.btc_id=d.btc_id),
f as (
	select e.client_id, 
	z.name as Client,
	z.status as client_status, 
	z.is_demo_client,
	e.country_id,e.country,
	e.benefit_type, 
	e.mandatory,
	e.plan_name,
	e.active_plan,
	case when (e.mandatory='1' and e.plan_name is not null) then 'Offering'
	when (e.mandatory='1' and plan_name is null) then 'Setup Incomplete'
	when (e.mandatory='0' and plan_name is not null) then 'Offering'
	when (e.mandatory='0' and plan_name is  null) then 'Not Offering'
	else null
	END AS STATUS
from e 
left join goglobal_gp_goglobal.v_gp_gg_client_current z on e.client_id=z.id order by 2,4)
select f.*, 
t1.id as client_country, 
count(distinct t2.id) as Pros, 
COUNT(distinct t2.id) filter (where t2.status IN ('2','3','4') and is_failed_to_launch='false' and service_class<<>>'4') as aCTIVE_PROS,
COUNT(distinct t2.id) filter (where t2.status = '1' and is_failed_to_launch='false' and service_class<<>>'4') as New,
COUNT(distinct t2.id) filter (where t2.status = '2'and is_failed_to_launch='false' and service_class<<>>'4') as Onb,
COUNT(distinct t2.id) filter (where t2.status = '3'and is_failed_to_launch='false' and service_class<<>>'4') as Act,
COUNT(distinct t2.id) filter (where t2.status = '4'and is_failed_to_launch='false' and service_class<<>>'4') as Term,
COUNT(distinct t2.id) filter (where t2.status = '5'and is_failed_to_launch='false' and service_class<<>>'4') as inac,
case when (COUNT(distinct t2.id) filter (where t2.status IN ('2','3','4')and is_failed_to_launch='false' and service_class<<>>'4'))>>0 then 'a' else 'b' end as ActivePros
from f 
left join goglobal_gp_goglobal.v_gp_gg_client_country_current t1 on f.client_id=t1.client_id and f.country_id=t1.country_id
left join goglobal_gp_goglobal.v_gp_gg_professional_current t2 on t1.id=t2.client_country_id
group by 1,2,3,4,5,6,7,8,9,10,11,12"
c52f85a5-00fe-5953-e1fd-757753e3adea,Benefits Client Country,postgres,"with a as 
	(
		select distinct c.id as Country_id,
			c.name as Country, 
			bt.name as Benefit_type, 
			btc.mandatory, 
			bt.id as btc_id 
	from benefits_gp_benefits.v_benefits_country_benefit_type_current btc
	left join goglobal_gp_goglobal.v_gp_gg_country_current c on btc.country_external_id::integer = c.id
	left join benefits_gp_benefits.v_benefits_benefit_type_current bt on bt.id=btc.benefit_type_id
	),
b as 
	(
		select t1.client_id, 
				t1.country_id,
				t2.name as country 
		from goglobal_gp_goglobal.v_gp_gg_client_country_current t1 
		left join goglobal_gp_goglobal.v_gp_gg_country_current t2 on t1.country_id=t2.id 
		order by 1,2
	),
c as
	(
		select b.client_id,
				b.country_id, 
				a.country_id as country_id_1,
				b.country,
				a.benefit_type,
				a.mandatory,
				a.btc_id
		from b 
		left join a on b.country_id=a.country_id
	),
d as
	(
		select bc.id,
				bc.active,
				b.name as plan_name,
				case when b.active=true then 'Yes'
					 when b.active=false then 'No' 
					 else null
				end as Active_plan, 
				bc.customer_external_id as client_id, 
				c.id as country_id,
				c.name as Country, 
				bt.id as btc_id, 
				bt.name as benefit_type
		from benefits_gp_benefits.v_benefits_customer_benefit_offering_current bc, 
			 benefits_gp_benefits.v_benefits_benefit_current b, 
			 goglobal_gp_goglobal.v_gp_gg_country_current c, 
			 benefits_gp_benefits.v_benefits_benefit_type_current bt
		where bc.benefit_id = b.id::integer and b.country_external_id::integer = c.id and b.benefit_type_id = bt.id::integer and bc.active = true
	),
e as 
	(
		select c.*, 
				d.plan_name,
				d.active_plan
		from c 
		left join d on c.client_id=d.client_id::integer and c.country_id=d.country_id and c.btc_id=d.btc_id
	),
f as 
	(
		select e.client_id, 
				z.name as Client,
				z.status as client_status, 
				z.is_demo_client,
				e.country_id,
				e.country,
				e.benefit_type, 
				e.mandatory,
				e.plan_name,
				e.active_plan,
				case when (e.mandatory=true and e.plan_name is not null) then 'Offering'
						when (e.mandatory=true and plan_name is null) then 'Setup Incomplete'
						when (e.mandatory=false and plan_name is not null) then 'Offering'
						when (e.mandatory=false and plan_name is  null) then 'Not Offering'
						else null
				END AS STATUS
	from e 
	left join goglobal_gp_goglobal.v_gp_gg_client_current z on e.client_id=z.id 
	)
select f.*, 
		t1.id as client_country, 
		count(distinct t2.id) as Pros, 
		COUNT(distinct t2.id) filter (where t2.status IN ('2','3','4') and service_class<<>>'4' and is_failed_to_launch='false') as aCTIVE_PROS,
		COUNT(distinct t2.id) filter (where t2.status = '1' and service_class<<>>'4' and is_failed_to_launch='false') as New,
		COUNT(distinct t2.id) filter (where t2.status = '2' and service_class<<>>'4' and is_failed_to_launch='false') as Onb,
		COUNT(distinct t2.id) filter (where t2.status = '3' and service_class<<>>'4' and is_failed_to_launch='false') as Act,
		COUNT(distinct t2.id) filter (where t2.status = '4' and service_class<<>>'4' and is_failed_to_launch='false') as Term,
		COUNT(distinct t2.id) filter (where t2.status = '5'and service_class<<>>'4' and is_failed_to_launch='false') as inac,
		case when (COUNT(distinct t2.id) filter (where t2.status IN ('2','3','4') and service_class<<>>'4' and is_failed_to_launch='false'))>>0 then 'a' 
				else 'b' 
		end as ActivePros
from f 
left join goglobal_gp_goglobal.v_gp_gg_client_country_current t1 on f.client_id=t1.client_id and f.country_id=t1.country_id
left join goglobal_gp_goglobal.v_gp_gg_professional_current t2 on t1.id=t2.client_country_id
group by 1,2,3,4,5,6,7,8,9,10,11,12"
c52f85a5-00fe-5953-e1fd-757753e3adea,Benefits by country,postgres,"with A as(
	SELECT t1.id, concat(t1.first_name,' ',t1.last_name) as Professional,
	   case when t1.status='1' then 'New' 
	   		when t1.status='2' then 'Onboarding'
	   		when t1.status='3' then 'Active'
	   		when t1.status='4' then 'Terminating'
	   		when t1.status='5' then 'Inactive'
			end as Pro_Status,
	   t2.name as Client, 
	   T9.NAME AS LSP_NAME,
	   t4.name as Country,
	   t7.name as Benefit_type,
	   case when t8.mandatory='1' then 'Mandatory'
	   		when t8.mandatory='0' then 'Supplemental'
	   end as Plan_Type,
	T6.ID AS BENEFIT_ID,
	T6.COUNTRY_EXTERNAL_ID as COUNTRY_ID,
	   t6.name as Plan_Name,
		t6.custom,
		case when t6.active='1' then 'Yes'
	when t6.active='0' then 'No' else null
	end as Active_plan,
	   t5.status,
	   case when t5.status='1' then 'Offered' when t5.status='2' then 'Enrolled'
	   		when t5.status='3' then 'Declined' when t5.status='4' then 'Unenrolled'
			else t5.status
		end as benefit_status
from goglobal_gp_goglobal.v_gp_gg_professional_current t1
	left join goglobal_gp_goglobal.v_gp_gg_client_current t2
		on t1.client_id=t2.id
	left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t3 
		on t1.lsp_country_id=t3.id
	left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco
		on t1.client_country_id=cco.id
	left join goglobal_gp_goglobal.v_gp_gg_country_current t4
		on cco.country_id=t4.id
	left join benefits_gp_benefits.v_benefits_professional_benefit_enrollment_current t5
		on t1.id=t5.professional_external_id::INTEGER
	LEFT join benefits_gp_benefits.v_benefits_benefit_current t6
		on t5.benefit_id=t6.id::INTEGER and t4.id=t6.country_external_id::INTEGER
	left join benefits_gp_benefits.v_benefits_benefit_type_current t7
		on t6.benefit_type_id=t7.id::INTEGER
	left join benefits_gp_benefits.v_benefits_country_benefit_type_current t8
		on t7.id::INTEGER=t8.benefit_type_id and t8.country_external_id::INTEGER=t4.id
	LEFT JOIN goglobal_gp_goglobal.V_GP_GG_LSP_CURRENT T9
		ON T3.LSP_ID=T9.ID
	where is_failed_to_launch='false' and is_demo_client='false' and service_class<<>>'4'
					order by professional),
b as(SELECT  DISTINCT T4.NAME AS COUNTRY,
		t7.name as Benefit_type,
	   case when t8.mandatory='1' then 'Mandatory'
	   		when t8.mandatory='0' then 'Supplemental'
	   end as Plan_Type,
	   T6.ID AS BENEFIT_ID,
	T6.COUNTRY_EXTERNAL_ID as COUNTRY_ID,
	   t6.name as Plan_Name,
		t6.custom,
		case when t6.active='1' then 'Yes'
	when t6.active='0' then 'No' else null
	end as Active_plan
from  benefits_gp_benefits.v_benefits_benefit_current t6	 
left join benefits_gp_benefits.v_benefits_benefit_type_current t7
		on t6.benefit_type_id=t7.id::INTEGER
left join benefits_gp_benefits.v_benefits_country_benefit_type_current t8
		on t7.id::INTEGER=t8.benefit_type_id  AND T6.COUNTRY_EXTERNAL_ID=T8.COUNTRY_EXTERNAL_ID
LEFT JOIN goglobal_gp_goglobal.V_GP_GG_COUNTRY_CURRENT T4 ON T6.COUNTRY_EXTERNAL_ID::INTEGER=T4.ID),
C AS(select distinct a.country, a.benefit_type,a.plan_type,a.BENEFIT_ID,a.COUNTRY_ID,a.plan_name,a.custom,a.active_plan, 
count (distinct a.id) as Professionals,
COUNT(distinct a.id) filter (where a.benefit_status = 'ENROLLED') as Enrolled,
COUNT(distinct a.id) filter (where a.benefit_status = 'OFFERED') as Offered,
COUNT(distinct a.id) filter (where a.benefit_status = 'DECLINED') as Declined,
COUNT(distinct a.id) filter (where a.benefit_status = 'UNENROLLED') as Unenrolled,
COUNT(distinct a.id) filter (where a.pro_status = 'New') as New,
COUNT(distinct a.id) filter (where a.pro_status = 'Onboarding') as Onboarding,
COUNT(distinct a.id) filter (where a.pro_status = 'Active') as Active,
COUNT(distinct a.id) filter (where a.pro_status = 'Terminating') as Terminating,
COUNT(distinct a.id) filter (where a.pro_status = 'Inactive') as Inactive
from a 
where country is not null
group by 1,2,3,4,5,6,7,8
order by PLAN_NAME,country),
d as (SELECT b.country as country_b,b.benefit_type as benefit_type_b, b.plan_type as plan_type_b,b.benefit_id as benefit_id_b,
b.country_id as country_id_b,b.plan_name as plan_name_b,b.custom as custom_b,b.active_plan as active_plan_b,
c.*
from b full join c on b.benefit_id=c.benefit_id and b.country_id=c.country_id
order by c.country)
select case when country_b is null then country else country_b end as Country,
case when benefit_type_b is null then benefit_type else benefit_type_b end as BENEFIT_TYPE,
case when PLAN_TYPE_b is null then PLAN_TYPE else PLAN_TYPE_b end as PLAN_TYPE,
case when BENEFIT_ID_b is null then BENEFIT_ID else BENEFIT_ID_b end as BENEFIT_ID,
case when COUNTRY_ID_b is null then COUNTRY_ID else COUNTRY_ID_b end as COUNTRY_ID,
case when PLAN_NAME_b is null then PLAN_NAME else PLAN_NAME_b end as PLAN_NAME,
case when CUSTOM_b is null then CUSTOM else CUSTOM_b end as CUSTOM,
case when ACTIVE_PLAN_B is null then ACTIVE_PLAN else ACTIVE_PLAN_B end as ACTIVE_PLAN,
PROFESSIONALS,ENROLLED,OFFERED,DECLINED,UNENROLLED,NEW,ONBOARDING,ACTIVE,TERMINATING,INACTIVE
FROM D
ORDER BY COUNTRY, BENEFIT_TYPE,PLAN_NAME"
9e3cf32a-881f-8591-d04d-3ec2d9fc079f,Campaigns Info,postgres,"WITH spend_info AS(	
SELECT ""Campaign Name"" AS campaign, 
CONCAT(""Period"",'-01')::date AS dates, 
""Value"" AS spend
	FROM anaplan.marketing_spend_by_campaign_anaplan
	WHERE ""Campaign Name"" IS NOT NULL AND ""Period"" NOT ILIKE 'FY%'
	AND ""Line Item"" = 'Spend  $'
	),
campaign_spend AS(
SELECT campaign, SUM(spend) AS total_spend
FROM spend_info AS s
WHERE dates <<= date_trunc('month', now())::date - 1
GROUP BY campaign)
SELECT ca.name AS campaign,
	ca.start_date AS campaign_start,
	ca.type AS campaign_type,
	ow.name AS campaign_owner,
	mc.id,
	leads.partner_acquisition__c,
	mc.type,
	cs.total_spend,
	CASE
         WHEN mc.contact_id IS NOT NULL AND oc.id IS NOT NULL THEN oc.id
         WHEN mc.contact_id IS NOT NULL AND oc.id IS NULL THEN leads.converted_opportunity_id
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NULL AND leads.converted_opportunity_id IS NOT NULL THEN leads.converted_opportunity_id
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NOT NULL AND leads.converted_opportunity_id IS NULL THEN mc.lead_id
         WHEN mc.contact_id IS NULL AND mc.lead_id IS NOT NULL AND leads.converted_opportunity_id IS NOT NULL THEN leads.converted_opportunity_id
         ELSE NULL
	END AS lead_or_opp_id,
	CASE
         WHEN mc.has_responded = false THEN 'Never responded'
         WHEN mc.has_responded = true AND mc.first_responded_date <<= COALESCE(oc.close_date, oc2.close_date) THEN 'In time'
         WHEN mc.has_responded = true AND mc.first_responded_date >> COALESCE(oc.close_date, oc2.close_date) THEN 'Too late'
		 WHEN COALESCE(oc.close_date, oc2.close_date) IS NULL THEN 'Not closed'
		 ELSE NULL::text
	END AS response_member_time_flag
FROM salesforce.v_gp_sfdc_campaign_member_current mc
LEFT JOIN salesforce.v_gp_sfdc_campaign_current ca
ON mc.campaign_id = ca.id
LEFT JOIN salesforce.v_gp_sfdc_user_current ow
ON ow.id = ca.owner_id
LEFT JOIN salesforce.v_gp_sfdc_opportunity_current_pacific_time  oc ON oc.contact_id = mc.contact_id
LEFT JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON mc.lead_id = leads.id
LEFT JOIN salesforce.v_gp_sfdc_opportunity_current_pacific_time  oc2 ON oc2.id = leads.converted_opportunity_id
LEFT JOIN campaign_spend cs ON cs.campaign = ca.name"
9e3cf32a-881f-8591-d04d-3ec2d9fc079f,Campaigns Info,postgres,"WITH v_leads_and_opportunities AS (
         SELECT DISTINCT opps.id AS opp_id,
            opps.closed__lost__c,
            opps.created_date,
            opps.sales__accepted__date__c AS sal_accepted_date,
            opps.s_a_l__c,
            opps.s_a_l_by__sales__c,
            opps.record_type_bi__c,
            opps.close_date,
            opps.stage_name,
            opps.partner_acquisition__c AS partner_acq_opps,
            opps.is_won,
            opps.owner_id,
			opps.created_by_id,
            opps.type AS opp_type,
			opps.lead_source,
			opps.update_time,
            opps.pricing_model__c AS pricing_model_opps--,
                /*CASE
                    WHEN (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) 
	                AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) 
	                --AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text) 
	                THEN 'Non Partner Opp or Existing Business'::text
                    ELSE 'Partner Opp or Existing Business'::text
                END AS opp_go_flag*/
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
        ), sql AS (
         SELECT DISTINCT v_leads_and_opportunities.close_date,
            'SQL'::text AS cohort_stage,
            v_leads_and_opportunities.closed__lost__c,
            v_leads_and_opportunities.created_date,
            v_leads_and_opportunities.is_won,
            --v_leads_and_opportunities.opp_go_flag,
            v_leads_and_opportunities.opp_id,
            v_leads_and_opportunities.opp_type,
			v_leads_and_opportunities.lead_source,
			v_leads_and_opportunities.created_by_id AS name_join_id,
            v_leads_and_opportunities.partner_acq_opps,
            v_leads_and_opportunities.created_date::date AS point_time_date,
            v_leads_and_opportunities.pricing_model_opps,
            v_leads_and_opportunities.record_type_bi__c,
            v_leads_and_opportunities.s_a_l__c,
            v_leads_and_opportunities.s_a_l_by__sales__c,
            v_leads_and_opportunities.sal_accepted_date,
            v_leads_and_opportunities.stage_name,
			v_leads_and_opportunities.update_time
           FROM v_leads_and_opportunities
        ), sal AS (
         SELECT DISTINCT v_leads_and_opportunities.close_date,
            'SAL'::text AS cohort_stage,
            v_leads_and_opportunities.closed__lost__c,
            v_leads_and_opportunities.created_date,
            v_leads_and_opportunities.is_won,
            --v_leads_and_opportunities.opp_go_flag,
            v_leads_and_opportunities.opp_id,
            v_leads_and_opportunities.opp_type,
			v_leads_and_opportunities.lead_source,
            v_leads_and_opportunities.owner_id AS name_join_id,
            v_leads_and_opportunities.partner_acq_opps,
            v_leads_and_opportunities.sal_accepted_date::date AS point_time_date,
            v_leads_and_opportunities.pricing_model_opps,
            v_leads_and_opportunities.record_type_bi__c,
            v_leads_and_opportunities.s_a_l__c,
            v_leads_and_opportunities.s_a_l_by__sales__c,
            v_leads_and_opportunities.sal_accepted_date,
            v_leads_and_opportunities.stage_name,
			v_leads_and_opportunities.update_time
           FROM v_leads_and_opportunities
          WHERE --v_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND
			v_leads_and_opportunities.s_a_l_by__sales__c::text = 'Yes'::text
        ), ma AS (
         SELECT DISTINCT v_leads_and_opportunities.close_date,
            'MA'::text AS cohort_stage,
            v_leads_and_opportunities.closed__lost__c,
            v_leads_and_opportunities.created_date,
            v_leads_and_opportunities.is_won,
            --v_leads_and_opportunities.opp_go_flag,
            v_leads_and_opportunities.opp_id,
            v_leads_and_opportunities.opp_type,
			v_leads_and_opportunities.lead_source,
            v_leads_and_opportunities.owner_id AS name_join_id,
            v_leads_and_opportunities.partner_acq_opps,
            v_leads_and_opportunities.close_date::date AS point_time_date,
            v_leads_and_opportunities.pricing_model_opps,
            v_leads_and_opportunities.record_type_bi__c,
            v_leads_and_opportunities.s_a_l__c,
            v_leads_and_opportunities.s_a_l_by__sales__c,
            v_leads_and_opportunities.sal_accepted_date,
            v_leads_and_opportunities.stage_name,
			v_leads_and_opportunities.update_time
           FROM v_leads_and_opportunities
          WHERE --v_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND
			v_leads_and_opportunities.is_won = true
        ), closed_lost AS (
         SELECT DISTINCT v_leads_and_opportunities.close_date,
            'Closed Lost'::text AS cohort_stage,
            v_leads_and_opportunities.closed__lost__c,
            v_leads_and_opportunities.created_date,
            v_leads_and_opportunities.is_won,
            --v_leads_and_opportunities.opp_go_flag,
            v_leads_and_opportunities.opp_id,
            v_leads_and_opportunities.opp_type,
			v_leads_and_opportunities.lead_source,
            v_leads_and_opportunities.owner_id AS name_join_id,
            v_leads_and_opportunities.partner_acq_opps,
            v_leads_and_opportunities.close_date::date AS point_time_date,
            v_leads_and_opportunities.pricing_model_opps,
            v_leads_and_opportunities.record_type_bi__c,
            v_leads_and_opportunities.s_a_l__c,
            v_leads_and_opportunities.s_a_l_by__sales__c,
            v_leads_and_opportunities.sal_accepted_date,
            v_leads_and_opportunities.stage_name,
			v_leads_and_opportunities.update_time
           FROM v_leads_and_opportunities
          WHERE --v_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND
			v_leads_and_opportunities.stage_name = 'Closed Lost'
        ),  full_union AS (
         SELECT sql.close_date,
            sql.cohort_stage,
            sql.closed__lost__c,
            sql.created_date,
            sql.is_won,
            --sql.opp_go_flag,
            sql.opp_id,
            sql.opp_type,
			sql.lead_source,
            sql.name_join_id,
            sql.partner_acq_opps,
            sql.point_time_date,
            sql.pricing_model_opps,
            sql.record_type_bi__c,
            sql.s_a_l__c,
            sql.s_a_l_by__sales__c,
            sql.sal_accepted_date,
            sql.stage_name,
			sql.update_time
           FROM sql
        UNION ALL
         SELECT sal.close_date,
            sal.cohort_stage,
            sal.closed__lost__c,
            sal.created_date,
            sal.is_won,
            --sal.opp_go_flag,
            sal.opp_id,
            sal.opp_type,
			sal.lead_source,
            sal.name_join_id,
            sal.partner_acq_opps,
            sal.point_time_date,
            sal.pricing_model_opps,
            sal.record_type_bi__c,
            sal.s_a_l__c,
            sal.s_a_l_by__sales__c,
            sal.sal_accepted_date,
            sal.stage_name,
			sal.update_time
           FROM sal
        UNION ALL
         SELECT ma.close_date,
            ma.cohort_stage,
            ma.closed__lost__c,
            ma.created_date,
            ma.is_won,
            --ma.opp_go_flag,
            ma.opp_id,
            ma.opp_type,
			ma.lead_source,
            ma.name_join_id,
            ma.partner_acq_opps,
            ma.point_time_date,
            ma.pricing_model_opps,
            ma.record_type_bi__c,
            ma.s_a_l__c,
            ma.s_a_l_by__sales__c,
            ma.sal_accepted_date,
            ma.stage_name,
			ma.update_time
           FROM ma
        UNION ALL
         SELECT closed_lost.close_date,
            closed_lost.cohort_stage,
            closed_lost.closed__lost__c,
            closed_lost.created_date,
            closed_lost.is_won,
            --closed_lost.opp_go_flag,
            closed_lost.opp_id,
            closed_lost.opp_type,
			closed_lost.lead_source,
            closed_lost.name_join_id,
            closed_lost.partner_acq_opps,
            closed_lost.point_time_date,
            closed_lost.pricing_model_opps,
            closed_lost.record_type_bi__c,
            closed_lost.s_a_l__c,
            closed_lost.s_a_l_by__sales__c,
            closed_lost.sal_accepted_date,
            closed_lost.stage_name,
			closed_lost.update_time
           FROM closed_lost
        )
 SELECT *
   FROM full_union"
9e3d66b6-b62f-5078-4fb7-85e6094239f7,Custom SQL Query (gpbidb),postgres,"With 
Leads_Opps as ( /*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
				Select Distinct
					CASE
                    	WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    	ELSE date_trunc('month'::text, opps.created_date)
                	END AS MQL_Cohort_Month,
					leads.id as lead_id,
					opps.id as opp_id,
					leads.is_converted,
					leads.converted_opportunity_id,
					CASE
						WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
						WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
						ELSE NULL::text
					END AS client_region,
					leads.created_date AS mql_date,
					leads.converted_date,
					leads.partner_acquisition__c AS partner_acq_leads,
					leads_owner.name as leads_owner_name,
					leads_owner_manager.name as leads_owner_manager,
					opps_owner.name as opps_owner_name,
					opps_owner_manager.name as opps_owner_manager, 
					opps.created_date,
					opps.sales__accepted__date__c as SAL_Accepted_Date,
					opps.s_a_l__c,
                    opps.s_a_l_by__sales__c,
					opps.record_type_bi__c,
					opps.close_date AS msa_date,
					opps.stage_name,	
					opps.partner_acquisition__c AS partner_acq_opps,
					opps.type AS opportunity_type,
					opps.is_won AS opp_won, 
					opps.what_is_your_primary_product_interest__c AS what_is_opps,
					opps.record_type_text_id_c AS record_type_opps,
					opps.pricing_model__c AS pricing_model_opps,
					opps.id AS opps_id,
					CASE
                        WHEN leads.lead_source IS NULL THEN opps.lead_source
                        ELSE leads.lead_source
                    END::text as Lead_or_Opp_Source,
					CASE
						WHEN dev_own.name IS NULL THEN 1
						ELSE 0
						END AS Partner_develop_owner_flag,
					CASE
         				WHEN leads.converted_opportunity_id IS NULL THEN leads_owner.name
         				ELSE opps.bdr_owner_name
      					END AS bdr_owner_name,
					CASE
         				WHEN bdr_owner_name IS NULL THEN 1
         				ELSE 0
      					END AS bdr_owner_name_flag,
					CASE
         				WHEN acc_partn.name IS NULL THEN 1
         				ELSE 0
      					END AS Partner_flag,
					CASE
         				WHEN opps.b_d_r__date__c IS NULL THEN 1
         				ELSE 0
      					END AS b_d_r_date_c_flag,
					CASE 
						WHEN (opps.type <<>> 'Existing Business' OR opps.type IS NULL)
					     And (opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
  						 And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
						 And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
					Then 'Non Partner Opp or Existing Business'
					Else 'Partner Opp or Existing Business'
					End as Opp_Go_Flag
				From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             	Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
				Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
				Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner ON opps_owner.id = opps.owner_id
				Left Join salesforce.v_gp_sfdc_user_current leads_owner_manager ON leads_owner_manager.id = leads_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current opps_owner_manager ON opps_owner_manager.id = opps_owner.manager_id
				Left Join salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
				LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c = acc_partn.id
				--Where  CASE WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
				--	   ELSE date_trunc('month'::text, opps.created_date)
                --END >>= '2019-01-01'
				), 
     MQL as (
				Select Distinct
					'MQL' as Cohort_Stage, 
		 			lead_id as lead_or_opp_id,
		 			MQL_Date::date as Point_time_date,
		 			leads_owner_name as Lead_or_Opp_Owner_name,
		 			leads_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where (partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) 
		 		And lead_id is not null
				),
MQL_to_SQL as (
				Select Distinct
					'MQL to SQL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					Created_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_id is not null
				),
SQL_to_SAL as (
				Select Distinct
					'SQL to SAL' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					SAL_Accepted_Date::date as Point_time_date, 
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And s_a_l_by__sales__c = 'Yes'
				),
SAL_to_MSA as (
				Select Distinct
					'SAL to MSA' as Cohort_Stage,
					opp_id as lead_or_opp_id,
					MSA_date::date as Point_time_date,
					opps_owner_name as Lead_or_Opp_Owner_name,
					opps_owner_manager as Lead_or_Opp_Owner_manager, 
					*
				From Leads_Opps 
				Where  Opp_Go_Flag = 'Non Partner Opp or Existing Business'
				And opp_won ='true'
				AND (pricing_model_opps <<>> 'Contractor Only' OR pricing_model_opps IS NULL)
				),
Full_Union as (
				Select 
					* 
				From MQL
					Union All
				Select 
					* 
				From MQL_to_SQL
					Union AlL
				Select 
					* 
				From SQL_to_SAL
					Union AlL
				Select 
					* 
				From SAL_to_MSA
				),
				--SELECT DISTINCT * FROM Full_Union
				--where lead_or_opp_id in ('0066T000016KebcQAC','0066T000015ryGIQAY','0060W000014Tn0HQAS','0066T000015s5vyQAA','0066T000016Km8fQAC'
										--'0066T000016KsYHQA0','0066T000015rlGgQAI','0066T000016KqClQAK','0066T000015rsKVQAY')
				--where point_time_date between '2021-05-07' AND '2021-07-30'
				--AND cohort_stage='SAL to MSA'
Weekly_Funnel as ( 
				Select Distinct
					Cohort_stage, 
					Client_region,
					Partner_flag,
					Partner_develop_owner_flag,
					b_d_r_date_c_flag,
					bdr_owner_name_flag,
					Coalesce(Lead_or_Opp_Source, 'nulo') as Lead_or_Opp_Source,
					Coalesce(Lead_or_Opp_Owner_Name, 'nulo') as Lead_or_Opp_Owner_Name,
					Coalesce(Lead_or_Opp_Owner_Manager, 'nulo') as Lead_or_Opp_Owner_Manager,
					--point_time_date,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date - '12 weeks'::interval)::date as twelve_weeks_ago, 
					(date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date as Week_at_Friday,
					((date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date + '6 days'::interval)::date as Week_at_Next_Thursday,  
					Count(distinct lead_or_opp_id) as Count_Leads_or_opps
					--lead_or_opp_id
				From Full_Union 
				Group by 1,2,3,4,5,6,7,8,9,10,11,12
				Order by cohort_stage, (date_trunc('week', point_time_date + 3)::date - '3 days'::interval)::date asc --date_trunc('week', point_time_date + 5)- '5 days'::interval asc
				),
				--select distinct * from Weekly_Funnel 
				--where Week_at_Friday between '2021-05-07' AND '2021-08-05'
				--AND cohort_stage='SAL to MSA'
Date_Catalogue as (
				Select Distinct 
					WAF.Week_at_Friday as Week_at_Friday_C,
					WF.Cohort_stage as Cohort_Stage_c,
					WF.Client_region as Client_region_c,
					WF.Lead_or_Opp_Source as Lead_or_Opp_Source_c,
					WF.Lead_or_Opp_Owner_Name as Lead_or_Opp_Owner_Name_c,
					WF.Lead_or_Opp_Owner_Manager as Lead_or_Opp_Owner_Manager_c,
					WF.Partner_flag as Partner_flag_c,
					WF.Partner_develop_owner_flag as Partner_develop_owner_flag_c,
					WF.b_d_r_date_c_flag as b_d_r_date_c_flag_c,
					WF.bdr_owner_name_flag as bdr_owner_name_flag_c,
					0 as Count_Leads_or_opps_C
				From (Select Distinct Week_at_Friday From Weekly_Funnel) WAF, 
				(Select Distinct Cohort_stage, Client_region, Lead_or_Opp_Source, Lead_or_Opp_Owner_Name, Lead_or_Opp_Owner_Manager, Partner_flag, Partner_develop_owner_flag, b_d_r_date_c_flag, bdr_owner_name_flag from Weekly_funnel) WF 
				Order by WF.Cohort_stage, WAF.Week_at_Friday asc
				), --Select * from Date_Catalogue where cohort_stage_c = 'SAL to MSA' and week_at_friday_c between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC' 
Dates_Aligned as (
				Select Distinct
					DC.*,
					Coalesce(Funnel.twelve_weeks_ago::date, (DC.Week_at_Friday_C - '12 weeks'::interval)::date) as  twelve_weeks_ago,
					Coalesce(Funnel.week_at_next_thursday, (DC.Week_at_Friday_C + '6 days'::interval)::date) as week_at_next_thursday, 
					Coalesce(Funnel.count_leads_or_opps, DC.count_leads_or_opps_c) as Count_leads_or_opps_final
				From Date_Catalogue DC
				Left Join Weekly_funnel Funnel on Funnel.week_at_friday = DC.week_at_friday_c
					and Funnel.cohort_stage = DC.cohort_stage_c
					and Funnel.Client_region = DC.Client_region_c
					and Funnel.Lead_or_Opp_Source = DC.Lead_or_Opp_Source_c
					and Funnel.Lead_or_Opp_Owner_Name = DC.Lead_or_Opp_Owner_Name_C
					and Funnel.Lead_or_Opp_Owner_Manager = DC.Lead_or_Opp_Owner_Manager_C
					and Funnel.Partner_flag = DC.Partner_flag_c
					and Funnel.Partner_develop_owner_flag = DC.Partner_develop_owner_flag_c
					and Funnel.b_d_r_date_c_flag = DC.b_d_r_date_c_flag_c
					and Funnel.bdr_owner_name_flag = DC.bdr_owner_name_flag_c
				) --Select * from Dates_Aligned where Week_at_Friday_C between '2021-07-23' and '2021-10-15' and client_region_c = 'APAC'
Select Distinct 
	WF.Cohort_stage_c,
	WF.Client_region_c,
	WF.Lead_or_Opp_Source_c,
	WF.Lead_or_Opp_Owner_Name_c,
	WF.Lead_or_Opp_Owner_Manager_c,
	WF.Partner_flag_c,
	WF.Partner_develop_owner_flag_c,
	WF.b_d_r_date_c_flag_c,
	WF.bdr_owner_name_flag_c,
	WF.twelve_weeks_ago, 
	WF.Week_at_Friday_c,
	WF.Week_at_Next_Thursday,
	WF.Count_Leads_or_opps_final,
	Sum(L12M.Count_Leads_or_opps_final) as Sum_L12M_Funnel
From Dates_aligned WF
Left Join (select Cohort_stage_c, Client_region_c, Lead_or_Opp_Source_c, Lead_or_Opp_Owner_Name_c, Lead_or_Opp_Owner_Manager_c, Partner_flag_c, Partner_develop_owner_flag_c, b_d_r_date_c_flag_c, bdr_owner_name_flag_c, Week_at_Friday_c, Count_Leads_or_opps_final From Dates_aligned where Count_Leads_or_opps_final<<>> 0) L12M 
	on L12M.Week_at_Friday_c between WF.twelve_weeks_ago and WF.Week_at_Friday_c
	and WF.Cohort_stage_c = L12M.Cohort_stage_c
	and WF.Client_region_c = L12M.Client_region_c
	and WF.Lead_or_Opp_Source_c = L12M.Lead_or_Opp_Source_c
	and WF.Lead_or_Opp_Owner_Name_c = L12M.Lead_or_Opp_Owner_Name_c
	and WF.Lead_or_Opp_Owner_Manager_c = L12M.Lead_or_Opp_Owner_Manager_c
	and WF.Partner_flag_c = L12M.Partner_flag_c
	and WF.Partner_develop_owner_flag_c = L12M.Partner_develop_owner_flag_c
	and WF.b_d_r_date_c_flag_c = L12M.b_d_r_date_c_flag_c
	and WF.bdr_owner_name_flag_c = L12M.bdr_owner_name_flag_c
Group by WF.Cohort_stage_c, WF.Client_region_c, WF.Lead_or_Opp_Source_c, WF.Lead_or_Opp_Owner_Name_c, WF.Lead_or_Opp_Owner_Manager_c, WF.Partner_flag_c, WF.Partner_develop_owner_flag_c, WF.b_d_r_date_c_flag_c, WF.bdr_owner_name_flag_c, WF.twelve_weeks_ago, WF.Week_at_Friday_c, WF.Week_at_Next_Thursday, WF.Count_Leads_or_opps_final
Having  Sum(L12M.Count_Leads_or_opps_final) is not null
Order by WF.Cohort_stage_c, WF.Week_at_Friday_c asc"
9e3d66b6-b62f-5078-4fb7-85e6094239f7,Contractor Reporting (gpbidb),postgres,"WITH SFDC AS (SELECT account.client_region_billing_country AS client_region,
	account.billing_country AS client_country,
	opps.id AS opp_id,
	opps.lead_source,
	opps.s_a_l_by__sales__c,
	dev_own.name AS partner_development_owner,
	acc_partn.name AS partner,
	--opps.record_type_bi__c AS record_type,
	--opps.partner_acquisition__c AS partner_acq_opps,
	opps.type AS opp_type,
	opps.stage_name,
	opps.created_date,
        opps.close_date,
        opps.sales__accepted__date__c,
			  opps.is_won,
	opps.what_is_your_primary_product_interest__c AS what_ppi,
    sbqq.is_gp_contractor_customer_c AS gp_contractor_customer,
    sbqq.pricing_model_c AS pricing_model_primary_quote,
    sbqq.sbqq_primary_c AS primary_quote
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
LEFT JOIN salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
LEFT JOIN
(SELECT id, sbqq_opportunity_2_c, is_gp_contractor_customer_c, pricing_model_c, sbqq_primary_c
	FROM salesforce.sbqq_quote_c
	WHERE is_deleted = FALSE
	AND sbqq_primary_c = TRUE
) sbqq ON opps.id=sbqq.sbqq_opportunity_2_c
WHERE 
(opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text)),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      created_date::date as Point_time_date,
      *
   From SFDC
   Where --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	opp_id is not null
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      sales__accepted__date__c::date as Point_time_date,
      *
   From SFDC
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	s_a_l_by__sales__c= 'Yes'
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      close_date::date as Point_time_date,
      *
   From SFDC
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And
	is_won ='true'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
   FULL_UNION as (
	SELECT * FROM MQL_to_SQL
UNION ALL
	SELECT * FROM SQL_to_SAL
UNION ALL
	SELECT * FROM SAL_to_MSA)
SELECT * FROM FULL_UNION"
9e3d66b6-b62f-5078-4fb7-85e6094239f7,NEW View,,
9e3d66b6-b62f-5078-4fb7-85e6094239f7,NEW View,postgres,"select distinct id as opp_id2,
				hot_form_c as hot_form_opp
from salesforce.v_gp_sfdc_opportunity_current_pacific_time"
9e3d66b6-b62f-5078-4fb7-85e6094239f7,NEW View,postgres,"SELECT DISTINCT is_gp_recruit_customer_c,
is_gp_contractor_customer_c,
pricing_model_c,
sbqq_primary_c,
is_deleted,
sbqq_opportunity_2_c
FROM salesforce.sbqq_quote_c
WHERE sbqq_primary_c='TRUE'
and is_deleted='FALSE'"
9e3d66b6-b62f-5078-4fb7-85e6094239f7,NEW View,postgres,"select id as lead_id2,
		hot_form_c as hot_form_lead
		from salesforce.v_gp_sfdc_lead_current_pacific_time"
9e54ff1b-0322-d75b-119e-c4c050f719d0,Custom SQL Query (gpbidb) (2),,
9e54ff1b-0322-d75b-119e-c4c050f719d0,Custom SQL Query (gpbidb) (2),postgres,"WITH SALESFORCE AS
( SELECT opp.id As opp_id,
         opp.close_date AS msa_date,
         opp.type AS opp_type,
         opp.name AS opp_name,
         opp.account_id,
         acc.name AS acc_name,
         opp.client_region_opportunity__c,
		 us.name AS opp_owner,
 opp.immediate_headcount_c AS opp_immediate_headcount_c,
	opp.headcount_c AS opp_headcount_c 
	
         
 
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time AS opp
 LEFT JOIN salesforce.v_gp_sfdc_account_current  AS acc ON opp.account_id = acc.id
 LEFT JOIN salesforce.v_gp_sfdc_user_current AS us ON opp.owner_id = us.id
WHERE (opp.type <<>> 'Existing Business' OR opp.type IS NULL)
AND   (opp.partner_acquisition__c IS NULL OR opp.partner_acquisition__c <<>> 'Yes')
AND   (opp.is_won= 'TRUE')
AND   (opp.record_type_bi__c IS NULL OR opp.record_type_bi__c <<>> 'Potential Partner Opportunity')
AND   ( opp.pricing_model__c <<>> 'Contractor only' OR opp.pricing_model__c is NULL)
),

GPP AS (
SELECT DISTINCT 
	  
a.salesforce_account_id,
	      a.id,
	      a.name,
          a.pricing_model,
	     CASE WHEN a.msa_contract_start_date_peo IS NOT NULL THEN a.msa_contract_start_date_peo
	    WHEN a.msa_contract_start_date_peo IS NULL AND a.msa_contract_start_date_services IS NOT NULL THEN a.msa_contract_start_date_services
	    WHEN a.msa_contract_start_date_services IS NULL AND a.msa_contract_start_date_sourcing IS NOT NULL THEN a.msa_contract_start_date_sourcing
	    WHEN a.msa_contract_start_date_sourcing IS NULL AND a.msa_contract_start_date_aso IS NOT NULL THEN a.msa_contract_start_date_aso
	  ELSE a.msa_contract_start_date_peo END AS ma_start_date,
	      b.pop_current, 
	      c.pop_to_date,
	      d.min_pay_start,
	      d.max_pay_start,
	      d.min_pay_end,
	      d.max_pay_end
	       
	FROM (SELECT a.id, a.salesforce_account_id,a.pricing_model,a.name,a.msa_contract_start_date_services,a.msa_contract_start_date_peo, a.msa_contract_start_date_aso,a.msa_contract_start_date_sourcing
		 FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
		 WHERE a.is_demo_client = false) AS a
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_current
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC ('month', cal_date)= DATE_TRUNC ('month', CURRENT_DATE)
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS b
	ON a.id = b.client_id
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_to_date
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC('month',payroll_start_date) <<=DATE_TRUNC ('month', CURRENT_DATE)
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS c
	ON a.id = c.client_id
	
	LEFT JOIN (SELECT client_id, MAX(payroll_start_date)AS max_pay_start, MAX (payroll_end_date)AS max_pay_end,
				  MIN(payroll_end_date)AS min_pay_end, MIN(payroll_start_date) AS min_pay_start
				 FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			   WHERE (product_type_id <<>> '4' OR product_type_id IS NULL)
				 GROUP BY 1) d
	ON a.id = d.client_id
	
	
	
),
FINAL AS(SELECT 
		 SALESFORCE.*,
     GPP.*,
	
	  
	  	CASE 
		   
			 WHEN GPP.id IS NOT NULL AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) <<= 90
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.min_pay_start IS NULL
			 THEN 'Newly Signed'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND date_trunc('month', GPP.min_pay_start) >>= date_trunc('month',CURRENT_DATE) THEN 'Onboarding' 
			  
		   WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current >>0  THEN 'Currently Active'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current IS NULL
			 AND (GPP.max_pay_end << CURRENT_DATE OR (date_trunc('month', GPP.max_pay_start) >>= date_trunc('month',CURRENT_DATE) AND GPP.max_pay_end >> CURRENT_DATE))
			 THEN 'Currently Inactive'
			 
			 
			 WHEN (GPP.id IS NOT NULL 
			 AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) >>90
			 AND GPP.pop_to_date IS NULL)
		   OR (GPP.id IS NOT NULL AND GPP.ma_start_date IS NULL AND SALESFORCE.msa_date IS NULL )
       THEN 'Never Active' 
		 
		   WHEN (GPP. id IS NULL
		)
				 THEN 'Unknown'
			
			 END AS gpp_account_status
			
FROM SALESFORCE
LEFT JOIN GPP
ON SALESFORCE.account_id = GPP.salesforce_account_id

		 )
SELECT *
FROM FINAL"
9e54ff1b-0322-d75b-119e-c4c050f719d0,Custom SQL Query (gpbidb) (2),postgres,"SELECT 
client_id,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('1') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS NEW_STATUS,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('2') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS Onb_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('3') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS ACTIVE_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('4') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS TERM_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('5') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS INACT_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= TRUE AND (service_class IS NULL OR service_class <<>>'4')) AS ftl

FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS pro
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS client ON pro.client_id = client.id
WHERE client.is_demo_client = FALSE
GROUP BY pro.client_id"
9e54ff1b-0322-d75b-119e-c4c050f719d0,Custom SQL Query (gpbidb) (2),postgres,"SELECT DISTINCT
       client.id as GPP_ID, 
       client.name,
       partner.name AS partner
FROM goglobal_gp_goglobal.v_gp_gg_client_current client
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current partner ON client.partners_referral_id = partner.id
order by client.id asc"
a0919c90-c01b-4402-7cda-1dac94f4d130,Polaris KPIs - Phase 1,databricks,"SELECT DISTINCT  CONCAT(RIGHT(fgl.ledger_period,4),'-',LEFT(fgl.ledger_period,2),'-01')::date AS period_date,fgl.*
FROM gp_prod.gold_kpi.finance_gl_kpi_aggregate_view as fgl
ORDER BY 1"
a0919c90-c01b-4402-7cda-1dac94f4d130,Polaris KPIs - Phase 1,databricks,"WITH p AS (
SELECT ps.accounting_period, ps.gp_customer_accounting_id,
COUNT (distinct ps.project_id) AS active_professional_count
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view AS ps
WHERE total >> 0
GROUP BY ps.accounting_period, ps.gp_customer_accounting_id
)
,
A AS(
SELECT b.accounting_period,
--CONCAT(right(b.accounting_period,4),'-',left(b.accounting_period,2),'-01')::date AS period_date,
--datediff(MONTH, c.first_fee_paid_date, CONCAT(right(b.accounting_period,4),'-',left(b.accounting_period,2),'-01')::date) AS months,
b.gp_customer_accounting_id,
b.total AS month_revenue,
--c.first_fee_paid_date,
p.active_professional_count
FROM gp_prod.gold_kpi.customer_monthly_billing_summary_view AS b
LEFT JOIN gp_prod.gold_kpi.customer_kpi_view AS c USING (gp_customer_accounting_id)
LEFT JOIN p ON p.gp_customer_accounting_id = b.gp_customer_accounting_id AND p.accounting_period = b.accounting_period
WHERE 
datediff(MONTH, c.first_fee_paid_date, CONCAT(right(b.accounting_period,4),'-',left(b.accounting_period,2),'-01')::date) >>= 12

)
,
B AS(
SELECT A.accounting_period,
count(DISTINCT gp_customer_accounting_id) AS customer_count,
sum(month_revenue) AS revenue,
sum(active_professional_count) AS professionals
FROM A
GROUP BY A.accounting_period
)


SELECT
CONCAT(RIGHT(B.accounting_period,4),'-',LEFT(B.accounting_period,2),'-01')::date AS period_date,
B.customer_count,
B.revenue,
B.professionals,
B.professionals/B.customer_count AS prof_per_cust,
B.revenue/B.customer_count AS revenue_per_cust,
B.revenue/B.professionals AS revenue_per_prof
FROM B

ORDER BY 1"
a0919c90-c01b-4402-7cda-1dac94f4d130,Polaris KPIs - Phase 1,databricks,"--Retention
SELECT CONCAT(RIGHT(cr.accounting_period,4),'-',LEFT(cr.accounting_period,2),'-01')::date AS period_date,
cr.useful_life,
cr.churn as customer_churn,
cr.annual_gross_revenue_churn,
churn_c.churn_count,
cr.retention as customer_retention,
pr.retention as professional_retention,
try_divide(pr.active_now_and_year_ago, cr.active_now_and_year_ago) AS profs_per_customer
FROM gp_prod.gold_kpi.eor_customer_retention_rate_summary_view as cr
LEFT JOIN
(
SELECT accounting_period, COUNT(*)::int AS churn_count
FROM gp_prod.gold_kpi.customer_active_product_mix_view 
WHERE last_month_active='true'
GROUP BY accounting_period
ORDER BY 1
) AS churn_c USING(accounting_period)
LEFT JOIN gp_prod.gold_kpi.professional_retention_rate_summary_view as pr
ON cr.accounting_period=pr.accounting_period"
a0919c90-c01b-4402-7cda-1dac94f4d130,Polaris KPIs - Phase 1,postgres,"SELECT a.cal_date::date,a.professional_id,
a.payroll_start_date::date,
a.payroll_end_date::date,
a.country_name,a.active_flag,a.termination_flag,a.new_flag,
b.accounting_id,b.internal_id,b.external_id
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard as a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_professional as b
ON a.professional_id=b.internal_id
WHERE a.active_flag = 'Active' AND (a.service_class IS NULL OR a.service_class <<>> '4')
AND  a.cal_date BETWEEN '2020-01-01'::date AND current_date"
a0919c90-c01b-4402-7cda-1dac94f4d130,Polaris KPIs - Phase 1,databricks,"--Employees
SELECT CONCAT(RIGHT(hc.accounting_period,4),'-',LEFT(hc.accounting_period,2),'-01')::date AS period_date,
hc.worker_headcount,
hc.employee_headcount
FROM gp_prod.gold_kpi.employee_monthly_headcount_view as hc"
a0919c90-c01b-4402-7cda-1dac94f4d130,Polaris KPIs - Phase 1,databricks,"SELECT pmbs.period_date,fkpi.ledger_revenue,
pmbs.total_billing_value,pmbs.total_eor_billing_value,
pmbs.total_contractor_billing_value,
cmbs.take_rate,
cmbs_uat.total_setup_fees_revenue
FROM(
   SELECT
    CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
    sum(total) AS total_billing_value, 
    sum(total_eor_recurring_fee_billing_value) AS total_eor_billing_value,
    sum(total_recurring_contractor_revenue) AS total_contractor_billing_value
    FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view
    GROUP BY period_date) as pmbs
LEFT JOIN(
    SELECT 
    CONCAT(RIGHT(ledger_period,4),'-',LEFT(ledger_period,2),'-01')::date AS period_date,
    value AS ledger_revenue
    FROM gp_prod.gold_kpi.finance_gl_kpi_aggregate_view
    WHERE finance_kpi = 'revenue') as fkpi
ON fkpi.period_date=pmbs.period_date
LEFT JOIN (
    SELECT CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,
    AVG(take_rate) as take_rate
    FROM gp_prod.gold_kpi.customer_monthly_billing_summary_view
    GROUP BY 1
    ORDER BY 1
    ) as cmbs
ON cmbs.period_date=pmbs.period_date
LEFT JOIN (
    SELECT CONCAT(RIGHT(a.accounting_period,4),'-',LEFT(a.accounting_period,2),'-01')::date AS period_date,
    SUM(a.total_setup_fees_revenue) as total_setup_fees_revenue
    FROM gp_uat.gold_kpi.customer_monthly_billing_summary_view as a
    LEFT JOIN gp_prod.gold_kpi.customer_active_product_mix_view as b
    ON (a.accounting_period=b.accounting_period and a.gp_customer_accounting_id=b.gp_customer_accounting_id)
    WHERE b.new_eor=True
    GROUP BY 1
    ) as cmbs_uat
ON cmbs_uat.period_date=pmbs.period_date
WHERE pmbs.period_date is not null
ORDER BY 1"
a0919c90-c01b-4402-7cda-1dac94f4d130,Polaris KPIs - Phase 1,databricks,"--Marketing
SELECT CONCAT(RIGHT(mfv.month_period,4),'-',LEFT(mfv.month_period,2),'-01')::date AS period_date,
mfv.MSA_count,mfv.SAL_count,mfv.SQL_count,mfv.MQL_count,
mfv.avg_MQL_MSA,
mfv.avg_MQL_SQL,
mfv.avg_SQL_SAL,
mfv.avg_SAL_MSA,
mfc.MQL_SQL_conversion_rate,mfc.SQL_SAL_conversion_rate,mfc.SAL_MSA_conversion_rate
FROM gp_prod.gold_marketing.marketing_funnel_view as mfv
LEFT JOIN gp_prod.gold_marketing.funnel_conversion_view mfc
ON mfv.month_period=mfc.month_period"
a0919c90-c01b-4402-7cda-1dac94f4d130,Polaris KPIs - Phase 1,databricks,"SELECT 
CONCAT(RIGHT(billing.accounting_period,4),'-',LEFT(billing.accounting_period,2),'-01')::date AS period_date,
billing.accounting_period,
billing.project_id,
billing.transaction_type,
billing.customer_id,
billing.gp_customer_accounting_id,
billing.service_class,
billing.pricing_model,
billing.employment_country,
billing.invoice_type,
billing.transaction_fee_type,
billing.gaap_reporting_region,
billing.billing_region,
billing.is_gp_recruit_customer,
billing.is_gp_contractor_customer,
billing.customer_name,
billing.is_demo_client,
billing.professional_employed_region,
billing.msa_contract_start_date_eor,
billing.employment_country_iso_code_2,
billing.base_currency,
billing.invoice_line_currency,
billing.recurring_category,
billing.recurring_detailed_category,
CASE WHEN billing.transaction_type='CRM' THEN -billing.extended_amount_in_company_base_currency ELSE billing.extended_amount_in_company_base_currency end as Extended_amount_USD,
CASE WHEN billing.transaction_type='CRM' THEN -billing.gross_billings_value ELSE billing.gross_billings_value end as Gross_Billings_Value,
CASE WHEN billing.transaction_type='CRM' THEN -billing.gaap_revenue_value else billing.gaap_revenue_value end as gaap_revenue_value ,
CASE WHEN billing.transaction_type='CRM' THEN -billing.recurring_eor_platform_fee_billing_value ELSE billing.recurring_eor_platform_fee_billing_value end as recurring_eor_platform_fee_billing_value ,
CASE WHEN billing.transaction_type='CRM' THEN -billing.recurring_eor_transaction_fee_billing_value ELSE billing.recurring_eor_transaction_fee_billing_value end as recurring_eor_transaction_fee_billing_value,
CASE WHEN billing.transaction_type='CRM' THEN -billing.total_eor_recurring_fee_billing_value ELSE billing.total_eor_recurring_fee_billing_value end as total_eor_recurring_fee_billing_value,
CASE WHEN billing.transaction_type='CRM' THEN -billing.recurring_eor_billings_value ELSE billing.recurring_eor_billings_value end as recurring_eor_billings_value,
CASE WHEN billing.transaction_type='CRM' THEN -billing.recurring_contractor_revenue ELSE billing.recurring_contractor_revenue end as recurring_contractor_revenue
FROM gp_prod.gold_kpi.billing_kpi_view as billing
WHERE billing.accounting_period is not null
ORDER BY 1"
a0919c90-c01b-4402-7cda-1dac94f4d130,Polaris KPIs - Phase 1,databricks,"--------Counts
WITH eor_prof as (
--eor professionals
SELECT 
CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,accounting_period,
COUNT(DISTINCT(project_id)) as active_professional_eor_count
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view 
WHERE total_eor_recurring_fee_billing_value >> 0 
GROUP BY 1,2
ORDER BY 1),

--contractor
contractor as(
SELECT 
CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,accounting_period,
COUNT(DISTINCT(project_id)) as active_professional_contracted_count
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view
WHERE total_recurring_contractor_revenue  >> 0 
GROUP BY 1,2
ORDER BY 1),

total_prof as (
--total
SELECT 
CONCAT(RIGHT(accounting_period,4),'-',LEFT(accounting_period,2),'-01')::date AS period_date,accounting_period,
COUNT(DISTINCT(project_id)) as active_professional_count
FROM gp_prod.gold_kpi.professional_monthly_billing_summary_view
WHERE total  >> 0 
GROUP BY 1,2
ORDER BY 1)

SELECT
CONCAT(RIGHT(cmbc.accounting_period,4),'-',LEFT(cmbc.accounting_period,2),'-01')::date AS period_date,
cmbc.active_customer_eor_count,
cmbc.active_customer_count,
cmbc.TTM_average_recurring_revenue,
a.active_professional_count,
b.active_professional_eor_count,
c.active_professional_contracted_count,
pmbc.failed_to_launch_volume
FROM gp_prod.gold_kpi.customer_monthly_billing_counts_view as cmbc
LEFT JOIN total_prof as a
ON cmbc.accounting_period=a.accounting_period
LEFT JOIN eor_prof as b
ON cmbc.accounting_period=b.accounting_period
LEFT JOIN contractor as c
ON cmbc.accounting_period=c.accounting_period
LEFT JOIN gp_prod.gold_kpi.professional_monthly_billing_counts_view as pmbc
ON cmbc.accounting_period=pmbc.accounting_period
ORDER BY 1"
a0919c90-c01b-4402-7cda-1dac94f4d130,Polaris KPIs - Phase 1,databricks,"SELECT CONCAT(RIGHT(capm.accounting_period,4),'-',LEFT(capm.accounting_period,2),'-01')::date AS period_date,
capm.gp_customer_accounting_id,
capm.active_product_mix,
capm.new_eor,
capm.customer_reactivation,
capm.pricing_model
FROM gp_prod.gold_kpi.customer_active_product_mix_view as capm"
a0919c90-c01b-4402-7cda-1dac94f4d130,Polaris KPIs - Phase 1,databricks,"--4.1 Active Prof Recurring Fees
WITH billings as (
SELECT  
CONCAT(RIGHT(b.accounting_period,4),'-',LEFT(b.accounting_period,2),'-01')::date AS period_date,
b.project_id,
b.customer_name as Client_Name,


CASE WHEN b.transaction_type ='CRM' THEN 
CASE WHEN b.recurring_detailed_category IN ('Fees EOR MGMT FEE') 
and (b.service_class == ""EOR"" or b.service_class is null)
THEN -b.extended_amount_in_company_base_currency else 0  end 
ELSE
CASE WHEN b.recurring_detailed_category IN ('Fees EOR MGMT FEE') 
and (b.service_class == ""EOR"" or b.service_class is null)
THEN b.extended_amount_in_company_base_currency else 0 end end
as Recurring_EOR_Platform_Fee_Billings_USD,


CASE WHEN b.transaction_type ='CRM' THEN
CASE WHEN b.recurring_detailed_category IN ('Fee EOR CURRENCY TRANSACTION FEE','Fees EOR OTHER FEES',
'Fee EOR EMPLOYER BURDEN MARK-UP','Fee EOR INSURANCE MARK-UP') 
and (b.service_class == ""EOR"" or b.service_class is null)
THEN -b.extended_amount_in_company_base_currency else 0 end
ELSE
CASE WHEN b.recurring_detailed_category IN ('Fee EOR CURRENCY TRANSACTION FEE','Fees EOR OTHER FEES',
'Fee EOR EMPLOYER BURDEN MARK-UP','Fee EOR INSURANCE MARK-UP') 
and (b.service_class == ""EOR"" or b.service_class is null)
THEN b.extended_amount_in_company_base_currency else 0 end end
as Recurring_EOR_Transaction_Fee_Billings_USD,

CASE WHEN b.transaction_type ='CRM' THEN 
CASE WHEN b.recurring_category in (""Recurring Fees and Mark-ups"")  
THEN -b.extended_amount_in_company_base_currency else 0 end 
ELSE
CASE WHEN b.recurring_category in (""Recurring Fees and Mark-ups"")
THEN b.extended_amount_in_company_base_currency else 0 end end
as Total_Recurring_Fees_USD

FROM gp_prod.gold_kpi.billing_kpi_view  as b
WHERE b.accounting_period is not null
--where accounting_period='04-2023' 
--GROUP BY 1,2,3,4
ORDER BY 1,2)

SELECT 
period_date,
project_id,
Client_Name,

SUM(Recurring_EOR_Platform_Fee_Billings_USD) as Recurring_EOR_Platform_Fee_Billings_USD,
SUM(Recurring_EOR_Transaction_Fee_Billings_USD) as Recurring_EOR_Transaction_Fee_Billings_USD,
SUM(Total_Recurring_Fees_USD) as Total_Recurring_Fees_USD,
CASE WHEN SUM(Recurring_EOR_Platform_Fee_Billings_USD) + SUM(Recurring_EOR_Transaction_Fee_Billings_USD) >>0 THEN 1 else 0 end as Active_EOR_Professional
FROM billings
WHERE period_date>>='2020-01-01'
GROUP BY 1,2,3
ORDER BY 1"
a2066885-1357-2650-a220-72a69facd43e,Jira Legal,postgres,"WITH users AS (SELECT DISTINCT us.id, us.name, us.locale, us.time_zone--, grp.group_name

	FROM jira_integration.user us),
	legal_users AS (SELECT DISTINCT us.id, us.name, grp.group_name
					FROM jira_integration.user us
					LEFT JOIN jira_integration.user_group grp
					ON us.id = grp.user_id
					WHERE group_name = 'gp-legal'
	)	
,
status AS (
	SELECT issue_id, DATE(""time"") AS date, name AS trueStatus
	FROM jira_integration.issue_field_history fh
	LEFT JOIN jira_integration.status st
	ON fh.value::int = st.id
	WHERE field_id = 'status'
)
,
days AS (	
SELECT ""cal"".""cal_date"",
  DATE(""issue"".""created"") AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""assignee"" AS ""assignee"",
  ""users1"".""name"" AS ""assignee_name"",
  ""issue"".""reporter"" AS ""reporter"",
  ""users2"".""name"" AS ""reporter_name"",
  ""issue"".""creator"" AS ""creator"",
  ""users3"".""name"" AS ""creator_name"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""ist"".""name"" AS ""issue_name"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""proj"".""name"" AS ""project_name"",
  ""issue"".""resolution"" AS ""resolution"",
  ""resolution"".""name"" as ""resolutionName"",
  ""issue"".""due_date"",
  DATE(""issue"".""resolved"") AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""status"".""name"" as ""statusName"",
  DATE(""issue"".""status_category_changed"") AS ""LastStatusChange"",
  COALESCE(DATE(""issue"".""resolved""),DATE(""issue"".""status_category_changed""),NULL) AS ""LastDate"",
  ""priority"".""name"" as ""priorityName"",
  CASE
       WHEN DATE(""issue"".""resolved"") IS NOT NULL AND ""cal"".""cal_date"" >> DATE(""issue"".""resolved"") THEN 'Resolved'::text
	   WHEN DATE(""issue"".""resolved"") IS NOT NULL AND ""cal"".""cal_date"" = DATE(""issue"".""resolved"") THEN 'Closed'::text
	   WHEN DATE(""issue"".""resolved"") IS NULL AND ""issue"".""status"" IN(5,6,10277,10002) AND ""cal"".""cal_date"" >> DATE(""issue"".""status_category_changed"") THEN 'Resolved'::text
       WHEN DATE(""issue"".""resolved"") IS NULL AND ""issue"".""status"" IN(5,6,10277,10002) AND ""cal"".""cal_date"" = DATE(""issue"".""status_category_changed"") THEN 'Closed'::text
	   ELSE 'Active'::text
  END AS active_flag
FROM ""repo"".""gp_calendar"" ""cal"",
""jira_integration"".""issue"" ""issue"" 
LEFT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEFT JOIN ""jira_integration"".""project"" ""proj"" ON ""issue"".""project"" = ""proj"".""id""
LEFT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEFT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
LEFT JOIN users ""users1"" ON ""issue"".""assignee"" = ""users1"".""id""
LEFT JOIN users ""users2"" ON ""issue"".""reporter"" = ""users2"".""id""
LEFT JOIN users ""users3"" ON ""issue"".""creator"" = ""users3"".""id""
LEFT JOIN ""jira_integration"".""issue_type"" ""ist"" ON ""issue"".""issue_type"" = ""ist"".""id""
WHERE ""cal"".""week_day"" NOT IN ('Saturday','Sunday') AND ""cal"".""cal_date"" <<= (date_trunc('week'::text, now() + '2 week'::interval))
	  AND ""cal"".""cal_date"" >>= DATE(""issue"".""created"") AND ""issue"".""_fivetran_deleted"" = false
      --AND project in (10072,10120) --BI
       AND assignee in (SELECT id FROM legal_users) -- Legal
)
SELECT days.*, trueStatus
	FROM days
	LEFT JOIN status
	ON days.id = status.issue_id AND days.cal_date = status.date
	WHERE active_flag in ('Active','Closed')"
a2066885-1357-2650-a220-72a69facd43e,Jira Legal,postgres,"SELECT issue_id, name AS country
 FROM jira_integration.issue_multiselect_history mh
 LEFT JOIN jira_integration.field_option fo
 ON mh.value::int = fo.id
 WHERE field_id = 'customfield_10244' AND value IS NOT NULL AND is_active = true
 ORDER BY issue_id"
a2066885-1357-2650-a220-72a69facd43e,Jira Legal,postgres,"SELECT issue_id, name AS region
 FROM jira_integration.issue_multiselect_history mh
 LEFT JOIN jira_integration.field_option fo
 ON mh.value::int = fo.id
 WHERE field_id = 'customfield_10245' AND value IS NOT NULL AND is_active = true
 ORDER BY issue_id"
a2d2c962-8b5c-1c74-2412-5cbf4a0a3b6e,Weekly,postgres,"SELECT DISTINCT c.department_name,c.office_name,c.name,b.resolved_at,b.starts_at,a.id,c.opening_opened_at,
c.requisition_id
FROM greenhouse.v_gp_greenhouse_applications_current as a
LEFT JOIN greenhouse.v_gp_greenhouse_offers_current as b
ON (a.id=b.application_id)
LEFT JOIN greenhouse.v_gp_greenhouse_jobs_all_current as c
ON (a.job_id=c.id)
WHERE a.status='hired' AND b.resolved_at>>='2022-01-01'"
a2d2c962-8b5c-1c74-2412-5cbf4a0a3b6e,Weekly,postgres,"SELECT DISTINCT a.id,d.first_name,d.last_name
FROM greenhouse.v_gp_greenhouse_applications_current as a
LEFT JOIN greenhouse.v_gp_greenhouse_offers_current as b
ON (a.id=b.application_id)
LEFT JOIN greenhouse.v_gp_greenhouse_candidate_current as d
ON (a.id=d.application_id)
WHERE a.status='hired' AND b.resolved_at>>='2022-01-01'"
a5b69c6a-05e0-5088-dc48-80c343b06694,Custom SQL Query (gpbidb),postgres,"WITH profs_per_client AS
		(SELECT 
	  	T1.cal_date
	 	, T1.client_id
	 	, T1.client_name
	 	, T1.country_name
	 	, COUNT(T1.professional_id) AS client_profs
		FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS T1
		WHERE T1.cal_date <<= CURRENT_DATE 
			AND T1.active_flag IS NOT NULL
		GROUP BY T1.cal_date
	 		, T1.client_id
	 		, T1.client_name
	 		, T1.country_name
		ORDER BY T1.client_id, T1.country_name
		),
	
	profs_last_count AS
		(SELECT *
		, DENSE_RANK() OVER(PARTITION BY ppc.client_id ORDER BY ppc.cal_date) AS client_month
		, DENSE_RANK() OVER(PARTITION BY ppc.client_id, ppc.country_name ORDER BY ppc.cal_date) AS client_country_month
		, LAG(ppc.client_profs,1) 
			OVER(PARTITION BY ppc.client_id, ppc.country_name 
			 ORDER BY ppc.cal_date, ppc.client_id, ppc.country_name) AS profs_last_count
		, LAG(ppc.cal_date,1) 
			OVER(PARTITION BY ppc.client_id
			 ORDER BY ppc.cal_date, ppc.client_id) AS last_cal_date
	 	, LAG(ppc.cal_date,1) 
			OVER(PARTITION BY ppc.client_id, ppc.country_name
			 ORDER BY ppc.cal_date, ppc.client_id, ppc.country_name) AS last_cal_date_country 
		,  LEAD(ppc.cal_date,1) 
			OVER(PARTITION BY ppc.client_id
			 ORDER BY ppc.cal_date, ppc.client_id) AS next_cal_date
		, LEAD(ppc.cal_date,1) 
			OVER(PARTITION BY ppc.client_id, ppc.country_name
			 ORDER BY ppc.cal_date, ppc.client_id, ppc.country_name) AS next_cal_date_country
		 FROM profs_per_client AS ppc
		ORDER BY ppc.cal_date, client_month
		),
	
	first_active AS 
		(SELECT 
	 	T1.client_id
	 	, MIN(T1.cal_date) AS client_first_active_flag
	 	FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS T1
	 	WHERE T1.active_flag IS NOT NULL
	 	GROUP BY T1.client_id
		ORDER BY T1.client_id
		),

	first_active_country AS
		(SELECT
		 T1.client_id
		 , T1.country_name
		 , MIN(T1.cal_date) AS client_first_active_country_flag
		 FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS T1
		 WHERE T1.active_flag IS NOT NULL
		 GROUP BY T1.client_id
		 		, T1.country_name
		),
				
	last_active AS 
		(SELECT 
	 	T1.client_id
	 	, MAX(T1.cal_date) AS client_last_active_flag
	 	FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS T1
	 	WHERE T1.active_flag IS NOT NULL
	 	GROUP BY T1.client_id
		ORDER BY T1.client_id
		),

	last_active_country AS
		(SELECT
		 T1.client_id
		 , T1.country_name
		 , MAX(T1.cal_date) AS client_last_active_country_flag
		 FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS T1
		 WHERE T1.active_flag IS NOT NULL
		 GROUP BY T1.client_id
		 		, T1.country_name
		),
				
	customer_churn_flags AS 
		(SELECT plc.*
		, CASE WHEN plc.client_profs >> plc.profs_last_count THEN 1 
			END AS prof_increase
		, CASE WHEN plc.client_profs << plc.profs_last_count THEN 1 
			END AS prof_decrease
		, CASE WHEN fa.client_first_active_flag IS NOT NULL THEN 1 
			END AS client_first_active_flag
		, CASE WHEN fac.client_first_active_country_flag IS NOT NULL THEN 1 
			END AS client_first_active_country_flag
		, CASE WHEN COALESCE(next_cal_date,CURRENT_DATE)-cal_date >> 33 THEN 1 
		 	END AS client_last_active_flag
		, CASE WHEN COALESCE(next_cal_date_country,CURRENT_DATE)-cal_date >> 33 THEN 1 
		 	END AS client_last_active_country_flag
		, CASE WHEN cal_date-last_cal_date >> 33 THEN 1 
			END AS client_reactivated_flag
		, CASE WHEN cal_date-last_cal_date_country >> 33 THEN 1 
		 	END AS client_country_reactivated_flag
		FROM profs_last_count AS plc
		LEFT JOIN first_active AS fa
			ON plc.client_id = fa.client_id 
			AND plc.cal_date = fa.client_first_active_flag
		LEFT JOIN first_active_country AS fac
			ON plc.client_id = fac.client_id 
			AND plc.cal_date = fac.client_first_active_country_flag
			AND plc.country_name = fac.country_name
		LEFT JOIN last_active AS la
			ON plc.client_id = la.client_id 
			AND plc.cal_date = la.client_last_active_flag
		LEFT JOIN last_active_country AS lac
			ON plc.client_id = lac.client_id 
			AND plc.cal_date = lac.client_last_active_country_flag
			AND plc.country_name = lac.country_name
		ORDER BY plc.client_id, plc.cal_date, plc.country_name
		), 
	
	prof_current AS
		(SELECT 
		a.professional_id
		, a.cal_date
   		, a.client_id
   		, a.client_name
   		, cc3.name AS customer_country
		, CASE WHEN cc3.gp_region = '1' THEN 'EMEA'
		 	WHEN cc3.gp_region = '2' THEN 'APAC'
		 	WHEN cc3.gp_region = '3' THEN 'NA' 
		 	WHEN cc3.gp_region = '4' THEN 'LATAM'
		 END AS customer_region
		, a.country_name
		, DATE_TRUNC('Month', c.addendum_enrollment_date) AS addendum_enroll_date
		, CASE WHEN c.addendum_enrollment_date >> a.cal_date THEN 0 ELSE 1 
			END AS relevant_period
		, a.new_flag
		, a.termination_flag
		, a.payroll_start_date
		, a.payroll_end_date
		, a.job_category
		, a.title
		 		, CASE WHEN a.title ILIKE ('%sales%') THEN 'Sales'
     WHEN a.title ILIKE ANY (ARRAY['%marketing%', '%Media%', '%Campaign%', '%Communication%', '%Brand%', '%Influencer%','%Growth Market%']) THEN 'Marketing'
     WHEN a.title ILIKE ANY (ARRAY['%finance%', '%Accounting%', '%Payable%', '%Payments%', '%Tax%', '%financial%']) THEN 'Finance'
	 WHEN a.title ILIKE ANY(ARRAY['%Business Development%', '%Development Representative%', '%Channel Development%']) THEN 'Business Development'
	 WHEN a.title ILIKE ANY (ARRAY ['%Solutions Architect%', '%System%', '%IT%', '%Software%', '%Developer%', '%Computer%', '%Technical%','%Technology%', '%Android%', '%Application%','%Test%', '%I.T.%', '%Data Centre Technician%', '%Backend%', '%QA%', '%Tech%', '%Network%', '%DevOps%', '%Engineer%', '%Programmer%']) THEN 'Tech/Engineering'
	 WHEN a.title ILIKE ANY (ARRAY ['%Consultant%', '%Consulting%']) THEN 'Consulting'

	 WHEN a.title ILIKE ANY (ARRAY ['%Project Management%', '%Project Manager%']) THEN 'Project Management'
	 WHEN a.title ILIKE ANY (ARRAY ['%Account Manager%', '%Account Executive%']) THEN 'Account Management'
     WHEN a.title ILIKE ANY (ARRAY ['%Product Manager%', 'Product']) THEN 'Product'
     WHEN a.title ILIKE ANY (ARRAY ['%HR%', '%People%', '%Payroll%','%Onboarding%']) THEN 'HR'
	 WHEN a.title ILIKE ANY (ARRAY ['%legal%', '%counsel%']) THEN 'Legal'
	 WHEN a.title ILIKE ANY (ARRAY ['%Operations%', '%Customer Success%', '%Manager%', '%Client%']) THEN 'Operations'
	 WHEN a.title ILIKE ANY (ARRAY ['%Clinical%', '%COVID%', '%Medical%', '%SmileGuide%', '%Health%', '%Wellness%','%Smile%']) THEN 'Clinical/Health Care'
	 WHEN a.title ILIKE ANY (ARRAY ['%Applied Data%', '%Business Analyst%', '%Business Intelligence%', '%Business Insights%', '%Data Scientist%', '%BI%', '%Data Intelligence%','%Data Analyst%', '%Analyst%']) THEN 'BI'
	 WHEN a.title ILIKE ANY (ARRAY ['%Customer Service%', '%Customer Support Specialist%', '%Customer Support%', '%Customer Care%', '%Customer Advocate%','%Executive Assistant%', 'Account']) THEN 'Customer Service'
	 WHEN a.title ILIKE ANY (ARRAY ['%Vice President%', '%VP%', '%CCO%', '%CEO%', '%CFO%', '%Chief%', '%CTO%', '%CPO%', '%President%', '%Head%']) THEN 'C-Suite/Executives'	 
					END AS job_title_area
		, a.annual_base_salary
		, a.birth_date
		, a.local_salary_currency_code
		, a.exchange_rate
		, a.reason_type
		, a.industry_name
		, a.offboard_start_date
	    , a.offboard_end_date
		, a.tenure_months
		FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS a
		LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_current AS b
			ON a.professional_id = b.id
		LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS cc
			ON a.client_id= cc.id
		LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS cc2
			ON cc.billing_address_id = cc2.id
		LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS cc3
			ON cc2.country_id=cc3.id
		LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current AS cc1
			ON cc.partners_referral_id = cc1.id
		LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current AS c
			ON c.id = b.client_country_id
		WHERE (a.new_flag IS NOT NULL OR a.termination_flag IS NOT NULL OR a.active_flag IS NOT NULL)
			AND cal_date <<= CURRENT_DATE
		 	AND b.service_class != '4'
			AND b.is_failed_to_launch = 'false'
		ORDER BY a.cal_date, cc3.name
		),

churn_clients AS (SELECT 
		DISTINCT client_id AS client_id
	FROM customer_churn_flags	
	WHERE client_last_active_flag = 1
	)	

SELECT 
	ccf.cal_date
	, ccf.client_month
	, ccf.client_id
	, ccf.client_name
	, ccf.country_name
	, ccf.client_country_month
	, ccf.client_profs
	, COALESCE(ccf.prof_increase, 0) AS prof_increase
	, COALESCE(ccf.prof_decrease, 0) AS prof_decrease
	, CASE 
		WHEN ccf.client_first_active_flag = '1' THEN 'New Client'
		WHEN ccf.client_last_active_flag = '1' THEN 'Terminating Client'
		WHEN ccf.client_reactivated_flag = '1' THEN 'Reactivated Client'
		WHEN ccf.client_first_active_flag IS NULL AND ccf.client_last_active_flag IS NULL
			AND ccf.client_reactivated_flag IS NULL THEN 'Existing Client'
	  END AS Client_Status
	, COALESCE(ccf.client_first_active_flag, 0) AS client_first_active_flag
	, COALESCE(ccf.client_first_active_country_flag, 0) AS client_first_active_country_flag
	, COALESCE(ccf.client_last_active_flag, 0) AS client_last_active_flag
	, COALESCE(ccf.client_last_active_country_flag, 0) AS client_last_active_country_flag
	, COALESCE(ccf.client_reactivated_flag, 0) AS client_reactivated_flag
	, COALESCE(ccf.client_country_reactivated_flag, 0) AS client_country_reactivated_flag
	, pc.professional_id
	, CASE 
		WHEN pc.new_flag IS NOT NULL THEN 'New Professional'
		WHEN pc.termination_flag IS NOT NULL THEN 'Terminating Professional'
		WHEN pc.new_flag IS NULL AND pc.termination_flag IS NULL THEN 'Existing Professional'
	 END AS Professional_Status
	, pc.new_flag
	, pc.termination_flag
	, pc.payroll_start_date
	, pc.payroll_end_date
	, pc.job_category
	, pc.title
	, pc.job_title_area
	, pc.annual_base_salary
	, pc.birth_date
	, pc.local_salary_currency_code
	, pc.exchange_rate
	, pc.industry_name
	, pc.customer_region
	, pc.addendum_enroll_date
	, pc.relevant_period
	, pc.tenure_months
	, CASE
		WHEN pc.reason_type IS NULL THEN 'No_Reason'
	 	WHEN pc.reason_type = '1' THEN 'DISAGREED_ON_BENEFITS'
	 	WHEN pc.reason_type = '2' THEN 'GP_BUSINESS_MODEL'
		WHEN pc.reason_type = '3' THEN 'TOOK_ANOTHER_JOB'
	 	WHEN pc.reason_type = '4' THEN 'HIRED_TO_CUSTOMER_ENTITY'
	 	WHEN pc.reason_type = '5' THEN 'WENT_TO_COMPETITOR'
	 	WHEN pc.reason_type = '6' THEN 'CUSTOMER_NO_WANT_HIRE_PROF'
	 	WHEN pc.reason_type = '7' THEN 'PROFESSIONAL_RESIGNED'
	 	WHEN pc.reason_type = '8' THEN 'PERFORMANCE_DISCIPLINE'
	 	WHEN pc.reason_type = '9' THEN 'POSITION_ELIMINATED'
	 	WHEN pc.reason_type = '10' THEN 'SALE_OF_CUSTOMER'
	 	WHEN pc.reason_type = '11' THEN 'OTHER'
	 	WHEN pc.reason_type = '13' THEN 'INTERNAL_TRANSFER'
	 	WHEN pc.reason_type = '14' THEN 'COVID_19'
	 	WHEN pc.reason_type = '15' THEN 'GP_COULD_NOT_PROVIDE'
	 	WHEN pc.reason_type = '16' THEN 'CUSTOMER_DECLINE_RENEW_CONTRACT'
	 	WHEN pc.reason_type = '17' THEN 'FIXED_CONTRACT_RENEWAL_PROHIBITED'
	 	WHEN pc.reason_type = '18' THEN 'PROFESSIONAL_PERSONAL_REASONS'
	 	WHEN pc.reason_type = '19' THEN 'CAPABILITY'
	 	WHEN pc.reason_type = '20' THEN 'INCAPACITY'
	 	WHEN pc.reason_type = '21' THEN 'NOT_AUTHORIED_TO_WORK'
	 	WHEN pc.reason_type = '22' THEN 'DID_NOT_PASS_PROPATIONARY_PERIOD'
	 	WHEN pc.reason_type = '23' THEN 'NO_SHOW_ON_FIRST_DAY'
	END AS Left_Reason
	, pc.offboard_start_date
	, pc.offboard_end_date
FROM customer_churn_flags AS ccf
INNER JOIN prof_current AS pc
	ON ccf.cal_date = pc.cal_date
	AND ccf.client_id = pc.client_id
	AND ccf.country_name = pc.country_name
--WHERE ccf.client_id = 678
ORDER BY ccf.client_id, ccf.cal_date, ccf.country_name"
a74c5082-2af2-c049-04ee-2f4ab557dbe7,Sales Navigator Connection,,
a8537b38-8fe9-c6ad-6307-f64dfab66c22,Sheet1+ (Multiple Connections),postgres,"WITH sfdc as (SELECT DISTINCT 
				*
			  FROM 
			  	salesforce.v_gp_sfdc_marketing_dashboard AS sfdc		
			  WHERE 
				sfdc.cohort_stage='SAL to MSA'
				AND (sfdc.partner_acq_opps IS NULL OR sfdc.partner_acq_opps <<>> 'Yes')
				AND (sfdc.record_type_bi__c IS NULL OR sfdc.record_type_bi__c <<>> 'Potential Partner Opportunity')),
sbqq_1 as (SELECT DISTINCT 
           		sbqq_1.id as quote_id,
				sbqq_1.created_date as created_date_quote,
				sbqq_1.name as quote_name,
				sbqq_1.owner_id as owner_id_quote,
				sbqq_1.last_modified_date as last_modified_date_quote,
		        sbqq_1.sbqq_status_c,
		        sbqq_1.sbqq_billing_name_c,
			    sbqq_1.sbqq_opportunity_2_c,
				sbqq_1.approval_status_c,
		        sbqq_1.approval_indicator_c,
				sbqq_1.last_modified_by_id,
				sbqq_1.sbqq_account_c,
				sbqq_1.sbqq_days_quote_open_c,
				sbqq_1.sbqq_primary_c,
				sbqq_1.number_of_professionals_on_quote_c,
				sbqq_1.pricing_model_c,
                sbqq_1.sbqq_net_amount_c as net_amount_total,
                sbqq_1.pre_approved_minimum_fee_c,
				sbqq_1.currency_symbol_alike_quote_line_c,
				sbqq_1.is_gp_recruit_customer_c,
				sbqq_1.is_gp_contractor_customer_c,
				sbqq_1.complete_price_book_name_c,
				sbqq_1.estimated_monthly_cost_c,
			   	sbqq_1.currency_iso_code,
				sbqq_1.test_group_c
			FROM 
		   	  salesforce.sbqq_quote_c as sbqq_1
			WHERE 
		   		sbqq_1.is_deleted='FALSE'),
first_table as ( SELECT DISTINCT 
					sfdc.*, 
					sbqq_1.quote_id,
					sbqq_1.created_date_quote,
					sbqq_1.quote_name,
					sbqq_1.owner_id_quote,
					sbqq_1.last_modified_date_quote,
					sbqq_1.sbqq_status_c,
					sbqq_1.sbqq_billing_name_c,
					sbqq_1.approval_status_c,
		        	sbqq_1.approval_indicator_c,
					sbqq_1.last_modified_by_id,
					sbqq_1.sbqq_account_c,
					sbqq_1.sbqq_days_quote_open_c,
					sbqq_1.sbqq_primary_c,
					sbqq_1.number_of_professionals_on_quote_c,
					sbqq_1.pricing_model_c,
                    sbqq_1.net_amount_total,
                    sbqq_1.pre_approved_minimum_fee_c,
					sbqq_1.currency_symbol_alike_quote_line_c,
					sbqq_1.is_gp_recruit_customer_c,
					sbqq_1.is_gp_contractor_customer_c,
					sbqq_1.complete_price_book_name_c,
					sbqq_1.estimated_monthly_cost_c,
					sbqq_1.test_group_c,
					rate.conversion_rate,
					users.name as last_modified_name	
				FROM sfdc
				LEFT JOIN sbqq_1
				ON sfdc.lead_or_opp_id=sbqq_1.sbqq_opportunity_2_c
				LEFT JOIN salesforce.currency_type as rate
				ON sbqq_1.currency_iso_code=rate.iso_code
				LEFT JOIN salesforce.v_gp_sfdc_user_current as users
				ON sbqq_1.last_modified_by_id=users.id),
sbqq_2 as ( SELECT DISTINCT
		        sbqq_2.id AS quote_line_id, 
				sbqq_2.name AS quote_line_name, 
				sbqq_2.is_deleted,
				sbqq_2.currency_iso_code, 
				sbqq_2.created_date as created_date_line, 
				sbqq_2.last_modified_date, 
				sbqq_2.sbqq_quote_c, 
				sbqq_2.sbqq_additional_discount_c , 
				sbqq_2.sbqq_component_list_total_c , 
				sbqq_2.sbqq_component_total_c , 
				sbqq_2.sbqq_customer_price_c , 
				sbqq_2.sbqq_customer_total_c , 
				sbqq_2.sbqq_list_price_c , 
				sbqq_2.sbqq_list_total_c , 
				sbqq_2.sbqq_net_price_c , 
				sbqq_2.sbqq_net_total_c , 
				sbqq_2.sbqq_number_c , 
				sbqq_2.sbqq_original_price_c , 
				sbqq_2.sbqq_package_list_total_c , 
				sbqq_2.sbqq_package_total_c , 
				sbqq_2.sbqq_partner_price_c , 
				sbqq_2.sbqq_partner_total_c , 
				sbqq_2.sbqq_product_code_c , 
				sbqq_2.sbqq_product_name_c , 
				sbqq_2.sbqq_prorated_list_price_c , 
				sbqq_2.sbqq_prorated_price_c , 
				sbqq_2.sbqq_regular_price_c , 
				sbqq_2.sbqq_regular_total_c , 
				sbqq_2.sbqq_special_price_c , 
				sbqq_2.sbqq_total_discount_amount_c , 
				sbqq_2.sbqq_total_discount_rate_c , 
				sbqq_2.accruing_statutory_severance_c , 
				sbqq_2.additional_month_payment_c , 
				sbqq_2.x_13_th_month_payment_notes_c , 
				sbqq_2.estimated_social_charges_c , 
				sbqq_2.markup_on_expenses_c , 
				sbqq_2.monthly_service_fee_c , 
				sbqq_2.setup_fee_professional_c , 
				sbqq_2.vat_gst_c , 
				sbqq_2.base_c , 
				sbqq_2.variable_c , 
				sbqq_2.monthly_service_fee_calculated_c , 
				sbqq_2.setup_fee_per_additional_professional_c , 
				sbqq_2.minimum_monthly_service_fee_c , 
				sbqq_2.salary_bonus_c , 
				sbqq_2.minimum_monthly_service_fee_calculated_c , 
				sbqq_2.setup_total_all_hc_c , 
				sbqq_2.addendum_monthly_service_fee_original_c , 
				sbqq_2.estimated_employer_social_charges_on_bas_c , 
				sbqq_2.gp_fee_base_per_hc_c , 
				sbqq_2.estimated_employer_social_charges_on_var_c , 
				sbqq_2.gp_fee_variable_per_hc_c , 
				sbqq_2.fee_structure_c , 
				sbqq_2.monthly_fee_total_c , 
				sbqq_2.country_product_c , 
				sbqq_2.total_social_charges_hc_c , 
				sbqq_2.footnote_c , 
				sbqq_2.markup_on_expenses_notes_c , 
				sbqq_2.monthly_fee_variable_c , 
				sbqq_2.vat_per_hc_c , 
				sbqq_2.currency_transaction_and_wiring_c , 
				sbqq_2.total_monthly_cost_c , 
				sbqq_2.monthly_cost_of_doing_all_hc_c , 
				sbqq_2.product_name_text_c , 
				sbqq_2.monthly_currency_fee_c , 
				sbqq_2.currency_symbol_c , 
				sbqq_2.unique_identifier_c , 
				sbqq_2.x_13_th_14_th_month_addendum_notes_c , 
				sbqq_2.severance_addendum_notes_c , 
				sbqq_2.setup_fee_addendum_notes_c , 
				sbqq_2.vacation_pay_c , 
				sbqq_2.estimated_provident_fund_contribution_c , 
				sbqq_2.statutory_vacation_allowance_c , 
				sbqq_2.mandatory_pension_contribution_c , 
				sbqq_2.disability_insurance_per_professional_c , 
				sbqq_2.statutory_vacation_pay_bonus_c , 
				sbqq_2.statutory_unemployment_fund_cts_c , 
				sbqq_2.social_charges_addendum_notes_c , 
				sbqq_2.mandatory_financial_reserve_accrual_c , 
				sbqq_2.statutory_vacation_bonus_c , 
				sbqq_2.statutory_transient_bonus_c , 
				sbqq_2.monthly_service_fee_total_disc_c , 
				sbqq_2.monthly_service_fee_final_c , 
				sbqq_2.min_service_fee_total_disc_c , 
				sbqq_2.min_monthly_service_fee_final_c , 
				sbqq_2.total_discount_amount_c , 
				sbqq_2.statutory_vacation_pay_c , 
				sbqq_2.mandatory_medical_insurance_c , 
				sbqq_2.proposal_footnotes_c , 
				sbqq_2.base_monthly_c , 
				sbqq_2.variable_monthly_c , 
				sbqq_2.currency_transaction_and_wiring_monthly_c , 
				sbqq_2.mandatory_free_trade_zone_office_space_c , 
				sbqq_2.discount_tiers_applied_c , 
				sbqq_2.refundable_deposit_in_months_c , 
				sbqq_2.invoices_withdrawal_type_c , 
				sbqq_2.markup_on_expenses_amount_c , 
				sbqq_2.discount_tier_text_c , 
				sbqq_2.monthly_service_fee_discount_c , 
				sbqq_2.min_monthly_service_fee_discount_c , 
				sbqq_2.total_rep_s_discount_c , 
				sbqq_2.se_allowable_discount_c , 
				sbqq_2.rsd_discount_c , 
				sbqq_2.vp_discount_c , 
				sbqq_2.c_level_discount_c , 
				sbqq_2.need_rsd_approval_c , 
				sbqq_2.need_vp_approval_c , 
				sbqq_2.need_c_level_approval_c , 
				sbqq_2.estimated_social_charges_override_c , 
				sbqq_2.addendum_template_id_c , 
				sbqq_2.country_product_name_text_c , 
				sbqq_2.visa_fee_per_prof_including_g_l_fees_c , 
				sbqq_2.visa_fee_ren_per_prof_incl_g_l_fees_c , 
				sbqq_2.visa_renwl_fee_for_spouse_dependents_c , 
				sbqq_2.visa_fee_for_spouse_dependents_c , 
				sbqq_2.employment_pass_if_applicable_c , 
				sbqq_2.employment_pass_per_dependent_c , 
				sbqq_2.renewal_every_2_years_c , 
				sbqq_2.renewal_every_2_years_per_dependent_c , 
				sbqq_2.stat_employer_healthcare_contrib_c , 
				sbqq_2.foreign_worker_epi_c , 
				sbqq_2.issuance_of_req_letters_and_or_noc_s_c , 
				sbqq_2.if_required_arabic_translation_e_m_bc_c , 
				sbqq_2.x_1_time_3_rd_party_fees_for_pension_plan_c , 
				sbqq_2.statutory_pre_employment_medical_check_c , 
				sbqq_2.estimated_social_charges_ref_c , 
				sbqq_2.proposal_accrued_statory_severance_c , 
				sbqq_2.proposal_estimated_social_charges_c , 
				sbqq_2.proposal_indirect_tax_c , 
				sbqq_2.proposal_estimated_social_charges_in_c , 
				sbqq_2.monthly_service_fee_original_c , 
				sbqq_2.addendum_monthly_service_fee_c , 
				sbqq_2.addendum_estimated_social_charges_c , 
				sbqq_2.addendum_accrued_severance_c , 
				sbqq_2.addendum_markup_on_expenses_c , 
				sbqq_2.addendum_monthly_currency_transaction_c , 
				sbqq_2.addendum_indirect_tax_c , 
				sbqq_2.addendum_vacation_allowance_c , 
				sbqq_2.addendum_vacation_pay_c , 
				sbqq_2.addendum_financial_reserve_c , 
				sbqq_2.addendum_provident_fund_c , 
				sbqq_2.discounted_to_netprice_c , 
				sbqq_2.ann_tax_filling_fee_list_price_child_c , 
				sbqq_2.ann_tax_filling_fee_net_price_child_c , 
				sbqq_2.wiring_fee_list_price_child_c , 
				sbqq_2.wiring_fee_net_price_child_c , 
				sbqq_2.tran_admin_fee_list_price_child_c , 
				sbqq_2.tran_admin_fee_net_price_child_c , 
				sbqq_2.travel_fee_list_price_child_c , 
				sbqq_2.travel_fee_net_price_child_c , 
				sbqq_2.addendum_monthly_service_fee_initial_c , 
				sbqq_2.discounted_to_monthly_service_fee_c , 
				sbqq_2.discounted_to_minimum_monthly_service_c , 
				sbqq_2.discounted_to_social_charges_c , 
				sbqq_2.discounted_to_annual_tx_c , 
				sbqq_2.discounted_to_wiring_fee_c , 
				sbqq_2.discounted_to_one_time_trans_c , 
				sbqq_2.discounted_to_travel_insurance_c , 
				sbqq_2.switzerlandtext_1_c , 
				sbqq_2.switzerlandtext_2_c , 
				sbqq_2.monthly_fee_variable_original_c , 
				sbqq_2.addendum_net_price_c , 
				sbqq_2.monthly_service_overriding_disc_c , 
				sbqq_2.additional_month_payment_proposal_c , 
				sbqq_2.set_up_fee_currency_symbol_c , 
				sbqq_2.min_month_ser_fee_currency_symbol_c , 
				sbqq_2.annual_tax_currency_symbol_c , 
				sbqq_2.wiring_fee_currency_symbol_c , 
				sbqq_2.trans_fee_currency_symbol_c , 
				sbqq_2.travel_fee_currency_symbol_c , 
				sbqq_2.addendum_min_monthly_service_fee_c , 
				sbqq_2.addendum_annual_tax_fee_c , 
				sbqq_2.addendum_trans_fee_c , 
				sbqq_2.addendum_wiring_fee_c , 
				sbqq_2.addendum_travel_fee_c , 
				sbqq_2.markup_currency_symbol_c , 
				sbqq_2.monthly_service_fee_tier_notes_c , 
				sbqq_2.minimum_monthly_service_fee_tier_notes_c , 
				sbqq_2.monthly_service_fee_tier_c , 
				sbqq_2.minimum_monthly_service_fee_tier_c , 
				sbqq_2.additional_professional_checkbox_c , 
				sbqq_2.setup_fee_additional_professional_label_c , 
				sbqq_2.setup_fee_additional_professional_value_c , 
				sbqq_2.monthly_variable_overriding_disc_c , 
				sbqq_2.addendum_monthly_fee_variable_c , 
				sbqq_2.discounted_to_monthly_serv_fee_variable_c , 
				sbqq_2.additional_professional_currency_symbol_c , 
				sbqq_2.price_info_populated_c , 
				sbqq_2.country_number_c , 
				sbqq_2.proposal_total_monthly_cost_c , 
				sbqq_2.monthly_fee_variable_discount_c , 
				sbqq_2.monthly_fee_variable_final_c , 
				sbqq_2.estimated_social_charges_from_pbe_c , 
				sbqq_2.min_monthly_service_fee_original_c , 
				sbqq_2.monthly_service_variable_actual_disc_c , 
				sbqq_2.min_monthly_service_overriding_disc_c , 
				sbqq_2.original_monthly_total_fee_c , 
				sbqq_2.addendum_monthly_service_fee_variable_og_c , 
				sbqq_2.monthly_total_fee_discount_c , 
				sbqq_2.primary_product_c , 
				sbqq_2.ann_13_14_th_month_billed_amount_all_hc_c , 
				sbqq_2.ann_tax_trav_ins_all_hc_c , 
				sbqq_2.year_1_cost_c , 
				sbqq_2.subsequent_years_total_c , 
				sbqq_2.accruing_statutory_severance_currency_c , 
				sbqq_2.monthly_sum_of_salary_c , 
				sbqq_2.uae_office_space_fee_c , 
				sbqq_2.usa_state_c , 
				sbqq_2.usa_state_attrib_c , 
				sbqq_2.estimated_social_charges_from_pbe_value_c , 
				sbqq_2.x_14_th_month_note_c , 
				sbqq_2.custom_product_name_c , 
				sbqq_2.visa_cost_new_hire_1_year_lp_c , 
				sbqq_2.visa_cost_dependent_renewal_lp_c , 
				sbqq_2.visa_cost_other_resident_renewal_lp_c , 
				sbqq_2.visa_cost_new_hire_and_renewal_c , 
				sbqq_2.visa_cost_other_eu_eea_swiss_lp_c , 
				sbqq_2.visa_cost_new_hire_lp_c , 
				sbqq_2.visa_cost_renewal_lp_c , 
				sbqq_2.visa_cost_new_hire_2_year_lp_c , 
				sbqq_2.visa_cost_dependent_lp_c , 
				sbqq_2.visa_cost_other_eu_eea_swiss_natio_lp_c , 
				sbqq_2.adjusted_discount_c , 
				sbqq_2.visa_product_name_c , 
				sbqq_2.product_pricing_model_c , 
				sbqq_2.discount_beyond_preapproved_mgmt_fee_c , 
				sbqq_2.discount_beyond_preapproved_one_time_fee_c , 
				sbqq_2.pre_approved_management_fee_percentage_c , 
				sbqq_2.discount_beyond_preapproved_minimum_fee_c , 
				sbqq_2.country_product_iso_c
FROM salesforce.sbqq_quote_line_c AS sbqq_2
WHERE sbqq_2.is_deleted='FALSE')
SELECT DISTINCT 
first_table.*,
sbqq_2.*
FROM first_table
LEFT JOIN sbqq_2
ON first_table.quote_id=sbqq_2.sbqq_quote_c"
a8537b38-8fe9-c6ad-6307-f64dfab66c22,Sheet1+ (Multiple Connections),,
a8f700dc-067c-6163-ea61-11e475be9ef6,v_gp_sfdc_marketing_dashboard (salesforce.v_gp_sfdc_marketing_dashboard) (gpbidb),,
a930483b-9fd5-9050-18de-1aef1996674f,Custom SQL Query (gpbidb),postgres,"-- Speed to Lead
SELECT 
history.lead_id, 
history.created_by_id, 
history.new_value, 
history.old_value,
history.field,
lead.partner_acquisition_c,
lead.id as id_from_lead,
lead.status,
lead.created_date AS created_date_lead,
lead.lead_source,
lead.hot_form_c,
lead.scoring_date_c,
lead.lead_s_bdr_manager_c,
history.created_date,
""user"".name AS leads_owner_name,
""user"".user_region_c,
""user"".manager_text_c

FROM salesforce.lead_history history
LEFT JOIN salesforce.lead ON history.lead_id = lead.id
--LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat user_mat ON lead.id = user_mat.lead_or_opp_id
LEFT JOIN salesforce.""user"" ON lead.owner_id = ""user"".id
WHERE lead.created_date >>= '2023-01-01' 
AND (lead.partner_acquisition_c <<>> 'Yes'OR lead.partner_acquisition_c IS NULL)
AND (""user"".name != 'Conversica Integration' OR ""user"".name is null)
AND lead.is_deleted IS FALSE"
ab1be9e2-aabd-1676-b271-c12f3527e7d4,Custom SQL Query (gpbidb) (2),postgres,"WITH vital_few as (SELECT DISTINCT
a.id as acc_id,
a.name as acc_name,
a.partner_agreement_effective_date__c,
a.vital_few__c,
b.vital_few_account_health_status__c
FROM salesforce.v_gp_sfdc_account_current as a 
LEFT JOIN salesforce.v_gp_sfdc_account_current_pacific_time as b 
ON a.id=b.id),
SFDC AS (WITH SQLs as (SELECT DISTINCT  
				date_trunc('quarter',point_time_date)::date as quarter, 
				account_id,
				COUNT(DISTINCT lead_or_opp_id)  AS sqls
	FROM salesforce.v_gp_sfdc_marketing_mat_view
	WHERE (opp_type <<>> 'Existing Business' OR opp_type IS NULL)
	AND cohort_stage='MQL to SQL'
	AND (partner_acq_opps IS NULL OR partner_acq_opps <<>> 'Yes')
	AND (record_type_opps IS NULL OR record_type_opps <<>> 'Potential Partner Opportunity')
	AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
	AND point_time_date BETWEEN '2023-01-01' AND '2023-07-01'
	GROUP BY 1,2)
select account_id,
sum	(CASE WHEN quarter='2023-01-01' THEN sqls ELSE 0 END) as Q12023,
sum	(CASE WHEN quarter='2023-04-01' THEN sqls ELSE 0 END) as Q22023,
sum	(CASE WHEN quarter='2023-07-01' THEN sqls ELSE 0 END) as Q32023	
FROM SQLs
GROUP BY 1)

SELECT vital_few.*, SFDC.Q12023, SFDC.Q22023, SFDC.Q32023
FROM vital_few
LEFT JOIN SFDC
ON vital_few.acc_id=SFDC.account_id"
ab1be9e2-aabd-1676-b271-c12f3527e7d4,Custom SQL Query (gpbidb),postgres,"WITH v_gp_sfdc_leads_and_opportunities AS (
         SELECT DISTINCT account.id AS account_id,
            account.name AS account_name,
                CASE
                    WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    ELSE date_trunc('month'::text, opps.created_date)
                END AS mql_cohort_month,
            leads.id AS lead_id,
            opps.b_d_r__date__c,
            opps.id AS opp_id,
            leads.is_converted,
            leads.converted_opportunity_id,
            leads.country AS lead_country,
            leads.campaign__source__c AS campaign_name,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    ELSE NULL::text
                END AS lead_disqualified_reason,
            leads.status AS lead_status,
            opps.opportunity__status__c AS opp_status,
            opps.closed__lost__c,
            leads.country_code AS lead_country_code,
            leads.lead_tier_c,
            opps.lead_source_tier_c,
            leads.bdr_unqualified_reason__c AS bdr_unqualified_reason,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    ELSE NULL::text
                END AS country_code,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    ELSE NULL::text
                END AS client_country,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    ELSE NULL::text
                END AS client_region,
            leads.created_date AS mql_date,
            leads.converted_date,
            leads.partner_acquisition__c AS partner_acq_leads,
            -- usr_lead_opp.leads_owner_name,
            -- usr_lead_opp.leads_owner_manager,
            opps.created_date,
            opps.sales__accepted__date__c AS sal_accepted_date,
            opps.s_a_l__c,
            opps.s_a_l_by__sales__c,
            opps.record_type_bi__c,
            opps.close_date AS msa_date,
            opps.stage_name,
            opps.partner_acquisition__c AS partner_acq_opps,
            opps.is_won AS opp_won,
            opps.record_type_text_id_c AS record_type_opps,
            -- usr_lead_opp.opps_owner_name,
            -- usr_lead_opp.opps_owner_manager,
            opps.name AS opp_name,
            opps.type AS opp_type,
            acc_partn.partner_level__c AS partner_level,
            opps.pricing_model__c AS pricing_model_opps,
                CASE
                    WHEN leads.lead_source IS NULL THEN opps.lead_source
                    ELSE leads.lead_source
                END::text AS lead_or_opp_source,
            -- usr_lead_opp.partner_development_owner,
            -- usr_lead_opp.bdr_owner_name,
            -- usr_lead_opp.bdr_manager_name,
            acc_partn.name AS partner,
            acc_partn.client_region_billing_country AS partner_region,
            account.type AS account_type,
            account.pricing_model__c AS acc_pricing_model,
                CASE
                    WHEN (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) 
	 				AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) 
	 				-- AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text) 
	 				THEN 'Non Partner Opp or Existing Business'::text
                    ELSE 'Partner Opp or Existing Business'::text
                END AS opp_go_flag,
            opps.immediate_headcount_c,
            opps.headcount_c,
            opps.de_country_c,
            opps.closed_lost_category_detail_c,
            opps.incumbent_solution_c,
            opps.competitorsthatare_involved_c,
            opps.contact_id,
            opps.primary_quotes_pricing_model_c,
            opps.competitors__involved__c,
            opps.other__competitor__c,
            opps.update_time AS fivetran_synced_opps,
            opps.total_professionals_c,
            leads.update_time AS fivetran_synced_leads,
            leads.company,
            leads.name,
            leads.email,
            acc_partn.billing_country AS partner_country,
            opps.existing_business_deal_classification_c,
            opps.existing_business_opp_type_c,
            opps.existing_business_opp_type_detail_c,
            users.name AS opp_owner_name,
            acc_partn.partner_agreement_effective_date__c AS partner_agreement_effective_date_c,
                CASE
                    WHEN leads.converted_opportunity_id IS NULL THEN 1::bigint
                    ELSE rank() OVER (PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date)
                END AS row_num,
            acc_partn.partner_vertical__c,
            acc_partn.vital_few__c as vital_few_partner,
			account.vital_few__c as vital_few_account,
            opps.opportunity_score_segment_c AS opps_score_segment,
            leads.opportunity_score_segment_c AS lead_score_segment,
			leads.sales_motion_formula__c AS sales_motion_lead,
            opps.sales_motion_formula__c AS sales_motion_opp,
			opps.engagement__type__c
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
             LEFT JOIN salesforce.v_gp_sfdc_user_current users ON users.id::text = opps.owner_id::text
             --LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_or_opp_id::text =
    				-- CASE
                    -- WHEN leads.id IS NULL THEN opps.id
                    -- ELSE leads.id
                -- END::text
        ), mql AS (
         SELECT DISTINCT 'MQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.lead_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.mql_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            -- v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            -- v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.sales_motion_lead AS sales_motion,
			v_gp_sfdc_leads_and_opportunities.engagement__type__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE (v_gp_sfdc_leads_and_opportunities.partner_acq_leads::text <<>> 'Yes'::text OR v_gp_sfdc_leads_and_opportunities.partner_acq_leads IS NULL) AND v_gp_sfdc_leads_and_opportunities.lead_id IS NOT NULL
        ), mql_to_sql AS (
         SELECT DISTINCT 'MQL to SQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.created_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion,
			v_gp_sfdc_leads_and_opportunities.engagement__type__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_id IS NOT NULL
        ), sql_to_sal AS (
         SELECT DISTINCT 'SQL to SAL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion,
			v_gp_sfdc_leads_and_opportunities.engagement__type__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c::text = 'Yes'::text
        ), sal_to_msa AS (
         SELECT DISTINCT 'SAL to MSA'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion,
			v_gp_sfdc_leads_and_opportunities.engagement__type__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = true
        ), closed_lost AS (
         SELECT DISTINCT 'Closed Lost'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.sales_motion_opp AS sales_motion,
			v_gp_sfdc_leads_and_opportunities.engagement__type__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = false AND v_gp_sfdc_leads_and_opportunities.stage_name::text = 'Closed Lost'::text
        ), full_union AS (
         SELECT mql.cohort_stage,
            mql.account_id,
            mql.account_name,
            mql.b_d_r__date__c,
            mql.lead_or_opp_id,
            mql.point_time_date,
            mql.mql_cohort_month,
            mql.lead_id,
            mql.opp_id,
            mql.is_converted,
            mql.converted_opportunity_id,
            mql.lead_country,
            mql.campaign_name,
            mql.lead_disqualified_reason,
            mql.lead_status,
            mql.opp_status,
            mql.closed__lost__c,
            mql.lead_country_code,
            mql.country_code,
            mql.tier,
            mql.bdr_unqualified_reason,
            mql.client_region,
            mql.client_country,
            mql.mql_date,
            mql.converted_date,
            mql.partner_acq_leads,
            --mql.leads_owner_name,
            --mql.leads_owner_manager,
            mql.created_date,
            mql.sal_accepted_date,
            mql.s_a_l__c,
            mql.s_a_l_by__sales__c,
            mql.record_type_bi__c,
            mql.msa_date,
            mql.stage_name,
            mql.partner_acq_opps,
            mql.opp_won,
            mql.record_type_opps,
            mql.pricing_model_opps,
            --mql.opps_owner_name,
            --mql.opps_owner_manager,
            mql.opp_name,
            mql.opp_type,
            mql.partner_level,
            mql.lead_or_opp_source,
            --mql.partner_development_owner,
            --mql.bdr_owner_name,
            --mql.bdr_manager_name,
            mql.partner,
            mql.partner_region,
            mql.account_type,
            mql.acc_pricing_model,
            mql.opp_go_flag,
            mql.immediate_headcount_c,
            mql.headcount_c,
            mql.de_country_c,
            mql.closed_lost_category_detail_c,
            mql.incumbent_solution_c,
            mql.competitorsthatare_involved_c,
            mql.contact_id,
            mql.primary_quotes_pricing_model_c,
            mql.competitors__involved__c,
            mql.other__competitor__c,
            mql.fivetran_synced_opps,
            mql.fivetran_synced_leads,
            mql.partner_country,
            mql.existing_business_deal_classification_c,
            mql.existing_business_opp_type_c,
            mql.existing_business_opp_type_detail_c,
            mql.opp_owner_name,
            mql.row_num,
            mql.partner_vertical__c,
            mql.vital_few_partner,
			mql.vital_few_account,
            mql.partner_agreement_effective_date_c,
            mql.opps_score_segment,
            mql.lead_score_segment,
			mql.sales_motion,
			mql.engagement__type__c
           FROM mql
        UNION ALL
         SELECT mql_to_sql.cohort_stage,
            mql_to_sql.account_id,
            mql_to_sql.account_name,
            mql_to_sql.b_d_r__date__c,
            mql_to_sql.lead_or_opp_id,
            mql_to_sql.point_time_date,
            mql_to_sql.mql_cohort_month,
            mql_to_sql.lead_id,
            mql_to_sql.opp_id,
            mql_to_sql.is_converted,
            mql_to_sql.converted_opportunity_id,
            mql_to_sql.lead_country,
            mql_to_sql.campaign_name,
            mql_to_sql.lead_disqualified_reason,
            mql_to_sql.lead_status,
            mql_to_sql.opp_status,
            mql_to_sql.closed__lost__c,
            mql_to_sql.lead_country_code,
            mql_to_sql.country_code,
            mql_to_sql.tier,
            mql_to_sql.bdr_unqualified_reason,
            mql_to_sql.client_region,
            mql_to_sql.client_country,
            mql_to_sql.mql_date,
            mql_to_sql.converted_date,
            mql_to_sql.partner_acq_leads,
            --mql_to_sql.leads_owner_name,
           -- mql_to_sql.leads_owner_manager,
            mql_to_sql.created_date,
            mql_to_sql.sal_accepted_date,
            mql_to_sql.s_a_l__c,
            mql_to_sql.s_a_l_by__sales__c,
            mql_to_sql.record_type_bi__c,
            mql_to_sql.msa_date,
            mql_to_sql.stage_name,
            mql_to_sql.partner_acq_opps,
            mql_to_sql.opp_won,
            mql_to_sql.record_type_opps,
            mql_to_sql.pricing_model_opps,
            --mql_to_sql.opps_owner_name,
            --mql_to_sql.opps_owner_manager,
            mql_to_sql.opp_name,
            mql_to_sql.opp_type,
            mql_to_sql.partner_level,
            mql_to_sql.lead_or_opp_source,
            --mql_to_sql.partner_development_owner,
            --mql_to_sql.bdr_owner_name,
            --mql_to_sql.bdr_manager_name,
            mql_to_sql.partner,
            mql_to_sql.partner_region,
            mql_to_sql.account_type,
            mql_to_sql.acc_pricing_model,
            mql_to_sql.opp_go_flag,
            mql_to_sql.immediate_headcount_c,
            mql_to_sql.headcount_c,
            mql_to_sql.de_country_c,
            mql_to_sql.closed_lost_category_detail_c,
            mql_to_sql.incumbent_solution_c,
            mql_to_sql.competitorsthatare_involved_c,
            mql_to_sql.contact_id,
            mql_to_sql.primary_quotes_pricing_model_c,
            mql_to_sql.competitors__involved__c,
            mql_to_sql.other__competitor__c,
            mql_to_sql.fivetran_synced_opps,
            mql_to_sql.fivetran_synced_leads,
            mql_to_sql.partner_country,
            mql_to_sql.existing_business_deal_classification_c,
            mql_to_sql.existing_business_opp_type_c,
            mql_to_sql.existing_business_opp_type_detail_c,
            mql_to_sql.opp_owner_name,
            mql_to_sql.row_num,
            mql_to_sql.partner_vertical__c,
            mql_to_sql.vital_few_partner,
			mql_to_sql.vital_few_account,
            mql_to_sql.partner_agreement_effective_date_c,
            mql_to_sql.opps_score_segment,
            mql_to_sql.lead_score_segment,
			mql_to_sql.sales_motion,
			mql_to_sql.engagement__type__c
           FROM mql_to_sql
        UNION ALL
         SELECT sql_to_sal.cohort_stage,
            sql_to_sal.account_id,
            sql_to_sal.account_name,
            sql_to_sal.b_d_r__date__c,
            sql_to_sal.lead_or_opp_id,
            sql_to_sal.point_time_date,
            sql_to_sal.mql_cohort_month,
            sql_to_sal.lead_id,
            sql_to_sal.opp_id,
            sql_to_sal.is_converted,
            sql_to_sal.converted_opportunity_id,
            sql_to_sal.lead_country,
            sql_to_sal.campaign_name,
            sql_to_sal.lead_disqualified_reason,
            sql_to_sal.lead_status,
            sql_to_sal.opp_status,
            sql_to_sal.closed__lost__c,
            sql_to_sal.lead_country_code,
            sql_to_sal.country_code,
            sql_to_sal.tier,
            sql_to_sal.bdr_unqualified_reason,
            sql_to_sal.client_region,
            sql_to_sal.client_country,
            sql_to_sal.mql_date,
            sql_to_sal.converted_date,
            sql_to_sal.partner_acq_leads,
            --sql_to_sal.leads_owner_name,
            --sql_to_sal.leads_owner_manager,
            sql_to_sal.created_date,
            sql_to_sal.sal_accepted_date,
            sql_to_sal.s_a_l__c,
            sql_to_sal.s_a_l_by__sales__c,
            sql_to_sal.record_type_bi__c,
            sql_to_sal.msa_date,
            sql_to_sal.stage_name,
            sql_to_sal.partner_acq_opps,
            sql_to_sal.opp_won,
            sql_to_sal.record_type_opps,
            sql_to_sal.pricing_model_opps,
            --sql_to_sal.opps_owner_name,
            --sql_to_sal.opps_owner_manager,
            sql_to_sal.opp_name,
            sql_to_sal.opp_type,
            sql_to_sal.partner_level,
            sql_to_sal.lead_or_opp_source,
            --sql_to_sal.partner_development_owner,
            --sql_to_sal.bdr_owner_name,
            --sql_to_sal.bdr_manager_name,
            sql_to_sal.partner,
            sql_to_sal.partner_region,
            sql_to_sal.account_type,
            sql_to_sal.acc_pricing_model,
            sql_to_sal.opp_go_flag,
            sql_to_sal.immediate_headcount_c,
            sql_to_sal.headcount_c,
            sql_to_sal.de_country_c,
            sql_to_sal.closed_lost_category_detail_c,
            sql_to_sal.incumbent_solution_c,
            sql_to_sal.competitorsthatare_involved_c,
            sql_to_sal.contact_id,
            sql_to_sal.primary_quotes_pricing_model_c,
            sql_to_sal.competitors__involved__c,
            sql_to_sal.other__competitor__c,
            sql_to_sal.fivetran_synced_opps,
            sql_to_sal.fivetran_synced_leads,
            sql_to_sal.partner_country,
            sql_to_sal.existing_business_deal_classification_c,
            sql_to_sal.existing_business_opp_type_c,
            sql_to_sal.existing_business_opp_type_detail_c,
            sql_to_sal.opp_owner_name,
            sql_to_sal.row_num,
            sql_to_sal.partner_vertical__c,
            sql_to_sal.vital_few_partner,
			sql_to_sal.vital_few_account,
            sql_to_sal.partner_agreement_effective_date_c,
            sql_to_sal.opps_score_segment,
            sql_to_sal.lead_score_segment,
			sql_to_sal.sales_motion,
			sql_to_sal.engagement__type__c
           FROM sql_to_sal
        UNION ALL
         SELECT sal_to_msa.cohort_stage,
            sal_to_msa.account_id,
            sal_to_msa.account_name,
            sal_to_msa.b_d_r__date__c,
            sal_to_msa.lead_or_opp_id,
            sal_to_msa.point_time_date,
            sal_to_msa.mql_cohort_month,
            sal_to_msa.lead_id,
            sal_to_msa.opp_id,
            sal_to_msa.is_converted,
            sal_to_msa.converted_opportunity_id,
            sal_to_msa.lead_country,
            sal_to_msa.campaign_name,
            sal_to_msa.lead_disqualified_reason,
            sal_to_msa.lead_status,
            sal_to_msa.opp_status,
            sal_to_msa.closed__lost__c,
            sal_to_msa.lead_country_code,
            sal_to_msa.country_code,
            sal_to_msa.tier,
            sal_to_msa.bdr_unqualified_reason,
            sal_to_msa.client_region,
            sal_to_msa.client_country,
            sal_to_msa.mql_date,
            sal_to_msa.converted_date,
            sal_to_msa.partner_acq_leads,
            --sal_to_msa.leads_owner_name,
            --sal_to_msa.leads_owner_manager,
            sal_to_msa.created_date,
            sal_to_msa.sal_accepted_date,
            sal_to_msa.s_a_l__c,
            sal_to_msa.s_a_l_by__sales__c,
            sal_to_msa.record_type_bi__c,
            sal_to_msa.msa_date,
            sal_to_msa.stage_name,
            sal_to_msa.partner_acq_opps,
            sal_to_msa.opp_won,
            sal_to_msa.record_type_opps,
            sal_to_msa.pricing_model_opps,
            --sal_to_msa.opps_owner_name,
            --sal_to_msa.opps_owner_manager,
            sal_to_msa.opp_name,
            sal_to_msa.opp_type,
            sal_to_msa.partner_level,
            sal_to_msa.lead_or_opp_source,
            --sal_to_msa.partner_development_owner,
            --sal_to_msa.bdr_owner_name,
            --sal_to_msa.bdr_manager_name,
            sal_to_msa.partner,
            sal_to_msa.partner_region,
            sal_to_msa.account_type,
            sal_to_msa.acc_pricing_model,
            sal_to_msa.opp_go_flag,
            sal_to_msa.immediate_headcount_c,
            sal_to_msa.headcount_c,
            sal_to_msa.de_country_c,
            sal_to_msa.closed_lost_category_detail_c,
            sal_to_msa.incumbent_solution_c,
            sal_to_msa.competitorsthatare_involved_c,
            sal_to_msa.contact_id,
            sal_to_msa.primary_quotes_pricing_model_c,
            sal_to_msa.competitors__involved__c,
            sal_to_msa.other__competitor__c,
            sal_to_msa.fivetran_synced_opps,
            sal_to_msa.fivetran_synced_leads,
            sal_to_msa.partner_country,
            sal_to_msa.existing_business_deal_classification_c,
            sal_to_msa.existing_business_opp_type_c,
            sal_to_msa.existing_business_opp_type_detail_c,
            sal_to_msa.opp_owner_name,
            sal_to_msa.row_num,
            sal_to_msa.partner_vertical__c,
            sal_to_msa.vital_few_partner,
			sal_to_msa.vital_few_account,
            sal_to_msa.partner_agreement_effective_date_c,
            sal_to_msa.opps_score_segment,
            sal_to_msa.lead_score_segment,
			sal_to_msa.sales_motion,
			sal_to_msa.engagement__type__c
           FROM sal_to_msa
        UNION ALL
         SELECT closed_lost.cohort_stage,
            closed_lost.account_id,
            closed_lost.account_name,
            closed_lost.b_d_r__date__c,
            closed_lost.lead_or_opp_id,
            closed_lost.point_time_date,
            closed_lost.mql_cohort_month,
            closed_lost.lead_id,
            closed_lost.opp_id,
            closed_lost.is_converted,
            closed_lost.converted_opportunity_id,
            closed_lost.lead_country,
            closed_lost.campaign_name,
            closed_lost.lead_disqualified_reason,
            closed_lost.lead_status,
            closed_lost.opp_status,
            closed_lost.closed__lost__c,
            closed_lost.lead_country_code,
            closed_lost.country_code,
            closed_lost.tier,
            closed_lost.bdr_unqualified_reason,
            closed_lost.client_region,
            closed_lost.client_country,
            closed_lost.mql_date,
            closed_lost.converted_date,
            closed_lost.partner_acq_leads,
            --closed_lost.leads_owner_name,
            --closed_lost.leads_owner_manager,
            closed_lost.created_date,
            closed_lost.sal_accepted_date,
            closed_lost.s_a_l__c,
            closed_lost.s_a_l_by__sales__c,
            closed_lost.record_type_bi__c,
            closed_lost.msa_date,
            closed_lost.stage_name,
            closed_lost.partner_acq_opps,
            closed_lost.opp_won,
            closed_lost.record_type_opps,
            closed_lost.pricing_model_opps,
            --closed_lost.opps_owner_name,
            --closed_lost.opps_owner_manager,
            closed_lost.opp_name,
            closed_lost.opp_type,
            closed_lost.partner_level,
            closed_lost.lead_or_opp_source,
            --closed_lost.partner_development_owner,
            --closed_lost.bdr_owner_name,
            --closed_lost.bdr_manager_name,
            closed_lost.partner,
            closed_lost.partner_region,
            closed_lost.account_type,
            closed_lost.acc_pricing_model,
            closed_lost.opp_go_flag,
            closed_lost.immediate_headcount_c,
            closed_lost.headcount_c,
            closed_lost.de_country_c,
            closed_lost.closed_lost_category_detail_c,
            closed_lost.incumbent_solution_c,
            closed_lost.competitorsthatare_involved_c,
            closed_lost.contact_id,
            closed_lost.primary_quotes_pricing_model_c,
            closed_lost.competitors__involved__c,
            closed_lost.other__competitor__c,
            closed_lost.fivetran_synced_opps,
            closed_lost.fivetran_synced_leads,
            closed_lost.partner_country,
            closed_lost.existing_business_deal_classification_c,
            closed_lost.existing_business_opp_type_c,
            closed_lost.existing_business_opp_type_detail_c,
            closed_lost.opp_owner_name,
            closed_lost.row_num,
            closed_lost.partner_vertical__c,
            closed_lost.vital_few_partner,
			closed_lost.vital_few_account,
            closed_lost.partner_agreement_effective_date_c,
            closed_lost.opps_score_segment,
            closed_lost.lead_score_segment,
			closed_lost.sales_motion,
			closed_lost.engagement__type__c
           FROM closed_lost
        )
 SELECT DISTINCT full_union.cohort_stage,
    full_union.account_id,
    full_union.account_name,
    full_union.b_d_r__date__c,
    full_union.lead_or_opp_id,
    full_union.point_time_date,
    full_union.mql_cohort_month,
    full_union.lead_id,
    full_union.opp_id,
    full_union.is_converted,
    full_union.converted_opportunity_id,
    full_union.lead_country,
    full_union.campaign_name,
    full_union.lead_disqualified_reason,
    full_union.lead_status,
    full_union.opp_status,
    full_union.closed__lost__c,
    full_union.lead_country_code,
    full_union.country_code,
    full_union.tier,
    full_union.bdr_unqualified_reason,
    full_union.client_region,
    full_union.client_country,
    full_union.mql_date,
    full_union.converted_date,
    full_union.partner_acq_leads,
    --full_union.leads_owner_name,
    --full_union.leads_owner_manager,
    full_union.created_date,
    full_union.sal_accepted_date,
    full_union.s_a_l__c,
    full_union.s_a_l_by__sales__c,
    full_union.record_type_bi__c,
    full_union.msa_date,
    full_union.stage_name,
    full_union.partner_acq_opps,
    full_union.opp_won,
    full_union.record_type_opps,
    full_union.pricing_model_opps,
    --full_union.opps_owner_name,
    --full_union.opps_owner_manager,
    full_union.opp_name,
    full_union.opp_type,
    full_union.partner_level,
    full_union.lead_or_opp_source,
    --full_union.partner_development_owner,
    --full_union.bdr_owner_name,
    --full_union.bdr_manager_name,
    full_union.partner,
    full_union.partner_region,
    full_union.account_type,
    full_union.acc_pricing_model,
    full_union.opp_go_flag,
    full_union.immediate_headcount_c,
    full_union.headcount_c,
    full_union.de_country_c,
    full_union.closed_lost_category_detail_c,
    full_union.incumbent_solution_c,
    full_union.competitorsthatare_involved_c,
    full_union.contact_id,
    full_union.primary_quotes_pricing_model_c,
    full_union.competitors__involved__c,
    full_union.other__competitor__c,
    full_union.fivetran_synced_opps,
    full_union.fivetran_synced_leads,
    full_union.partner_country,
    full_union.existing_business_deal_classification_c,
    full_union.existing_business_opp_type_c,
    full_union.existing_business_opp_type_detail_c,
    full_union.opp_owner_name,
    full_union.row_num,
    full_union.partner_vertical__c,
    full_union.vital_few_partner,
	full_union.vital_few_account,
    full_union.partner_agreement_effective_date_c,
    full_union.opps_score_segment,
    full_union.lead_score_segment,
	full_union.sales_motion,
	full_union.engagement__type__c
   FROM full_union
  WHERE full_union.row_num = 1"
ab8b41a0-b39b-96fc-b447-538e64f57477,list,,
9da75957-4cf6-3476-c3c4-f3134d9ecf2c,v_headcount_dashboard (repo.v_headcount_dashboard)+ (gpbidb),,
9da75957-4cf6-3476-c3c4-f3134d9ecf2c,v_headcount_dashboard (repo.v_headcount_dashboard)+ (gpbidb),postgres,"with A as 
                             (select t1.id as Pro_ID, bc.name as First_Bill_Date,cb.accounting_id as First_Bill_Client_Invoice, row_number() over(partition by t1.id ORDER BY BC.NAME DESC) as IND
                             from repo.v_gp_gg_professional_current t1
                             left join repo.v_gp_gg_client_current t2 on t1.client_id=t2.id
                             left join REPO.V_GP_GG_client_bill_CURRENT cb on cb.professional_id= t1.id
                             left join REPO.V_GP_GG_client_bill_transaction_CURRENT cbt  on cbt.client_bill_id=cb.id
                             left join repo.v_gp_gg_billing_cycle_current bc on cb.billing_cycle_id = bc.id
                             where cb.bill_type='3' /*and t1.id='599'*/
							 and t1.is_failed_to_launch = 'False'
                             group by 1,2,3
                             order by pro_id)
select PRO_ID, FIRST_BILL_DATE, FIRST_BILL_CLIENT_INVOICE 
FROM A WHERE IND='1'"
9d0ebc21-4821-85cb-21c2-b8400c27cbba,v_gp_gg_master_client (goglobal_gp_goglobal.v_gp_gg_master_client)+ (gpbidb),,
9c123dea-0645-fcfb-732b-17575245160c,Custom SQL Query (gpbidb),postgres,"WITH SF AS
(SELECT sf.*, sf_quote_det.sbqq_product_name_c AS quote_country, sf_quote_det.country_product_iso_c
 
FROM salesforce.v_gp_sfdc_marketing_dashboard AS sf
LEFT JOIN salesforce.sbqq_quote_c AS sf_quote
ON sf.lead_or_opp_id = sf_quote.sbqq_opportunity_2_c 
LEFT JOIN salesforce.sbqq_quote_line_c AS sf_quote_det
ON sf_quote.id= sf_quote_det.sbqq_quote_c
WHERE  sf.existing_business_opp_type_detail_c = 'Pricing renegotiation'
AND sf.existing_business_deal_classification_c = 'Amended Addendum'
AND (sf.pricing_model_opps IS NULL OR sf.pricing_model_opps <<>> 'Contractor only')
AND sf.opp_type = 'Existing Business'
AND sf.cohort_stage = 'SAL to MSA'
AND(sf_quote.sbqq_primary_c= true OR sf_quote.sbqq_primary_c IS NULL)
AND (sf_quote_det.country_product_c = true OR sf_quote_det.country_product_c IS NULL)
),

GPP AS (
WITH A AS(
SELECT DISTINCT date_trunc('month'::text, cal.cal_date::timestamp with time zone)::date AS cal_date,
master_client.id AS client_id, master_client.name AS client_name,country.name AS country_name, country.country_code AS client_country_code,client.salesforce_account_id

FROM gp_calendar AS cal,
goglobal_gp_goglobal.v_gp_gg_master_client AS master_client
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current AS client_country ON master_client.id = client_country.client_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS country ON client_country.country_id = country.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS client ON master_client.id = client.id

WHERE DATE_TRUNC('month',cal.cal_date) >>= '2021-01-01'
AND DATE_TRUNC('month',cal.cal_date) <<= DATE_TRUNC('month', CURRENT_DATE)
AND master_client.is_demo_client = FALSE),

B AS(
SELECT A.*,CASE WHEN hc.PoP IS NULL THEN 0 ELSE hc.PoP END AS PoP


FROM A
LEFT JOIN (SELECT cal_date,client_id, country_name,country_code, COUNT(DISTINCT professional_id) AS PoP
		   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
		   WHERE (service_class IS NULL OR service_class <<>> '4')
		   AND active_flag = 'Active'
		   AND DATE_TRUNC('month',cal_date) <<= DATE_TRUNC('month', CURRENT_DATE)
		   AND DATE_TRUNC('month',cal_date) >>= '2021-01-01'
		   GROUP BY cal_date,client_id, country_name, country_code
		  ) AS hc
		  ON A.client_id = hc.client_id
		  AND A.cal_date = hc.cal_date
		  AND A.client_country_code = hc.country_code
		  
		  ORDER BY A.client_id, A.country_name, A.cal_date)
		  
SELECT B.*, LAG(pop,1) OVER (PARTITION BY client_id, country_name
		ORDER BY client_id
	) previous_month_pop
FROM B

	
	
	
)

SELECT GPP.*, SF.*
FROM SF
LEFT JOIN GPP ON SF.account_id = GPP.salesforce_account_id  AND SF.country_product_iso_c = GPP.client_country_code"
9b5c8569-e9b2-1258-c09d-1729ed17ddd3,Custom SQL Query (gpbidb),postgres,"SELECT T1.name,t1.status,
	t4.name as Country, 
	t2.gp_billing_manager_id, 
	IS_GP_ENTITY,
	concat(t3.first_name,' ',t3.last_name) as billing_manager
FROM goglobal_gp_goglobal.v_gp_gg_lsp_current t1
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t2
	on t1.id=t2.lsp_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t3 
	on t2.gp_billing_manager_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t4
	on t2.country_id=t4.id
ORDER BY t1.NAME"
8a89bd46-dd74-0aa3-360f-0bda004db71b,Marketo,,
8c2727ac-b767-c937-2cc8-3f04b37aef30,v_gp_gg_master_professional (goglobal_gp_goglobal.v_gp_gg_master_professional)+ (gpbidb),,
8dce85c8-4ac1-3be0-3084-52c203bc13d1,Custom SQL Query (gpbidb) (2),,
8dce85c8-4ac1-3be0-3084-52c203bc13d1,Custom SQL Query (gpbidb) (2),postgres,"WITH SALESFORCE AS
(SELECT sf.*, acc.id AS account_id, opp.immediate_headcount_c,
	opp.headcount_c
 FROM salesforce.v_gp_sfdc_master_marketing AS sf
 LEFT JOIN salesforce.v_gp_sfdc_opportunity_current AS opp ON sf.opp_id = opp.id	
 LEFT JOIN salesforce.v_gp_sfdc_account_current AS acc ON opp.account_id = acc.id
 WHERE sf.point_time_date >>= '2020-01-01'
 AND sf.point_time_date <<= CURRENT_DATE
 AND  cohort_stage = 'SAL to MSA'
	  
),
GPP AS (
SELECT DISTINCT 
	      CASE WHEN a.salesforce_account_id IS NOT NULL THEN a.salesforce_account_id
          ELSE mdm_GG.source_id
        END as gpp_id_match,
	      a.id,
	      a.name,
          a.pricing_model,
a.billing_country,
a.billing_region,
	     CASE WHEN a.msa_contract_start_date_peo IS NOT NULL THEN a.msa_contract_start_date_peo
	    WHEN a.msa_contract_start_date_peo IS NULL AND a.msa_contract_start_date_services IS NOT NULL THEN a.msa_contract_start_date_services
	    WHEN a.msa_contract_start_date_services IS NULL AND a.msa_contract_start_date_sourcing IS NOT NULL THEN a.msa_contract_start_date_sourcing
	    WHEN a.msa_contract_start_date_sourcing IS NULL AND a.msa_contract_start_date_aso IS NOT NULL THEN a.msa_contract_start_date_aso
	  ELSE a.msa_contract_start_date_peo END AS ma_start_date,
	      b.pop_current, 
	      c.pop_to_date,
	      d.min_pay_start,
	      d.max_pay_start,
	      d.min_pay_end,
	      d.max_pay_end
	       
	FROM (SELECT a.id, a.salesforce_account_id,a.pricing_model,a.name,a.msa_contract_start_date_services,a.msa_contract_start_date_peo, a.msa_contract_start_date_aso,a.msa_contract_start_date_sourcing, b.billing_region, b.billing_country
		 FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
                 LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_client as b
                 ON a.id = b.id
		 WHERE a.is_demo_client = false) AS a
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_current
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC ('month', cal_date)= DATE_TRUNC ('month', CURRENT_DATE)
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS b
	ON a.id = b.client_id
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_to_date
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND payroll_start_date <<= CURRENT_DATE
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS c
	ON a.id = c.client_id
	
	LEFT JOIN (SELECT client_id, MAX(payroll_start_date)AS max_pay_start, MAX (payroll_end_date)AS max_pay_end,
				  MIN(payroll_end_date)AS min_pay_end, MIN(payroll_start_date) AS min_pay_start
				 FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			   WHERE (product_type_id <<>> '4' OR product_type_id IS NULL)
				 GROUP BY 1) d
	ON a.id = d.client_id
	
	
	LEFT JOIN repo.v_gp_mdm_customer AS e
  ON a.id::VARCHAR = e.source_id
	
  LEFT JOIN (SELECT *
  FROM repo.v_gp_mdm_customer
  WHERE source = 'SFDC Customer'
  ) AS mdm_GG
  ON e.parent_name = mdm_GG.parent_name
	ORDER BY 2
),
FINAL AS(SELECT 
		 SALESFORCE.*,
     GPP.*,
	
	  
	  	CASE 
		   
			 WHEN GPP.id IS NOT NULL AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) <<= 90
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.min_pay_start IS NULL
			 THEN 'Newly Signed'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND date_trunc('month', GPP.min_pay_start) >>= date_trunc('month',CURRENT_DATE) THEN 'Onboarding' 
			  
		   WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current >>0  THEN 'Currently Active'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.max_pay_end << CURRENT_DATE OR (date_trunc('month', GPP.max_pay_start) >>= date_trunc('month',CURRENT_DATE) AND GPP.max_pay_end >> CURRENT_DATE)
			 THEN 'Currently Inactive'
			 
			 
			 WHEN (GPP.id IS NOT NULL 
			 AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) >>90
			 AND GPP.pop_to_date IS NULL)
		   OR (GPP.id IS NOT NULL AND GPP.ma_start_date IS NULL AND SALESFORCE.msa_date IS NULL )
       THEN 'Never Active' 
		 
		   WHEN (GPP. id IS NULL
				 AND SALESFORCE.cohort_stage = 'SAL to MSA'
         AND SALESFORCE.opp_type = 'New Business'
         AND SALESFORCE.stage_name = 'Closed Won')
				 THEN 'Unknown'
			
			 END AS gpp_account_status
			
FROM SALESFORCE
LEFT JOIN GPP
ON SALESFORCE.account_id = GPP.gpp_id_match
AND SALESFORCE.cohort_stage = 'SAL to MSA'
AND SALESFORCE.opp_type = 'New Business'
AND SALESFORCE.stage_name = 'Closed Won'
		 )
SELECT *
FROM FINAL"
8dce85c8-4ac1-3be0-3084-52c203bc13d1,Custom SQL Query (gpbidb) (2),postgres,"SELECT 
client_id,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('1') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS NEW_STATUS,
COUNT(DISTINCT pro.id) FILTER (WHERE pro.status IN ('2') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS Onb_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('3') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS ACTIVE_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('4') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS TERM_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.status IN ('5') AND pro.is_failed_to_launch= FALSE AND (service_class IS NULL OR service_class <<>>'4')) AS INACT_STATUS,
COUNT(DISTINCT pro.id) filter (WHERE pro.is_failed_to_launch= TRUE AND (service_class IS NULL OR service_class <<>>'4')) AS ftl

FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS pro
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS client ON pro.client_id = client.id
WHERE client.is_demo_client = FALSE
GROUP BY pro.client_id"
8f567c7a-0f45-7a4d-3ee0-bec9781224c0,Custom SQL Query (gpbidb),postgres,"WITH funnel as (select distinct 
opps.id as opp_id,
opps.account_id,
opps.name as opp_name,
opps.stage_name,
opps.close_date,
opps.type,
opps.lead_source as lead_source_opp,
opps.is_closed,
opps.is_won,
opps.partner_acquisition__c,
opps.owner_id as owner_id_opp,
opps.created_date as created_date_opp,
opps.last_modified_date as last_mod_opp,
opps.partner__c,
opps.business__development__owner__c as business_dev_owner_opp,
opps.opportunity__status__c,
opps.b_d_r__date__c,
opps.inactive__client__c,
opps.b_d__owner__c as b_d_owner_opp,
opps.lead__source__sales__c,
opps.s_a_l_by__sales__c,
opps.s_a_l__c,
opps.activate__m_s_g__c,
opps.sales__accepted__flag_2__c,
opps.contacts__c,
opps.sales__accepted__date__c,
opps.campaign_source__c,
opps.iso_code_2_digit__c,
opps.region_iso__c,
opps.record_type_text_id_c,
opps.business_development_owner__c,
opps.bdr_owner__c as bdr_owner_opp,
opps.bdr_owner_name,
opps.tier_c,
opps.currency_iso_code,
opps.record_type_id,
opps.de_country__c,
opps.record_type_bi__c,
opps.pricing_model__c,
opps.potential_partner_lead__c,
opps.lead_source_tier_c,
opps.headcount_c,
opps.de_country_c as de_country,
opps.partner_region_c,
leads.id as lead_id,
leads.lead_source as lead_source_lead,
leads.last_modified_date as last_modified_date_lead,
leads.de_country_c as de_country_lead,
leads.lead_tier_c,
acc.name as account_name
from salesforce.v_gp_sfdc_opportunity_current_pacific_time as opps
left join salesforce.v_gp_sfdc_lead_current_pacific_time as leads
on opps.id=leads.converted_opportunity_id
left join salesforce.v_gp_sfdc_account_current_pacific_time as acc
on opps.account_id=acc.id),
RANK as (SELECT
            lead.id,
            lead.created_date,
            lead.converted_opportunity_id,
            RANK()  OVER(PARTITION BY lead.converted_opportunity_id ORDER BY lead.created_date) AS row_num
        FROM salesforce.v_gp_sfdc_lead_current_pacific_time AS lead)
SELECT funnel.*, rank.row_num
FROM funnel
LEFT JOIN rank
ON funnel.lead_id=rank.id"
900cd7ce-72da-1226-a7c1-19e9b0dd88ac,Sheet1 (Master Agreement Dates) (local copy),postgres,"WITH sfdc as (SELECT DISTINCT 
				*
			  FROM 
			  	salesforce.v_gp_sfdc_marketing_dashboard AS sfdc		
			  WHERE 
				sfdc.cohort_stage='SAL to MSA'
				AND (sfdc.partner_acq_opps IS NULL OR sfdc.partner_acq_opps <<>> 'Yes')
				AND (sfdc.record_type_bi__c IS NULL OR sfdc.record_type_bi__c <<>> 'Potential Partner Opportunity')),
sbqq_1 as (SELECT DISTINCT 
           		sbqq_1.id as quote_id,
				sbqq_1.created_date as created_date_quote,
				sbqq_1.name as quote_name,
				sbqq_1.owner_id as owner_id_quote,
				sbqq_1.last_modified_date as last_modified_date_quote,
		        sbqq_1.sbqq_status_c,
		        sbqq_1.sbqq_billing_name_c,
			    sbqq_1.sbqq_opportunity_2_c,
				sbqq_1.approval_status_c,
		        sbqq_1.approval_indicator_c,
				sbqq_1.last_modified_by_id,
				sbqq_1.sbqq_account_c,
				sbqq_1.sbqq_days_quote_open_c,
				sbqq_1.sbqq_primary_c,
				sbqq_1.number_of_professionals_on_quote_c,
				sbqq_1.pricing_model_c,
                sbqq_1.sbqq_net_amount_c as net_amount_total,
                sbqq_1.pre_approved_minimum_fee_c,
				sbqq_1.currency_symbol_alike_quote_line_c,
				sbqq_1.is_gp_recruit_customer_c,
				sbqq_1.is_gp_contractor_customer_c,
				sbqq_1.complete_price_book_name_c,
				sbqq_1.estimated_monthly_cost_c,
			   	sbqq_1.currency_iso_code,
				sbqq_1.test_group_c
			FROM 
		   	  salesforce.sbqq_quote_c as sbqq_1
			WHERE 
		   		sbqq_1.is_deleted='FALSE'),
first_table as ( SELECT DISTINCT 
					sfdc.*, 
					sbqq_1.quote_id,
					sbqq_1.created_date_quote,
					sbqq_1.quote_name,
					sbqq_1.owner_id_quote,
					sbqq_1.last_modified_date_quote,
					sbqq_1.sbqq_status_c,
					sbqq_1.sbqq_billing_name_c,
					sbqq_1.approval_status_c,
		        	sbqq_1.approval_indicator_c,
					sbqq_1.last_modified_by_id,
					sbqq_1.sbqq_account_c,
					sbqq_1.sbqq_days_quote_open_c,
					sbqq_1.sbqq_primary_c,
					sbqq_1.number_of_professionals_on_quote_c,
					sbqq_1.pricing_model_c,
                    sbqq_1.net_amount_total,
                    sbqq_1.pre_approved_minimum_fee_c,
					sbqq_1.currency_symbol_alike_quote_line_c,
					sbqq_1.is_gp_recruit_customer_c,
					sbqq_1.is_gp_contractor_customer_c,
					sbqq_1.complete_price_book_name_c,
					sbqq_1.estimated_monthly_cost_c,
					sbqq_1.test_group_c,
					rate.conversion_rate,
					users.name as last_modified_name	
				FROM sfdc
				LEFT JOIN sbqq_1
				ON sfdc.lead_or_opp_id=sbqq_1.sbqq_opportunity_2_c
				LEFT JOIN salesforce.currency_type as rate
				ON sbqq_1.currency_iso_code=rate.iso_code
				LEFT JOIN salesforce.v_gp_sfdc_user_current as users
				ON sbqq_1.last_modified_by_id=users.id),
sbqq_2 as ( SELECT DISTINCT
		        sbqq_2.id AS quote_line_id, 
				sbqq_2.name AS quote_line_name, 
				sbqq_2.is_deleted,
				sbqq_2.currency_iso_code, 
				sbqq_2.created_date as created_date_line, 
				sbqq_2.last_modified_date, 
				sbqq_2.sbqq_quote_c, 
				sbqq_2.sbqq_additional_discount_c , 
				sbqq_2.sbqq_component_list_total_c , 
				sbqq_2.sbqq_component_total_c , 
				sbqq_2.sbqq_customer_price_c , 
				sbqq_2.sbqq_customer_total_c , 
				sbqq_2.sbqq_list_price_c , 
				sbqq_2.sbqq_list_total_c , 
				sbqq_2.sbqq_net_price_c , 
				sbqq_2.sbqq_net_total_c , 
				sbqq_2.sbqq_number_c , 
				sbqq_2.sbqq_original_price_c , 
				sbqq_2.sbqq_package_list_total_c , 
				sbqq_2.sbqq_package_total_c , 
				sbqq_2.sbqq_partner_price_c , 
				sbqq_2.sbqq_partner_total_c , 
				sbqq_2.sbqq_product_code_c , 
				sbqq_2.sbqq_product_name_c , 
				sbqq_2.sbqq_prorated_list_price_c , 
				sbqq_2.sbqq_prorated_price_c , 
				sbqq_2.sbqq_regular_price_c , 
				sbqq_2.sbqq_regular_total_c , 
				sbqq_2.sbqq_special_price_c , 
				sbqq_2.sbqq_total_discount_amount_c , 
				sbqq_2.sbqq_total_discount_rate_c , 
				sbqq_2.accruing_statutory_severance_c , 
				sbqq_2.additional_month_payment_c , 
				sbqq_2.x_13_th_month_payment_notes_c , 
				sbqq_2.estimated_social_charges_c , 
				sbqq_2.markup_on_expenses_c , 
				sbqq_2.monthly_service_fee_c , 
				sbqq_2.setup_fee_professional_c , 
				sbqq_2.vat_gst_c , 
				sbqq_2.base_c , 
				sbqq_2.variable_c , 
				sbqq_2.monthly_service_fee_calculated_c , 
				sbqq_2.setup_fee_per_additional_professional_c , 
				sbqq_2.minimum_monthly_service_fee_c , 
				sbqq_2.salary_bonus_c , 
				sbqq_2.minimum_monthly_service_fee_calculated_c , 
				sbqq_2.setup_total_all_hc_c , 
				sbqq_2.addendum_monthly_service_fee_original_c , 
				sbqq_2.estimated_employer_social_charges_on_bas_c , 
				sbqq_2.gp_fee_base_per_hc_c , 
				sbqq_2.estimated_employer_social_charges_on_var_c , 
				sbqq_2.gp_fee_variable_per_hc_c , 
				sbqq_2.fee_structure_c , 
				sbqq_2.monthly_fee_total_c , 
				sbqq_2.country_product_c , 
				sbqq_2.total_social_charges_hc_c , 
				sbqq_2.footnote_c , 
				sbqq_2.markup_on_expenses_notes_c , 
				sbqq_2.monthly_fee_variable_c , 
				sbqq_2.vat_per_hc_c , 
				sbqq_2.currency_transaction_and_wiring_c , 
				sbqq_2.total_monthly_cost_c , 
				sbqq_2.monthly_cost_of_doing_all_hc_c , 
				sbqq_2.product_name_text_c , 
				sbqq_2.monthly_currency_fee_c , 
				sbqq_2.currency_symbol_c , 
				sbqq_2.unique_identifier_c , 
				sbqq_2.x_13_th_14_th_month_addendum_notes_c , 
				sbqq_2.severance_addendum_notes_c , 
				sbqq_2.setup_fee_addendum_notes_c , 
				sbqq_2.vacation_pay_c , 
				sbqq_2.estimated_provident_fund_contribution_c , 
				sbqq_2.statutory_vacation_allowance_c , 
				sbqq_2.mandatory_pension_contribution_c , 
				sbqq_2.disability_insurance_per_professional_c , 
				sbqq_2.statutory_vacation_pay_bonus_c , 
				sbqq_2.statutory_unemployment_fund_cts_c , 
				sbqq_2.social_charges_addendum_notes_c , 
				sbqq_2.mandatory_financial_reserve_accrual_c , 
				sbqq_2.statutory_vacation_bonus_c , 
				sbqq_2.statutory_transient_bonus_c , 
				sbqq_2.monthly_service_fee_total_disc_c , 
				sbqq_2.monthly_service_fee_final_c , 
				sbqq_2.min_service_fee_total_disc_c , 
				sbqq_2.min_monthly_service_fee_final_c , 
				sbqq_2.total_discount_amount_c , 
				sbqq_2.statutory_vacation_pay_c , 
				sbqq_2.mandatory_medical_insurance_c , 
				sbqq_2.proposal_footnotes_c , 
				sbqq_2.base_monthly_c , 
				sbqq_2.variable_monthly_c , 
				sbqq_2.currency_transaction_and_wiring_monthly_c , 
				sbqq_2.mandatory_free_trade_zone_office_space_c , 
				sbqq_2.discount_tiers_applied_c , 
				sbqq_2.refundable_deposit_in_months_c , 
				sbqq_2.invoices_withdrawal_type_c , 
				sbqq_2.markup_on_expenses_amount_c , 
				sbqq_2.discount_tier_text_c , 
				sbqq_2.monthly_service_fee_discount_c , 
				sbqq_2.min_monthly_service_fee_discount_c , 
				sbqq_2.total_rep_s_discount_c , 
				sbqq_2.se_allowable_discount_c , 
				sbqq_2.rsd_discount_c , 
				sbqq_2.vp_discount_c , 
				sbqq_2.c_level_discount_c , 
				sbqq_2.need_rsd_approval_c , 
				sbqq_2.need_vp_approval_c , 
				sbqq_2.need_c_level_approval_c , 
				sbqq_2.estimated_social_charges_override_c , 
				sbqq_2.addendum_template_id_c , 
				sbqq_2.country_product_name_text_c , 
				sbqq_2.visa_fee_per_prof_including_g_l_fees_c , 
				sbqq_2.visa_fee_ren_per_prof_incl_g_l_fees_c , 
				sbqq_2.visa_renwl_fee_for_spouse_dependents_c , 
				sbqq_2.visa_fee_for_spouse_dependents_c , 
				sbqq_2.employment_pass_if_applicable_c , 
				sbqq_2.employment_pass_per_dependent_c , 
				sbqq_2.renewal_every_2_years_c , 
				sbqq_2.renewal_every_2_years_per_dependent_c , 
				sbqq_2.stat_employer_healthcare_contrib_c , 
				sbqq_2.foreign_worker_epi_c , 
				sbqq_2.issuance_of_req_letters_and_or_noc_s_c , 
				sbqq_2.if_required_arabic_translation_e_m_bc_c , 
				sbqq_2.x_1_time_3_rd_party_fees_for_pension_plan_c , 
				sbqq_2.statutory_pre_employment_medical_check_c , 
				sbqq_2.estimated_social_charges_ref_c , 
				sbqq_2.proposal_accrued_statory_severance_c , 
				sbqq_2.proposal_estimated_social_charges_c , 
				sbqq_2.proposal_indirect_tax_c , 
				sbqq_2.proposal_estimated_social_charges_in_c , 
				sbqq_2.monthly_service_fee_original_c , 
				sbqq_2.addendum_monthly_service_fee_c , 
				sbqq_2.addendum_estimated_social_charges_c , 
				sbqq_2.addendum_accrued_severance_c , 
				sbqq_2.addendum_markup_on_expenses_c , 
				sbqq_2.addendum_monthly_currency_transaction_c , 
				sbqq_2.addendum_indirect_tax_c , 
				sbqq_2.addendum_vacation_allowance_c , 
				sbqq_2.addendum_vacation_pay_c , 
				sbqq_2.addendum_financial_reserve_c , 
				sbqq_2.addendum_provident_fund_c , 
				sbqq_2.discounted_to_netprice_c , 
				sbqq_2.ann_tax_filling_fee_list_price_child_c , 
				sbqq_2.ann_tax_filling_fee_net_price_child_c , 
				sbqq_2.wiring_fee_list_price_child_c , 
				sbqq_2.wiring_fee_net_price_child_c , 
				sbqq_2.tran_admin_fee_list_price_child_c , 
				sbqq_2.tran_admin_fee_net_price_child_c , 
				sbqq_2.travel_fee_list_price_child_c , 
				sbqq_2.travel_fee_net_price_child_c , 
				sbqq_2.addendum_monthly_service_fee_initial_c , 
				sbqq_2.discounted_to_monthly_service_fee_c , 
				sbqq_2.discounted_to_minimum_monthly_service_c , 
				sbqq_2.discounted_to_social_charges_c , 
				sbqq_2.discounted_to_annual_tx_c , 
				sbqq_2.discounted_to_wiring_fee_c , 
				sbqq_2.discounted_to_one_time_trans_c , 
				sbqq_2.discounted_to_travel_insurance_c , 
				sbqq_2.switzerlandtext_1_c , 
				sbqq_2.switzerlandtext_2_c , 
				sbqq_2.monthly_fee_variable_original_c , 
				sbqq_2.addendum_net_price_c , 
				sbqq_2.monthly_service_overriding_disc_c , 
				sbqq_2.additional_month_payment_proposal_c , 
				sbqq_2.set_up_fee_currency_symbol_c , 
				sbqq_2.min_month_ser_fee_currency_symbol_c , 
				sbqq_2.annual_tax_currency_symbol_c , 
				sbqq_2.wiring_fee_currency_symbol_c , 
				sbqq_2.trans_fee_currency_symbol_c , 
				sbqq_2.travel_fee_currency_symbol_c , 
				sbqq_2.addendum_min_monthly_service_fee_c , 
				sbqq_2.addendum_annual_tax_fee_c , 
				sbqq_2.addendum_trans_fee_c , 
				sbqq_2.addendum_wiring_fee_c , 
				sbqq_2.addendum_travel_fee_c , 
				sbqq_2.markup_currency_symbol_c , 
				sbqq_2.monthly_service_fee_tier_notes_c , 
				sbqq_2.minimum_monthly_service_fee_tier_notes_c , 
				sbqq_2.monthly_service_fee_tier_c , 
				sbqq_2.minimum_monthly_service_fee_tier_c , 
				sbqq_2.additional_professional_checkbox_c , 
				sbqq_2.setup_fee_additional_professional_label_c , 
				sbqq_2.setup_fee_additional_professional_value_c , 
				sbqq_2.monthly_variable_overriding_disc_c , 
				sbqq_2.addendum_monthly_fee_variable_c , 
				sbqq_2.discounted_to_monthly_serv_fee_variable_c , 
				sbqq_2.additional_professional_currency_symbol_c , 
				sbqq_2.price_info_populated_c , 
				sbqq_2.country_number_c , 
				sbqq_2.proposal_total_monthly_cost_c , 
				sbqq_2.monthly_fee_variable_discount_c , 
				sbqq_2.monthly_fee_variable_final_c , 
				sbqq_2.estimated_social_charges_from_pbe_c , 
				sbqq_2.min_monthly_service_fee_original_c , 
				sbqq_2.monthly_service_variable_actual_disc_c , 
				sbqq_2.min_monthly_service_overriding_disc_c , 
				sbqq_2.original_monthly_total_fee_c , 
				sbqq_2.addendum_monthly_service_fee_variable_og_c , 
				sbqq_2.monthly_total_fee_discount_c , 
				sbqq_2.primary_product_c , 
				sbqq_2.ann_13_14_th_month_billed_amount_all_hc_c , 
				sbqq_2.ann_tax_trav_ins_all_hc_c , 
				sbqq_2.year_1_cost_c , 
				sbqq_2.subsequent_years_total_c , 
				sbqq_2.accruing_statutory_severance_currency_c , 
				sbqq_2.monthly_sum_of_salary_c , 
				sbqq_2.uae_office_space_fee_c , 
				sbqq_2.usa_state_c , 
				sbqq_2.usa_state_attrib_c , 
				sbqq_2.estimated_social_charges_from_pbe_value_c , 
				sbqq_2.x_14_th_month_note_c , 
				sbqq_2.custom_product_name_c , 
				sbqq_2.visa_cost_new_hire_1_year_lp_c , 
				sbqq_2.visa_cost_dependent_renewal_lp_c , 
				sbqq_2.visa_cost_other_resident_renewal_lp_c , 
				sbqq_2.visa_cost_new_hire_and_renewal_c , 
				sbqq_2.visa_cost_other_eu_eea_swiss_lp_c , 
				sbqq_2.visa_cost_new_hire_lp_c , 
				sbqq_2.visa_cost_renewal_lp_c , 
				sbqq_2.visa_cost_new_hire_2_year_lp_c , 
				sbqq_2.visa_cost_dependent_lp_c , 
				sbqq_2.visa_cost_other_eu_eea_swiss_natio_lp_c , 
				sbqq_2.adjusted_discount_c , 
				sbqq_2.visa_product_name_c , 
				sbqq_2.product_pricing_model_c , 
				sbqq_2.discount_beyond_preapproved_mgmt_fee_c , 
				sbqq_2.discount_beyond_preapproved_one_time_fee_c , 
				sbqq_2.pre_approved_management_fee_percentage_c , 
				sbqq_2.discount_beyond_preapproved_minimum_fee_c , 
				sbqq_2.country_product_iso_c
FROM salesforce.sbqq_quote_line_c AS sbqq_2
WHERE sbqq_2.is_deleted='FALSE')
SELECT DISTINCT 
first_table.*,
sbqq_2.*
FROM first_table
LEFT JOIN sbqq_2
ON first_table.quote_id=sbqq_2.sbqq_quote_c"
900cd7ce-72da-1226-a7c1-19e9b0dd88ac,Sheet1 (Master Agreement Dates) (local copy),postgres,"select distinct 
				country.id,
				country.country_code,
				markup.amount_pct
from goglobal_gp_goglobal.v_gp_gg_country_current as country
left join goglobal_gp_goglobal.markup_transaction_country_config as markup
on country.id=markup.country_id
where markup.markup_transaction_id='3'"
900cd7ce-72da-1226-a7c1-19e9b0dd88ac,Sheet1 (Master Agreement Dates) (local copy),,
904196c6-0265-3411-ef75-f281534a2012,Custom SQL Query+ (gpbidb),postgres,"with A as(
	SELECT t1.id, 
		concat(t1.first_name,' ',t1.last_name) as Professional,
	   	case 
	   		when t1.status='1' then 'New' 
	   		when t1.status='2' then 'Onboarding'
	   		when t1.status='3' then 'Active'
	   		when t1.status='4' then 'Terminating'
	   		when t1.status='5' then 'Inactive'
		end as Pro_Status,
	   	t2.name as Client,
	   	t2.status as client_status, 
	   	T9.NAME AS LSP_NAME,
	   	t4.name as Country,
	   	t7.name as Benefit_type,
	   	case 
	   		when t8.mandatory='1' then 'Mandatory'
	   		when t8.mandatory='0' then 'Supplemental'
	   	end as Plan_Type,
	   	t6.name as Plan_Name,
		t6.custom,
		case 
			when t6.active='1' then 'Yes'
			when t6.active='0' then 'No' 
			else null
		end as Active_plan,
		t5.benefit_id,
	   	t5.status,
	   	case 
	   		when t5.status='1' then 'Offered' 
	   		when t5.status='2' then 'Enrolled'
	   		when t5.status='3' then 'Declined' 
	   		when t5.status='4' then 'Unenrolled'
			else t5.status
		end as benefit_status,
		t5.enrollment_date,
		t5.unenrollment_date,
	t1.contract_start_date,
		t1.payroll_start_date, 
		t1.payroll_end_date
	from goglobal_gp_goglobal.v_gp_gg_professional_current t1
	left join goglobal_gp_goglobal.v_gp_gg_client_current t2 on t1.client_id=t2.id
	left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t3  on t1.lsp_country_id=t3.id
	left join goglobal_gp_goglobal.v_gp_gg_country_current t4 on t3.country_id=t4.id
	left join benefits_gp_benefits.v_benefits_professional_benefit_enrollment_current t5 on t1.id=t5.professional_external_id::integer
	left join benefits_gp_benefits.v_benefits_benefit_current t6 on t5.benefit_id=t6.id::INTEGER and t4.id=t6.country_external_id::integer
	left join benefits_gp_benefits.v_benefits_benefit_type_current t7 on t6.benefit_type_id=t7.id::INTEGER
	left join benefits_gp_benefits.v_benefits_country_benefit_type_current t8 on t7.id::INTEGER=t8.benefit_type_id and t8.country_external_id::integer=t4.id 
	LEFT JOIN goglobal_gp_goglobal.V_GP_GG_LSP_CURRENT T9 ON T3.LSP_ID=T9.ID
	where is_failed_to_launch='false' 
		and is_demo_client='false' 
	order by professional),
b as(
	select *, 
	case 
		when (benefit_type is null and status is null) then 'A'
		when (benefit_type is null and status is NOT null) THEN 'B'
	END AS FLAG FROM A),
dental as(
select t1.id,t1.professional,t1.pro_status,t1.client,t1.client_status, t1.contract_start_date, t1.benefit_type,t1.plan_name, t1.benefit_status
from b t1 where country='Brazil' and benefit_type in ('Dental')
),
medical as (
select t1.id,t1.professional,t1.pro_status,t1.client,t1.client_status, t1.contract_start_date, t1.benefit_type,t1.plan_name, t1.benefit_status
from b t1 where country='Brazil' and benefit_type in ('Medical'))
select distinct t1.id,t1.professional,t1.pro_status,t1.client,t1.client_status, t1.contract_start_date,
dental.benefit_type as Dental, dental.plan_name as Dental_plan_name, dental.benefit_status as dental_benefit_status,
medical.benefit_type as medical, medical.plan_name as medical_plan_name, medical.benefit_status as medical_benefit_status
from b t1
left join dental on t1.id=dental.id
left join medical on t1.id=medical.id
where country='Brazil'"
904196c6-0265-3411-ef75-f281534a2012,Custom SQL Query+ (gpbidb),postgres,"select *
FROM GOGLOBAL_GP_GOGLOBAL.V_GP_GG_transactions_MAT
WHERE transaction in ('Insurance Premium','Insurance Premium - Dental', 'Insurance Premium Markup')"
90773e4c-2c83-54c2-f2d8-33c29c5e2d6a,Custom SQL Query (gpbidb),postgres,"SELECT sc.top_parent_project_name, sc.description, sc.extracts_refreshed_at, sc.first_published_at, sc.has_refresh_scheduled, sc.has_refreshable_extract, sc.item_hyperlink,
	   sc.item_parent_project_owner_email, sc.last_access_date, sc.owner_email, sc.updated_at,
	   e.actor_user_id, e.actor_user_name, e.event_name, e.event_type, e.event_date, e.actor_site_role, e.item_type,e.item_name, 
	   e.workbook_name
FROM tableau.site_content sc 
LEFT JOIN tableau.ts_events e on sc.item_name = e.workbook_name
where sc.item_type= 'Workbook'"
90773e4c-2c83-54c2-f2d8-33c29c5e2d6a,ts_users (tableau.ts_users)+ (gpbidb),,
910c7dca-0e2b-8b74-b7a2-966faf2d5c4d,Custom SQL Query (gpbidb),postgres,"SELECT DISTINCT ""Payroll Name"" as ""Name"", ""Work Contact: Work Email"" as ""Email"", ""Hire Date"" as ""Start Date"",
""Job Title Description"" as ""Business Title"", ""Reports To Name"" as ""Manager"",""Worked In Country"" as ""Location"", 
""Home Department Description"" as ""Cost Center""
FROM workday_hris.v_workday_adp_hris
WHERE ""Status""='Active' AND ""Business Unit Description""='Global Ops'"
abc79492-2a05-7464-a205-606efb666319,Custom SQL Query (gpbidb),postgres,"with roles as (
				select distinct
					concat(t2.first_name,' ', t2.last_name) as User_Name, 
					t3.email as User_EMAIL, 
					case when role='4' then 'Expense Approver 1' 
						 when role='10' then 'Expense Approver 2' 
					end  as roles, 
					t1.*
				from goglobal_goglobal.v_gp_gg_professional_client_assignment_current t1
				left join goglobal_goglobal.v_gp_gg_client_person_current t2  on t1.client_person_id = t2.id
				left join goglobal_goglobal.v_gp_gg_user_current t3 on t2.user_id = t3.id
				where role in ('4','10')),
		EA_2 AS (SELECT Distinct * FROM ROLES WHERE ROLE='10'),
		EA_1 AS (SELECT Distinct * FROM ROLES WHERE ROLE='4'),
		Final_Roles as (
				Select Distinct
					t1.id as Professional_id, concat(t1.first_name,' ',t1.last_name) as professional,
					EA_1.USER_NAME AS Expense_approver, EA_1.user_email as EA_1_EMAIL,
					EA_2.USER_NAME AS Expense_approver_2, EA_2.user_email as EA_2_EMAIL
				From goglobal_goglobal.v_gp_gg_professional_current t1
				Left Join EA_2 ON T1.ID=EA_2.PROFESSIONAL_ID
				Left Join EA_1 ON T1.ID=EA_1.PROFESSIONAL_ID
				where t1.is_failed_to_launch='false'), 
		Expenses_Zoho as (
				Select Distinct 
					a.id as Professional_id, 
					concat(a.first_name, ' ' , a.last_name) as Pro_Name, 
					a.is_failed_to_launch,
					c.name as Customer_Name, 
					C.id as Customer_id, 
					p4.name AS professional_working_country,
					b.date_created as zoho_expense_date_created, 
					b.report_status, 
					b.Zoho_expense_status, 
					b.id as zoho_report_id,
					b.is_expense_approved, 
					b.description,
					b.currency_code,
					b.total_amount as Zoho_total_amount, 
					b.report_number as Zoho_report_number, 
					b.Zoho_response, 
					b.user_id,
					lsp.legal_entity_name, 
					CBC.Accounting_id, 
					CASE when CBC.Bill_type='9' then 'Expense' else CBC.Bill_type
					end as GPP_Bill_type, 
					CBC.billing_cycle_id, 
					CBT.Client_Bill_id, 
					CASE WHEN CBC.status='1' THEN 'Draft'
						 WHEN CBC.status='2' THEN 'Client Approval'
						 WHEN CBC.status='3' THEN 'Submitted'
						 WHEN CBC.status='4' THEN 'LSP Approval'
						 WHEN CBC.status='5' THEN 'LSP Submitted'
						 WHEN CBC.status='6' THEN 'Ready to Validate'
						 WHEN CBC.status='7' THEN 'Preparing Bill'
						 WHEN CBC.status='8' THEN 'Generate Invoice'
						 WHEN CBC.status='9' THEN 'Ready to Send'
						 WHEN CBC.status='10' THEN 'Billed'
						 WHEN CBC.status='11' THEN 'Paid'
						 WHEN CBC.status='12' THEN 'Invoice in Progress'
						 WHEN CBC.status='13' THEN 'Invoice Error'
				  END as bill_status_GPP,
						   i.name AS customer_industry,
					CBT.Description as CBT_Description, 
					CBT.Notes 
				From goglobal_goglobal.v_gp_gg_zoho_pre_approved_report_current b
				Left Join goglobal_goglobal.v_gp_gg_professional_current a on a.id = b.professional_id
				Left Join goglobal_goglobal.v_gp_gg_client_current c on b.client_id = c.id
				Left Join goglobal_goglobal.v_gp_gg_zoho_expense_report_summary_current ZES on ZES.report_number = b.report_number
				Left Join goglobal_goglobal.v_gp_gg_client_bill_transaction_current CBT on CBT.id = ZES.client_bill_transaction_id  
				Left Join goglobal_goglobal.v_gp_gg_client_bill_current CBC on CBC.id = CBT.client_bill_id
				Left join goglobal_goglobal.v_gp_gg_lsp_country_current l ON a.lsp_country_id = l.id
				Left join goglobal_goglobal.v_gp_gg_lsp_current lsp ON l.lsp_id = lsp.id
                                LEFT JOIN goglobal_goglobal.v_gp_gg_industry_current AS i ON c.industry_id= i.id
				LEFT JOIN goglobal_goglobal.v_gp_gg_country_current AS p4 ON l.country_id=p4.id
				Where C.is_demo_client = false
		)
Select Distinct 
	Expenses_Zoho.*, 
	Final_Roles.Expense_approver,
	Final_Roles.EA_1_EMAIL,
	Final_Roles.Expense_approver_2, 
	Final_Roles.EA_2_EMAIL
From Expenses_Zoho 
Left Join Final_Roles on Expenses_Zoho.Professional_id = Final_Roles.Professional_id"
91c02d9e-b91b-7459-d439-53e4f8d0d3b7,Custom SQL Query (gpbidb),,
91c02d9e-b91b-7459-d439-53e4f8d0d3b7,Custom SQL Query (gpbidb),postgres,"With A AS(select currency_code, currency_name, DATE(date_trunc('month',date)) AS year_month, date, rate
from goglobal_gp_goglobal.v_gp_gg_country_current country, goglobal_gp_goglobal.v_gp_gg_fxrate_current  fxrate
where fxrate.currency_id = country.id 
)

SELECT currency_code, currency_name, year_month, AVG(rate) as avg_rate
FROM A
GROUP BY 1,2,3
ORDER BY 1,2"
94112fdf-0406-7275-21cf-0f507d6b4880,Custom SQL Query (gpbidb),postgres,"SELECT DISTINCT account.id AS account_id,
            account.name AS account_name,
            opps.id AS opp_id,
            opps.amount,
            opps.opportunity__status__c AS opp_status,
            opps.closed__lost__c,
            opps.lead_source_tier_c,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    ELSE NULL::text
                END AS client_country,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    ELSE NULL::text
                END AS client_region,
            opps.created_date,
            opps.sales__accepted__date__c AS sal_accepted_date,
            opps.s_a_l__c,
            opps.s_a_l_by__sales__c,
            opps.record_type_bi__c,
            opps.close_date AS msa_date,
            opps.stage_name,
            opps.partner_acquisition__c AS partner_acq_opps,
            opps.is_won AS opp_won,
            opps.record_type_text_id_c AS record_type_opps,
            usr_lead_opp.opps_owner_name,
            usr_lead_opp.opps_owner_manager,
            usr_lead_opp.leads_owner_name,
            usr_lead_opp.leads_owner_manager,
            opps.name AS opp_name,
            opps.type AS opp_type,
            acc_partn.partner_level__c AS partner_level,
            opps.pricing_model__c AS pricing_model_opps,
                CASE
                    WHEN leads.lead_source IS NULL THEN opps.lead_source
                    ELSE leads.lead_source
                END::text AS lead_or_opp_source,
            usr_lead_opp.partner_development_owner,
            usr_lead_opp.bdr_owner_name,
            usr_lead_opp.bdr_manager_name,
            acc_partn.name AS partner,
            acc_partn.client_region_billing_country AS partner_region,
            account.type AS account_type,
            account.pricing_model__c AS acc_pricing_model,
                CASE
                    WHEN (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text) THEN 'Non Partner Opp or Existing Business'::text
                    ELSE 'Partner Opp or Existing Business'::text
                END AS opp_go_flag,
            opps.closed_lost_category_detail_c,
            opps.incumbent_solution_c,
            opps.competitorsthatare_involved_c,
            opps.contact_id,
            opps.primary_quotes_pricing_model_c,
            opps.competitors__involved__c,
            opps.other__competitor__c,
            opps.update_time AS fivetran_synced_opps,
            opps.total_professionals_c,
            acc_partn.billing_country AS partner_country,
            opps.existing_business_deal_classification_c,
            opps.existing_business_opp_type_c,
            opps.existing_business_opp_type_detail_c,
            users.name AS opp_owner_name,
            acc_partn.partner_agreement_effective_date__c AS partner_agreement_effective_date_c

           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
             LEFT JOIN salesforce.v_gp_sfdc_user_current users ON users.id::text = opps.owner_id::text
             LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_or_opp_id::text =
                CASE
                    WHEN leads.id IS NULL THEN opps.id
                    ELSE leads.id
                END::text
WHERE (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) 
AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) 
AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text) 
AND opps.is_won = false 
AND stage_name::text = 'Closed Lost'::text"
950da1bb-d767-bce8-b350-4baa2d3cc799,v_tableau_headcount_dashboard (goglobal_gp_goglobal.v_tableau_headcount_dashboard) (gpbidb),,
95cf0ff3-cbd7-ae8b-c696-497b57ff29ff,Custom SQL Query (gpbidb),postgres,"(with a as(select to_date(t1.postperiod, 'MMYYYY'),t2.id,concat(t2.first_name,' ',t2.last_name) as pro, T2.IS_FAILED_TO_LAUNCH, T2.STATUS, 
						  T3.NAME AS CLIENT, t3.status as client_status,
						   t5.name as Country,
						  date(date_trunc('month',t2.payroll_start_date)) as Payroll_start_date, date(t2.payroll_start_date) as Payroll_start_date_2,date(t2.payroll_END_date) as Payroll_END_date,
						   date(date_trunc('month',t2.payroll_end_date)) as termination_date,	 
						  t1.* -- sum(netamount)
				from repo.gp_acumatica_gl_transaction t1
				left join  goglobal_gp_goglobal.v_gp_gg_professional_current t2 
					on t1.projectid=REPLACE (""accounting_id"", '-', '')
				LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current t3 
							on t2.client_id=t3.id
				left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t4 on t2.lsp_country_id=t4.id
				left join goglobal_gp_goglobal.v_gp_gg_country_current t5 on t4.country_id=t5.id
				where t1.account = '41000' and to_date(t1.postperiod, 'MMYYYY')>>= '2019-01-01'   
				ORDER BY BATCHNUMBER),
				X AS(
				select distinct date(date_trunc('month',t3.cal_date)), A.*,(netamount/14) AS MENSUAL
					from repo.gp_calendar t3 
					left join A
						on TO_DATE<<=cal_date and cal_date<<=(TO_DATE + interval '13 month') 
					WHERE A.ID IS NOT NULL
					ORDER BY 1),
				y as (select x.*,row_number() over(partition by x.id,x.batchnumber,X.LINENBR order by x.batchnumber,x.linenbr,x.date) from x)
				select *, '14' as Revenue_months from y)
				UNION ALL
				(with a as(select to_date(t1.postperiod, 'MMYYYY'),t2.id,concat(t2.first_name,' ',t2.last_name) as pro, T2.IS_FAILED_TO_LAUNCH, T2.STATUS, 
						  T3.NAME AS CLIENT, t3.status as client_status,
						   t5.name as Country,
						  date(date_trunc('month',t2.payroll_start_date)) as Payroll_start_date, date(t2.payroll_start_date) as Payroll_start_date_2,date(t2.payroll_END_date) as Payroll_END_date,
						   date(date_trunc('month',t2.payroll_end_date)) as termination_date,	 
						  t1.* -- sum(netamount)
				from repo.gp_acumatica_gl_transaction t1
				left join  goglobal_gp_goglobal.v_gp_gg_professional_current t2 
					on t1.projectid=REPLACE (""accounting_id"", '-', '')
				LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current t3 
							on t2.client_id=t3.id
				left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t4 on t2.lsp_country_id=t4.id
				left join goglobal_gp_goglobal.v_gp_gg_country_current t5 on t4.country_id=t5.id
				where t1.account = '41000' and to_date(t1.postperiod, 'MMYYYY')>>= '2019-01-01'   
				ORDER BY BATCHNUMBER),
				X AS(
				select distinct date(date_trunc('month',t3.cal_date)), A.*,(netamount/12) AS MENSUAL
					from repo.gp_calendar t3 
					left join A
						on TO_DATE<<=cal_date and cal_date<<=(TO_DATE + interval '11 month') 
					WHERE A.ID IS NOT NULL
					ORDER BY 1),
				y as (select x.*,row_number() over(partition by x.id,x.batchnumber,X.LINENBR order by x.batchnumber,x.linenbr,x.date) from x)
				select *, '12' as Revenue_months from y)"
9638b1af-52f5-eed9-0c24-067444376791,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT project_name, site_name, actor_user_id, actor_user_name, e.event_name, event_type, event_id, event_date, actor_license_role, actor_site_role, item_type, e.item_id, e.item_name, workbook_name, historical_item_name, item_owner_email, item_repository_url, historical_item_repository_url, run_date,
	suspend.event_name as suspended, md.max_date
	FROM tableau.ts_events e

	left join (select item_id, event_name from tableau.ts_events WHERE event_name = 'Suspend Extract Refresh Due to Inactivity' ) suspend on
	e.item_id = suspend.item_id
	
	left join (SELECT  item_id, item_name, event_name , MAX(event_date) as max_event_date, 1 as max_date
	FROM tableau.ts_events
	where event_name = 'Publish Workbook'
	group by 1,2,3) as md on (e.item_id = md.item_id and e.event_name = md.event_name and e.event_date = md.max_event_date)"
9638b1af-52f5-eed9-0c24-067444376791,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT podname, site_luid, u.site_name, site_create_date, site_creator_capacity, site_explorer_capacity, site_user_quota, site_viewer_capacity, user_id, user_luid, user_email, created_at, user_account_age, last_login_date, days_since_last_login, license_type, site_role, owned_projects, owned_data_sources, owned_certified_data_sources, owned_data_sources_size, owned_workbooks, owned_workbooks_size, owned_views, access_data_source_events_count, access_view_events, publish_data_source_events, publish_workbook_events, last_datasource_access_date, last_datasource_publish_date, last_view_access_date, last_workbook_publish_date, data_source_access_count_total, data_source_access_count_unique_users, view_access_count_total, view_access_count_unique_users, run_date,
	COUNT_TOTAL_USERS.count_t_users
	FROM tableau.ts_users u
	LEFT JOIN (SELECT site_name, COUNT(DISTINCT user_email) as count_t_users
			  FROM tableau.ts_users group by 1) COUNT_TOTAL_USERS on u.site_name = COUNT_TOTAL_USERS.site_name"
9638b1af-52f5-eed9-0c24-067444376791,ts_users (tableau.ts_users)+ (gpbidb),postgres,"SELECT ""Payroll Name"", ""Job Title Description"", ""Business Unit Description"", ""Home Department Description"", ""Worked In Country"", ""Status"", ""Hire Date"", LOWER(""Work Contact: Work Email"") AS ""Work Contact: Work Email""
	FROM workday_hris.v_non_sensitive_workday_data"
966afad8-3c82-486f-de09-d6b446142e10,Custom SQL Query (gpbidb),postgres,"WITH GPP AS 
			(
select distinct t1.id as client_id,T1.NAME AS CLIENT,t1.status as client_status, 
			concat(t3.first_name,' ',t3.last_name) AS Account_Manager,
			T1.msa_contract_start_date_sourcing as CONTRACT_DATE_Sourcing, 
			T1.msa_contract_start_date_peo AS CONTRACT_DATE_EOR, 
			T1.msa_contract_start_date_services AS CONTRACT_DATE_Services,
			T1.MSA_CONTRACT_START_DATE_ASO AS CONTRACT_DATE_ASO,
			CASE WHEN pop.MONTHLY_AVG_COUNTRIES_W_POP IS NULL THEN 0
				ELSE pop.MONTHLY_AVG_COUNTRIES_W_POP
				END as countries_w_pop,
			CASE WHEN pop.MONTHLY_AVG_POP IS NULL THEN 0
				ELSE pop.MONTHLY_AVG_POP 
				END as pop
from goglobal_gp_goglobal.v_gp_gg_client_current T1
left join goglobal_gp_goglobal.v_tableau_headcount_dashboard t2 on t1.id=t2.client_id
left join (
			WITH POP AS (SELECT CLIENT_ID,CAL_DATE,COUNT(DISTINCT COUNTRY_NAME) AS COUNTRIES_W_POP,COUNT(DISTINCT PROFESSIONAL_ID) AS POP
						FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard t2
						WHERE t2.active_flag='Active' and cal_date<<= date_trunc('month', now()) AND t2.cal_date>>=(DATE_TRUNC('MONTH',now())- INTERVAL '1 YEAR')
						GROUP BY 1,2)
					SELECT CLIENT_ID, AVG(COUNTRIES_W_POP) AS MONTHLY_AVG_COUNTRIES_W_POP, AVG(POP) AS MONTHLY_AVG_POP
					FROM POP
					GROUP BY 1) as pop on pop.client_id=t1.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t3 on t3.id = t1.gp_account_manager_id
WHERE T1.IS_DEMO_CLIENT='false' and t2.active_flag='Active' and cal_date<<= date_trunc('month', now()) 
						),
ZENDESK AS (							SELECT
							t.created_at,
							CASE WHEN t.organization_id IS NULL AND u.organization_id IS NOT NULL THEN u.organization_id
								WHEN t.organization_id IS NOT NULL AND u.organization_id IS  NULL THEN t.organization_id
							 	WHEN t.organization_id = u.organization_id THEN t.organization_id
								WHEN t.organization_id <<>> u.organization_id THEN t.organization_id
							END AS organization_id,
							CASE WHEN Organization.CUSTOM_CUSTOMER_ID IS NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
								WHEN Organization.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NULL THEN Organization.CUSTOM_CUSTOMER_ID
							 	WHEN Organization.CUSTOM_CUSTOMER_ID = zendesk_org.CUSTOM_CUSTOMER_ID THEN zendesk_org.CUSTOM_CUSTOMER_ID
							END AS custom_customer_id,
							CASE WHEN Organization.NAME IS NULL AND zendesk_org.name IS NOT NULL THEN zendesk_org.name
							 	 WHEN Organization.NAME IS NOT NULL AND zendesk_org.name IS NULL THEN Organization.NAME
							 	WHEN Organization.NAME = zendesk_org.name THEN Organization.NAME
								WHEN Organization.NAME IS NOT NULL AND zendesk_org.name IS NOT NULL  THEN organization.NAME
							END AS organization,
							g.name AS group,
							t.requester_id,
							u.name AS requester,
							t.id AS ticket_id_ZENDESK,
							status,
							T.PRIORITY,
							T.CUSTOM_CATEGORY,
							U.organization_id AS USER_ORGANIZATION_ID,
							T.organization_id,
							U3.NAME AS SUBMITTER,
							U3.ROLE AS SUBMITTER_ROLE,
							zendesk_tm.replies, zendesk_tm.full_resolution_time_in_minutes_business,
							t.custom_region,
							u.custom_country,
							case when cxs.country_code is null then '2'
								else country_complexity
							end as country_complexity
							FROM ""zendesk"".""ticket"" AS t
							LEFT JOIN ""zendesk"".""user"" AS u	ON t.requester_id = u.id
							left join zendesk.organization Organization on organization.id =u.organization_id
							left join zendesk.organization zendesk_org on zendesk_org.id =T.organization_id
							LEFT JOIN ""zendesk"".""group"" AS g ON t.group_id = g.id
							LEFT JOIN ""zendesk"".""user"" AS u2 ON t.assignee_id = u2.id
							LEFT JOIN ""zendesk"".""user"" AS u3 ON t.SUBMITTER_ID = u3.id
							LEFT JOIN ZENDESK.TICKET_METRICS AS ZENDESK_TM ON t.id=ZENDESK_TM.TICKET_ID
							left join goglobal_gp_goglobal.country_complexity_score cxs on u.custom_country=cxs.country_name
							where t.created_at>>=(now() - INTERVAL '1 YEAR')
							ORDER BY 1,3,7
				),
zendesk_total as 		
				(
							SELECT CUSTOM_CUSTOMER_ID, organization, 
							COUNT (DISTINCT TICKET_ID_ZENDESK)::NUMERIC AS TICKETS,
							COUNT (DISTINCT TICKET_ID_ZENDESK) FILTER (WHERE status in ('open','hold','new','open','pending')) as open_tickets,
							COUNT (DISTINCT TICKET_ID_ZENDESK) FILTER (WHERE SUBMITTER_ROLE='agent')::NUMERIC as tickets_by_agent,
							sum(replies) as replies,
							sum(full_resolution_time_in_minutes_business) as full_resolution_time_in_minutes_business,
							AVG(COUNTRY_COMPLEXITY) as country_complexity_avg
							from zendesk
							GROUP BY 1,2
				),
total as(
		SELECT GPP.*,
				ZENDESK_TOTAL.CUSTOM_CUSTOMER_ID,
				ZENDESK_TOTAL.ORGANIZATION,
			 case when ZENDESK_TOTAL.TICKETS is null then 0
				 else ZENDESK_TOTAL.TICKETS 
			end as tickets,
			case when ZENDESK_TOTAL.OPEN_TICKETS is null then 0 
				 else ZENDESK_TOTAL.OPEN_TICKETS 
			end as open_tickets,
			ZENDESK_TOTAL.TICKETS_BY_AGENT, 
			ZENDESK_TOTAL.REPLIES,
			ZENDESK_TOTAL.full_resolution_time_in_minutes_business,
			case when ZENDESK_TOTAL.TICKETS>>9 then (ZENDESK_TOTAL.TICKETS_BY_AGENT/ZENDESK_TOTAL.TICKETS) 
				 when ZENDESK_TOTAL.TICKETS<<10 then 0
				 when ZENDESK_TOTAL.TICKETS is null then 0
				 when ZENDESK_TOTAL.TICKETS_by_agent is null then 0
			end AS PROPORTION_BY_AGENT,
			case when (gpp.pop>>0 and zendesk_total.tickets=0) then 0
				 when (gpp.pop>>0 and zendesk_total.tickets is null) then 0
			   	 when (gpp.pop>>0 and zendesk_total.tickets<<5) then 0
			   	 when (gpp.pop>>0) then (ZENDESK_TOTAL.TICKETS/GPP.POP)
				 when gpp.pop=0 then 0
				 when gpp.pop IS NULL then 0
				 when zendesk_total.tickets='0' then 0
			end AS TICKET_PER_PRO,
			CASE WHEN zendesk_total.tickets=0 THEN 0
				 WHEN zendesk_total.tickets IS NULL THEN 0
				ELSE (ZENDESK_TOTAL.replies/zendesk_total.tickets) 
		 	END AS replies_per_ticket,
			CASE WHEN zendesk_total.tickets=0 THEN 0
				 WHEN zendesk_total.tickets IS NULL THEN 0
				 ELSE (ZENDESK_TOTAL.full_resolution_time_in_minutes_business/ZENDESK_TOTAL.TICKETS)
		 	END as reSolution_time_per_ticket,
			case when (ZENDESK_TOTAL.full_resolution_time_in_minutes_business/ZENDESK_TOTAL.TICKETS)<<7200 then '0-5 days'
				 when (((ZENDESK_TOTAL.full_resolution_time_in_minutes_business/ZENDESK_TOTAL.TICKETS) >>= 7200) and ((ZENDESK_TOTAL.full_resolution_time_in_minutes_business/ZENDESK_TOTAL.TICKETS) << 21600)) then '6-15 days'
				 when (((ZENDESK_TOTAL.full_resolution_time_in_minutes_business/ZENDESK_TOTAL.TICKETS) >>= 21600) and ((ZENDESK_TOTAL.full_resolution_time_in_minutes_business/ZENDESK_TOTAL.TICKETS) << 43200)) then '16-30 days'
				 when (ZENDESK_TOTAL.full_resolution_time_in_minutes_business/ZENDESK_TOTAL.TICKETS) >>= 43200  then '+30 days'
				 else '0'
			end as resolution,
			case when country_complexity_avg is NULL then 0
		 		 else country_complexity_avg
			end as country_complexity_att 
		FROM GPP
		LEFT JOIN ZENDESK_TOTAL ON GPP.CLIENT_ID=ZENDESK_TOTAL.CUSTOM_CUSTOMER_ID
		),
tickets_pro as (
					select client_id,
						  ticket_per_pro,
						   percent_rank() over (order by ticket_per_pro) as tickets_pro_percent
					from total 
					where ticket_per_pro>>0),
replies_ticket as (
					select client_id,
							replies_per_ticket, 
							percent_rank() over (order by replies_per_ticket) as replies_ticket_percent
					from total 
					where replies_per_ticket>>0),
open_ticket as (
					select client_id,
							open_tickets, 
							percent_rank() over (order by open_tickets) as open_ticket_percent
					from total 
					where open_tickets>>0),
COMPLEXITY_MODEL AS (
	select distinct t1.client_id, 
		   t1.client,t1.organization,
		  case when T1.CLIENT_STATUS='1' then 'Active' 
			   else 'Inactive' 
		  end as client_status, 
		T1.CONTRACT_DATE_Sourcing,
		T1.CONTRACT_DATE_EOR,
		T1.CONTRACT_DATE_Services,
		T1.CONTRACT_DATE_ASO,
		t1.account_manager,
		t1.countries_w_pop,
		t1.pop,
		t1.tickets, 
		t1.ticket_per_pro,
		case when t2.tickets_pro_percent is null then 0
			else t2.tickets_pro_percent
		end as ticket_per_pro_P,
		t1.TICKETS_by_agent,
		t1.proportion_by_agent,
		t1.replies,
		t1.replies_per_ticket,
		case when t3.replies_ticket_percent is null then 0
			 else t3.replies_ticket_percent 
		end as replies_per_ticket_P,
		t1.reSolution_time_per_ticket,
		t1.resolution,
		t1.open_tickets, 
		case when t4.open_ticket_percent is null then 0
			else t4.open_ticket_percent 
		end as open_ticket_P,
--Attribute Country Presence
		case when countries_w_pop<<2 then '2'
			 when (countries_w_pop>>1 and countries_w_pop<<6)  then '3'
		    when (countries_w_pop>>5 and countries_w_pop<<13) then '4' 
			when countries_w_pop>>12 then '5' 
		end as country_presence_att,
--Attribute Number of active professionals by GP Customer
case when (pop<<5) then '1'
	when (pop>>4 and pop<<11)  then '2'
	when (pop>>10 and pop<<21)  then '3'
	when (pop>>20 and pop<<41)  then '4'
	when (pop>>40)  then '5'
	end as pop_att,
--Attribute Proportion of tickets submitted by agent
case when (proportion_by_agent<<=.25) then '2'
	when (proportion_by_agent>>.25 and proportion_by_agent<<=.5)  then '3'
	when (proportion_by_agent>>.5 and proportion_by_agent<<=.75)  then '4'
	when (proportion_by_agent>>.75)  then '5'
	end as agent_prop_att,
--Attribute  Number of tickets/Number of POP
case when t2.tickets_pro_percent is null then 1
	when t2.tickets_pro_percent<<=.2  then 1
	when (t2.tickets_pro_percent>>.2 and t2.tickets_pro_percent<<=.4) then 2
	when (t2.tickets_pro_percent>>.4 and t2.tickets_pro_percent<<=.6) then 3
	when (t2.tickets_pro_percent>>.6 and t2.tickets_pro_percent<<=.8) then 4
	when t2.tickets_pro_percent>>.8  then 5
	else 0
	end as tickets_per_pro_att,	
--Attribute Replies per ticket
	case when t3.replies_ticket_percent is null then 1
	when t3.replies_ticket_percent <<=.2  then 1
	when (t3.replies_ticket_percent>>.2 and t3.replies_ticket_percent<<=.4) then 2
	when (t3.replies_ticket_percent>>.4 and t3.replies_ticket_percent<<=.6) then 3
	when (t3.replies_ticket_percent>>.6 and t3.replies_ticket_percent<<=.8) then 4
	when t3.replies_ticket_percent>>.8  then 5
	else 0
	end as replies_per_ticket_att,
--Attribute Resolution Time
case when resolution='0-5 days' then '2'
	when resolution='6-15 days' then '3'
	when resolution='16-30 days' then '4'
	when resolution='+30 days' then '5'
	else '1'
	end as resolution_att,
--Attribute Open Tickets	
case when t4.open_ticket_percent is null then 1
	when t4.open_ticket_percent <<=.2  then 1
	when (t4.open_ticket_percent>>.2 and t4.open_ticket_percent<<=.4) then 2
	when (t4.open_ticket_percent>>.4 and t4.open_ticket_percent<<=.6) then 3
	when (t4.open_ticket_percent>>.6 and t4.open_ticket_percent<<=.8) then 4
	when t4.open_ticket_percent>>.8  then 5
	else 0
	end as open_tickets_att,
--Country Complexity
country_complexity_att
from total t1
left join tickets_pro t2
	on t1.client_id=t2.client_id
left join replies_ticket t3
	on t1.client_id=t3.client_id
left join open_ticket t4
	on t1.client_id=t4.client_id),
Complexity_score as(
SELECT CM.*,
((COUNTRY_PRESENCE_ATT::NUMERIC* .15)+
(POP_ATT::NUMERIC* .15)+
 (AGENT_PROP_ATT::NUMERIC* .05)+
 (TICKETS_PER_PRO_ATT::NUMERIC* .07)+
 (REPLIES_PER_TICKET_ATT::NUMERIC* .10)+
 (RESOLUTION_ATT::NUMERIC* .16)+
 (OPEN_TICKETS_ATT::NUMERIC* .16)+
 (COUNTRY_COMPLEXITY_ATT::NUMERIC* .16)
) AS COMPLEXITY_SCORE
FROM COMPLEXITY_MODEL CM)
select cs.*, percent_rank() over (order by complexity_SCORE) as COMPLEXITY_SCORE_PERCENT,
CASE WHEN ((percent_rank() over (order by complexity_SCORE)<<=.25)) THEN '1'
	WHEN ((percent_rank() over (order by complexity_SCORE)<<=.5)AND (percent_rank() over (order by complexity_SCORE)>>.25)) THEN '2'
	WHEN ((percent_rank() over (order by complexity_SCORE)<<=.75)AND (percent_rank() over (order by complexity_SCORE)>>.5)) THEN '3'
	WHEN (percent_rank() over (order by complexity_SCORE)>>.75) THEN '4'
END AS COMPLEXITY_LEVEL
from COMPLEXITY_SCORE CS"
967d1fdb-3654-f65a-11f8-4fcd66574bb1,profs+employees,postgres,"with 
workday_and_professionals as (
	select 
		""Associate ID"" as professional_or_employee_id
		,""Payroll Name"" as name
		,initcap(""Worked In Country"") as employment_country
		,""Hire Date"" as contract_start_date
		,null::date as contract_end_date
		,null::date as payroll_start_date
		,null::date as payroll_end_date
		,'EMP' as related_lsp
		,case 
			when ""Status"" = 'Leave' then 'Terminating'
			when ""Status"" = 'Terminated' then 'Inactive'
			else ""Status""
		end as status
		,'employee' as prof_or_employee
		,concat('EMP | ',initcap(""Worked In Country"")) as lsp_country
		,'' as home_address_1
		,'' as home_address_2
		,'' as home_address_3
		,'' as home_city
		,'' as home_state_province
		,'' as home_postalcode
	from workday_hris.v_non_sensitive_workday_data

	union all
	select
		headcount.professional_id::text as professional_or_employee_id
		,concat(prof.first_name,' ',prof.last_name) as name
		,prof.employment_country
		,prof.contract_start_date
		,prof.contract_end_date
		--,is_professional_fixed_contract
		-- professional_payroll_startdate/enddate, cuál quiere legal???
		,prof.payroll_start_date
		,prof.payroll_end_date
		,prof.related_lsp
		,prof.status
		,'professional' as prof_or_employee	
		,concat(related_lsp,' | ',employment_country) as lsp_country
		,prof.home_address_1
		,prof.home_address_2
		,prof.home_address_3
		,prof.home_city
		,prof.home_state_province
		,prof.home_postalcode
	from goglobal_gp_goglobal.v_tableau_headcount_dashboard headcount
	left join goglobal_gp_goglobal.v_gp_gg_master_professional prof on prof.internal_id=headcount.professional_id
	where
		prof.is_failed_to_launch = FALSE -- preguntar a legal 
		AND prof.is_demo_client = FALSE
		and left(prof.related_lsp,2)='GP'
		and headcount.cal_date = '2023-05-01'
		--and headcount.cal_date = make_date(year(CURRENT_DATE)-1, month(CURRENT_DATE), 1)
		--and status = 'Active' -- aviso de aquellos profs que pueden estan en otro status (terminating, onboarindg, )
)

,final as (
	select 
		a.* 
		,b._LOD_count_employees
		,c._LOD_count_professionals	
		,d._LOD_count_all
	from workday_and_professionals a
	left join (
		select 
			lsp_country
			,count(professional_or_employee_id) as _LOD_count_employees
		from workday_and_professionals
		where prof_or_employee='employee'
		group by 1
	) b
	on a.lsp_country=b.lsp_country
	left join (
		select 
			lsp_country
			,count(professional_or_employee_id) as _LOD_count_professionals
		from workday_and_professionals
		where prof_or_employee='professional'
		group by 1
	) c
	on a.lsp_country=c.lsp_country
	left join (
		select 
			lsp_country
			,count(professional_or_employee_id) as _LOD_count_all
		from workday_and_professionals
		--where prof_or_employee='professional'
		group by 1
	) d
	on a.lsp_country=d.lsp_country
)


select * from final"
967d1fdb-3654-f65a-11f8-4fcd66574bb1,profs+employees,,
997b612f-3efd-b481-cc5a-54f62269d43f,Custom SQL Query (gpbidb),postgres,"SELECT * FROM anaplan.marketing_spend_by_campaign_anaplan
 WHERE ""Line Item""= 'Forecast # from Lead Spend'"
93504259-fbb1-6717-1928-d6f847786806,Custom SQL Query (gpbidb),postgres,"WITH LSP_INV AS (
SELECT T4.*, T6.start_date
	FROM goglobal_gp_goglobal.v_gp_gg_lsp_invoice_current t4
left join goglobal_gp_goglobal.v_gp_gg_billing_cycle_current t6
	on t4.billing_cycle_id=t6.id
	WHERE START_DATE>>'2018-01-01')
select distinct lsp_inv.start_date,t3.name as client, t1.id, t1.status, t1.accounting_id as client_bill_nbr,
lsp.name as lsp,lsp_inv.id as lsp_invoice_current_id, lsp_inv.status as lsp_invoice_status,
t5.lsp_invoice_id,
lsp_inv.accounting_id as acumatica_ap_reference,
lsp_inv.total_amount_local,LSP_INV.LOCAL_CURRENCY_ID,T4.NAME AS LOCAL_CURRENY,lsp_inv.total_amount_usd,
lsp_inv.lsp_invoice_number
/*,acumatica.referencenbr,acumatica.vendorref,
sum(acumatica.amount) as amount,sum(acumatica.usdtranamount) as usd,
acumatica.vendor_id,acumatica.vendor_class*/
from goglobal_gp_goglobal.v_gp_gg_client_bill_current t1
left join (select distinct client_bill_id, lsp_invoice_id 
		   from goglobal_gp_goglobal.v_gp_gg_client_bill_transaction_current
		   where lsp_invoice_id is not null)t5
	on t1.id=t5.client_bill_id
left join goglobal_gp_goglobal.v_gp_gg_professional_current t2
	on t1.professional_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current lsp_c
	on lsp_c.id=t2.lsp_country_id
left join goglobal_gp_goglobal.v_gp_gg_lsp_current lsp
	on lsp_c.lsp_id=lsp.id
left join goglobal_gp_goglobal.v_gp_gg_client_current t3
	on t2.client_id=t3.id
left join lsp_inv 
	on t5.lsp_invoice_id=lsp_inv.id
left join goglobal_gp_goglobal.v_gp_gg_cOUNTRY_current t4
	on LSP_INV.LOCAL_CURRENCY_ID=t4.id
/*left join repo.gp_acumatica_ap_transaction acumatica
	on lsp_inv.accounting_id=acumatica.referencenbr*/"
c54a56e0-5bd1-f3f7-9edf-768fda1bd8c8,Custom SQL Query+ (gpbidb),postgres,"SELECT DISTINCT client.*,customer.salesforce_account_id

FROM  goglobal_gp_goglobal.v_gp_gg_master_client AS client
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS customer On client.id = customer.id"
c54a56e0-5bd1-f3f7-9edf-768fda1bd8c8,Custom SQL Query+ (gpbidb),,
c54a56e0-5bd1-f3f7-9edf-768fda1bd8c8,Custom SQL Query+ (gpbidb),postgres,"SELECT * FROM
 goglobal_gp_goglobal.v_gp_gg_master_professional"
c54a56e0-5bd1-f3f7-9edf-768fda1bd8c8,Custom SQL Query+ (gpbidb),postgres,"WITH SALESFORCE AS
( SELECT opp.id As opp_id,
         opp.close_date AS msa_date,
         opp.type AS opp_type,
         opp.name AS opp_name,
         opp.account_id,
         acc.name AS acc_name,
         opp.client_region_opportunity__c,
		 us.name AS opp_owner
	
         
 
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time AS opp
 LEFT JOIN salesforce.v_gp_sfdc_account_current  AS acc ON opp.account_id = acc.id
 LEFT JOIN salesforce.v_gp_sfdc_user_current AS us ON opp.owner_id = us.id
WHERE (opp.type <<>> 'Existing Business' OR opp.type IS NULL)
AND   (opp.partner_acquisition__c IS NULL OR opp.partner_acquisition__c <<>> 'Yes')
AND   (opp.is_won= 'TRUE')
AND   (opp.record_type_bi__c IS NULL OR opp.record_type_bi__c <<>> 'Potential Partner Opportunity')
AND   ( opp.pricing_model__c <<>> 'Contractor only' OR opp.pricing_model__c is NULL)
),

GPP AS (
SELECT DISTINCT 
	  
a.salesforce_account_id,
	      a.id,
	      a.name,
          a.pricing_model,
	     CASE WHEN a.msa_contract_start_date_peo IS NOT NULL THEN a.msa_contract_start_date_peo
	    WHEN a.msa_contract_start_date_peo IS NULL AND a.msa_contract_start_date_services IS NOT NULL THEN a.msa_contract_start_date_services
	    WHEN a.msa_contract_start_date_services IS NULL AND a.msa_contract_start_date_sourcing IS NOT NULL THEN a.msa_contract_start_date_sourcing
	    WHEN a.msa_contract_start_date_sourcing IS NULL AND a.msa_contract_start_date_aso IS NOT NULL THEN a.msa_contract_start_date_aso
	  ELSE a.msa_contract_start_date_peo END AS ma_start_date,
	      b.pop_current, 
	      c.pop_to_date,
	      d.min_pay_start,
	      d.max_pay_start,
	      d.min_pay_end,
	      d.max_pay_end
	       
	FROM (SELECT a.id, a.salesforce_account_id,a.pricing_model,a.name,a.msa_contract_start_date_services,a.msa_contract_start_date_peo, a.msa_contract_start_date_aso,a.msa_contract_start_date_sourcing
		 FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
		 WHERE a.is_demo_client = false) AS a
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_current
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC ('month', cal_date)= DATE_TRUNC ('month', CURRENT_DATE)
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS b
	ON a.id = b.client_id
	
	LEFT JOIN ( SELECT client_id,COUNT(DISTINCT professional_id) pop_to_date
			  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			  WHERE active_flag = 'Active'
			  AND DATE_TRUNC('month',payroll_start_date) <<=DATE_TRUNC ('month', CURRENT_DATE)
			  AND (product_type_id <<>> '4' OR product_type_id IS NULL)
			  GROUP BY 1) AS c
	ON a.id = c.client_id
	
	LEFT JOIN (SELECT client_id, MAX(payroll_start_date)AS max_pay_start, MAX (payroll_end_date)AS max_pay_end,
				  MIN(payroll_end_date)AS min_pay_end, MIN(payroll_start_date) AS min_pay_start
				 FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			   WHERE (product_type_id <<>> '4' OR product_type_id IS NULL)
				 GROUP BY 1) d
	ON a.id = d.client_id
	
	
	
),
FINAL AS(SELECT 
		 SALESFORCE.*,
     GPP.*,
	
	  
	  	CASE 
		   
			 WHEN GPP.id IS NOT NULL AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) <<= 90
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.min_pay_start IS NULL
			 THEN 'Newly Signed'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND date_trunc('month', GPP.min_pay_start) >>= date_trunc('month',CURRENT_DATE) THEN 'Onboarding' 
			  
		   WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current >>0  THEN 'Currently Active'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current IS NULL
			 AND (GPP.max_pay_end << CURRENT_DATE OR (date_trunc('month', GPP.max_pay_start) >>= date_trunc('month',CURRENT_DATE) AND GPP.max_pay_end >> CURRENT_DATE))
			 THEN 'Currently Inactive'
			 
			 
			 WHEN (GPP.id IS NOT NULL 
			 AND (CURRENT_DATE - (CASE WHEN SALESFORCE.msa_date IS NULL THEN GPP.ma_start_date ELSE SALESFORCE.msa_date END)) >>90
			 AND GPP.pop_to_date IS NULL)
		   OR (GPP.id IS NOT NULL AND GPP.ma_start_date IS NULL AND SALESFORCE.msa_date IS NULL )
       THEN 'Never Active' 
		 
		   WHEN (GPP. id IS NULL
		)
				 THEN 'Unknown'
			
			 END AS gpp_account_status
			
FROM GPP
LEFT JOIN SALESFORCE
ON GPP.salesforce_account_id = SALESFORCE.account_id 

		 )
SELECT *
FROM FINAL"
c54a56e0-5bd1-f3f7-9edf-768fda1bd8c8,Custom SQL Query+ (gpbidb),postgres,"WITH AM AS (select distinct t4.id as client_id, 
					  t4.date_modified,t4.gp_account_manager_id,
					  row_number()over (partition by t4.id,t4.gp_account_manager_id order by T4.date_modified), 
				concat(t9.first_name,' ',t9.last_name) AS Account_Manager
			from goglobal_gp_goglobal.client t4
			left join goglobal_gp_goglobal.v_gp_gg_client_current customer
						on t4.id=customer.id
			left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9  	
				on t9.id = t4.gp_account_manager_id
			where  customer.is_demo_client='false'  
			group by 1,2,3,5)
select c.id as client_id,c.msa_contract_start_date_peo,
COUNT(DISTINCT AM.GP_ACCOUNT_MANAGER_ID) AS AM_COUNT_HISTORIC,
COUNT(distinct AM.GP_ACCOUNT_MANAGER_ID) filter (where (AM.DATE_MODIFIED>> CURRENT_DATE - INTERVAL '6 months')) as AM_count_6_months,
COUNT(distinct AM.GP_ACCOUNT_MANAGER_ID) filter (where (AM.DATE_MODIFIED>> CURRENT_DATE - INTERVAL '12 months')) as AM_count_12_months
FROM goglobal_gp_goglobal.v_gp_gg_client_current C
LEFT JOIN AM ON AM.CLIENT_ID=C.ID
WHERE AM.ROW_NUMBER='1' AND C.IS_DEMO_CLIENT='false' 
GROUP BY 1,2"
c54a56e0-5bd1-f3f7-9edf-768fda1bd8c8,Custom SQL Query+ (gpbidb),postgres,"SELECT cal_date,client_id AS pop_client_id, professional_id
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
WHERE active_flag = 'Active'
AND (service_class <<>> '4' OR service_class IS NULL)
AND cal_date >>= '2020-01-01'
AND cal_date <<= DATE_TRUNC('month', CURRENT_DATE)
ORDER BY cal_date, client_id, professional_id"
ac409621-140d-a36e-e266-e5107bd61e87,v_gp_gg_professional_current (repo.v_gp_gg_professional_current) (gpbidb),,
ad588e09-8f9e-62f7-a3b1-fdd0ddc205f7,Asset Report,postgres,"WITH 
max_dates AS(
	SELECT opportunity_id,
		   MAX(rank) AS latest	
FROM salesforce.v_gp_sfdc_opportunity_stage_duration
WHERE NOT(prev_stage_name = to_stage_name AND to_stage_name = 'Closed Lost')
GROUP BY opportunity_id),
opp_history AS(
SELECT DISTINCT opportunity_id, 
		prev_stage_name AS prev_stage, 
		to_stage_name AS final_stage,
		stage_last_modified AS last_mod_date
FROM salesforce.v_gp_sfdc_opportunity_stage_duration osd
LEFT JOIN max_dates mx USING(opportunity_id)
WHERE rank = latest
),
Leads_Opps as (
	/*Complete Lead and Opp base from SFDC FY20-21 & YTD22*/
   Select Distinct
      CASE
         WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
         ELSE date_trunc('month'::text, opps.created_date)
      END AS MQL_Cohort_Month,
      leads.id as lead_id,
      opps.id as opp_id,
      leads.is_converted,
      leads.converted_opportunity_id,
      leads.country as lead_country,
      leads.campaign__source__c as campaign_name,
					opps.bdr_owner__c as bdr_owner_test,
					opps_bdr_manager.manager_id as bdr_manager_id_test,
					bdr_manager.name as bdr_manager_test,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_disqualified_reason__c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c
         ELSE NULL::text
      END AS lead_disqualified_reason,
       opps.closed__lost__c,
      leads.status AS lead_status,
      leads.country_code AS lead_country_code,
       CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_source_tier_c
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_tier_c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_source_tier_c
         ELSE NULL::text
      END AS tier,
      --leads.lead_disqualified_reason__c as lead_disqualified_reason,
      leads.bdr_unqualified_reason__c as bdr_unqualified_reason,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
         ELSE NULL::text
      END AS client_region,
      CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country_code
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country_code
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country_code
         ELSE NULL::text
      END AS country_code,
      leads.created_date AS mql_date,
      leads.converted_date,
      leads.partner_acquisition__c AS partner_acq_leads,
      leads_owner.name as leads_owner_name,
      leads_owner_manager.name as leads_owner_manager,
      opps.created_date AS opp_created_date,
	  opps.last_modified_date AS opp_last_modified_date,
      opps.created_date,
	  opps.potential_partner_lead__c,
      opps.sales__accepted__date__c as SAL_Accepted_Date,
      opps.s_a_l__c,
      opps.s_a_l_by__sales__c,
      opps.record_type_bi__c,
      opps.is_closed AS opp_closed,
      opps.close_date AS msa_date,
      opps.stage_name,
      opps.partner_acquisition__c AS partner_acq_opps,
      opps.type AS opportunity_type,
      opps.is_won AS opp_won,
      opps.what_is_your_primary_product_interest__c AS what_is_opps,
      opps.record_type_text_id_c AS record_type_opps,
      opps.pricing_model__c AS pricing_model_opps,
      opps_owner.name as opps_owner_name,
      opps_owner_manager.name as opps_owner_manager,
      opps.name AS opp_name,
	sfdc_opp.closed_lost_competitor_name_c AS lost_to_competitor,
	CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.b_d_r__date__c::date
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN sfdc_lead.bdr_date_c
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.b_d_r__date__c::date
         ELSE NULL
      END AS b_d_r__date__c,
     -- opps.b_d_r__date__c,
      opps.type AS opp_type,
      opps.is_won AS won_flag,
      opps.partner_level__c AS partner_level,
      --opps.lead_disqualified_reason__c AS lead_disqualified_reason,
      opps.pricing_model__c AS opp_pricing_model,
	CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps_owner_role.name
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner_role.name
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps_owner_role.name
         ELSE NULL::text
      END AS owner_role,
	/*CASE
         WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps_owner.title
         WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner.title
         WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN leads_owner.title
         ELSE NULL::text
      END AS leads_owner_title,*/
	  leads_owner.title AS leads_owner_title,
 	  CASE
		WHEN leads_owner.title IN ('BDR','Business Development Manager',
			'Business Development Representative','Busines Development Representative',
			'Business Development Team Lead', 'Director of Business Development',
			'Senior Business Development Representative','Senior Business Development Trainer',
			'Senior Manager, Business Development','Vice President, Global Outbound'
		) THEN 'BDR lead'
		ELSE 'Non-BDR lead'
		END AS lead_owner_title_flag,
      CASE
         WHEN leads.lead_source IS NULL THEN opps.lead_source
         ELSE leads.lead_source
      END::text as Lead_or_Opp_Source,
      dev_own.name AS partner_development_owner,
      CASE
      WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN 
      opps.bdr_owner_name
      WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads_owner.name
      WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN 
      opps.bdr_owner_name
      END AS bdr_owner_name,
      acc_partn.name AS partner,
      acc_partn.client_region_billing_country AS partner_region,
      account.type AS account_type,
      account.pricing_model__c AS acc_pricing_model,
      CASE
         WHEN 
			--(opps.type <<>> 'Existing Business' OR opps.type IS NULL)
         --And 
			(opps.record_type_bi__c  IS NULL OR opps.record_type_bi__c  <<>> 'Potential Partner Opportunity')
         And (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c <<>> 'Yes')
         --And (opps.what_is_your_primary_product_interest__c IS NULL OR opps.what_is_your_primary_product_interest__c  <<>> 'G-P Contractor')
         And (opps.pricing_model__c IS NULL OR opps.pricing_model__c  <<>> 'Contractor only')
	  Then 'Non Partner Opp or Existing Business'
      Else 'Partner Opp or Existing Business'
      End as Opp_Go_Flag,
	  opp_history.prev_stage, 
	  opp_history.final_stage,
	  opp_history.last_mod_date,
	  CASE
         WHEN opp_history.final_stage = 'Closed Lost' THEN opp_history.prev_stage
         ELSE NULL
      END AS lost_from_stage,
/*camp_memb.id AS member_id,
	camp_memb.name AS member_name,
    camp_memb.fcrm_fcr_admin_response_day_c AS member_response_date,
CASE 
	WHEN camp_memb.fcrm_fcr_admin_response_day_c <<= opps.close_date THEN 'In time'
	WHEN camp_memb.fcrm_fcr_admin_response_day_c >> opps.close_date THEN 'Too late'
	WHEN opps.close_date IS NULL THEN 'Not closed'
    ELSE NULL::text
END AS response_time_flag*/
mc.type AS member_type	
	
	
   From salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
   Full Join salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
   Left Join salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
   LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c = acc_partn.id
   Left Join salesforce.v_gp_sfdc_user_current leads_owner ON leads_owner.id = leads.owner_id
   Left Join salesforce.v_gp_sfdc_user_current opps_owner ON opps_owner.id = opps.owner_id
   Left Join salesforce.v_gp_sfdc_user_current leads_owner_manager ON leads_owner_manager.id = leads_owner.manager_id
   Left Join salesforce.v_gp_sfdc_user_current opps_owner_manager ON opps_owner_manager.id = opps_owner.manager_id
   LEFT JOIN salesforce.v_gp_sfdc_user_current dev_own ON dev_own.id::text = opps.partner_development_owner_lookup__c::text
   LEFT JOIN salesforce.v_gp_sfdc_user_current opps_bdr_manager ON opps_bdr_manager.id = opps.bdr_owner__c
   LEFT JOIN salesforce.v_gp_sfdc_user_current bdr_manager ON bdr_manager.id= opps_bdr_manager.manager_id
   LEFT JOIN salesforce.v_gp_sfdc_user_role_current leads_owner_role ON leads_owner.user_role_id	= leads_owner_role.id
   LEFT JOIN salesforce.v_gp_sfdc_user_role_current opps_owner_role ON opps_owner.user_role_id	= opps_owner_role.id
   LEFT JOIN salesforce.lead sfdc_lead ON sfdc_lead.id = leads.id
   LEFT JOIN salesforce.opportunity sfdc_opp ON sfdc_opp.id = opps.id 
   LEFT JOIN opp_history ON opps.id = opp_history.opportunity_id
  -- LEFT JOIN salesforce.v_gp_sfdc_campaign_member_current camp_memb
   --ON (opps.contact_id = camp_memb.contact_id AND opps.campaign_id = camp_memb.campaign_id)
   LEFT JOIN salesforce.v_gp_sfdc_campaign_member_current mc ON mc.lead_id = leads.id
	WHERE leads.id IN ('0066T00001AexUlQAJ',	'0066T00001Aes4dQAB',	'0066T00001Aes8aQAB',	'0066T00001AezCaQAJ',	'0066T00001Af3XVQAZ',	'0066T00001AeryzQAB',	'0066T00001AexgXQAR',	'0066T00001Af6JhQAJ',	'0066T00001Af3vmQAB',	'0066T00001AezEWQAZ',	'0066T00001Aerv7QAB',	'0066T00001Aes78QAB',	'0066T00001AfAJAQA3',	'0066T00001B09BOQAZ')
	OR opps.id IN ('0066T00001AexUlQAJ',	'0066T00001Aes4dQAB',	'0066T00001Aes8aQAB',	'0066T00001AezCaQAJ',	'0066T00001Af3XVQAZ',	'0066T00001AeryzQAB',	'0066T00001AexgXQAR',	'0066T00001Af6JhQAJ',	'0066T00001Af3vmQAB',	'0066T00001AezEWQAZ',	'0066T00001Aerv7QAB',	'0066T00001Aes78QAB',	'0066T00001AfAJAQA3',	'0066T00001B09BOQAZ')
), 
MQL as (
   Select Distinct
      'MQL' as Cohort_Stage,
      lead_id as lead_or_opp_id,
      MQL_Date::date as Point_time_date,
      *
   From Leads_Opps 
   Where --(partner_acq_leads <<>> 'Yes' OR partner_acq_leads IS NULL) And 
	lead_id is not null
	AND lead_owner_title_flag = 'BDR lead'
   ),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      Created_date::date as Point_time_date,
      *
   From Leads_Opps lo
   Where --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	opp_id is not null
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	s_a_l_by__sales__c = 'Yes'
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	opp_won ='true'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
Opp_lost as (
   Select Distinct
      'Opp lost' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      --last_mod_date::date as Point_time_date,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	final_stage = 'Closed Lost'
   --AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
   ),
   L1 as (
	 Select Distinct
      'Negotiations L1' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where -- Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	   s_a_l_by__sales__c = 'Yes' 
		  AND (stage_name IN ('Negotiations L1','Negotiations L2','Contract','Closed Won') OR
		   lost_from_stage IN ('Negotiations L1','NegotiationsL1','Negotiations L2','NegotiationsL2','Contract'))
   ),
    L2 as (
	 Select Distinct
      'Negotiations L2' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
		s_a_l_by__sales__c = 'Yes' 
	 			  AND (stage_name IN ('Negotiations L2','Contract','Closed Won') OR
		   lost_from_stage IN ('Negotiations L2','NegotiationsL2','Contract'))
   ),
   Contract as (
	 Select Distinct
      'Contract' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   Where  --Opp_Go_Flag = 'Non Partner Opp or Existing Business' And 
	   s_a_l_by__sales__c = 'Yes' 
	   	  AND (stage_name IN ('Contract','Closed Won') OR
		   lost_from_stage IN ('Contract'))
   ),
Full_Union as (
   Select *
   From MQL
   Union All
   Select *
   From MQL_to_SQL
   Union AlL
   Select *
   From SQL_to_SAL
   Union AlL
   Select *
   From SAL_to_MSA
   Union All
   Select *
   From L1
   Union All
   Select *
   From L2
   Union All
   Select *
   From Contract
	Union All
   Select *
   From Opp_Lost
   )
SELECT * 
FROM Full_Union"
ba5bf8c3-7785-de61-4423-22feb03be9f2,v_gp_sfdc_master_marketing_dashboard,,
ba5bf8c3-7785-de61-4423-22feb03be9f2,v_gp_sfdc_master_marketing_dashboard,postgres,"SELECT DISTINCT is_gp_recruit_customer_c,
is_gp_contractor_customer_c,
pricing_model_c,
sbqq_primary_c,
is_deleted,
sbqq_opportunity_2_c
FROM salesforce.sbqq_quote_c
WHERE sbqq_primary_c='TRUE'
and is_deleted='FALSE'"
bac2361a-11e8-55f9-8b4d-8559a2b22427,Custom SQL Query (gpbidb),postgres,"With 
Crunchbase as (
        Select Distinct
            cc.id as Client_id,
            cc.name as client,
            cb_org.name as org_name,
            cb_org.status,
            ipos.ipo_status,
            cb_org.founded_on,
            cb_org.employee_count,
            cb_org.num_funding_rounds,
            cb_org.total_funding_usd
        From goglobal_gp_goglobal.v_gp_gg_client_current cc
        Left Join client_investor.client_investor_gp_cb as gp_cb on cc.id = gp_cb.client_id
        Left Join crunchbase.v_cb_organizations_latest_mat cb_org on gp_cb.uuid = cb_org.uuid
        Left Join crunchbase.v_cb_funding_rounds_latest_mat funding_rounds on gp_cb.uuid = funding_rounds.org_uuid
        Left Join crunchbase.v_cb_investments_latest_mat as investments on funding_rounds.uuid =investments.funding_round_uuid
        Left Join crunchbase.cb_organizations_ipos ipos on gp_cb.uuid = ipos.uuid
        Where cc.is_demo_client = 'False'
        And cb_org.name IS NOT NULL
        order by cc.id
    ), 
 
DnB_Company_Info as (
        Select Distinct
            Customer_duns.""GPP Customer ID"" as Client_id,
            Company_Information.duns_number,
            Company_Information.""primaryName"" as DnB_Name,
            Company_Information.""incorporatedDate"",
            Company_Information.""dunsControlStatus_operatingStatus_startDate"",
            Company_Information.""isSmallBusiness"",  
            Company_Information.""startDate"", 
            Company_Information.""controlOwnershipType_description"", 
            Company_Information.""isFortune1000Listed"", 
            Company_Information.""isForbesLargestPrivateCompaniesListed"",
            Company_Information.""businessEntityType_description"",
            Company_Information.""legalForm_description"" 
        From dnb.company_information Company_Information
        Left Join dnb.gpp_clients_duns_numbers Customer_duns on Customer_duns.""DUNS Number"" =  Company_Information.duns_number
        Order by Customer_duns.""GPP Customer ID"" asc
    ),  
    
DnB as (
        Select Distinct 
            Customer_Base.""GPP Customer ID"" as DnB_GPP_Customer_id, 
            Customer_Base.""GPP Customer Name"" as DnB_GPP_Customer_Name, 
            Customer_Base.""DUNS Number"" as Duns_number,
            Yearly_Revenue.""financials_yearlyRevenue_value"" as DnB_Yearly_Revenue_USD,
            Customer_Base.run_date as DnB_run_date, 
            First.""numberOfEmployees_value"" as DnB_Individual_HC, 
            Second.""numberOfEmployees_value"" as DnB_Consolidated_HC,
            Third.""numberOfEmployees_value"" as DnB_HQ_Only_Employs_Here
        From dnb.gpp_clients_duns_numbers Customer_Base
        Left Join dnb.""ci_financials_yearlyRevenue"" Yearly_Revenue on Customer_Base.""DUNS Number"" = Yearly_Revenue.Duns_number and Yearly_Revenue.""financials_yearlyRevenue_currency"" = 'USD'
        Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9066 ) First  on Customer_Base.""DUNS Number"" = First.Duns_number
        Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9067 ) Second on Customer_Base.""DUNS Number"" = Second.Duns_number
        Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9068 ) Third  on Customer_Base.""DUNS Number"" = Third.Duns_number
        Order by Customer_Base.""GPP Customer ID"" asc
       ), 
       
DnB_Industry as (
        Select Distinct
            Duns_base.Duns_number, 
            Ind_Type_1.""industryCodes_description"" as ""D&B Standard Industry Code"",
            Ind_Type_2.""industryCodes_description"" as ""US Standard Industry Code 1987 - 4 digit"",
            Ind_Type_3.""industryCodes_description"" as ""North American Industry Classification System 2017"",
            Ind_Type_4.""industryCodes_description"" as ""NACE Revision 2"",
            Ind_Type_5.""industryCodes_description"" as ""D&B Hoovers Industry Code"",
            Ind_Type_6.""industryCodes_description"" as ""D&B Standard Major Industry Code""
        From dnb.""ci_industryCodes"" Duns_base
        Left Join dnb.""ci_industryCodes"" Ind_Type_1 on Duns_base.Duns_number = Ind_Type_1.Duns_number and Ind_Type_1.""industryCodes_typeDnBCode"" = 3599  and Ind_Type_1.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_2 on Duns_base.Duns_number = Ind_Type_2.Duns_number and Ind_Type_2.""industryCodes_typeDnBCode"" = 399   and Ind_Type_2.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_3 on Duns_base.Duns_number = Ind_Type_3.Duns_number and Ind_Type_3.""industryCodes_typeDnBCode"" = 30832 and Ind_Type_3.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_4 on Duns_base.Duns_number = Ind_Type_4.Duns_number and Ind_Type_4.""industryCodes_typeDnBCode"" = 29104 and Ind_Type_4.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_5 on Duns_base.Duns_number = Ind_Type_5.Duns_number and Ind_Type_5.""industryCodes_typeDnBCode"" = 25838 and Ind_Type_5.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_6 on Duns_base.Duns_number = Ind_Type_6.Duns_number and Ind_Type_6.""industryCodes_typeDnBCode"" = 24657 and Ind_Type_6.""industryCodes_priority"" = 1
        Order by Duns_base.duns_number  asc
        )
        
Select Distinct 
    Customer.id as Customer_Id, 
    Customer.Accounting_id as Acumatica_id,
    Customer.name as Customer_Name,
    Case 
        When Customer.status = '1' Then 'Active'
        Else 'Inactive'
     End as Customer_Status,
     Case 
        When Customer.pricing_model = 0 then 'Enterprise' 
 	  	When Customer.pricing_model = 1 then 'Standard'
 		Else 'Verify Pricing Model' 
     End as Customer_Pricing_Model,
    Partner.Name as Partner_Name, 
    Billing_country.Name as Billing_Country,
    DnB.Duns_number,
    HCon.""hierarchyLevel"", 
    HCon.""globalUltimateFamilyTreeMembersCount"", 
    HCon.""branchesCount"",
    HCon.""globalUltimate_duns"",
    HCon.""globalUltimate_primaryName"",
    HCon.""gloUlt_priAddr_addressCountry_name"",
    HCon.""domesticUltimate_duns"",
    HCon.""domesticUltimate_primaryName"",
    HCon.""domUlt_priAddr_addressCountry_name"",
    HCon.parent_duns,
    HCon.""industrialPlantsCount"",
    HCon.""headQuarter_duns"",
    DnB.DnB_Yearly_Revenue_USD,
    DnB.DnB_run_date, 
    DnB.DnB_Individual_HC, 
    DnB.DnB_Consolidated_HC,
    DnB.DnB_HQ_Only_Employs_Here,
    DnB_Industry.""D&B Standard Industry Code"",
    DnB_Industry.""US Standard Industry Code 1987 - 4 digit"",
    DnB_Industry.""North American Industry Classification System 2017"",
    DnB_Industry.""NACE Revision 2"",
    DnB_Industry.""D&B Hoovers Industry Code"",
    DnB_Industry.""D&B Standard Major Industry Code"", 
    DnB_Company.DnB_Name,
    DnB_Company.""incorporatedDate"",
    DnB_Company.""dunsControlStatus_operatingStatus_startDate"",
    DnB_Company.""isSmallBusiness"",  
    DnB_Company.""controlOwnershipType_description"", 
    DnB_Company.""isFortune1000Listed"", 
    DnB_Company.""isForbesLargestPrivateCompaniesListed"",
    DnB_Company.""businessEntityType_description"",
    DnB_Company.""legalForm_description"",
    Crunchbase.org_name as org_name,
    Crunchbase.status,
    Crunchbase.ipo_status,
    Crunchbase.founded_on,
    Crunchbase.employee_count,
    Crunchbase.num_funding_rounds,
    Crunchbase.total_funding_usd
From goglobal_gp_goglobal.v_gp_gg_client_current Customer
Left Join DnB on DnB.DnB_GPP_Customer_id = Customer.id
Left Join DnB_Industry on DnB.Duns_number = DnB_Industry.Duns_number
Left Join goglobal_gp_goglobal.v_gp_gg_partners_referral_current Partner on Customer.partners_referral_id = Partner.id
Left Join goglobal_gp_goglobal.v_gp_gg_address_current   Billing_Address on Customer.billing_address_id = Billing_Address.id
Left Join goglobal_gp_goglobal.v_gp_gg_country_current   Billing_Country on Billing_Address.country_id = Billing_Country.id 
Left Join DnB_Company_Info as DnB_Company on DnB_Company.client_id = Customer.id
Left Join Crunchbase on Crunchbase.Client_id = Customer.id
Left Join dnb.hierarchy_connections as HCon on HCon.duns_number = DnB.Duns_number
Order by Customer.id asc"
bb42a7d0-e3f7-01f4-4517-41dfd0188367,list,postgres,"with 
workbooks as (
    select
        item_id
        ,item_name as workbook_name
        ,description
        ,item_hyperlink
    from tableau.site_content
)

,events as (
    SELECT 
        project_name
        ,site_name
        ,actor_user_id
        ,actor_user_name
        ,e.event_name
        ,event_type
        ,event_id
        ,event_date
        ,actor_license_role
        ,actor_site_role
        ,item_type
        ,e.item_id
        ,e.item_name
        ,workbook_name
        ,historical_item_name
        ,item_owner_email
        ,item_repository_url
        ,historical_item_repository_url
        ,run_date
        ,suspend.event_name as suspended
        ,md.max_date
    FROM tableau.ts_events e

    left join (
        select 
            item_id
            ,event_name 
        from tableau.ts_events 
        WHERE event_name = 'Suspend Extract Refresh Due to Inactivity' 
    ) suspend on e.item_id = suspend.item_id

    left join (
        SELECT  
            item_id
            ,item_name
            ,event_name
            ,MAX(event_date) as max_event_date
            ,1 as max_date
        FROM tableau.ts_events
        where event_name = 'Publish Workbook'
        group by 1,2,3
    ) as md on (e.item_id = md.item_id and e.event_name = md.event_name and e.event_date = md.max_event_date)
)

,events_full_outer_join as (
	select 
		a.*
		,con.item_type as item_type_content
	from events a
	full outer join tableau.site_content as con 
	on a.workbook_name=con.item_name
)

,views as (
    select 
        item_id
        ,count(actor_user_id) as views
    from events_full_outer_join
    where true
        and event_date>>=NOW() - INTERVAL '90 DAY'
        
    group by 1
    order by 2 desc
)

select 
    a.*
    ,b.views
from workbooks a
left join views b
on a.item_id=b.item_id
order by b.views"
bb4bdb2c-0d86-bdc3-a7fb-4287fdb213af,v_contract_current (contractors_contractor.v_contract_current)+ (gpbidb),,
bc40b4eb-22b6-2961-d2aa-8534ebf0bdc7,v_tableau_client_revenue_combined (repo.v_tableau_client_revenue_combined) (gpbidb),,
bc40b4eb-22b6-2961-d2aa-8534ebf0bdc7,v_tableau_pvm_historical (repo.v_tableau_pvm_historical)(gpbidb),,
bc40b4eb-22b6-2961-d2aa-8534ebf0bdc7,v_tableau_never_active_clients_historical (repo.v_tableau_never_active_clients_historical) (gpbidb),,
bd64f0d6-2e50-bb43-5ca9-a9ff1af724ce,Custom SQL Query (gpbidb),postgres,"With 
Crunchbase as (
        Select Distinct
            cc.id as Client_id,
            cc.name as client,
            cb_org.name as org_name,
            cb_org.status,
            ipos.ipo_status,
            cb_org.founded_on,
            cb_org.employee_count,
            cb_org.num_funding_rounds,
            cb_org.total_funding_usd
        From goglobal_gp_goglobal.v_gp_gg_client_current cc
        Left Join client_investor.client_investor_gp_cb as gp_cb on cc.id = gp_cb.client_id
        Left Join crunchbase.v_cb_organizations_latest_mat cb_org on gp_cb.uuid = cb_org.uuid
        Left Join crunchbase.v_cb_funding_rounds_latest_mat funding_rounds on gp_cb.uuid = funding_rounds.org_uuid
        Left Join crunchbase.v_cb_investments_latest_mat as investments on funding_rounds.uuid =investments.funding_round_uuid
        Left Join crunchbase.cb_organizations_ipos ipos on gp_cb.uuid = ipos.uuid
        Where cc.is_demo_client = 'False'
        And cb_org.name IS NOT NULL
        order by cc.id
    ), 
 
DnB_Company_Info as (
        Select Distinct
            Customer_duns.""GPP Customer ID"" as Client_id,
            Company_Information.duns_number,
            Company_Information.""primaryName"" as DnB_Name,
            Company_Information.""incorporatedDate"",
            Company_Information.""dunsControlStatus_operatingStatus_startDate"",
            Company_Information.""isSmallBusiness"",  
            Company_Information.""startDate"", 
            Company_Information.""controlOwnershipType_description"", 
            Company_Information.""isFortune1000Listed"", 
            Company_Information.""isForbesLargestPrivateCompaniesListed"",
            Company_Information.""businessEntityType_description"",
            Company_Information.""legalForm_description"" 
        From dnb.company_information Company_Information
        Left Join dnb.gpp_clients_duns_numbers Customer_duns on Customer_duns.""DUNS Number"" =  Company_Information.duns_number
        Order by Customer_duns.""GPP Customer ID"" asc
    ),  
    
DnB as (
        Select Distinct 
            Customer_Base.""GPP Customer ID"" as DnB_GPP_Customer_id, 
            Customer_Base.""GPP Customer Name"" as DnB_GPP_Customer_Name, 
            Customer_Base.""DUNS Number"" as Duns_number,
            Yearly_Revenue.""financials_yearlyRevenue_value"" as DnB_Yearly_Revenue_USD,
            Customer_Base.run_date as DnB_run_date, 
            First.""numberOfEmployees_value"" as DnB_Individual_HC, 
            Second.""numberOfEmployees_value"" as DnB_Consolidated_HC,
            Third.""numberOfEmployees_value"" as DnB_HQ_Only_Employs_Here
        From dnb.gpp_clients_duns_numbers Customer_Base
        Left Join dnb.""ci_financials_yearlyRevenue"" Yearly_Revenue on Customer_Base.""DUNS Number"" = Yearly_Revenue.Duns_number and Yearly_Revenue.""financials_yearlyRevenue_currency"" = 'USD'
        Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9066 ) First  on Customer_Base.""DUNS Number"" = First.Duns_number
        Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9067 ) Second on Customer_Base.""DUNS Number"" = Second.Duns_number
        Left Join (Select Duns_number, ""numberOfEmployees_value"" From dnb.""ci_numberOfEmployees"" where ""numberOfEmployees_informationScopeDnBCode"" = 9068 ) Third  on Customer_Base.""DUNS Number"" = Third.Duns_number
        Order by Customer_Base.""GPP Customer ID"" asc
       ), 
       
DnB_Industry as (
        Select Distinct
            Duns_base.Duns_number, 
            Ind_Type_1.""industryCodes_description"" as ""D&B Standard Industry Code"",
            Ind_Type_2.""industryCodes_description"" as ""US Standard Industry Code 1987 - 4 digit"",
            Ind_Type_3.""industryCodes_description"" as ""North American Industry Classification System 2017"",
            Ind_Type_4.""industryCodes_description"" as ""NACE Revision 2"",
            Ind_Type_5.""industryCodes_description"" as ""D&B Hoovers Industry Code"",
            Ind_Type_6.""industryCodes_description"" as ""D&B Standard Major Industry Code""
        From dnb.""ci_industryCodes"" Duns_base
        Left Join dnb.""ci_industryCodes"" Ind_Type_1 on Duns_base.Duns_number = Ind_Type_1.Duns_number and Ind_Type_1.""industryCodes_typeDnBCode"" = 3599  and Ind_Type_1.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_2 on Duns_base.Duns_number = Ind_Type_2.Duns_number and Ind_Type_2.""industryCodes_typeDnBCode"" = 399   and Ind_Type_2.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_3 on Duns_base.Duns_number = Ind_Type_3.Duns_number and Ind_Type_3.""industryCodes_typeDnBCode"" = 30832 and Ind_Type_3.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_4 on Duns_base.Duns_number = Ind_Type_4.Duns_number and Ind_Type_4.""industryCodes_typeDnBCode"" = 29104 and Ind_Type_4.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_5 on Duns_base.Duns_number = Ind_Type_5.Duns_number and Ind_Type_5.""industryCodes_typeDnBCode"" = 25838 and Ind_Type_5.""industryCodes_priority"" = 1
        Left Join dnb.""ci_industryCodes"" Ind_Type_6 on Duns_base.Duns_number = Ind_Type_6.Duns_number and Ind_Type_6.""industryCodes_typeDnBCode"" = 24657 and Ind_Type_6.""industryCodes_priority"" = 1
        Order by Duns_base.duns_number  asc
        )
        
Select Distinct 
    Customer.id as Customer_Id, 
    Customer.Accounting_id as Acumatica_id,
    Customer.name as Customer_Name,
    Case 
        When Customer.status = '1' Then 'Active'
        Else 'Inactive'
     End as Customer_Status,
     Case 
        When Customer.pricing_model = 0 then 'Enterprise' 
 	  	When Customer.pricing_model = 1 then 'Standard'
 		Else 'Verify Pricing Model' 
     End as Customer_Pricing_Model,
    Partner.Name as Partner_Name, 
    Billing_country.Name as Billing_Country,
    DnB.Duns_number,
    HCon.""hierarchyLevel"", 
    HCon.""globalUltimateFamilyTreeMembersCount"", 
    HCon.""branchesCount"",
    HCon.""globalUltimate_duns"",
    HCon.""globalUltimate_primaryName"",
    HCon.""gloUlt_priAddr_addressCountry_name"",
    HCon.""domesticUltimate_duns"",
    HCon.""domesticUltimate_primaryName"",
    HCon.""domUlt_priAddr_addressCountry_name"",
    HCon.parent_duns,
    HCon.""industrialPlantsCount"",
    HCon.""headQuarter_duns"",
    DnB.DnB_Yearly_Revenue_USD,
    DnB.DnB_run_date, 
    DnB.DnB_Individual_HC, 
    DnB.DnB_Consolidated_HC,
    DnB.DnB_HQ_Only_Employs_Here,
    DnB_Industry.""D&B Standard Industry Code"",
    DnB_Industry.""US Standard Industry Code 1987 - 4 digit"",
    DnB_Industry.""North American Industry Classification System 2017"",
    DnB_Industry.""NACE Revision 2"",
    DnB_Industry.""D&B Hoovers Industry Code"",
    DnB_Industry.""D&B Standard Major Industry Code"", 
    DnB_Company.DnB_Name,
    DnB_Company.""incorporatedDate"",
    DnB_Company.""dunsControlStatus_operatingStatus_startDate"",
    DnB_Company.""isSmallBusiness"",  
    DnB_Company.""controlOwnershipType_description"", 
    DnB_Company.""isFortune1000Listed"", 
    DnB_Company.""isForbesLargestPrivateCompaniesListed"",
    DnB_Company.""businessEntityType_description"",
    DnB_Company.""legalForm_description"",
    Crunchbase.org_name as org_name,
    Crunchbase.status,
    Crunchbase.ipo_status,
    Crunchbase.founded_on,
    Crunchbase.employee_count,
    Crunchbase.num_funding_rounds,
    Crunchbase.total_funding_usd
From goglobal_gp_goglobal.v_gp_gg_client_current Customer
Left Join DnB on DnB.DnB_GPP_Customer_id = Customer.id
Left Join DnB_Industry on DnB.Duns_number = DnB_Industry.Duns_number
Left Join goglobal_gp_goglobal.v_gp_gg_partners_referral_current Partner on Customer.partners_referral_id = Partner.id
Left Join goglobal_gp_goglobal.v_gp_gg_address_current   Billing_Address on Customer.billing_address_id = Billing_Address.id
Left Join goglobal_gp_goglobal.v_gp_gg_country_current   Billing_Country on Billing_Address.country_id = Billing_Country.id 
Left Join DnB_Company_Info as DnB_Company on DnB_Company.client_id = Customer.id
Left Join Crunchbase on Crunchbase.Client_id = Customer.id
Left Join dnb.hierarchy_connections as HCon on HCon.duns_number = DnB.Duns_number
WHERE Customer.is_demo_client = FALSE 
Order by Customer.id asc"
bd64f0d6-2e50-bb43-5ca9-a9ff1af724ce,Custom SQL Query (gpbidb),postgres,"SELECT DISTINCT cl.id AS client_id, cl.name AS client_name, billing_address_id, 
a.postal_code,
CASE 
WHEN a.address2 IS NULL THEN a.address1
ELSE CONCAT(a.address1, ' ', a.address2)
END AS client_address,
city AS client_city, 
province_id, a.country_id, country_code AS client_country_code, co.name AS client_country, 
p.code AS client_province_code, p.name AS client_province
	FROM ""goglobal_gp_goglobal"".v_gp_gg_client_current as cl
	LEFT JOIN ""goglobal_gp_goglobal"".""address""	AS a
	ON cl.billing_address_id = a.id
	LEFT JOIN ""goglobal_gp_goglobal"".""v_gp_gg_country_current"" AS co
	ON a.country_id = co.id
	LEFT JOIN ""goglobal_gp_goglobal"".""province"" AS p
	ON a.province_id = p.id
	WHERE is_demo_client = FALSE
	ORDER BY 1"
bde89f44-6a5c-b9a6-fbad-b34c1caaed59,Custom SQL Query (gpbidb),postgres,"WITH d AS (SELECT q.""callId"", q.""answeredScorecardId"", q.""questionId"", qq.""questionText"", q.""isOverall"", q.score, q.""answerText"", q.""notApplicable""
	FROM gong.scorecards_details as q
	LEFT JOIN gong.scorecards_questions_details AS qq
	USING (""questionId""))


SELECT sc.""answeredScorecardId"", sc.""scorecardId"", sc.""scorecardName"", 
	sc.""callId"", 
	c.title AS call_title,
	c.url,
	 ""visibilityType"", 
	TO_DATE(LEFT(""callStartTime"",10),'YYYY-MM-DD') AS call_date,
	TO_DATE(LEFT(""reviewTime"",10),'YYYY-MM-DD') AS review_date,
	""reviewedUserId"",
	CONCAT(u1.first_name, ' ', u1.last_name) AS reviewed_name, u1.email_address AS reviewed_mail, 
	CASE 
		WHEN u1.title = 'BDR' THEN 'Business Development Representative' 
		WHEN u1.title = 'BDM' THEN 'Business Development Manager'
                WHEN u1.title = 'Budiness Development Representative' THEN 'Business Development Manager'
		ELSE u1.title
	END AS reviewed_title,
	--u1.title AS reviewed_title,
	""reviewerUserId"", 
	CONCAT(u2.first_name, ' ', u2.last_name) AS reviewer_name, u2.email_address AS reviewer_mail,
	CASE 
		WHEN u2.title = 'BDR' THEN 'Business Development Representative' 
		WHEN u2.title = 'BDM' THEN 'Business Development Manager'
		ELSE u2.title
	END AS reviewer_title,
	--u2.title AS reviewer_title,
	u1.maanger_id,
	CONCAT(u3.first_name, ' ', u3.last_name) AS manager_name, u3.email_address AS manager_mail, 
	CASE 
		WHEN u3.title = 'BDR' THEN 'Business Development Representative' 
		WHEN u3.title = 'BDM' THEN 'Business Development Manager'
		ELSE u3.title
	END AS manager_title,
	--u3.title AS manager_title,
	CASE
	   	    WHEN ""reviewedUserId"" = ""reviewerUserId"" THEN 'self eval'
		    ELSE 'eval'
	END AS category,
	d.""questionId"", d.""questionText"", d.""isOverall"", d.score, d.""answerText"", d.""notApplicable""
	FROM gong.scorecards_calls AS sc
	LEFT JOIN gong.users AS u1
	ON sc.""reviewedUserId"" = u1.id
	LEFT JOIN gong.users AS u2
	ON sc.""reviewerUserId"" = u2.id
	LEFT JOIN gong.users AS u3
	ON u1.maanger_id = u3.id
	LEFT JOIN gong.calls AS c
	ON sc.""callId"" = c.id
	LEFT JOIN d
	ON sc.""callId"" = d.""callId"" AND  sc.""answeredScorecardId"" = d.""answeredScorecardId"""
be44c851-e6b5-6533-e922-63f017443b74,Gong,postgres,"WITH d AS (SELECT q.""callId"", q.""questionId"", qq.""questionText"", q.""isOverall"", q.score, q.""answerText"", q.""notApplicable"", q.""answeredScorecardId""
	FROM gong.scorecards_details as q
	LEFT JOIN gong.scorecards_questions_details AS qq
	USING (""questionId"")
		   
		  )


SELECT sc.""answeredScorecardId"", sc.""scorecardId"", sc.""scorecardName"", 
	sc.""callId"", 
	c.title AS call_title,
	c.url,
	c.duration,
	 ""visibilityType"", 
	TO_DATE(LEFT(""callStartTime"",10),'YYYY-MM-DD') AS call_date,
	TO_DATE(LEFT(""reviewTime"",10),'YYYY-MM-DD') AS review_date,
	""reviewedUserId"",
	CONCAT(u1.first_name, ' ', u1.last_name) AS reviewed_name, u1.email_address AS reviewed_mail, 
	CASE 
		WHEN u1.title = 'BDR' THEN 'Business Development Representative' 
		WHEN u1.title = 'BDM' THEN 'Business Development Manager'
                WHEN u1.title = 'Budiness Development Representative' THEN 'Business Development Manager'
		ELSE u1.title
	END AS reviewed_title,
	CASE WHEN sc.""callId"" IN 
		(SELECT DISTINCT ""callId""
 		FROM d
 		WHERE ""questionText"" = 'Calibration Call?' AND score = 1
		)
	 THEN 'Yes'
	 ELSE 'No'
	 END AS is_calibration_call,
	--u1.title AS reviewed_title,
	""reviewerUserId"", 
	CONCAT(u2.first_name, ' ', u2.last_name) AS reviewer_name, u2.email_address AS reviewer_mail,
	CASE 
		WHEN u2.title = 'BDR' THEN 'Business Development Representative' 
		WHEN u2.title = 'BDM' THEN 'Business Development Manager'
		ELSE u2.title
	END AS reviewer_title,
	--u2.title AS reviewer_title,
	CASE 
		WHEN u3.title = 'BDR' THEN 'Business Development Representative' 
		WHEN u3.title = 'BDM' THEN 'Business Development Manager'
		ELSE u3.title
	END AS manager_title,
	--u3.title AS manager_title,
	CASE
	   	    WHEN ""reviewedUserId"" = ""reviewerUserId"" THEN 'self eval'
		    ELSE 'eval'
	END AS category,
	d.""questionId"", d.""questionText"", d.""isOverall"", d.score, d.""answerText"", d.""notApplicable"",
	wkd.""Hire Date"", wkd.""Status"", wkd.""Worked In Country"",wkd.""Reports To Name"", region.region
	
	FROM gong.scorecards_calls AS sc
	LEFT JOIN gong.users AS u1
	ON sc.""reviewedUserId"" = u1.id
	LEFT JOIN gong.users AS u2
	ON sc.""reviewerUserId"" = u2.id
	LEFT JOIN gong.users AS u3
	ON u1.maanger_id = u3.id
	LEFT JOIN gong.calls AS c
	ON sc.""callId"" = c.id
	LEFT JOIN d
	ON sc.""callId"" = d.""callId"" and  sc.""answeredScorecardId"" = d.""answeredScorecardId""
	LEFT JOIN workday_hris.v_non_sensitive_workday_data as wkd
	ON LOWER(u1.email_address)  = LOWER(wkd.""Work Contact: Work Email"")
	
	LEFT JOIN repo.v_gp_mdm_region AS region
	ON LOWER(wkd.""Worked In Country"") = LOWER(region.country)

	where  sc.""scorecardName"" IN ('Welcome Call Scorecard',
								  'Global Made Possible Score Card',
								  'Let’s Talk Numbers, a Finance Overview'
								  )
	and d.""isOverall""= 'False'
	--AND ""questionText"" = 'Calibration Call?'
	--AND ""visibilityType"" = 'PUBLIC'"
be44c851-e6b5-6533-e922-63f017443b74,Quality,postgres,"WITH max_contract AS (SELECT  id, status, MAX(contract_start_date) as contract_start_date, MAX (date_modified) as date_modified
	FROM goglobal_gp_goglobal.professional_aud
	group by 1,2),
	
	flag_active as (
	select f.id, f.status, f.date_modified, max_active.contract_start_date, case when max_active.date_modified <<= f.date_modified then 1 else 0 end as flag
	from goglobal_gp_goglobal.professional_aud f
	left join (select * from max_contract where status = '3') as max_active on f.id = max_active.id
	where f.status = '4' 
	),
	
move_status_date as (SELECT  pa.id, pa.status, MIN(flag_active.date_modified) 
	FROM goglobal_gp_goglobal.professional_aud pa
	left join flag_active on pa.id = flag_active.id and pa.status = flag_active.status
	where flag_active.contract_start_date = pa.contract_start_date and flag_active.flag = 1 
	group by 1,2),


 a as
	(
		select t2.id as pro_id,t2.first_name, t2.last_name,t16.email,t2.payroll_start_date,t2.payroll_end_date,
		case when t2.payroll_end_date is null then 'Yes'
		else 'No'
		end as payroll_end_date_IS_NULL,
                case when t2.payroll_end_date << CURRENT_DATE then 'Yes'
		when t2.payroll_end_date IS NULL then NULL
		else 'No'
		end as payroll_end_date_IN_PAST,
		t2.status as PRO_STATUS,
	 t11.name as country, 
	 concat(t12.first_name,' ',t12.last_name)as country_ops_lead, concat(t13.first_name,' ',t13.last_name)as country_ops_associate,
	 t3.name,t4.name as status,t7.name as Client,
	concat(t5.first_name,' ',t5.last_name) as Onboard_Lead, 
	concat(t6.first_name, ' ', t6.last_name) as Offboard_Lead,
	t19.email AS Offboarding_email,
	adp.""Status"" AS offboarding_lead_status,
	adp.""Hire Date"" AS offboarding_lead_hire_date,
	concat(t8.first_name, ' ', t8.last_name) as Requested_by_name_client,
	concat(t9.first_name, ' ', t9.last_name) as Requested_by_name_person,
	concat(t14.first_name, ' ', t14.last_name) as Requested_by_name_client_lb,
	concat(t15.first_name, ' ', t15.last_name) as Requested_by_name_person_lb,
	date(requested_date),t17.date_modified as pending,
	t18.offboard_start_date,
	t18.offboard_end_date,
        t18.reason_type,
		case when t18.offboard_end_date is null then 'Yes'
		else 'No'
		end as offboard_end_date_IS_NULL,
	t2.contract_start_date,
	t2.contract_end_date,
                case when t2.contract_end_date >> CURRENT_DATE then 'Yes'
		when t2.contract_end_date IS NULL then NULL
		else 'No'
		end as contract_end_date_IN_FUTURE,
	date_modified.min as Moved_to_status_date,
	mdm_region.region AS professional_working_region,
	t2.is_failed_to_launch,
	t7.is_demo_client,
		
t1.*
from goglobal_gp_goglobal.v_gp_gg_professional_current t2
left join goglobal_gp_goglobal.v_gp_gg_change_request_current t1
	on t1.professional_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_change_request_type_current t3
	on t1.change_request_type_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_change_request_status_current t4
	on t1.change_request_status_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t5
              on t2.gp_onboard_lead_id=t5.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t6      
              on t2.gp_offboard_lead_id=t6.id
left join goglobal_gp_goglobal.v_gp_gg_client_current t7
		on t2.client_id=t7.id
left join goglobal_gp_goglobal.v_gp_gg_client_person_current t8      
              on t1.requested_by=t8.user_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9      
              on t1.requested_by=t9.user_id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t10 
		on t2.lsp_country_id=t10.id
	left join goglobal_gp_goglobal.v_gp_gg_country_current t11 
		on t10.country_id=t11.id
LEFT JOIN repo.v_gp_mdm_region AS mdm_region
ON t11.country_code = mdm_region.country_code
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t12
	on t11.country_ops_lead=t12.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t13
	on t11.country_ops_associate=t13.id
left join goglobal_gp_goglobal.v_gp_gg_client_person_current t14      
              on t1.modified_by=t14.user_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t15      
              on t1.modified_by=t15.user_id
left join goglobal_gp_goglobal.v_gp_gg_user_current t16      
              on t16.id=t2.user_id
left join goglobal_gp_goglobal.v_date_modified_change_request_new_to_pending t17
	 on t1.id=t17.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current AS t18
ON t2.professional_offboarding_id = t18.id
left join goglobal_gp_goglobal.v_gp_gg_user_current t19      
              on t19.id=t6.user_id
LEFT JOIN move_status_date as date_modified on t2.id = date_modified.id and t2.status = date_modified.status
LEFT JOIN adp_integration.v_non_sensitive_adp_data as adp ON LOWER(t19.email)  = LOWER(adp.""Work Contact: Work Email"")

	
		
		
where T2.IS_FAILED_TO_LAUNCH='false' and t7.is_demo_client='false')

select a.*,
case when (Requested_by_name_client=' ' and Requested_by_name_person!=' ') then Requested_by_name_person
		when (Requested_by_name_client!=' ' and Requested_by_name_person=' ') then Requested_by_name_client
		when (Requested_by_name_client=' ' and Requested_by_name_person=' ') then 'NULL'
		when (Requested_by_name_client!=' ' and Requested_by_name_person!=' ') then 'ERROR'
		END AS REQUESTED_BY_END,

		case when (Requested_by_name_client_lb=' ' and Requested_by_name_person_lb!=' ') then Requested_by_name_person_lb
		when (Requested_by_name_client_lb!=' ' and Requested_by_name_person_lb=' ') then Requested_by_name_client_lb
		when (Requested_by_name_client_lb=' ' and Requested_by_name_person_lb=' ') then 'NULL'
		when (Requested_by_name_client_lb!=' ' and Requested_by_name_person_lb!=' ') then 'ERROR'
		END AS last_updated_by,
		gp_notes.text as gp_notes,
		Client_notes.text as client_notes
		FROM A
		left join (select * from goglobal_gp_goglobal.v_gp_gg_change_request_note_current where change_request_note_type_id = '1') as gp_notes on gp_notes.change_request_id = a.id
		left join (select * from goglobal_gp_goglobal.v_gp_gg_change_request_note_current where change_request_note_type_id = '2') as Client_notes on Client_notes.change_request_id = a.id
WHERE A.client <<>> 'COMPANY NAME'"
be4bb529-7473-4de8-3b33-5056eb2932e4,Custom SQL Query (gpbidb),,
be4bb529-7473-4de8-3b33-5056eb2932e4,Custom SQL Query (gpbidb),postgres,"WITH SFDC AS (WITH MA as (
	SELECT DISTINCT bdr_owner_name, point_time_date, COUNT(DISTINCT lead_or_opp_id) AS mas
	FROM salesforce.v_gp_sfdc_marketing_mat_view
	WHERE (opp_type <<>> 'Existing Business' OR opp_type IS NULL)
	AND cohort_stage='SAL to MSA'
	AND (partner_acq_opps IS NULL OR partner_acq_opps <<>> 'Yes')
	AND (opp_won= 'TRUE')
	AND (record_type_opps IS NULL OR record_type_opps <<>> 'Potential Partner Opportunity')
	AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
	AND b_d_r__date__c IS NOT NULL
	AND bdr_owner_name IS NOT NULL
	--AND point_time_date BETWEEN '2023-03-01' AND '2023-03-31'
	GROUP BY 1,2),
	
SAL AS (SELECT DISTINCT bdr_owner_name, point_time_date, COUNT(DISTINCT lead_or_opp_id)  AS sals
	FROM salesforce.v_gp_sfdc_marketing_mat_view
	WHERE (opp_type <<>> 'Existing Business' OR opp_type IS NULL)
	AND cohort_stage='SQL to SAL'
	AND (partner_acq_opps IS NULL OR partner_acq_opps <<>> 'Yes')
	AND (record_type_opps IS NULL OR record_type_opps <<>> 'Potential Partner Opportunity')
	AND (pricing_model_opps <<>> 'Contractor only' OR pricing_model_opps IS NULL)
	AND b_d_r__date__c IS NOT NULL
	AND bdr_owner_name IS NOT NULL
	AND s_a_l_by__sales__c='Yes'
	--AND point_time_date BETWEEN '2023-03-01' AND '2023-03-31'
	GROUP BY 1,2),
SFDC_EMAIL AS (SELECT		  
    CASE
		WHEN MA.bdr_owner_name IS NOT NULL THEN MA.bdr_owner_name
	    WHEN MA.bdr_owner_name IS NULL THEN SAL.bdr_owner_name
		WHEN SAL.bdr_owner_name IS NOT NULL THEN SAL.bdr_owner_name
		WHEN SAL.bdr_owner_name IS NULL THEN MA.bdr_owner_name
	ELSE NULL::character varying
	END AS bdr_owner_name,
			  
	CASE
		WHEN MA.point_time_date IS NOT NULL THEN MA.point_time_date
	    WHEN MA.point_time_date IS NULL THEN SAL.point_time_date
		WHEN SAL.point_time_date IS NOT NULL THEN SAL.point_time_date
		WHEN SAL.point_time_date IS NULL THEN MA.point_time_date
	ELSE NULL::date 
	END AS point_time_date,
	MA.mas,
	SAL.sals
	FROM SAL
	FULL JOIN MA 
	ON SAL.bdr_owner_name=MA.bdr_owner_name
	AND SAL.point_time_date=MA.point_time_date)
			  
	SELECT SFDC_EMAIL.*, USERS.email 
	FROM SFDC_EMAIL
	LEFT JOIN salesforce.v_gp_sfdc_user_current AS USERS
	ON SFDC_EMAIL.bdr_owner_name=USERS.name),

OUTREACH AS (SELECT
	u.name AS user_name,
	u.email,
	dt.relationship_user_id,
	--dt.call_id,
	--dt.name AS relationship_sequence_name,
	--dt.created_at,
	DATE(dt.date) as date_day,
    CASE WHEN SUM(outbound) != 0 THEN SUM(outbound) ELSE 0 END AS outbound,
	CASE WHEN SUM(inbound) != 0 THEN SUM(inbound) ELSE 0 END AS inbound,
	CASE WHEN SUM(""Answered - Qualified"") != 0 THEN SUM(""Answered - Qualified"") ELSE 0 END AS ""Answered-Qualified"",
	CASE WHEN SUM(""Answered -Qualified"") != 0 THEN SUM(""Answered -Qualified"") ELSE 0 END AS ""Answered-Qualified_"",
	CASE WHEN SUM(""Answered - Follow Up"") != 0 THEN SUM(""Answered - Follow Up"") ELSE 0 END AS ""Answered-Follow_Up"",
	CASE WHEN SUM(""Answered - Hold for Future"") != 0 THEN SUM(""Answered - Hold for Future"") ELSE 0 END AS ""Answered-Hold_for_Future"",
	CASE WHEN SUM(""Answered -Hold for Future"") != 0 THEN SUM(""Answered -Hold for Future"") ELSE 0 END AS ""Answered-Hold_for__Future"",
	CASE WHEN SUM(""Answered - Not Interested"") != 0 THEN SUM(""Answered - Not Interested"") ELSE 0 END AS ""Answered-Not_Interested"",
	CASE WHEN SUM(""Gatekeeper"") != 0 THEN SUM(""Gatekeeper"") ELSE 0 END AS ""Gatekeeper"",
	CASE WHEN SUM(""Junk Lead - Wrong Information"") != 0 THEN SUM(""Junk Lead - Wrong Information"") ELSE 0 END AS ""Junk_Lead-Wrong_Information"",
	CASE WHEN SUM(""Junk Lead -Customer Profile"") != 0 THEN SUM(""Junk Lead -Customer Profile"") ELSE 0 END AS ""Junk_Lead-Customer_Profile"",
	CASE WHEN SUM(""Not Logged"") != 0 THEN SUM(""Not Logged"") ELSE 0 END AS ""Not_Logged""
	FROM
	(
	SELECT 
		call.id AS call_id,
		call.relationship_user_id,
		sequence.name,
		call.created_at,
		timezone('PDT'::text, date_trunc('hour', call.created_at::timestamp with time zone))::timestamp with time zone AS date,
			CASE WHEN call.direction = 'outbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS outbound,
			CASE WHEN call.direction = 'inbound' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS inbound,
			CASE WHEN disposition.name = 'Answered - Qualified' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Qualified"",
			CASE WHEN disposition.name = 'Answered -Qualified' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered -Qualified"",
			CASE WHEN disposition.name = 'Answered - Follow Up' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Follow Up"",
			CASE WHEN disposition.name = 'Answered - Hold for Future' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Hold for Future"",
			CASE WHEN disposition.name = 'Answered -Hold for Future' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered -Hold for Future"",
			CASE WHEN disposition.name = 'Answered - Not Interested' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Answered - Not Interested"",
			CASE WHEN disposition.name = 'Gatekeeper' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Gatekeeper"",
			CASE WHEN disposition.name = 'Junk Lead -Customer Profile ' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead -Customer Profile"",
			CASE WHEN disposition.name = 'Junk Lead - Wrong Information' THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Junk Lead - Wrong Information"",
	CASE WHEN disposition.name IS NULL THEN COUNT(call.id) OVER(PARTITION BY call.id) END AS ""Not Logged""
	FROM outreach.v_outreach_call_current call
	LEFT JOIN outreach.v_outreach_call_disposition_current disposition
	ON call.relationship_call_disposition_id = disposition.id
	LEFT JOIN outreach.v_outreach_sequence_current sequence
	ON call.relationship_sequence_id = sequence.id
		--WHERE call.relationship_user_id='248'
	--WHERE call.created_at::date BETWEEN '2022-11-01 AND '2021-11-30'
	) AS dt
LEFT JOIN outreach.v_outreach_users_current u
ON dt.relationship_user_id = u.id
GROUP BY 1,2,3,4
ORDER BY 4 DESC)

SELECT		  
    CASE
		WHEN SFDC.bdr_owner_name IS NOT NULL THEN SFDC.bdr_owner_name
	    WHEN SFDC.bdr_owner_name IS NULL THEN OUTREACH.user_name
		WHEN OUTREACH.user_name IS NOT NULL THEN OUTREACH.user_name
		WHEN OUTREACH.user_name IS NULL THEN SFDC.bdr_owner_name
	ELSE NULL::character varying
	END AS bdr_owner_name,
	
	CASE
		WHEN SFDC.point_time_date IS NOT NULL THEN SFDC.point_time_date
	    WHEN SFDC.point_time_date IS NULL THEN OUTREACH.date_day
		WHEN OUTREACH.date_day IS NOT NULL THEN OUTREACH.date_day
		WHEN OUTREACH.date_day IS NULL THEN SFDC.point_time_date
	ELSE NULL::date 
	END AS point_time_date,

	CASE
		WHEN SFDC.email IS NOT NULL THEN SFDC.email
	    WHEN SFDC.email IS NULL THEN OUTREACH.email
		WHEN OUTREACH.email IS NOT NULL THEN OUTREACH.email
		WHEN OUTREACH.email IS NULL THEN SFDC.email
	ELSE NULL::character varying
	END AS email,
SFDC.mas,
SFDC.sals,
OUTREACH.relationship_user_id,
OUTREACH.outbound,
OUTREACH.inbound,
OUTREACH.""Answered-Qualified"",
OUTREACH.""Answered-Qualified_"",
OUTREACH.""Answered-Follow_Up"",
OUTREACH.""Answered-Hold_for_Future"",
OUTREACH.""Answered-Hold_for__Future"",
OUTREACH.""Answered-Not_Interested"",
OUTREACH.""Gatekeeper"",
OUTREACH.""Junk_Lead-Wrong_Information"",
OUTREACH.""Junk_Lead-Customer_Profile"",
OUTREACH.""Not_Logged""
FROM OUTREACH
FULL JOIN SFDC
ON OUTREACH.email=SFDC.email
AND OUTREACH.date_day=SFDC.point_time_date"
bf8de108-71bc-7ceb-9828-0e38d6c9a62d,"Benefits, pension -UK (gpbidb)",postgres,"with benefits as(
	SELECT t5.professional_id, T11.NAME AS COUNTRY,t7.id,t7.name as Benefit_type,
	   case when t8.mandatory='1' then 'Mandatory'
	   		when t8.mandatory='0' then 'Supplemental'
	   end as Plan_Type, t6.name as Plan_Name, t6.custom,
		case when t6.active='1' then 'Yes'
	when t6.active='0' then 'No' else null
	end as Active_plan,
		t5.benefit_id, t5.status,
	   case when t5.status='1' then 'Offered' when t5.status='2' then 'Enrolled'
	   		when t5.status='3' then 'Declined' when t5.status='4' then 'Unenrolled'
			else t5.status end as benefit_status,
	t5.enrollment_date,t5.unenrollment_date, T9.LABEL, T9.VALUE
from  goglobal_goglobal.v_gp_gg_benefit_professional_current t5
left join goglobal_goglobal.v_gp_gg_professional_current t1 on t1.id=t5.professional_id
left join goglobal_goglobal.v_gp_gg_lsp_country_current t3 on t1.lsp_country_id=t3.id
left join goglobal_goglobal.v_gp_gg_country_current t4 on t3.country_id=t4.id	
left join goglobal_goglobal.v_gp_gg_benefit_current t6 on t5.benefit_id=t6.id::INTEGER and t4.id=t6.country_id
left join goglobal_goglobal.v_gp_gg_benefit_type_current t7	on t6.benefit_type_id=t7.id::INTEGER
left join goglobal_goglobal.v_gp_gg_benefit_type_country_current t8	on t7.id::INTEGER=t8.benefit_type_id and t8.country_id=t4.id 
left join goglobal_goglobal.v_gp_gg_lsp_country_current t10 on t1.lsp_country_id=t10.id
left join goglobal_goglobal.v_gp_gg_country_current t11 on t10.country_id=t11.id
left join (select T15.label, t14.benefit_professional_id,t14.value
			from goglobal_goglobal.v_gp_gg_benefit_professional_custom_field_current t14
			left join goglobal_goglobal.v_gp_gg_benefit_custom_field_current t15 on t14.benefit_custom_field_id=t15.id where t15.id='3') T9 
			ON t5.id=t9.benefit_professional_id
where t1.is_failed_to_launch='false' and t11.name='United Kingdom' AND t7.id in ('2','7','8')
				),
pension as(
			select t1.professional_id, T5.ID,t5.label,t4.value
			from goglobal_goglobal.v_gp_gg_benefit_professional_current t1
			left join goglobal_goglobal.v_gp_gg_benefit_current t2 on t1.benefit_id=t2.id
			left join goglobal_goglobal.v_gp_gg_benefit_type_current t3 on t2.benefit_type_id=t3.id
			left join goglobal_goglobal.v_gp_gg_benefit_professional_custom_field_current t4 on t1.id=t4.benefit_professional_id
			left join goglobal_goglobal.v_gp_gg_benefit_custom_field_current t5 on t4.benefit_custom_field_id=t5.id
			where t3.id='3' 
			)
select distinct t1.id,T2.name as Client, t9.name as Country, concat(t1.first_name,' ',t1.last_name) as Professional, T1.STATUS,t1.legal_full_name, 
GENDER.GENDER,T1.BIRTH_DATE,NIN.NIN,t1.contract_start_date,t1.contract_end_date,
t1.ANNUAL_BASE_SALARY, T5.NAME AS CURRENCY,t1.title,t1.personal_email,
CONCAT(t6.address1,' ',T6.ADDRESS2,', ',t6.city,', ',T7.NAME,'. ',T6.POSTAL_CODE) AS ADDRESS,
PENSION.VALUE  AS Percentage_Contributed_Employer,
PENSION2.VALUE AS Percentage_Contributed_Professional,
case when medical.status='1' then 'Yes' else 'No' end as Medical_Plan_Offered, medical.VALUE AS MED_VALUE,
case when dental.status='1' then 'Yes' else 'No' end as Dental_Plan_Offered, dental.VALUE AS DEN_VALUE,
case when protection.status='1' then 'Yes' else 'No' end as Protection_Plan_Offered, protection.VALUE AS Prote_VALUE
from GOGLOBAL_GOGLOBAL.v_gp_gg_professional_current t1
left join goglobal_goglobal.v_gp_gg_lsp_country_current t8 on t1.lsp_country_id=t8.id
left join goglobal_goglobal.v_gp_gg_country_current t9 on t8.country_id=t9.id	
LEFT JOIN GOGLOBAL_GOGLOBAL.V_GP_GG_CLIENT_CURRENT T2 ON T1.CLIENT_ID=T2.ID
left join goglobal_goglobal.v_gp_gg_country_current t5 on t1.ANNUAL_BASE_SALARY_CURRENCY=t5.id
left join GOGLOBAL_GOGLOBAL.v_gp_gg_address_current t6 on t1.home_address_id=t6.id
LEFT JOIN GOGLOBAL_GOGLOBAL.v_gp_gg_PROVINCE_current T7 ON T6.PROVINCE_ID=T7.ID
left join (select professional_id, country_custom_field_id, value as Gender 
		   from goglobal_goglobal.v_gp_gg_country_professional_custom_field_current 
	 		where country_custom_field_id='181') GENDER ON GENDER.PROFESSIONAL_ID=T1.ID
left join (select professional_id, country_custom_field_id, value as  NIN
		   from goglobal_goglobal.v_gp_gg_country_professional_custom_field_current 
	 		where country_custom_field_id='178') NIN ON NIN.PROFESSIONAL_ID=T1.ID
left join (select * from pension where id='1')pension on pension.professional_id=t1.id
left join (select * from pension where id='2')pension2 on pension2.professional_id=t1.id
left join (select * from benefits where id='2') medical on medical.professional_id=t1.id
left join (select * from benefits where id='7') dental on dental.professional_id=t1.id
left join (select * from benefits where id='8') protection on protection.professional_id=t1.id
WHERE t1.is_failed_to_launch='false' AND t2.is_demo_client='false' and t9.name='United Kingdom'"
bfbc7ec7-e649-c595-b081-ff96bf086bd2,IMF NGDPD Countries,,
c077b198-d27f-eae2-800a-970a1b7d1c84,Custom SQL Query (gpbidb),postgres,"With CPF AS
	(
		select professional_id,
				country_custom_field_id,
				value as cpfnbr
		from goglobal_gp_goglobal.v_gp_gg_country_professional_custom_field_current 
		where country_custom_field_id='11'
	),
tx as
	(
		select *
		from goglobal_gp_goglobal.v_gp_gg_transactions_mat tx 
		where transaction in ('Insurance Premium - Dental','Insurance Premium')
 	)
select cc.name as client,
		co.name as country,
		pc.id,
		concat(pc.first_name,' ',pc.last_name) as Professional, 
		pc.legal_full_name,
		pc.status,
		cpf.cpfnbr,
		tx.category_type,
		tx.transaction,
		tx.amount, 
		tx.currency,
		tx.frequency,
		tx.pay_period,
		tx.inicio as beginning,
		tx.ending,
		tx.note,
		tx.internal_note		
from goglobal_gp_goglobal.v_gp_gg_professional_current pc
left join goglobal_gp_goglobal.v_gp_gg_client_current cc on pc.client_id=cc.id
left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco on pc.client_country_id=cco.id
left join goglobal_gp_goglobal.v_gp_gg_country_current co on cco.country_id=co.id
left join tx on pc.id=tx.professional_id
left join cpf on cpf.professional_id=pc.id
where co.name='Brazil' and is_failed_to_launch='false' and cc.is_demo_client='false'"
c0910ca8-0608-b9f8-8d08-8871dc102333,Custom SQL Query (gpbidb),postgres,"--Get all customers who signed an MSA after april 2022
WITH customers AS 
(
	SELECT customer.id, 
		customer.name,
		CASE WHEN customer.msa_contract_start_date_peo      IS NOT NULL THEN customer.msa_contract_start_date_peo
			 WHEN customer.msa_contract_start_date_services IS NOT NULL THEN customer.msa_contract_start_date_services
			 WHEN customer.msa_contract_start_date_sourcing IS NOT NULL THEN customer.msa_contract_start_date_sourcing
			 WHEN customer.msa_contract_start_date_aso      IS NOT NULL THEN customer.msa_contract_start_date_aso
		 END AS customer_agg_service_date,
		 customer_billing_address.address1,
		 city,
	     postal_code,
	customer_billing_province.name as province,
	customer_billing_country.name as country
	FROM goglobal_gp_goglobal.v_gp_gg_client_current                 AS customer
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current           AS customer_billing_address    
		ON customer.billing_address_id = customer_billing_address.id
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_province_current          AS customer_billing_province   
		ON customer_billing_address.province_id = customer_billing_province.id
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current           AS customer_billing_country    
		ON customer_billing_address.country_id = customer_billing_country.id
	WHERE customer.is_demo_client = FALSE
),

--Get all the professionals info and the first contract start date for each client
professionals AS 
(
	SELECT CONCAT(p.first_name, ' ',p.last_name) AS professional_name,
		p.title,
		p.client_id,
		p.annual_base_salary,
		p.payroll_start_date,
	master.home_state_province AS province,
	currency.currency_name AS currency,
	p.contract_start_date,
	first_value(p.payroll_start_date) OVER (PARTITION BY p.client_id ORDER BY p.payroll_start_date) AS first_time
	FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS p
	LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_master_professional AS master ON p.id = master.internal_id
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current  AS currency
		ON p.annual_base_salary_currency = currency.id
	WHERE (p.service_class IS NULL OR p.service_class <<>>'4')
	AND p.is_failed_to_launch = FALSE
	AND master.home_state_province = 'Ontario'
),

--Validate that the professionals were the first hire and they are in Ontario
first_professionals AS
(
	SELECT professional_name,
		p.title,
		p.client_id,
		p.annual_base_salary,
		p.payroll_start_date,
		p.contract_start_date,
		currency
	FROM professionals p
	WHERE p.payroll_start_date = p.first_time
	AND p.payroll_start_date >>= '2022-04-01'
),

--Get the primary admin for all clients
customer_role AS 
(
	SELECT  DISTINCT b.id as client_id,
		concat(first_name,' ', last_name) as user, title,
		regexp_split_to_table(a.roles, ',') AS roles,
		c.email as admin_email,
		c.status,
		a.IS_ENABLED,
		c.LAST_LOGIN_DATE,
		a.date_created
	FROM goglobal_gp_goglobal.v_gp_gg_client_person_current  a
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current b
		ON a.client_id = b.id
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_user_current c
		ON a.user_id = c.id 
	WHERE b.is_demo_client='false' 
		AND a.is_no_longer_with_firm='false' 
		AND a.primary_admin = true
		AND a.is_enabled = true
	ORDER BY 1
)

--Join all the data
SELECT c.*, fp.*, cr.user, cr.admin_email,
CASE WHEN customer_agg_service_date >>= '2022-04-01' THEN 'New Customer'
WHEN customer_agg_service_date << '2022-04-01' THEN 'Existing Customer'
END AS customer_type
FROM customers c
INNER JOIN first_professionals fp 
	ON c.id = fp.client_id
LEFT JOIN customer_role cr 
	ON c.id = cr.client_id
WHERE cr.roles = '1'
	AND payroll_start_date <<= CURRENT_DATE"
c23de620-c0e4-8ef0-03c9-2adca73c5116,Custom SQL Query (gpbidb),postgres,"WITH A AS(SELECT
       cal_date,
       client_id,
       client_name,
	   industry_name,
       professional_id,	
	   job_category,
	   country_name,
	   payroll_start_date,
	  RANK () OVER (
		PARTITION BY cal_date,client_id
		ORDER BY payroll_start_date, professional_id
	) rank,
	    date_trunc('month',payroll_start_date) AS month
		
	FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
	WHERE active_flag = 'Active'
    AND payroll_start_date <<= CURRENT_DATE
	ORDER BY client_id, cal_date, payroll_start_date, professional_id),
	
	B AS (SELECT A.*,
	RANK () OVER ( PARTITION BY client_id, rank ORDER BY payroll_start_date, professional_id ) AS first_prof
	FROM A
	ORDER BY client_id, cal_date, payroll_start_date, professional_id),
	
	C AS(SELECT DISTINCT client_id, client_name,industry_name, professional_id,job_category,country_name, payroll_start_date, rank
	   first_prof, month
	FROM B
	WHERE first_prof = 1
	ORDER BY payroll_start_date, rank),
	
	D AS(SELECT C.*,COUNT (professional_id) OVER (PARTITION  BY client_id ORDER BY month) AS prof_count_by_month,
	LAG(month,1) OVER (
	PARTITION BY client_id ORDER BY payroll_start_date, professional_id) lag_month
	FROM C),
	
	E AS(SELECT D.*,
    LAG(prof_count_by_month,1) OVER (PARTITION BY client_id) lag_prof_count,
    (DATE_PART('year', month::date) - DATE_PART('year', lag_month::date)) * 12 +
              (DATE_PART('month', month::date) - DATE_PART('month', lag_month::date)) AS month_difference
		  FROM D)
	
    SELECT E.client_id, e.client_name, e.industry_name,e.professional_id, e.country_name, 
	LAG(e.country_name,1) OVER (PARTITION BY client_id) country_lag,
	e.job_category,e.payroll_start_date, e.first_prof, e.month, e.prof_count_by_month, e.lag_prof_count,
	CASE WHEN lag_prof_count IS NOT NULL AND lag_prof_count <<>> prof_count_by_month THEN CONCAT('(',e.lag_prof_count , '-' , e.prof_count_by_month,')')
	END As interval,
	e.lag_month,month_difference,
	SUM(month_difference) OVER( PARTITION BY client_id ORDER BY first_prof)  AS month_cycle_missingfirst
	
	FROM E
	ORDER BY client_id, payroll_start_date"
c23de620-c0e4-8ef0-03c9-2adca73c5116,Custom SQL Query (gpbidb),postgres,"SELECT
        cc.id,
		cc.name as client,
		case when cc.status = '1' then 'Active'
		when cc.status = '2' then 'Inactive'
		else null end as client_status,
		prc.name AS gp_partner_name,
		gp_cb.uuid,
		cb_org.name as org_name,
		cb_org.status,
		ipos.ipo_status,
		case when cc.org_type = '1' then 'Public'
		when cc.org_type = '2' then 'Private'
		when cc.org_type = '3' then 'Non-Profit'
	    when cc.org_type = '4' then 'Unknow'
		END AS org_type,
		cb_org.founded_on,
		cc.msa_contract_start_date_peo,
	    cb_org.employee_count,
		cb_org.num_funding_rounds,
		funding_rounds.name,
		funding_rounds.announced_on,
		funding_rounds.investment_type,
		funding_rounds.raised_amount_usd,
		funding_rounds.investor_count,
		investments.investor_name,
		investments.name as investment,
		investments.investor_type,
		investments.is_lead_investor,
		cb_org.total_funding_usd
		
	FROM goglobal_gp_goglobal.v_gp_gg_client_current cc
	LEFT JOIN client_investor.client_investor_gp_cb as gp_cb on cc.id = gp_cb.client_id
	
	LEFT JOIN crunchbase.v_cb_organizations_latest_mat cb_org on gp_cb.uuid = cb_org.uuid
	LEFT JOIN crunchbase.v_cb_funding_rounds_latest_mat funding_rounds on gp_cb.uuid = funding_rounds.org_uuid
	LEFT JOIN crunchbase.v_cb_investments_latest_mat as investments on funding_rounds.uuid =investments.funding_round_uuid

	LEFT JOIN crunchbase.cb_organizations_ipos ipos on gp_cb.uuid = ipos.uuid
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_partners_referral_current prc ON  cc.partners_referral_id = prc.id
	where cc.is_demo_client = 'False' and org_name is not null

    ORDER by 1,14"
c23de620-c0e4-8ef0-03c9-2adca73c5116,Custom SQL Query (gpbidb),postgres,"SELECT id AS professional_id,
		 new_title 
		 FROM ""goglobal_gp_goglobal"".""professional_job_title_cleaned""
		 ORDER BY 1"
c23de620-c0e4-8ef0-03c9-2adca73c5116,Custom SQL Query (gpbidb),postgres,"SELECT t1.id AS customer_id, t1.name AS customer_name, t1.status AS customer_status, t3.name AS customer_country, t4.region AS customer_region
FROM goglobal_gp_goglobal.v_gp_gg_client_current AS t1
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS t2
ON t1.billing_address_id = t2.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS t3
ON t2.country_id = t3.id
LEFT JOIN repo.v_gp_mdm_region AS t4
ON t3.country_code = t4.country_code"
c48d4a56-0fbc-ec47-fb5a-4c536de7d4cd,Asset Downloaded Report,postgres,"SELECT DISTINCT
            leads.id AS lead_id,
            leads.asset_downloaded_c,
            leads.hot_form_c,
            leads.partner_acquisition__c,
			opps.id AS opp_id,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    ELSE NULL::text
                END AS client_region,
                CASE WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    ELSE date_trunc('month'::text, opps.created_date)
                END AS mql_cohort_month,
			leads.created_date AS mql_date,
            leads.lead_source,
                CASE
                    WHEN leads.lead_source IS NULL THEN opps.lead_source
                    ELSE leads.lead_source
                END::text AS lead_or_opp_source,
            leads.country AS lead_country,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    ELSE NULL::text
                END AS client_country,
            leads.campaign__source__c AS campaign_name,
                CASE
                    WHEN leads.converted_opportunity_id IS NULL THEN 1::bigint
                    ELSE rank() OVER (PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date)
                END AS row_num
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
             WHERE (opps.type IS NULL OR opps.type::text <<>> 'Existing Business'::text)
             AND (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text)
             AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text)
             AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text)
             AND leads.asset_downloaded_c IS NOT NULL
             AND (leads.partner_acquisition__c IS NULL OR leads.partner_acquisition__c::text <<>> 'Yes'::text)
             ORDER BY leads.created_date DESC"
b894cf80-40f2-b829-e4e8-2a5fb19ccb60,Custom SQL Query (gpbidb),postgres,"with gp_person_role as 
		(
		 select distinct gpp.id,
	   			regexp_split_to_table(gpp.ROLES, E',') AS ROLe
		 from goglobal_gp_goglobal.v_gp_gg_gp_person_current gpp
		),
gp_person_role_def as
		(
			select distinct id,
			    case when gp_person.role='1' then 'System'
					   when gp_person.role='2' then 'Admin'
					   when gp_person.role='3' then 'Account Manager'
					   when gp_person.role='5' then 'Onboarding Lead'
					   when gp_person.role='6' then 'Offboarding Lead'
					   when gp_person.role='7' then 'Sales'
					   when gp_person.role='8' then 'Marketing'
					   when gp_person.role='11' then 'Client Services'
					   when gp_person.role='12' then 'Finance'
					   when gp_person.role='13' then 'Management'
					   when gp_person.role='14' then 'Unassigned'
					   when gp_person.role='15' then 'LPP Relationship Manager'
					   when gp_person.role='16' then 'Benefits Admin'
					   when gp_person.role='17' then 'Executive Sponsor'
					   when gp_person.role='18' then 'Billing Manager'
					   when gp_person.role='19' then 'Sales Manager'
					   when gp_person.role='20' then 'Client Services Manager'
					   when gp_person.role='21' then 'ACH Controller'
					   when gp_person.role='23' then 'HR Specialist'
					   when gp_person.role='24' then 'Regional Sales Director'
					   when gp_person.role='25' then 'Account Executive'
					   when gp_person.role='26' then 'Legal Representative'
					   when gp_person.role='27' then 'Contract Signatory'
					   when gp_person.role='28' then 'Expense Task Force' 
					   when gp_person.role='29' then 'Billing Admin'
					   when gp_person.role='30' then 'Salesforce Admin'
				  	  else gp_person.role
				 end as gp_person_role
			 from gp_person_role gp_person
			),
client_person_role as 
		(
		select distinct client_person.id,
	   			regexp_split_to_table(client_person.ROLES, E',') AS Roles
		from goglobal_gp_goglobal.v_gp_gg_client_person_current client_person
		),
client_person_role_def as 
		(
			select distinct id,
					CASE WHEN cc_role.roles='6' THEN 'AccountsPayable'
						 WHEN cc_role.roles='1' THEN 'Client Admin'
						 WHEN cc_role.roles='4' THEN'Expense Approver 1'
						 WHEN cc_role.roles='10' THEN 'Expense Approver 2'
						 WHEN cc_role.roles='13' THEN 'GP Submit Repor Administrator'
						 WHEN cc_role.roles='2' THEN'Human Resources'
						 WHEN cc_role.roles='12' THEN 'Invoice Details'
						 WHEN cc_role.roles='3' THEN 'Payroll Approver'
						 WHEN cc_role.roles='5' THEN 'PTO Approver'
						 WHEN cc_role.roles='11' THEN 'RECRUITGLOBAL'
						 WHEN cc_role.roles='7' THEN 'Stakeholder'
						 WHEN cc_role.roles='8' THEN 'Supervisor Manager'
						 WHEN cc_role.roles='9' THEN 'Unassigned'
						WHEN cc_role.roles = '14' THEN 'Time - Proxy Approver'
						WHEN cc_role.roles = '15' THEN 'Expense - Proxy Approver'
						WHEN cc_role.roles = '17' THEN 'Time and Expense Report Admin'
					END AS client_person_role 
			from client_person_role cc_role
		)
select distinct usr.id,
		usr.date_created,
		usr.last_login_date,
		usr.professional_count,
		case when usr.professional_count>>0 then 'Yes'
			 else 'No'
		end as professional_user,
		usr.gp_person_count,
		case when usr.gp_person_count>>0 then 'Yes'
			 else 'No'
		end as gp_person_user,
		usr.client_person_count,
		case when usr.client_person_count>>0 then 'Yes'
			 else 'No'
		end as client_person_user,		
		usr.lsp_person_count,
		case when usr.lsp_person_count>>0 then 'Yes'
			 else 'No'
		end as lsp_person_user,	
		usr.email as user_email,
		CASE WHEN usr.STATUS='3' THEN 'Invitation Accepted'
				when usr.STATUS='2' then 'Invitation Sent'
				when usr.STATUS='4' then 'Locked'
				when usr.STATUS='1' then 'New'
				else usr.status
		end as Invitation_Status,
		--Professional
		pc.id as professional_id,
		concat(pc.first_name,' ',pc.last_name) as Professional, 
		case when pc.status='1' then 'New'
			when pc.status='2' then 'Onboarding'
			when pc.status='3' then 'Active'
			when pc.status='4' then 'Terminating'
			when pc.status='5' then 'Inactive' 
		end as professional_status,
		pc.is_no_longer_with_firm as is_no_longer_with_firm_professional,
		cc.name as Professional_client,
		co.name as professional_country, 
		concat(gppc2.first_name, ' ', gppc2.last_name) AS onboard_lead,
		pc.is_enabled as is_enabled_professional,
		pc.title ""Title - Professional"",
		--Client Person
		cpc.id as client_person_id,
		concat(cpc.first_name,' ',cpc.last_name) as client_person,
		cc2.name as client_person_client,
		cpc.is_no_longer_with_firm as is_no_longer_with_firm_client_person,
		cpc.is_enabled as is_enabled_client_person,
		client_person_role_def.client_person_role,
		cpc.title ""Title - Client Person"",
		--GP Person
		gppc.id as gp_person_id,
		concat(gppc.first_name,' ',gppc.last_name) as gp_person, 
		gppc.is_no_longer_with_firm as is_no_longer_with_firm_gp_person,
		gppc.is_enabled as is_enabled_gp_person,
		gp_person_role_def.gp_person_role,
		wk.""Job Title Description"",
		wk.""Payroll Name"",
		--LSP Person
		lsppc.id as lsp_person_id,
		concat(lsppc.first_name,' ',lsppc.last_name) as lsp_person, 
		lsppc.is_no_longer_with_firm as is_no_longer_with_firm_lsp_person,
		lsppc.is_enabled as is_enabled_lsp_person,
		lsppc.title ""Title - LSP Person""
from goglobal_gp_goglobal.v_gp_gg_user_current usr
left join (select *
		   from goglobal_gp_goglobal.v_gp_gg_professional_current
		   where is_failed_to_launch='false'
		   ) pc on usr.id=pc.user_id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current gppc on usr.id=gppc.user_id
left join goglobal_gp_goglobal.v_gp_gg_client_person_current cpc on usr.id=cpc.user_id
left join (select *
		   from goglobal_gp_goglobal.v_gp_gg_client_current
		   where is_demo_client='false'
		  ) cc on pc.client_id=cc.id
left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco on pc.client_country_id=cco.id
left join goglobal_gp_goglobal.v_gp_gg_country_current co on cco.country_id=co.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current gppc2 ON pc.gp_onboard_lead_id = gppc2.id
left join goglobal_gp_goglobal.v_gp_gg_client_current cc2 on cpc.client_id=cc2.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_person_current lsppc on usr.id=lsppc.user_id
left join workday_hris.v_non_sensitive_workday_data wk on wk.""Work Contact: Work Email""=usr.email
left join gp_person_role_def on gppc.id=gp_person_role_def.id
left join client_person_role_def on cpc.id=client_person_role_def.id"
b870fb4b-e4b2-80d5-10fd-ed8f187e4e46,Custom SQL Query (gpbidb),postgres,"SELECT 
    T1.ID, concat(t1.first_name,' ',t1.last_name) as Name, t1.title, t2.email as User_EMAIL,
	CASE WHEN T2.STATUS='1' THEN 'New'
					 WHEN T2.STATUS='2' THEN 'Invitation Sent'
					 WHEN T2.STATUS='3' THEN 'Invitation Accepted'
					 WHEN T2.STATUS='4' THEN 'Locked'
				END AS INVITATION_STATUS,
				T2.LAST_LOGIN_DATE,
				t1.date_created,
    regexp_split_to_table(T1.roles, E',') AS roles,
	is_enabled,
	is_no_longer_with_firm
FROM goglobal_gp_goglobal.v_gp_gg_gp_person_current t1
left join goglobal_gp_goglobal.v_gp_gg_user_current t2 on t1.user_id = t2.id"
ad92d327-93f5-1e45-fd46-b60c7a4c6b1f,goglobal_goglobal view,,
aded63a4-6166-cb97-d1a8-a3b64811825f,v_gp_sfdc_marketing_dashboard (salesforce.v_gp_sfdc_marketing_dashboard) (gpbidb),,
af268440-81b4-f87f-800b-8b41f56bc897,Missing BS Accounts from MDM,postgres,"select account, count(*) as trx_count, sum(netamount) netamount from gp_acumatica_gl_transaction a left outer join v_gp_mdm_bs b on a.account = b.account_id
where b.account_id is null
and left(account,1)::numeric << 4
group by account"
af268440-81b4-f87f-800b-8b41f56bc897,Missing PL Accounts from MDM,postgres,"select account, count(*) as trx_count, sum(netamount) netamount from gp_acumatica_gl_transaction a left outer join v_gp_mdm_pl b on a.account = b.account_id
where b.account_id is null
and left(account,1)::numeric >>= 4
group by account"
afa5e168-d2a5-b130-819c-5bc32eb69b1f,Campaign & Ad Group Hist + Geo Performance (gpbidb),postgres,"SELECT DISTINCT cal.cal_date,
 gpr.campaign_id::text,
 gpr.ad_group_id::text,
 gpr.ad_network_type_1,
 CASE WHEN c.location_name = 'Hong Kong' THEN 'Asia-Pacific (APAC)'
 	WHEN gpr.country_criteria_id = 2764 THEN 'North America (NA)'ELSE mdm.region END AS region,
 CASE WHEN c.location_name = 'Hong Kong' THEN 'Hong Kong (China)'
 	WHEN gpr.country_criteria_id = 2764 THEN 'United States' ELSE c.location_name END AS country,
 gpr.campaign_name,
 ch.start_date::date AS campaign_start_date,
 gpr.campaign_status,
 CASE WHEN to_tsvector(gpr.campaign_name) @@ to_tsquery('Remarketing') THEN 'REMARKETING' ELSE ch.advertising_channel_type::text END,
 gpr.ad_group_name,
 gpr.ad_group_status,
 gpr.device,
 SUM(gpr.clicks) AS clicks,
 SUM(gpr.impressions) AS impressions,
 SUM(gpr.conversions) AS conversions,
 SUM(gpr.cost) AS spend
FROM gp_calendar cal,
 google_ads.geo_performance_report gpr
 LEFT JOIN (
select DISTINCT location_name, id
from google_ads.campaign_criterion_history
where criterion_type::text = 'Location'::text
AND id IN (SELECT DISTINCT country_criteria_id FROM google_ads.geo_performance_report)
) c on c.id = gpr.country_criteria_id
LEFT JOIN
(SELECT id::text, start_date::date, advertising_channel_type
 FROM google_ads.campaign_history t1
 WHERE updated_at = (SELECT MAX(updated_at) FROM google_ads.campaign_history tmax WHERE t1.id = tmax.id)
 ORDER BY 1) ch ON gpr.campaign_id::text = ch.id::text
LEFT JOIN repo.v_gp_mdm_region mdm ON mdm.country = c.location_name
WHERE date_trunc('day'::text, cal.cal_date::date)::date = date_trunc('day'::text, gpr.date::date)::date
AND cal.cal_date BETWEEN NOW() - INTERVAL '2 YEARS' AND NOW()
GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
ORDER BY 1"
afa5e168-d2a5-b130-819c-5bc32eb69b1f,Keyword Performance (gpbidb),postgres,"SELECT DISTINCT cal.cal_date,
 kpr.campaign_id::text,
 kpr.ad_group_id::text,
 kpr.ad_network_type_1,
 kpr.campaign_name,
 --ch.start_date::date AS campaign_start_date,
 kpr.campaign_status,
 ch.advertising_channel_type,
 kpr.keyword_match_type,
 kpr.criteria,
 kpr.status,
 kpr.system_serving_status,
 kpr.quality_score,
 kpr.is_negative,
 kpr.ad_group_name,
 kpr.ad_group_status,
 --kpr.device,
 SUM(kpr.clicks) AS clicks,
 SUM(kpr.impressions) AS impressions,
 SUM(kpr.conversions) AS conversions,
 SUM(kpr.cost) AS spend,
 SUM(kpr.interactions) AS interactions
FROM gp_calendar cal,
 google_ads.keyword_performance_report kpr
LEFT JOIN
(SELECT id::text, /*start_date::date,*/ advertising_channel_type
 FROM google_ads.campaign_history t1
 WHERE updated_at = (SELECT MAX(updated_at) FROM google_ads.campaign_history tmax WHERE t1.id = tmax.id)
 ORDER BY 1) ch ON kpr.campaign_id::text = ch.id::text
WHERE date_trunc('day'::text, cal.cal_date::date)::date = date_trunc('day'::text, kpr.date::date)::date
AND cal.cal_date BETWEEN NOW() - INTERVAL '2 YEARS' AND NOW()
GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
ORDER BY 1"
afeb143e-7aad-bc11-591b-8ea664801958,Custom SQL Query (gpbidb),postgres,"WITH users AS (SELECT DISTINCT us.id, us.name, us.locale, us.time_zone--, grp.group_name

	FROM jira_integration.user us),
	legal_users AS (SELECT DISTINCT us.id, us.name, grp.group_name
					FROM jira_integration.user us
					LEFT JOIN jira_integration.user_group grp
					ON us.id = grp.user_id
					WHERE group_name = 'gp-legal'
	)	
,
status AS (
	SELECT issue_id, DATE(""time"") AS date, name AS trueStatus
	FROM jira_integration.issue_field_history fh
	LEFT JOIN jira_integration.status st
	ON fh.value::int = st.id
	WHERE field_id = 'status'
)
,
days AS (	
SELECT ""cal"".""cal_date"",
  DATE(""issue"".""created"") AS ""created"",
  ""issue"".""id"" AS ""id"",
  ""issue"".""assignee"" AS ""assignee"",
  ""users1"".""name"" AS ""assignee_name"",
  ""issue"".""reporter"" AS ""reporter"",
  ""users2"".""name"" AS ""reporter_name"",
  ""issue"".""creator"" AS ""creator"",
  ""users3"".""name"" AS ""creator_name"",
  ""issue"".""issue_type"" AS ""issue_type"",
  ""ist"".""name"" AS ""issue_name"",
  ""issue"".""key""  AS ""key"",
  ""issue"".""priority"" AS ""priority"",
  ""issue"".""project"" AS ""project"",
  ""proj"".""name"" AS ""project_name"",
  ""issue"".""resolution"" AS ""resolution"",
  ""resolution"".""name"" as ""resolutionName"",
  ""issue"".""due_date"",
  DATE(""issue"".""resolved"") AS ""resolved"",
  ""issue"".""status"" AS ""status"",
  ""issue"".""summary"" AS ""summary"",
  ""status"".""name"" as ""statusName"",
  DATE(""issue"".""status_category_changed"") AS ""LastStatusChange"",
  COALESCE(DATE(""issue"".""resolved""),DATE(""issue"".""status_category_changed""),NULL) AS ""LastDate"",
  ""priority"".""name"" as ""priorityName"",
  CASE
       WHEN DATE(""issue"".""resolved"") IS NOT NULL AND ""cal"".""cal_date"" >> DATE(""issue"".""resolved"") THEN 'Resolved'::text
	   WHEN DATE(""issue"".""resolved"") IS NOT NULL AND ""cal"".""cal_date"" = DATE(""issue"".""resolved"") THEN 'Closed'::text
	   WHEN DATE(""issue"".""resolved"") IS NULL AND ""issue"".""status"" IN(5,6,10277,10002) AND ""cal"".""cal_date"" >> DATE(""issue"".""status_category_changed"") THEN 'Resolved'::text
       WHEN DATE(""issue"".""resolved"") IS NULL AND ""issue"".""status"" IN(5,6,10277,10002) AND ""cal"".""cal_date"" = DATE(""issue"".""status_category_changed"") THEN 'Closed'::text
	   ELSE 'Active'::text
  END AS active_flag
FROM ""repo"".""gp_calendar"" ""cal"",
""jira_integration"".""issue"" ""issue"" 
LEFT JOIN ""jira_integration"".""resolution"" ""resolution"" on ""resolution"".id = ""issue"".""resolution""
LEFT JOIN ""jira_integration"".""project"" ""proj"" ON ""issue"".""project"" = ""proj"".""id""
LEFT JOIN ""jira_integration"".""status"" ""status"" on ""status"".id = ""issue"".""status""
LEFT JOIN ""jira_integration"".""priority"" ""priority"" on ""priority"".id = ""issue"".""priority""
LEFT JOIN users ""users1"" ON ""issue"".""assignee"" = ""users1"".""id""
LEFT JOIN users ""users2"" ON ""issue"".""reporter"" = ""users2"".""id""
LEFT JOIN users ""users3"" ON ""issue"".""creator"" = ""users3"".""id""
LEFT JOIN ""jira_integration"".""issue_type"" ""ist"" ON ""issue"".""issue_type"" = ""ist"".""id""
WHERE ""cal"".""week_day"" NOT IN ('Saturday','Sunday') AND ""cal"".""cal_date"" <<= (date_trunc('week'::text, now() + '2 week'::interval))
	  AND ""cal"".""cal_date"" >>= DATE(""issue"".""created"") AND ""issue"".""_fivetran_deleted"" = false
      AND project in (10072,10120) --BI
      --AND assignee in (SELECT id FROM legal_users) -- Legal
)
SELECT days.*, trueStatus
	FROM days
	LEFT JOIN status
	ON days.id = status.issue_id AND days.cal_date = status.date
	WHERE active_flag in ('Active','Closed')"
afeb143e-7aad-bc11-591b-8ea664801958,Custom SQL Query (gpbidb),postgres,"SELECT DISTINCT issue_id, AVG(value::real) AS story_points
	FROM jira_integration.issue_field_history
	WHERE field_id = 'customfield_10016' AND is_active = true AND value IS NOT NULL
	GROUP BY issue_id"
afeb143e-7aad-bc11-591b-8ea664801958,Custom SQL Query (gpbidb),postgres,"WITH maxdates AS (SELECT issue_id, MAX(""time"") AS latest
FROM jira_integration.issue_multiselect_history mh
	WHERE field_id = 'customfield_10021' AND is_active = true AND value IS NOT NULL
GROUP BY issue_id)

SELECT DISTINCT issue_id, name AS Sprint --, ""time"", value
	FROM jira_integration.issue_multiselect_history mh
	LEFT JOIN jira_integration.sprint sp
	ON mh.value::int = sp.id
	INNER JOIN maxdates
	USING (issue_id)
	WHERE field_id = 'customfield_10021' AND is_active = true AND value IS NOT NULL AND ""time"" = latest
	ORDER BY issue_id"
b006f9d0-f800-8ea0-6753-9a222f12a071,Outreach - Emails,postgres,"SELECT 
	dt.mail_id,
	dt.body_text,
	u.name AS user_name,
	dt.relationship_user_id,
	dt.name AS relationship_sequence_name,
	dt.display_name AS step_display_name,
	date,
	SUM(delivers) AS delivers,
	SUM(opens) AS opens,
	SUM(clicks) AS clicks,
	SUM(replies) AS replies,
	SUM(unsubscribed_count) AS unsubscribed_count,
	SUM(bounced_count) AS bounced_count
FROM
(
	SELECT
		mailing.id AS mail_id,
		LEFT(mailing.body_text, 1750) AS body_text,
		mailbox.relationship_user_id,
		sequence.name,
		st.display_name,
		date_trunc('hour', mailing.delivered_at::timestamp with time zone)::timestamp with time zone AS date,
		COUNT(mailing.delivered_at) AS delivers,
		COUNT(mailing.opened_at) AS opens,
		COUNT(mailing.clicked_at) AS clicks,
		COUNT(mailing.replied_at) AS replies,
		COUNT(mailing.unsubscribed_at) AS unsubscribed_count,
		0::INT as bounced_count
	FROM outreach.mailbox mailbox
	LEFT JOIN outreach.mailing mailing
	ON mailbox.id = mailing.relationship_mailbox_id
	LEFT JOIN outreach.sequence sequence
	ON mailing.relationship_sequence_id = sequence.id
	LEFT JOIN outreach.sequence_step st
	ON sequence.id = st.relationship_sequence_id
	WHERE mailing._fivetran_deleted IS FALSE
	AND mailing.delivered_at::date BETWEEN NOW() - INTERVAL '2 MONTHS' AND NOW()
	GROUP BY 1, 2, 3, 4, 5, 6
	UNION ALL
	SELECT
		mailing.id AS mail_id,
		LEFT(mailing.body_text, 1750) AS body_text,
		mailbox.relationship_user_id,
		sequence.name,
		st.display_name,
		date_trunc('hour', mailing.bounced_at::timestamp with time zone)::timestamp with time zone AS date,
		0,
		0,
		0,
		0,
		0,
		COUNT(mailing.bounced_at) AS bounced_count
	FROM outreach.mailbox mailbox
	LEFT JOIN outreach.mailing mailing
	ON mailbox.id = mailing.relationship_mailbox_id
	LEFT JOIN outreach.sequence sequence
	ON mailing.relationship_sequence_id = sequence.id
	LEFT JOIN outreach.sequence_step st
	ON sequence.id = st.relationship_sequence_id
	WHERE mailing._fivetran_deleted IS FALSE
	AND mailing.bounced_at::date BETWEEN NOW() - INTERVAL '2 MONTHS' AND NOW()
	GROUP BY 1, 2, 3, 4, 5, 6
) AS dt
LEFT JOIN outreach.users u
ON dt.relationship_user_id = u.id
GROUP BY 1, 2, 3, 4, 5, 6, 7
ORDER BY 6 DESC"
b006f9d0-f800-8ea0-6753-9a222f12a071,Outreach - Emails,postgres,"SELECT user_team.user_id, team.name AS team_name
FROM outreach.user_team user_team
LEFT JOIN outreach.v_outreach_users_current users
ON user_team.user_id = users.id
LEFT JOIN outreach.v_outreach_team_current team
ON user_team.team_id = team.id"
b05bb4aa-b481-23b7-95b4-98ef5d9b3f8d,Fixed Contracts+ (gpbidb),postgres,"SELECT CONCAT(a.first_name, ' ', a.last_name) AS professional_name, a.is_fixed_term_emp_contract, a.contract_start_date,
a.contract_end_date, (AGE(a.contract_end_date,a.contract_start_date)) AS fixed_contract_duration, 
			CASE WHEN a.status= '1' THEN 'New'
	WHEN a.status = '2' THEN 'Onboarding'
	WHEN a.status = '3' THEN 'Active'
	WHEN a.status = '4' THEN 'Terminating'
	WHEN a.status = '5' THEN 'Inactive'
	END AS status_name,
			a.status,a.is_contract_prob_period_applies, a.contract_prob_period_end_date,
a.client_id, b.name, a.lsp_country_id,
			CASE WHEN (a.contract_end_date - current_date) << 0  THEN 'Already Ended'
			WHEN (a.contract_end_date - current_date) >>= 0 AND (a.contract_end_date - current_date) <<= 7 THEN '1 Week or Less'
			WHEN (a.contract_end_date - current_date) >> 7 AND (a.contract_end_date - current_date) <<= 30 THEN '1 Month or Less'
			WHEN (a.contract_end_date - current_date) >> 30 AND (a.contract_end_date - current_date)<<= 60 THEN '1 to 2 Months'
			WHEN (a.contract_end_date - current_date) >> 60 AND (a.contract_end_date - current_date)<<= 90 THEN '2 to 3 Months'
		    WHEN (a.contract_end_date - current_date) >> 90 THEN 'More than 3 Months'
WHEN a.contract_end_date IS NULL THEN 'No Contract End Date'
			END AS to_end,
			co.name as Country
FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS b ON a.client_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current cco ON a.client_country_id = cco.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current  co on  cco.country_id=co.id
WHERE is_fixed_term_emp_contract = 'true'
AND is_failed_to_launch = 'false'
AND is_demo_client = 'false'"
b05bb4aa-b481-23b7-95b4-98ef5d9b3f8d,Fixed Contracts+ (gpbidb),postgres,"WITH t1 AS(SELECT DISTINCT a.professional_id, a.client_person_id, CONCAT (b.first_name, ' ', b.last_name)AS user_name, c.email,
CASE WHEN a.role='6' THEN 'AccountsPayable'
     WHEN a.role='1' THEN 'Client Admin' 
	 WHEN a.role='4' THEN'Expense Approver 1'
     WHEN a.role='10' THEN 'Expense Approver 2' 
	 WHEN a.role='13' THEN 'GP Submit Repor Administrator' 
	 WHEN a.role='2' THEN'Human Resources'
     WHEN a.role='12' THEN 'Invoice Details' 
	 WHEN a.role='3' THEN 'Payroll Approver' 
	 WHEN a.role='5' THEN 'PTO Approver'
     WHEN a.role='11' THEN 'RECRUITGLOBAL'  
	 WHEN a.role='7' THEN 'Stakeholder'  
	 WHEN a.role='8' THEN 'Supervisor Manager'
     WHEN a.role='9' THEN 'Unassigned'   
	 END AS Role
	FROM goglobal_gp_goglobal.v_gp_gg_professional_client_assignment_current AS a
	INNER JOIN goglobal_gp_goglobal.v_gp_gg_client_person_current AS b
	ON a.client_person_id = b.id
	INNER JOIN goglobal_gp_goglobal.v_gp_gg_user_current AS c
	ON b.user_id = c.id
	ORDER BY a.professional_id),

t2 AS (SELECT d.id, d.is_fixed_term_emp_contract, CONCAT(d.first_name, ' ', d.last_name) AS prof_name, d.client_id, e.name
FROM goglobal_gp_goglobal.v_gp_gg_professional_current AS d
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS e
ON d.client_id = e.id
WHERE d.is_failed_to_launch = 'false'
AND d.is_fixed_term_emp_contract = 'true'
AND e.is_demo_client = 'false')

SELECT t2.client_id, t2.name, t1.professional_id, t2.prof_name, t1.user_name, t1.role, t1.email
FROM t1
INNER JOIN t2
ON t1.professional_id = t2.id
WHERE (role = 'Supervisor Manager' OR role = 'Human Resources')
ORDER BY professional_id"
b0678d4b-89c8-8d4a-e91e-1048384139cd,Custom SQL Query (gpbidb),postgres,"Select Distinct 
    Client.name as Customer_Name, 
    Client.legal_entity_name as Customer_Legal_Name, 
    Client.id as New_Customer_id,
    Client.classic_client_id as GPP_Classic_Client_id, 
    Client.gp_account_executive_name as GP_account_executive, 
    Client.is_gpcontractor_customer, 
    Case
        When Client.status = 1 then 'Active'
        else 'Inactive'
    End as Customer_status, 
    Client.updated_at as Client_Info_updated_at, 
    Agreement.user_id as Agreement_user_id, 
    Agreement.person_id as Agreement_person_id,
    Agreement.version as Agreement_version_id,
    Agreement.updated_at as Agreement_updated_at, 
    Contract.status as Contract_status,
    Contract.updated_at as Contract_updated_at, 
    Contract_data.contract_end_date as Contract_data_end_date, 
    Contract_data.updated_at as contract_data_updated_at, 
    Signing.client_person_signed_at, 
    Signing.contractor_signed_at, 
    Signing.cancelled_by_client_person_at,
    Signing.updated_at as signing_updated_at, 
    Signing.client_person_rejected_at
From contractors_contractor.v_client_current Client
Left Join Contractors_contractor.v_agreement_current Agreement on Client.id = Agreement.client_id
Left Join contractors_contractor.v_contract_current  Contract on Client.classic_client_id = contract.client_id::varchar
Left Join contractors_contractor.v_contract_data_current Contract_data on Contract.id = Contract_data.contract_id
Left Join contractors_contractor.v_contract_signing_current signing on contract.id = signing.contract_id
Left Join goglobal_gp_goglobal.v_gp_gg_client_current Client_current on Client_current.id::varchar = Client.classic_client_id
where  Client_current.is_demo_client is false
Order by Client.Classic_client_id asc"
b863c178-1b5b-5664-f00f-918070de77a8,Referral count (gpbidb),postgres,"SELECT 
pr.id,
pr.name AS referral,
cc.client_id, 
cc.client, 
cc.status
FROM goglobal_gp_goglobal.partners_referral pr
LEFT JOIN ( SELECT id AS client_id, 
                   name AS client, 
		           PARTNERS_REFERRAL_ID,
                   status
		   FROM goglobal_gp_goglobal.v_gp_gg_client_current
WHERE is_demo_client = false) cc ON pr.ID=cc.PARTNERS_REFERRAL_ID
WHERE pr.deleted = FALSE
AND pr._fivetran_deleted = FALSE"
b863c178-1b5b-5664-f00f-918070de77a8,Custom SQL Query (gpbidb),postgres,"WITH mgmt_fee AS(

	SELECT start_date as Date,
	client_bill_id,
	CASE WHEN invoice_date IS NULL AND cbc.invoice_release_date IS NOT NULL THEN cbc.invoice_release_date
	ELSE invoice_date END as invoice_date,
	professional_id,
    bill_status,
	billing_amount AS Mgmt_Fee_Amount,
	billing_currency AS currency
FROM goglobal_gp_goglobal.v_gp_gg_total_bills_mat AS bill
LEFT JOIN (SELECT id, invoice_release_date FROM goglobal_gp_goglobal.v_gp_gg_client_bill_current) AS cbc
on bill.client_bill_id = cbc.id
WHERE type = 'Management Fee'),

ex_rate AS (
SELECT
	bill.*,
	rate.currency_code,
	rate.avg_rate
FROM mgmt_fee as bill
LEFT JOIN (
SELECT currency_code, currency_name, DATE(date_trunc('month',date)) as date_month ,AVG(rate) as avg_rate
FROM goglobal_gp_goglobal.v_gp_gg_country_current country, (SELECT * FROM goglobal_gp_goglobal.v_gp_gg_fxrate_current WHERE (target_currency_id = 247 OR target_currency_id IS NULL)) fxrate
WHERE fxrate.currency_id = country.id
GROUP BY 1,2,3
) AS rate ON bill.currency = rate.currency_name AND bill.DATE = rate.date_MONTH 
)

SELECT
     
	 th.cal_date,
	 th.client_name AS client,
	 mc.status AS client_status,
	 th.client_id,
	 mc.pricing_model,
	 th.payroll_start_date,
	 mp.payroll_end_date,
	 th.professional_id,
	 mp.name AS professional_name,
	 CASE WHEN th.active_flag = 'Active' THEN th.active_flag
	 ELSE 'Inactive' END AS professional_status,
	 mp.employment_country AS working_country,
	 mc.partner_referral AS New_Referral_Field,
	 mc.partner_referral AS partner,
	 mc.agg_service_date msa_start_date,
     CASE WHEN th.addendum_enrollment_date ISNULL
	 THEN th.addendum_enrollment_date_ASO
	 ELSE th.addendum_enrollment_date
	 END AS Addendum_Enrollment_Date, 
	 th.country_name,
	 mp.employment_country_region AS professional_working_region,
	 th.tenure_months,
     ex_rate.invoice_date,
     ex_rate.Mgmt_Fee_Amount,
	 ex_rate.currency,
	 ex_rate.currency_code,
	 ex_rate.avg_rate,
	 ex_rate.bill_status,
     mp.service_class,
     mc.billing_region AS customer_region,
     CASE WHEN th.cal_date >>= '2022-02-01' then 1 else 0 END as flag_pricing_model_start,
     sf.partner_billing_country AS partner_country,
	 mc.adp_lead_source,
	 sf.partner_region,
	 cc.referred_by,
         sf.partner_acc_type,
         sf.partner_level__c,
         sf.created_date

	 
FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard AS th
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_professional AS mp ON th.professional_id = mp.internal_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_master_client AS mc ON th.client_id = mc.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS cc ON mc.id = cc.id
LEFT JOIN ex_rate ON date_trunc('month', th.cal_date) = ex_rate.date AND mp.internal_id = ex_rate.professional_id
LEFT JOIN (SELECT sfo.account_id, 
		          sfo.close_date, 
		          sfo.partner2__c,
		          sfo.created_date,
		          sfa.name AS partner_name,
		          sfa.type AS partner_acc_type,
		          sfa.partner_level__c,
		          sfa.billing_country AS partner_billing_country,
		          sfa.client_region_billing_country AS partner_region
		   
	       FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time AS sfo
		   LEFT JOIN salesforce.v_gp_sfdc_account_current AS sfa ON sfo.partner2__c = sfa.id
		   WHERE sfo.stage_name = 'Closed Won'
		   AND sfo.type = 'New Business'
		   AND sfo.is_won = TRUE) AS SF
		   ON cc.salesforce_account_id = SF.account_id

WHERE date_trunc('month', th.cal_date) >>= '2019-01-01'
AND date_trunc('month', th.cal_date) <<= date_trunc('month', now())"
b4fa2518-6e37-dabb-7cf2-8a9112d113f0,Custom SQL Query (gpbidb),,
b4fa2518-6e37-dabb-7cf2-8a9112d113f0,Custom SQL Query (gpbidb),postgres,"WITH CPQ AS (
	SELECT DISTINCT 
	             d.name AS sfdc_account_name,
	             a.account_id,
	             a.id AS opp_id, 
                 a.name AS opp_name, 
		         a.owner_id,
	             e.name AS Opportunity_Owner,
                 c.sbqq_product_name_c AS country,
				 CASE WHEN c.sbqq_product_name_c IS NOT NULL THEN 'CPQ' END AS origin,
			     c.country_product_iso_c AS country_code,
	             a.close_date as SFDC_Opportunity_Close_Date,
	             a.stage_name AS opp_status,
	             a.type AS opportunity_type,
	             a.partner_acquisition__c,
	             a.record_type_bi__c,
	             a.what_is_your_primary_product_interest__c,
                     a.pricing_model__c
				 
FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time AS a
LEFT JOIN salesforce.sbqq_quote_c AS b
ON a.id = b.sbqq_opportunity_2_c 
LEFT JOIN salesforce.sbqq_quote_line_c AS c
ON  b.id= c.sbqq_quote_c
LEFT JOIN salesforce.v_gp_sfdc_account_current AS d
ON a.account_id = d.id
LEFT JOIN salesforce.v_gp_sfdc_user_current AS e
ON a.owner_id = e.id
WHERE b.sbqq_primary_c= true
AND c.country_product_c = true
AND a.stage_name = 'Closed Won'
AND a.is_won = 'True'
AND a.close_date >>= '2015-01-01'
AND c.is_deleted = 'No'
ORDER BY a.id),

OPP_DETAILS AS
(
 SELECT 
	   f.name AS sfdc_account_name,
	   a.account_id,
	   a.id AS opp_id,
       a.name AS opp_name, 
	   a.owner_id,
	   g.name AS Opportunity_Owner,
	   c.name AS country,
	   CASE WHEN c.name IS NOT NULL THEN 'SFDC' END AS origin,
	   e.source_system_id AS country_code,
	   a.close_date as SFDC_Opportunity_Close_Date,
	   a.stage_name AS opp_status,
	   a.type AS opportunity_type,
	   a.partner_acquisition__c,
	   a.record_type_bi__c,
	   a.what_is_your_primary_product_interest__c,
          a.pricing_model__c

			FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time AS a
			LEFT JOIN salesforce.v_gp_sfdc_opportunity_detail_current AS b
            ON a.id = b.opportunity__c
            LEFT JOIN salesforce.v_gp_sfdc_country_current AS c
            ON b.country__c = c.id
			LEFT JOIN repo.v_gp_mdm_country AS d
			ON c.id = d.source_system_id
			LEFT JOIN (SELECT * 
					   FROM repo.v_gp_mdm_country 
					   WHERE LENGTH(source_system_id) = 2)e
			ON d.mdm_country_taxonomyitemid = e.mdm_country_taxonomyitemid
	        LEFT JOIN salesforce.v_gp_sfdc_account_current AS f
            ON a.account_id = f.id
	        LEFT JOIN salesforce.v_gp_sfdc_user_current AS g
	        ON a.owner_id = g.id
			WHERE a.stage_name = 'Closed Won'
		    AND a.is_won = 'True'
	        AND a.close_date >>= '2015-01-01'
		   -- AND c.name IS NOT NULL
),
			
SFDC AS (SELECT DISTINCT
	  sfdc_account_name,
	  account_id,
	  opp_id,
      opp_name, 
	  owner_id,
	  Opportunity_Owner,
	  country,
	  country_code,
	  SFDC_Opportunity_Close_Date,
	  opp_status,
	  opportunity_type,
	  partner_acquisition__c,
	  record_type_bi__c,
	  what_is_your_primary_product_interest__c,
         pricing_model__c
FROM CPQ
UNION
SELECT 
	  sfdc_account_name,
	  account_id,
	  opp_id,
      opp_name, 
	  owner_id,
	  Opportunity_Owner,
	  country,
	  country_code,
	  SFDC_Opportunity_Close_Date,
	  opp_status,
	  opportunity_type,
	  partner_acquisition__c,
	  record_type_bi__c,
	  what_is_your_primary_product_interest__c,
         pricing_model__c
FROM OPP_DETAILS
ORDER BY 1,3),

SFDC_MATCH AS(
SELECT SFDC.*,  CASE WHEN a.salesforce_account_id IS NOT NULL AND b.source_id IS NOT NULL THEN a.salesforce_account_id
                     WHEN a.salesforce_account_id IS NULL AND b.source_id IS NOT NULL THEN b.source_id
                     WHEN a.salesforce_account_id IS NOT NULL AND b.source_id IS NULL THEN a.salesforce_account_id
                END as sfdc_id_match
	FROM SFDC
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current a
    ON sfdc.account_id = a.salesforce_account_id
	
	LEFT JOIN repo.v_gp_mdm_customer AS b
    ON sfdc.account_id::VARCHAR = b.source_id),

GPP AS (
SELECT DISTINCT 
	            CASE WHEN a.salesforce_account_id IS NOT NULL AND mdm_GG.source_id IS NOT NULL THEN a.salesforce_account_id
                     WHEN a.salesforce_account_id IS NULL AND mdm_GG.source_id IS NOT NULL THEN mdm_GG.source_id
                     WHEN a.salesforce_account_id IS NOT NULL AND mdm_GG.source_id IS NULL THEN a.salesforce_account_id
                END as gpp_id_match,
	            a.id,
	            a.name,
	            CASE WHEN a.msa_contract_start_date_peo ISNULL THEN a.msa_contract_start_date_aso ELSE a.msa_contract_start_date_peo END AS ma_start_date,
	            a.is_original_msa,
	            a.addendum_enrollment_date,
	            a.country AS gpp_country,
	            a.country_code,
	            b.pop_current, 
	            c.pop_to_date,
	            d.min_pay_start,
	            d.max_pay_start,
	            d.min_pay_end,
	            d.max_pay_end
	            
	FROM (SELECT a.id, a.salesforce_account_id,a.name,e.addendum_enrollment_date,e.is_original_msa,a.msa_contract_start_date_peo, a.msa_contract_start_date_aso,f.name AS country, f.country_code
		  FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
		  LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_country_current AS e
	      ON a.id = e.client_id
	      LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS f
	      ON e.country_id = f.id
		  WHERE a.is_demo_client = false) AS a
	
	LEFT JOIN ( SELECT client_id,country_name,COUNT(DISTINCT professional_id) pop_current
			   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			   WHERE active_flag = 'Active'
			   AND DATE_TRUNC ('month', cal_date)= DATE_TRUNC ('month', CURRENT_DATE)
			   AND product_type_id <<>> '4'
			   GROUP BY 1,2) AS b
	ON a.id = b.client_id
	AND a.country = b.country_name
	
	LEFT JOIN ( SELECT client_id,country_name,COUNT(DISTINCT professional_id) pop_to_date
			   FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			   WHERE active_flag = 'Active'
			   AND product_type_id <<>> '4'
			   GROUP BY 1,2) AS c
	ON a.id = c.client_id
	AND a.country = c.country_name
	
	LEFT JOIN (SELECT client_id, country_name, MAX(payroll_start_date)AS max_pay_start, MAX (payroll_end_date)AS max_pay_end,
				   MIN(payroll_end_date)AS min_pay_end, MIN(payroll_start_date) AS min_pay_start
				  FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard 
			      WHERE product_type_id <<>> '4'
				  GROUP BY 1,2) d
	ON a.id = d.client_id
	AND a.country= d.country_name
	
	
	LEFT JOIN repo.v_gp_mdm_customer AS e
    ON a.id::VARCHAR = e.source_id
	
    LEFT JOIN (SELECT *
    FROM repo.v_gp_mdm_customer
    WHERE source = 'SFDC Customer'
    ) AS mdm_GG
    ON e.parent_name = mdm_GG.parent_name

	ORDER BY 2
),

FINAL AS(SELECT SFDC_MATCH.*,
       CASE WHEN SFDC_MATCH.sfdc_id_match IS NULL AND gpp.gpp_id_match IS NOT NULL THEN gpp.gpp_id_match
	        WHEN SFDC_MATCH.sfdc_id_match IS NOT NULL AND gpp.gpp_id_match IS NULL THEN SFDC_MATCH.sfdc_id_match
			WHEN SFDC_MATCH.sfdc_id_match = gpp.gpp_id_match THEN SFDC_MATCH.sfdc_id_match
			END AS full_id_match,
       GPP.*,
	   CASE WHEN SFDC_MATCH.account_id IS NOT NULL AND SFDC_MATCH.sfdc_id_match IS NOT NULL AND gpp.id IS NULL THEN 'On SFDC but No GPP'
	        WHEN GPP.id IS NOT NULL AND GPP.gpp_id_match IS NOT NULL AND SFDC_MATCH.Account_id IS NULL THEN 'On GPP but Not SFDC'
	        WHEN SFDC_MATCH.account_id IS NOT NULL AND GPP.id IS NOT NULL THEN 'Both Platforms'
		    WHEN SFDC_MATCH.account_id IS NOT NULL AND SFDC_MATCH.sfdc_id_match IS NULL THEN 'On SFDC Only and No ID Match Found'
		    WHEN GPP.id IS NOT NULL AND GPP.gpp_id_match IS NULL THEN 'On GPP Only and No ID Match Found'
	   END AS country_platform_status,
	   
	   	CASE WHEN SFDC_MATCH.account_id IS NOT NULL AND SFDC_MATCH.sfdc_id_match IS NOT NULL AND gpp.id IS NULL THEN 'On SFDC but No GPP'
		 
		     WHEN SFDC_MATCH.account_id IS NOT NULL AND SFDC_MATCH.sfdc_id_match IS NULL AND gpp.id IS NULL THEN 'On SFDC Only and No ID Match Found'
		     
			 WHEN GPP.id IS NOT NULL AND (CURRENT_DATE - (CASE WHEN SFDC_MATCH.sfdc_opportunity_close_date IS NULL THEN GPP.addendum_enrollment_date ELSE SFDC_MATCH.sfdc_opportunity_close_date END)) <<= 90
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.min_pay_start IS NULL
			 THEN 'Newly Signed'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NULL
			 AND GPP.pop_current IS NULL
			 AND date_trunc('month', GPP.min_pay_start) >>= date_trunc('month',CURRENT_DATE)  THEN 'Onboarding' 
			  
		     WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current >>0   THEN 'Currently Active'
			 
			 WHEN GPP.id IS NOT NULL 
			 AND GPP.pop_to_date IS NOT NULL
			 AND GPP.pop_current IS NULL
			 AND GPP.max_pay_end << CURRENT_DATE OR (date_trunc('month', GPP.max_pay_start)  >>= date_trunc('month',CURRENT_DATE) AND GPP.max_pay_end >> CURRENT_DATE)
			 THEN 'Currently Inactive'
			 
			 
			 WHEN (GPP.id IS NOT NULL 
			 AND (CURRENT_DATE - (CASE WHEN SFDC_MATCH.sfdc_opportunity_close_date IS NULL THEN GPP.addendum_enrollment_date ELSE SFDC_MATCH.sfdc_opportunity_close_date END)) >>90
			 AND GPP.pop_to_date IS NULL)
		     OR (GPP.gpp_country IS NULL AND GPP.id IS NOT NULL)
		     OR (GPP.id IS NOT NULL AND GPP.gpp_country IS NOT NULL AND GPP.addendum_enrollment_date IS NULL AND SFDC_MATCH.sfdc_opportunity_close_date IS NULL )
             THEN 'Never Active' 
			
			 END AS country_status,
			 
			 CASE WHEN SFDC_MATCH.Country IS NOT NULL AND GPP.gpp_Country IS NULL THEN SFDC_MATCH.Country
			 WHEN SFDC_MATCH.Country IS NULL AND GPP.gpp_Country  IS NOT NULL THEN GPP.gpp_Country 
			 ELSE GPP.gpp_Country 
			 END AS full_country_match
			
FROM SFDC_MATCH
FULL JOIN GPP
ON SFDC_MATCH.account_id = GPP.gpp_id_match
AND SFDC_MATCH.country_code = GPP.country_code
ORDER BY SFDC_MATCH.sfdc_account_name, SFDC_MATCH.opp_id),
--pricing_model
-- count of contractors



STATUS AS(SELECT FINAL.opp_id,
CASE
                WHEN COUNT (CASE WHEN country_status = 'Newly Signed' THEN 1 END) >>0
				AND COUNT (CASE WHEN country_status = 'Onboarding' THEN 1 END) = 0 
				AND COUNT (CASE WHEN country_status = 'Currently Active' THEN 1 END) = 0
				AND COUNT (CASE WHEN country_status = 'Currently Inactive' THEN 1 END) = 0
				AND COUNT (CASE WHEN country_status = 'Stalled' THEN 1 END) = 0
				THEN 'Newly Signed'
				
				WHEN COUNT (CASE WHEN country_status = 'Onboarding' THEN 1 END)>> 0 
				AND (COUNT (CASE WHEN country_status = 'Newly Signed' THEN 1 END) = 0 OR COUNT (CASE WHEN country_status = 'Newly Signed' THEN 1 END) >> 0)
				AND COUNT (CASE WHEN country_status = 'Currently Active' THEN 1 END) = 0
				AND COUNT (CASE WHEN country_status = 'Currently Inactive' THEN 1 END) = 0
				AND COUNT (CASE WHEN country_status = ' Stalled' THEN 1 END) = 0
				THEN 'Onboarding'
				
				WHEN COUNT (CASE WHEN country_status = 'Currently Active' THEN 1 END)>> 0 THEN 'Currently Active'
				
				WHEN COUNT (CASE WHEN country_status = 'Currently Inactive' THEN 1 END) >> 0 
				AND COUNT(CASE WHEN country_status = 'Currently Active' THEN 1 END) = 0
				THEN 'Currently Inactive'
				
				WHEN COUNT(CASE WHEN country_status = 'Currently Active' THEN 1 END) = 0
				AND COUNT (CASE WHEN country_status = 'Newly Signed' THEN 1 END) = 0
				AND COUNT (CASE WHEN country_status = 'Onboarding' THEN 1 END) = 0 
				AND COUNT (CASE WHEN country_status = 'Currently Inactive' THEN 1 END) = 0
				AND COUNT (CASE WHEN country_status = 'Never Active' THEN 1 END) >> 0
				THEN 'Never Active'
		  
		        WHEN COUNT(CASE WHEN country_status = 'Currently Active' THEN 1 END) = 0
				AND COUNT (CASE WHEN country_status = 'Newly Signed' THEN 1 END) = 0
				AND COUNT (CASE WHEN country_status = 'Onboarding' THEN 1 END) = 0 
				AND COUNT (CASE WHEN country_status = 'Currently Inactive' THEN 1 END) = 0
				AND COUNT (CASE WHEN country_status = 'Never Active' THEN 1 END) = 0
		        AND (COUNT (CASE WHEN country_status = 'On SFDC but No GPP' THEN 1 END) >> 0
					 OR COUNT (CASE WHEN country_status = 'On SFDC Only and No ID Match Found' THEN 1 END) >> 0)
				THEN 'Unknown'

             
		      
                END AS msa_addenda_status
		  FROM FINAL
		  GROUP BY 1),

DASHBOARD AS(

SELECT 

FINAL.sfdc_account_name,
FINAL.account_id AS sfdc_account_id,
FINAL.opp_id AS sfdc_opp_id,
FINAL.opp_name AS sfdc_opp_name,
FINAL.owner_id AS sfdc_owner_id,
FINAL.opportunity_owner AS sfdc_owner_name,
FINAL.country AS sfdc_opp_country,
FINAL.sfdc_opportunity_close_date,
FINAL.opp_status AS sfdc_opp_status,
FINAL.opportunity_type AS sfdc_opp_type,
FINAL.partner_acquisition__c AS sfdc_partner_acquisition__c ,
FINAL.record_type_bi__c AS sfdc_record_type_bi__c,
FINAL.what_is_your_primary_product_interest__c AS sfdc_what_is_your_primary_product_interest__c,
FINAL.pricing_model__c,
FINAL.full_id_match,
FINAL.id AS gpp_id,
FINAL.name AS gpp_customer_name,
FINAL.ma_start_date AS gpp_ma_start_date,
FINAL.is_original_msa AS gpp_is_original_msa,
FINAL.addendum_enrollment_date AS gpp_addendum_enrollment_date,
FINAL.gpp_country,
FINAL.pop_current AS gpp_pop_current,
FINAL.pop_to_date AS gpp_pop_to_date,
FINAL.min_pay_start AS gpp_min_pay_start,
FINAL.max_pay_start AS gpp_max_pay_start,
FINAL.min_pay_end AS gpp_min_pay_end,
FINAL.max_pay_start AS gpp_max_pay_end,
FINAL.full_country_match,
FINAL.country_platform_status,
FINAL.country_status,
STATUS.msa_addenda_status

FROM FINAL 
LEFT JOIN STATUS
ON FINAL.opp_id = STATUS.opp_id)

SELECT *
FROM DASHBOARD"
b5068c5a-6dd8-e914-89b3-1a765a0ec6b1,v_gp_gg_professional_current (goglobal_gp_goglobal.v_gp_gg_professional_current)+ (gpbidb),,
b565b42c-399f-b1b8-aad6-778c375483f2,Custom SQL Query (gpbidb),postgres,"select distinct  
	max(fivetran_synced_opps) as last_data_updated
from
	salesforce.v_gp_sfdc_marketing_dashboard"
b565b42c-399f-b1b8-aad6-778c375483f2,v_gp_sfdc_opportunity_current_pacific_time (salesforce.v_gp_sfdc_opportunity_current_pacific_time)+ (gpbidb),postgres,"WITH v_gp_sfdc_leads_and_opportunities AS (
         SELECT DISTINCT account.id AS account_id,
            account.name AS account_name,
                CASE
                    WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                    ELSE date_trunc('month'::text, opps.created_date)
                END AS mql_cohort_month,
            leads.id AS lead_id,
            opps.b_d_r__date__c,
            opps.id AS opp_id,
            leads.is_converted,
            leads.converted_opportunity_id,
            leads.country AS lead_country,
            leads.campaign__source__c AS campaign_name,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.lead_disqualified_reason__c::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN opps.lead_disqualified_reason__c::text
                    ELSE NULL::text
                END AS lead_disqualified_reason,
            leads.status AS lead_status,
            opps.opportunity__status__c AS opp_status,
            opps.closed__lost__c,
            leads.country_code AS lead_country_code,
            leads.lead_tier_c,
            opps.lead_source_tier_c,
            leads.bdr_unqualified_reason__c AS bdr_unqualified_reason,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country_code::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country_code::text
                    ELSE NULL::text
                END AS country_code,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                    ELSE NULL::text
                END AS client_country,
                CASE
                    WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                    WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                    ELSE NULL::text
                END AS client_region,
            leads.created_date AS mql_date,
            leads.converted_date,
            leads.partner_acquisition__c AS partner_acq_leads,
            -- usr_lead_opp.leads_owner_name,
            -- usr_lead_opp.leads_owner_manager,
            opps.created_date,
            opps.sales__accepted__date__c AS sal_accepted_date,
            opps.s_a_l__c,
            opps.s_a_l_by__sales__c,
            opps.record_type_bi__c,
            opps.close_date AS msa_date,
            opps.stage_name,
            opps.partner_acquisition__c AS partner_acq_opps,
            opps.is_won AS opp_won,
            opps.record_type_text_id_c AS record_type_opps,
            -- usr_lead_opp.opps_owner_name,
            -- usr_lead_opp.opps_owner_manager,
            opps.name AS opp_name,
            opps.type AS opp_type,
            acc_partn.partner_level__c AS partner_level,
            opps.pricing_model__c AS pricing_model_opps,
                CASE
                    WHEN leads.lead_source IS NULL THEN opps.lead_source
                    ELSE leads.lead_source
                END::text AS lead_or_opp_source,
            -- usr_lead_opp.partner_development_owner,
            -- usr_lead_opp.bdr_owner_name,
            -- usr_lead_opp.bdr_manager_name,
            acc_partn.name AS partner,
            acc_partn.client_region_billing_country AS partner_region,
            account.type AS account_type,
            account.pricing_model__c AS acc_pricing_model,
                CASE
                    WHEN (opps.record_type_bi__c IS NULL OR opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) 
	 				AND (opps.partner_acquisition__c IS NULL OR opps.partner_acquisition__c::text <<>> 'Yes'::text) 
	 				-- AND (opps.pricing_model__c IS NULL OR opps.pricing_model__c::text <<>> 'Contractor only'::text) 
	 				THEN 'Non Partner Opp or Existing Business'::text
                    ELSE 'Partner Opp or Existing Business'::text
                END AS opp_go_flag,
            opps.immediate_headcount_c,
            opps.headcount_c,
            opps.de_country_c,
            opps.closed_lost_category_detail_c,
            opps.incumbent_solution_c,
            opps.competitorsthatare_involved_c,
            opps.contact_id,
            opps.primary_quotes_pricing_model_c,
            opps.competitors__involved__c,
            opps.other__competitor__c,
            opps.update_time AS fivetran_synced_opps,
            opps.total_professionals_c,
            leads.update_time AS fivetran_synced_leads,
            leads.company,
            leads.name,
            leads.email,
            acc_partn.billing_country AS partner_country,
            opps.existing_business_deal_classification_c,
            opps.existing_business_opp_type_c,
            opps.existing_business_opp_type_detail_c,
            users.name AS opp_owner_name,
            acc_partn.partner_agreement_effective_date__c AS partner_agreement_effective_date_c,
                CASE
                    WHEN leads.converted_opportunity_id IS NULL THEN 1::bigint
                    ELSE rank() OVER (PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date)
                END AS row_num,
            acc_partn.partner_vertical__c,
            acc_partn.vital_few__c as vital_few_partner,
			account.vital_few__c as vital_few_account,
            opps.opportunity_score_segment_c AS opps_score_segment,
            leads.opportunity_score_segment_c AS lead_score_segment,
			account.billing_country,
			users.manager_id,
			users.user_region_c as owner_region,
			users.is_active as owner_active,
			users.created_date as owner_created_date,
			opps.partner_development_owner_lookup__c,
			opps.owner_id,
			opps.sales_title_c_c,
 			opps.engagement__type__c
           FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
             FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
             LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
             LEFT JOIN salesforce.v_gp_sfdc_user_current users ON users.id::text = opps.owner_id::text
             --LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_or_opp_id::text =
    				-- CASE
                    -- WHEN leads.id IS NULL THEN opps.id
                    -- ELSE leads.id
                -- END::text
        ), mql AS (
         SELECT DISTINCT 'MQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.lead_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.mql_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            -- v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            -- v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE (v_gp_sfdc_leads_and_opportunities.partner_acq_leads::text <<>> 'Yes'::text OR v_gp_sfdc_leads_and_opportunities.partner_acq_leads IS NULL) AND v_gp_sfdc_leads_and_opportunities.lead_id IS NOT NULL
        ), mql_to_sql AS (
         SELECT DISTINCT 'MQL to SQL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.created_date::date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_id IS NOT NULL
        ), sql_to_sal AS (
         SELECT DISTINCT 'SQL to SAL'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c::text = 'Yes'::text
        ), sal_to_msa AS (
         SELECT DISTINCT 'SAL to MSA'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = true
        ), closed_lost AS (
         SELECT DISTINCT 'Closed Lost'::text AS cohort_stage,
            v_gp_sfdc_leads_and_opportunities.account_id,
            v_gp_sfdc_leads_and_opportunities.account_name,
            v_gp_sfdc_leads_and_opportunities.b_d_r__date__c,
            v_gp_sfdc_leads_and_opportunities.opp_id AS lead_or_opp_id,
            v_gp_sfdc_leads_and_opportunities.msa_date AS point_time_date,
            v_gp_sfdc_leads_and_opportunities.mql_cohort_month,
            v_gp_sfdc_leads_and_opportunities.lead_id,
            v_gp_sfdc_leads_and_opportunities.opp_id,
            v_gp_sfdc_leads_and_opportunities.is_converted,
            v_gp_sfdc_leads_and_opportunities.converted_opportunity_id,
            v_gp_sfdc_leads_and_opportunities.lead_country,
            v_gp_sfdc_leads_and_opportunities.campaign_name,
            v_gp_sfdc_leads_and_opportunities.lead_disqualified_reason,
            v_gp_sfdc_leads_and_opportunities.lead_status,
            v_gp_sfdc_leads_and_opportunities.opp_status,
            v_gp_sfdc_leads_and_opportunities.closed__lost__c,
            v_gp_sfdc_leads_and_opportunities.lead_country_code,
            v_gp_sfdc_leads_and_opportunities.country_code,
            v_gp_sfdc_leads_and_opportunities.lead_source_tier_c AS tier,
            v_gp_sfdc_leads_and_opportunities.bdr_unqualified_reason,
            v_gp_sfdc_leads_and_opportunities.client_region,
            v_gp_sfdc_leads_and_opportunities.client_country,
            v_gp_sfdc_leads_and_opportunities.mql_date,
            v_gp_sfdc_leads_and_opportunities.converted_date,
            v_gp_sfdc_leads_and_opportunities.partner_acq_leads,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_name,
            --v_gp_sfdc_leads_and_opportunities.leads_owner_manager,
            v_gp_sfdc_leads_and_opportunities.created_date,
            v_gp_sfdc_leads_and_opportunities.sal_accepted_date,
            v_gp_sfdc_leads_and_opportunities.s_a_l__c,
            v_gp_sfdc_leads_and_opportunities.s_a_l_by__sales__c,
            v_gp_sfdc_leads_and_opportunities.record_type_bi__c,
            v_gp_sfdc_leads_and_opportunities.msa_date,
            v_gp_sfdc_leads_and_opportunities.stage_name,
            v_gp_sfdc_leads_and_opportunities.partner_acq_opps,
            v_gp_sfdc_leads_and_opportunities.opp_won,
            v_gp_sfdc_leads_and_opportunities.record_type_opps,
            v_gp_sfdc_leads_and_opportunities.pricing_model_opps,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_name,
            --v_gp_sfdc_leads_and_opportunities.opps_owner_manager,
            v_gp_sfdc_leads_and_opportunities.opp_name,
            v_gp_sfdc_leads_and_opportunities.opp_type,
            v_gp_sfdc_leads_and_opportunities.partner_level,
            v_gp_sfdc_leads_and_opportunities.lead_or_opp_source,
            --v_gp_sfdc_leads_and_opportunities.partner_development_owner,
            --v_gp_sfdc_leads_and_opportunities.bdr_owner_name,
            --v_gp_sfdc_leads_and_opportunities.bdr_manager_name,
            v_gp_sfdc_leads_and_opportunities.partner,
            v_gp_sfdc_leads_and_opportunities.partner_region,
            v_gp_sfdc_leads_and_opportunities.account_type,
            v_gp_sfdc_leads_and_opportunities.acc_pricing_model,
            v_gp_sfdc_leads_and_opportunities.opp_go_flag,
            v_gp_sfdc_leads_and_opportunities.immediate_headcount_c,
            v_gp_sfdc_leads_and_opportunities.headcount_c,
            v_gp_sfdc_leads_and_opportunities.de_country_c,
            v_gp_sfdc_leads_and_opportunities.closed_lost_category_detail_c,
            v_gp_sfdc_leads_and_opportunities.incumbent_solution_c,
            v_gp_sfdc_leads_and_opportunities.competitorsthatare_involved_c,
            v_gp_sfdc_leads_and_opportunities.contact_id,
            v_gp_sfdc_leads_and_opportunities.primary_quotes_pricing_model_c,
            v_gp_sfdc_leads_and_opportunities.competitors__involved__c,
            v_gp_sfdc_leads_and_opportunities.other__competitor__c,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_opps,
            v_gp_sfdc_leads_and_opportunities.fivetran_synced_leads,
            v_gp_sfdc_leads_and_opportunities.partner_country,
            v_gp_sfdc_leads_and_opportunities.existing_business_deal_classification_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_c,
            v_gp_sfdc_leads_and_opportunities.existing_business_opp_type_detail_c,
            v_gp_sfdc_leads_and_opportunities.opp_owner_name,
            v_gp_sfdc_leads_and_opportunities.row_num,
            v_gp_sfdc_leads_and_opportunities.partner_vertical__c,
            v_gp_sfdc_leads_and_opportunities.vital_few_partner,
			v_gp_sfdc_leads_and_opportunities.vital_few_account,
            v_gp_sfdc_leads_and_opportunities.partner_agreement_effective_date_c,
            v_gp_sfdc_leads_and_opportunities.opps_score_segment,
            v_gp_sfdc_leads_and_opportunities.lead_score_segment,
			v_gp_sfdc_leads_and_opportunities.billing_country,
			v_gp_sfdc_leads_and_opportunities.manager_id,
			v_gp_sfdc_leads_and_opportunities.owner_region,
			v_gp_sfdc_leads_and_opportunities.owner_active,
			v_gp_sfdc_leads_and_opportunities.owner_created_date,
			v_gp_sfdc_leads_and_opportunities.partner_development_owner_lookup__c,
			v_gp_sfdc_leads_and_opportunities.owner_id,
			v_gp_sfdc_leads_and_opportunities.sales_title_c_c,
 			v_gp_sfdc_leads_and_opportunities.engagement__type__c
           FROM v_gp_sfdc_leads_and_opportunities
          WHERE v_gp_sfdc_leads_and_opportunities.opp_go_flag = 'Non Partner Opp or Existing Business'::text AND v_gp_sfdc_leads_and_opportunities.opp_won = false AND v_gp_sfdc_leads_and_opportunities.stage_name::text = 'Closed Lost'::text
        ), full_union AS (
         SELECT mql.cohort_stage,
            mql.account_id,
            mql.account_name,
            mql.b_d_r__date__c,
            mql.lead_or_opp_id,
            mql.point_time_date,
            mql.mql_cohort_month,
            mql.lead_id,
            mql.opp_id,
            mql.is_converted,
            mql.converted_opportunity_id,
            mql.lead_country,
            mql.campaign_name,
            mql.lead_disqualified_reason,
            mql.lead_status,
            mql.opp_status,
            mql.closed__lost__c,
            mql.lead_country_code,
            mql.country_code,
            mql.tier,
            mql.bdr_unqualified_reason,
            mql.client_region,
            mql.client_country,
            mql.mql_date,
            mql.converted_date,
            mql.partner_acq_leads,
            --mql.leads_owner_name,
            --mql.leads_owner_manager,
            mql.created_date,
            mql.sal_accepted_date,
            mql.s_a_l__c,
            mql.s_a_l_by__sales__c,
            mql.record_type_bi__c,
            mql.msa_date,
            mql.stage_name,
            mql.partner_acq_opps,
            mql.opp_won,
            mql.record_type_opps,
            mql.pricing_model_opps,
            --mql.opps_owner_name,
            --mql.opps_owner_manager,
            mql.opp_name,
            mql.opp_type,
            mql.partner_level,
            mql.lead_or_opp_source,
            --mql.partner_development_owner,
            --mql.bdr_owner_name,
            --mql.bdr_manager_name,
            mql.partner,
            mql.partner_region,
            mql.account_type,
            mql.acc_pricing_model,
            mql.opp_go_flag,
            mql.immediate_headcount_c,
            mql.headcount_c,
            mql.de_country_c,
            mql.closed_lost_category_detail_c,
            mql.incumbent_solution_c,
            mql.competitorsthatare_involved_c,
            mql.contact_id,
            mql.primary_quotes_pricing_model_c,
            mql.competitors__involved__c,
            mql.other__competitor__c,
            mql.fivetran_synced_opps,
            mql.fivetran_synced_leads,
            mql.partner_country,
            mql.existing_business_deal_classification_c,
            mql.existing_business_opp_type_c,
            mql.existing_business_opp_type_detail_c,
            mql.opp_owner_name,
            mql.row_num,
            mql.partner_vertical__c,
            mql.vital_few_partner,
			mql.vital_few_account,
            mql.partner_agreement_effective_date_c,
            mql.opps_score_segment,
            mql.lead_score_segment,
			mql.billing_country,
			mql.manager_id,
			mql.owner_region,
			mql.owner_active,
			mql.owner_created_date,
			mql.partner_development_owner_lookup__c,
			mql.owner_id,
			mql.sales_title_c_c,
 			mql.engagement__type__c
           FROM mql
        UNION ALL
         SELECT mql_to_sql.cohort_stage,
            mql_to_sql.account_id,
            mql_to_sql.account_name,
            mql_to_sql.b_d_r__date__c,
            mql_to_sql.lead_or_opp_id,
            mql_to_sql.point_time_date,
            mql_to_sql.mql_cohort_month,
            mql_to_sql.lead_id,
            mql_to_sql.opp_id,
            mql_to_sql.is_converted,
            mql_to_sql.converted_opportunity_id,
            mql_to_sql.lead_country,
            mql_to_sql.campaign_name,
            mql_to_sql.lead_disqualified_reason,
            mql_to_sql.lead_status,
            mql_to_sql.opp_status,
            mql_to_sql.closed__lost__c,
            mql_to_sql.lead_country_code,
            mql_to_sql.country_code,
            mql_to_sql.tier,
            mql_to_sql.bdr_unqualified_reason,
            mql_to_sql.client_region,
            mql_to_sql.client_country,
            mql_to_sql.mql_date,
            mql_to_sql.converted_date,
            mql_to_sql.partner_acq_leads,
            --mql_to_sql.leads_owner_name,
           -- mql_to_sql.leads_owner_manager,
            mql_to_sql.created_date,
            mql_to_sql.sal_accepted_date,
            mql_to_sql.s_a_l__c,
            mql_to_sql.s_a_l_by__sales__c,
            mql_to_sql.record_type_bi__c,
            mql_to_sql.msa_date,
            mql_to_sql.stage_name,
            mql_to_sql.partner_acq_opps,
            mql_to_sql.opp_won,
            mql_to_sql.record_type_opps,
            mql_to_sql.pricing_model_opps,
            --mql_to_sql.opps_owner_name,
            --mql_to_sql.opps_owner_manager,
            mql_to_sql.opp_name,
            mql_to_sql.opp_type,
            mql_to_sql.partner_level,
            mql_to_sql.lead_or_opp_source,
            --mql_to_sql.partner_development_owner,
            --mql_to_sql.bdr_owner_name,
            --mql_to_sql.bdr_manager_name,
            mql_to_sql.partner,
            mql_to_sql.partner_region,
            mql_to_sql.account_type,
            mql_to_sql.acc_pricing_model,
            mql_to_sql.opp_go_flag,
            mql_to_sql.immediate_headcount_c,
            mql_to_sql.headcount_c,
            mql_to_sql.de_country_c,
            mql_to_sql.closed_lost_category_detail_c,
            mql_to_sql.incumbent_solution_c,
            mql_to_sql.competitorsthatare_involved_c,
            mql_to_sql.contact_id,
            mql_to_sql.primary_quotes_pricing_model_c,
            mql_to_sql.competitors__involved__c,
            mql_to_sql.other__competitor__c,
            mql_to_sql.fivetran_synced_opps,
            mql_to_sql.fivetran_synced_leads,
            mql_to_sql.partner_country,
            mql_to_sql.existing_business_deal_classification_c,
            mql_to_sql.existing_business_opp_type_c,
            mql_to_sql.existing_business_opp_type_detail_c,
            mql_to_sql.opp_owner_name,
            mql_to_sql.row_num,
            mql_to_sql.partner_vertical__c,
            mql_to_sql.vital_few_partner,
			mql_to_sql.vital_few_account,
            mql_to_sql.partner_agreement_effective_date_c,
            mql_to_sql.opps_score_segment,
            mql_to_sql.lead_score_segment,
			mql_to_sql.billing_country,
			mql_to_sql.manager_id,
			mql_to_sql.owner_region,
			mql_to_sql.owner_active,
			mql_to_sql.owner_created_date,
			mql_to_sql.partner_development_owner_lookup__c,
			mql_to_sql.owner_id,
			mql_to_sql.sales_title_c_c,
 			mql_to_sql.engagement__type__c
           FROM mql_to_sql
        UNION ALL
         SELECT sql_to_sal.cohort_stage,
            sql_to_sal.account_id,
            sql_to_sal.account_name,
            sql_to_sal.b_d_r__date__c,
            sql_to_sal.lead_or_opp_id,
            sql_to_sal.point_time_date,
            sql_to_sal.mql_cohort_month,
            sql_to_sal.lead_id,
            sql_to_sal.opp_id,
            sql_to_sal.is_converted,
            sql_to_sal.converted_opportunity_id,
            sql_to_sal.lead_country,
            sql_to_sal.campaign_name,
            sql_to_sal.lead_disqualified_reason,
            sql_to_sal.lead_status,
            sql_to_sal.opp_status,
            sql_to_sal.closed__lost__c,
            sql_to_sal.lead_country_code,
            sql_to_sal.country_code,
            sql_to_sal.tier,
            sql_to_sal.bdr_unqualified_reason,
            sql_to_sal.client_region,
            sql_to_sal.client_country,
            sql_to_sal.mql_date,
            sql_to_sal.converted_date,
            sql_to_sal.partner_acq_leads,
            --sql_to_sal.leads_owner_name,
            --sql_to_sal.leads_owner_manager,
            sql_to_sal.created_date,
            sql_to_sal.sal_accepted_date,
            sql_to_sal.s_a_l__c,
            sql_to_sal.s_a_l_by__sales__c,
            sql_to_sal.record_type_bi__c,
            sql_to_sal.msa_date,
            sql_to_sal.stage_name,
            sql_to_sal.partner_acq_opps,
            sql_to_sal.opp_won,
            sql_to_sal.record_type_opps,
            sql_to_sal.pricing_model_opps,
            --sql_to_sal.opps_owner_name,
            --sql_to_sal.opps_owner_manager,
            sql_to_sal.opp_name,
            sql_to_sal.opp_type,
            sql_to_sal.partner_level,
            sql_to_sal.lead_or_opp_source,
            --sql_to_sal.partner_development_owner,
            --sql_to_sal.bdr_owner_name,
            --sql_to_sal.bdr_manager_name,
            sql_to_sal.partner,
            sql_to_sal.partner_region,
            sql_to_sal.account_type,
            sql_to_sal.acc_pricing_model,
            sql_to_sal.opp_go_flag,
            sql_to_sal.immediate_headcount_c,
            sql_to_sal.headcount_c,
            sql_to_sal.de_country_c,
            sql_to_sal.closed_lost_category_detail_c,
            sql_to_sal.incumbent_solution_c,
            sql_to_sal.competitorsthatare_involved_c,
            sql_to_sal.contact_id,
            sql_to_sal.primary_quotes_pricing_model_c,
            sql_to_sal.competitors__involved__c,
            sql_to_sal.other__competitor__c,
            sql_to_sal.fivetran_synced_opps,
            sql_to_sal.fivetran_synced_leads,
            sql_to_sal.partner_country,
            sql_to_sal.existing_business_deal_classification_c,
            sql_to_sal.existing_business_opp_type_c,
            sql_to_sal.existing_business_opp_type_detail_c,
            sql_to_sal.opp_owner_name,
            sql_to_sal.row_num,
            sql_to_sal.partner_vertical__c,
            sql_to_sal.vital_few_partner,
			sql_to_sal.vital_few_account,
            sql_to_sal.partner_agreement_effective_date_c,
            sql_to_sal.opps_score_segment,
            sql_to_sal.lead_score_segment,
			sql_to_sal.billing_country,
			sql_to_sal.manager_id,
			sql_to_sal.owner_region,
			sql_to_sal.owner_active,
			sql_to_sal.owner_created_date,
			sql_to_sal.partner_development_owner_lookup__c,
			sql_to_sal.owner_id,
			sql_to_sal.sales_title_c_c,
 			sql_to_sal.engagement__type__c
           FROM sql_to_sal
        UNION ALL
         SELECT sal_to_msa.cohort_stage,
            sal_to_msa.account_id,
            sal_to_msa.account_name,
            sal_to_msa.b_d_r__date__c,
            sal_to_msa.lead_or_opp_id,
            sal_to_msa.point_time_date,
            sal_to_msa.mql_cohort_month,
            sal_to_msa.lead_id,
            sal_to_msa.opp_id,
            sal_to_msa.is_converted,
            sal_to_msa.converted_opportunity_id,
            sal_to_msa.lead_country,
            sal_to_msa.campaign_name,
            sal_to_msa.lead_disqualified_reason,
            sal_to_msa.lead_status,
            sal_to_msa.opp_status,
            sal_to_msa.closed__lost__c,
            sal_to_msa.lead_country_code,
            sal_to_msa.country_code,
            sal_to_msa.tier,
            sal_to_msa.bdr_unqualified_reason,
            sal_to_msa.client_region,
            sal_to_msa.client_country,
            sal_to_msa.mql_date,
            sal_to_msa.converted_date,
            sal_to_msa.partner_acq_leads,
            --sal_to_msa.leads_owner_name,
            --sal_to_msa.leads_owner_manager,
            sal_to_msa.created_date,
            sal_to_msa.sal_accepted_date,
            sal_to_msa.s_a_l__c,
            sal_to_msa.s_a_l_by__sales__c,
            sal_to_msa.record_type_bi__c,
            sal_to_msa.msa_date,
            sal_to_msa.stage_name,
            sal_to_msa.partner_acq_opps,
            sal_to_msa.opp_won,
            sal_to_msa.record_type_opps,
            sal_to_msa.pricing_model_opps,
            --sal_to_msa.opps_owner_name,
            --sal_to_msa.opps_owner_manager,
            sal_to_msa.opp_name,
            sal_to_msa.opp_type,
            sal_to_msa.partner_level,
            sal_to_msa.lead_or_opp_source,
            --sal_to_msa.partner_development_owner,
            --sal_to_msa.bdr_owner_name,
            --sal_to_msa.bdr_manager_name,
            sal_to_msa.partner,
            sal_to_msa.partner_region,
            sal_to_msa.account_type,
            sal_to_msa.acc_pricing_model,
            sal_to_msa.opp_go_flag,
            sal_to_msa.immediate_headcount_c,
            sal_to_msa.headcount_c,
            sal_to_msa.de_country_c,
            sal_to_msa.closed_lost_category_detail_c,
            sal_to_msa.incumbent_solution_c,
            sal_to_msa.competitorsthatare_involved_c,
            sal_to_msa.contact_id,
            sal_to_msa.primary_quotes_pricing_model_c,
            sal_to_msa.competitors__involved__c,
            sal_to_msa.other__competitor__c,
            sal_to_msa.fivetran_synced_opps,
            sal_to_msa.fivetran_synced_leads,
            sal_to_msa.partner_country,
            sal_to_msa.existing_business_deal_classification_c,
            sal_to_msa.existing_business_opp_type_c,
            sal_to_msa.existing_business_opp_type_detail_c,
            sal_to_msa.opp_owner_name,
            sal_to_msa.row_num,
            sal_to_msa.partner_vertical__c,
            sal_to_msa.vital_few_partner,
			sal_to_msa.vital_few_account,
            sal_to_msa.partner_agreement_effective_date_c,
            sal_to_msa.opps_score_segment,
            sal_to_msa.lead_score_segment,
			sal_to_msa.billing_country,
			sal_to_msa.manager_id,
			sal_to_msa.owner_region,
			sal_to_msa.owner_active,
			sal_to_msa.owner_created_date,
			sal_to_msa.partner_development_owner_lookup__c,
			sal_to_msa.owner_id,
			sal_to_msa.sales_title_c_c,
 			sal_to_msa.engagement__type__c
           FROM sal_to_msa
        UNION ALL
         SELECT closed_lost.cohort_stage,
            closed_lost.account_id,
            closed_lost.account_name,
            closed_lost.b_d_r__date__c,
            closed_lost.lead_or_opp_id,
            closed_lost.point_time_date,
            closed_lost.mql_cohort_month,
            closed_lost.lead_id,
            closed_lost.opp_id,
            closed_lost.is_converted,
            closed_lost.converted_opportunity_id,
            closed_lost.lead_country,
            closed_lost.campaign_name,
            closed_lost.lead_disqualified_reason,
            closed_lost.lead_status,
            closed_lost.opp_status,
            closed_lost.closed__lost__c,
            closed_lost.lead_country_code,
            closed_lost.country_code,
            closed_lost.tier,
            closed_lost.bdr_unqualified_reason,
            closed_lost.client_region,
            closed_lost.client_country,
            closed_lost.mql_date,
            closed_lost.converted_date,
            closed_lost.partner_acq_leads,
            --closed_lost.leads_owner_name,
            --closed_lost.leads_owner_manager,
            closed_lost.created_date,
            closed_lost.sal_accepted_date,
            closed_lost.s_a_l__c,
            closed_lost.s_a_l_by__sales__c,
            closed_lost.record_type_bi__c,
            closed_lost.msa_date,
            closed_lost.stage_name,
            closed_lost.partner_acq_opps,
            closed_lost.opp_won,
            closed_lost.record_type_opps,
            closed_lost.pricing_model_opps,
            --closed_lost.opps_owner_name,
            --closed_lost.opps_owner_manager,
            closed_lost.opp_name,
            closed_lost.opp_type,
            closed_lost.partner_level,
            closed_lost.lead_or_opp_source,
            --closed_lost.partner_development_owner,
            --closed_lost.bdr_owner_name,
            --closed_lost.bdr_manager_name,
            closed_lost.partner,
            closed_lost.partner_region,
            closed_lost.account_type,
            closed_lost.acc_pricing_model,
            closed_lost.opp_go_flag,
            closed_lost.immediate_headcount_c,
            closed_lost.headcount_c,
            closed_lost.de_country_c,
            closed_lost.closed_lost_category_detail_c,
            closed_lost.incumbent_solution_c,
            closed_lost.competitorsthatare_involved_c,
            closed_lost.contact_id,
            closed_lost.primary_quotes_pricing_model_c,
            closed_lost.competitors__involved__c,
            closed_lost.other__competitor__c,
            closed_lost.fivetran_synced_opps,
            closed_lost.fivetran_synced_leads,
            closed_lost.partner_country,
            closed_lost.existing_business_deal_classification_c,
            closed_lost.existing_business_opp_type_c,
            closed_lost.existing_business_opp_type_detail_c,
            closed_lost.opp_owner_name,
            closed_lost.row_num,
            closed_lost.partner_vertical__c,
            closed_lost.vital_few_partner,
			closed_lost.vital_few_account,
            closed_lost.partner_agreement_effective_date_c,
            closed_lost.opps_score_segment,
            closed_lost.lead_score_segment,
			closed_lost.billing_country,
			closed_lost.manager_id,
			closed_lost.owner_region,
			closed_lost.owner_active,
			closed_lost.owner_created_date,
			closed_lost.partner_development_owner_lookup__c,
			closed_lost.owner_id,
			closed_lost.sales_title_c_c,
 			closed_lost.engagement__type__c
           FROM closed_lost
        )
 SELECT DISTINCT full_union.cohort_stage,
    full_union.account_id,
    full_union.account_name,
    full_union.b_d_r__date__c,
    full_union.lead_or_opp_id,
    full_union.point_time_date,
    full_union.mql_cohort_month,
    full_union.lead_id,
    full_union.opp_id,
    full_union.is_converted,
    full_union.converted_opportunity_id,
    full_union.lead_country,
    full_union.campaign_name,
    full_union.lead_disqualified_reason,
    full_union.lead_status,
    full_union.opp_status,
    full_union.closed__lost__c,
    full_union.lead_country_code,
    full_union.country_code,
    full_union.tier,
    full_union.bdr_unqualified_reason,
    full_union.client_region,
    full_union.client_country,
    full_union.mql_date,
    full_union.converted_date,
    full_union.partner_acq_leads,
    --full_union.leads_owner_name,
    --full_union.leads_owner_manager,
    full_union.created_date,
    full_union.sal_accepted_date,
    full_union.s_a_l__c,
    full_union.s_a_l_by__sales__c,
    full_union.record_type_bi__c,
    full_union.msa_date,
    full_union.stage_name,
    full_union.partner_acq_opps,
    full_union.opp_won,
    full_union.record_type_opps,
    full_union.pricing_model_opps,
    --full_union.opps_owner_name,
    --full_union.opps_owner_manager,
    full_union.opp_name,
    full_union.opp_type,
    full_union.partner_level,
    full_union.lead_or_opp_source,
    --full_union.partner_development_owner,
    --full_union.bdr_owner_name,
    --full_union.bdr_manager_name,
    full_union.partner,
    full_union.partner_region,
    full_union.account_type,
    full_union.acc_pricing_model,
    full_union.opp_go_flag,
    full_union.immediate_headcount_c,
    full_union.headcount_c,
    full_union.de_country_c,
    full_union.closed_lost_category_detail_c,
    full_union.incumbent_solution_c,
    full_union.competitorsthatare_involved_c,
    full_union.contact_id,
    full_union.primary_quotes_pricing_model_c,
    full_union.competitors__involved__c,
    full_union.other__competitor__c,
    full_union.fivetran_synced_opps,
    full_union.fivetran_synced_leads,
    full_union.partner_country,
    full_union.existing_business_deal_classification_c,
    full_union.existing_business_opp_type_c,
    full_union.existing_business_opp_type_detail_c,
    full_union.opp_owner_name,
    full_union.row_num,
    full_union.partner_vertical__c,
    full_union.vital_few_partner,
	full_union.vital_few_account,
    full_union.partner_agreement_effective_date_c,
    full_union.opps_score_segment,
    full_union.lead_score_segment,
	full_union.billing_country,
			full_union.manager_id,
			full_union.owner_region,
			full_union.owner_active,
			full_union.owner_created_date,
			full_union.partner_development_owner_lookup__c,
			full_union.owner_id,
			full_union.sales_title_c_c,
 			full_union.engagement__type__c
   FROM full_union
  WHERE full_union.row_num = 1"
b565b42c-399f-b1b8-aad6-778c375483f2,v_gp_sfdc_opportunity_current_pacific_time (salesforce.v_gp_sfdc_opportunity_current_pacific_time)+ (gpbidb),postgres,"select distinct 
id as partner_dev_owner_id,
name as partner_development_owner,
user_region_c as pdo_region,
is_active as pdo_active
FROM salesforce.v_gp_sfdc_user_current"
b565b42c-399f-b1b8-aad6-778c375483f2,v_gp_sfdc_opportunity_current_pacific_time (salesforce.v_gp_sfdc_opportunity_current_pacific_time)+ (gpbidb),postgres,"select distinct 
id as manager_id,
name as manager_name
FROM salesforce.v_gp_sfdc_user_current"
b5e52514-4b44-85b4-e6d7-9d05a4a107a7,Offboard,postgres,"WITH A AS
		(select t1._fivetran_synced AS update_time,t1.id, t6.name as Client, 
		 t7.name as Country, 
		 CASE
            WHEN  t7.gp_region::text = '1'::text THEN 'EMEA'::text
            WHEN  t7.gp_region::text = '2'::text THEN 'APAC'::text
            WHEN  t7.gp_region::text = '3'::text THEN 'NA'::text
            WHEN  t7.gp_region::text = '4'::text THEN 'LATAM'::text
            ELSE NULL::text
        END AS region,
		 t1.status as pro_status,
                 concat(t1.first_name,' ', t1.last_name) as Prof_Name,  
                 concat(t2.first_name,' ',t2.last_name) as Onboard_Lead, 
                 concat(t3.first_name, ' ', t3.last_name) as Offboard_Lead,
                 t4.offboard_start_date,t4.offboard_end_date,
                                                          date_part('day', t4.offboard_end_date::timestamp without time zone - t4.offboard_start_date::timestamp without time zone) AS Offboarding_Days,
                                                          /*(date_trunc('day', t4.offboard_end_date) - date_trunc('day', t4.offboard_start_date)) as Days,*/
                 t1.professional_offboarding_id,
                 case when t4.reason_type='1' then 'Disagreed on Benefits'
                                                                                      when t4.reason_type='2' then 'GP Business Model'
                                                                                      when t4.reason_type='3' then 'Took Another Job'
                                                                                      when t4.reason_type='4' then 'Hired to Client Entity'
                                                                                      when t4.reason_type='5' then 'Went to Competitor'
                                                                                      when t4.reason_type='6' then 'Client Declined'
                                                                                      when t4.reason_type='7' then 'Professional Resigned'
                                                                                      when t4.reason_type='8' then 'Client Terminated'
                                                                                      when t4.reason_type='9' then 'Client Business Decision'
                                                                                      when t4.reason_type='10' then 'Sale of Client'
                                                                                      when t4.reason_type='11' then 'Other'
                                                                                      when t4.reason_type='12' then 'Unknown'
                                                                                      when t4.reason_type='13' then 'Internal Transfer'
                                                                                      when t4.reason_type='14' then 'Covid-19'
                                                                                      end as Reason_type,
case when offboard_end_date is null then 'NO'
	when offboard_end_date is not null then 'YES'
	end as Offboard_completed, date(t1.payroll_end_date) as Payroll_end_date
from goglobal_gp_goglobal.v_gp_gg_professional_current t1
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t2
              on t1.gp_onboard_lead_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t3      
              on t1.gp_offboard_lead_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current t4
              on t1.professional_offboarding_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_client_current t6
              on t1.client_id=t6.id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t8
              on t1.lsp_country_id=t8.id
left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco on t1.client_country_id=cco.id
left join goglobal_gp_goglobal.v_gp_gg_country_current t7 on cco.country_id=t7.id
where t1.is_failed_to_launch='false' and t6.is_demo_client='false' and offboard_start_date is not NULL
order by t1.id)
SELECT *,
		case when offboard_lead in ('Andrew Smith','Carey Heath','Carla Siguenza','Carol Wheeler','Jack Knowlton','Justin Hill','Neha Dupar',
								'Sarah Steer','Zahir Ali')
								then 'Yes'
								else 'No'
				end as off_Lead_No_Longer_GP
	FROM A"
b5e52514-4b44-85b4-e6d7-9d05a4a107a7,Onboard,postgres,"WITH A AS
		(select t1._fivetran_synced AS update_time, t1.id, t6.name as Client,concat(t9.first_name,' ',t9.last_name) as Account_Manager, 
		 		t7.name as Country,
		 		CASE
						WHEN  T7.gp_region::text = '1'::text THEN 'EMEA'::text
						WHEN  T7.gp_region::text = '2'::text THEN 'APAC'::text
						WHEN  T7.gp_region::text = '3'::text THEN 'NA'::text
						WHEN  T7.gp_region::text = '4'::text THEN 'LATAM'::text
						ELSE NULL::text
					END AS region,
                 concat(t1.first_name,' ', t1.last_name) as Prof_Name, 
                 concat(t2.first_name,' ',t2.last_name) as Onboard_Lead, 
                 concat(t3.first_name, ' ', t3.last_name) as Offboard_Lead,
                 t4.onboard_start_date,t4.onboard_end_date,
                                                          (t4.onboard_end_date - t4.onboard_start_date) AS Onboarding_Days,
                                                          /*(date_trunc('day', t4.offboard_end_date) - date_trunc('day', t4.offboard_start_date)) as Days,*/
                 t1.professional_onboarding_id, t1.status,
case when onboard_start_date is not null then 'Onboard Yes' else 'Onboard No' end as onboard_start_flag,
case when onboard_end_date is null then 'NO'
	when onboard_end_date is not null then 'YES'
	end as Onboard_completed, date(t1.payroll_start_date) as Payroll_Start_Date																					  
from goglobal_gp_goglobal.v_gp_gg_professional_current t1
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t2
              on t1.gp_onboard_lead_id=t2.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t3      
              on t1.gp_offboard_lead_id=t3.id
left join goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current t4
              on t1.professional_onboarding_id=t4.id
left join goglobal_gp_goglobal.v_gp_gg_client_current t6
              on t1.client_id=t6.id
left join goglobal_gp_goglobal.v_gp_gg_gp_person_current t9
              on t9.id = t6.gp_account_manager_id
left join goglobal_gp_goglobal.v_gp_gg_lsp_country_current t8
              on t1.lsp_country_id=t8.id
left join goglobal_gp_goglobal.v_gp_gg_client_country_current cco on t1.client_country_id=cco.id		 
left join goglobal_gp_goglobal.v_gp_gg_country_current t7 on cco.country_id=t7.id
where t1.is_failed_to_launch='false' and t6.is_demo_client='false' 
order by t1.id)
SELECT *,
		case when oNboard_lead in ('Andrew Smith','Carey Heath','Carla Siguenza','Carol Wheeler','Jack Knowlton','Justin Hill','Neha Dupar',
								'Sarah Steer','Zahir Ali')
								then 'Yes'
								else 'No'
				end as Onb_Lead_No_Longer_GP
	FROM A"
b68262e8-e769-7781-85f0-217ddc2ca13a,Custom SQL Query (gpbidb),postgres,"WITH fee_bucket as (
	Select Distinct
		start_date, fee_bucket, professional_id, client_id
	FROM ltv_analysis.v_ltv_int_fee_buckets
	Where fee_bucket is not null and date_trunc('month', start_date)<<>> date_trunc('month', now()::date)
	Order by professional_id, start_date desc
				),
				
	Invoice_date_new_logic  AS(
	select start_date as Date,
	client_bill_id,
	client_id,
	client,
	CASE WHEN invoice_date IS NULL AND cbc.invoice_release_date IS NOT NULL THEN cbc.invoice_release_date
	ELSE invoice_date END as invoice_date,
	professional_id,
	pro,
	billing_amount,
	billing_currency,
	country,
	acumatica_id,
	type,
	billing_cycle_id, 
	bill_status, 
	bill_type_name,
	is_failed_to_launch, 
	ar_account_id
	
	from goglobal_gp_goglobal.v_gp_gg_total_bills_mat as bill
	LEFT JOIN (select id, invoice_release_date from goglobal_gp_goglobal.v_gp_gg_client_bill_current) as cbc
	on bill.client_bill_id = cbc.id
	)


SELECT tb.client_id, client, cc.status as client_status,cc4.region AS customer_region, cc3.name AS customer_country,  tb.professional_id, pro, p8.region AS professional_working_region, tb.country as professional_working_country, tb.invoice_date ,tb.client_bill_id,cc.accounting_id, type,billing_amount,billing_currency,
CASE WHEN billing_currency = 'United States Dollar' then 'USD' else rate_month.currency_code end as currency_code,
CASE WHEN billing_currency = 'United States Dollar' then tb.billing_amount else rate_month.avg_rate*tb.billing_amount end as Bill_USD_month
,CASE WHEN billing_currency = 'United States Dollar' then 1 else rate_month.avg_rate end as avg_rate_month , billing_cycle_id, tb.Date, bill_status, tb.is_failed_to_launch, ar_account_id,
		CASE WHEN fee_bucket.fee_bucket is null then 'Standard – Exception' else fee_bucket.fee_bucket end as fee_bucket, bill_type_name,
		cc.partners_referral_id,
		prc.name AS gp_partner_name,
		cc.is_demo_client,
		cc.accounting_id as acumatica_id,
		CASE WHEN LEFT(cc.accounting_id , 1) = '1' then 'Americas'
			WHEN LEFT(cc.accounting_id , 1) = '2' then 'EMEA'
			WHEN LEFT(cc.accounting_id , 1) = '3' then 'APAC'
			ELSE 'Americas' END as Acumatica_Region
		
	FROM Invoice_date_new_logic tb
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_current AS p
	ON tb.professional_id = p.id
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS p3
	ON p.lsp_country_id=p3.id
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS p4
	ON p3.country_id=p4.id
	LEFT JOIN repo.v_gp_mdm_region AS p8
	ON p4.country_code = p8.country_code
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current AS cc
	ON tb.client_id = cc.id 

	LEFT JOIN (
	select country_code.currency_code , country_code.currency_name , DATE(date_trunc('month',""CurrencyEffectiveDate"")) as date_month ,
		AVG( CAST(""AverageRateReciprocal"" as float) ) as avg_rate
	from repo.gp_acumatica_rates as acumatica_r
	INNER JOIN goglobal_gp_goglobal.v_gp_gg_country_current  as country_code on acumatica_r.""FromCurrency"" = country_code.currency_code 
	where ""CurrencyEffectiveDate"" >>= '2021-01-01' and country_code.currency_code in ('AUD','CAD','EUR','GBP','SGD','USD')
	GROUP BY 1,2,3
	)as rate_month on tb.billing_currency = rate_month.currency_name AND tb.date = rate_month.date_month 
	Left Join fee_bucket on (tb.professional_id = fee_bucket.professional_id and tb.Date = fee_bucket.start_date)
	LEFT JOIN  goglobal_gp_goglobal.v_gp_gg_partners_referral_current prc on
	cc.partners_referral_id = prc.id
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS cc2
	ON cc.billing_address_id = cc2.id
	LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS cc3
	ON cc2.country_id=cc3.id
	LEFT JOIN repo.v_gp_mdm_region AS cc4
	ON cc3.country_code = cc4.country_code	

	WHERE tb.Date >>= '2021-01-01'
	order by tb.Date"
b6896045-357e-6ba1-bf7a-2ced0381d4a2,Custom SQL Query (gpbidb),postgres,"SELECT * FROM anaplan.marketing_spend_by_campaign_anaplan
 WHERE ""Line Item""= 'Forecast # from Lead Spend'"
b7f32e83-7bca-44d1-e7b0-43b71a19a4a2,Customer With DnB Data,,
b7f32e83-7bca-44d1-e7b0-43b71a19a4a2,Toggle,,
001fd1d1-d089-b5de-b09f-122b22d8a4cc,Custom SQL Query+ (gpbidb) (2),postgres,"WITH Leads_Opps AS (
         SELECT DISTINCT 
                         CASE
                             WHEN leads.created_date IS NOT NULL THEN date_trunc('month'::text, leads.created_date)
                             ELSE date_trunc('month'::text, opps.created_date)
                             END                                 AS mql_cohort_month,
                         leads.id                                AS lead_id,
                         opps.b_d_r__date__c,
                         leads.is_converted,
                         opps.id                                 AS opp_id,
                         leads.converted_opportunity_id,
                         leads.country                           AS lead_country,
                         leads.status                            AS lead_status,
                         opps.opportunity__status__c             AS opp_status,
                         leads.country_code                      AS lead_country_code,
                         leads.lead_tier_c,
                         opps.lead_source_tier_c,
                         CASE
                             WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                             WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.country::text
                             WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL THEN account.billing_country::text
                             ELSE NULL::text
                             END                                 AS client_country,
                         CASE
                             WHEN leads.id IS NULL AND opps.id IS NOT NULL THEN account.client_region_billing_country
                             WHEN leads.id IS NOT NULL AND opps.id IS NULL THEN leads.client_region_country_lead
                             WHEN leads.id IS NOT NULL AND opps.id IS NOT NULL
                                 THEN account.client_region_billing_country
                             ELSE NULL::text
                             END                                 AS client_region,
                         leads.created_date                      AS mql_date,
                         leads.converted_date,
                         leads.partner_acquisition__c            AS partner_acq_leads,
                          usr_lead_opp.leads_owner_name,
                         usr_lead_opp.leads_owner_manager,
                         opps.created_date,
                         opps.sales__accepted__date__c           AS sal_accepted_date,
                         opps.s_a_l__c,
                         opps.s_a_l_by__sales__c,
                         opps.record_type_bi__c,
                         opps.close_date                         AS msa_date,
                         opps.stage_name,
                         opps.partner_acquisition__c             AS partner_acq_opps,
                         opps.is_won                             AS opp_won,
                         opps.record_type_text_id_c              AS record_type_opps,
                         usr_lead_opp.opps_owner_name,
                         usr_lead_opp.opps_owner_manager,
                         opps.name                               AS opp_name,
                         opps.type                               AS opp_type,
                         acc_partn.partner_level__c              AS partner_level,
                         opps.pricing_model__c                   AS pricing_model_opps,
			opps.hot_form_c                        AS hot_form_c_opps,
			leads.hot_form_c                       AS hot_form_c_leas,
                         CASE
                            WHEN leads.lead_source IS NULL THEN opps.lead_source
                            ELSE leads.lead_source
                            END::text                           AS lead_or_opp_source,
                        usr_lead_opp.partner_development_owner,
                        usr_lead_opp.bdr_owner_name,
                        usr_lead_opp.bdr_manager_name,
                         acc_partn.name                          AS partner,
                         acc_partn.client_region_billing_country AS partner_region,
                         account.type                            AS account_type,
                         account.pricing_model__c                AS acc_pricing_model,
                         CASE
                             WHEN (opps.record_type_bi__c IS NULL OR
                                   opps.record_type_bi__c::text <<>> 'Potential Partner Opportunity'::text) AND
                                  (opps.partner_acquisition__c IS NULL OR
                                   opps.partner_acquisition__c::text <<>> 'Yes'::text) AND
                                  (opps.pricing_model__c IS NULL OR
                                   opps.pricing_model__c::text <<>> 'Contractor only'::text)
                                 THEN 'Non Partner Opp or Existing Business'::text
                             ELSE 'Partner Opp or Existing Business'::text
                             END                                 AS opp_go_flag,
                         opps.update_time                        AS fivetran_synced_opps,
                         acc_partn.billing_country               AS partner_country,
		 				 CASE 
							WHEN leads.converted_opportunity_id IS NULL THEN 1
	 					 	ELSE RANK()  OVER(PARTITION BY leads.converted_opportunity_id ORDER BY leads.created_date) END AS row_num
         FROM salesforce.v_gp_sfdc_opportunity_current_pacific_time opps
                  FULL JOIN salesforce.v_gp_sfdc_lead_current_pacific_time leads ON leads.converted_opportunity_id::text = opps.id::text
                  LEFT JOIN salesforce.v_gp_sfdc_account_current account ON opps.account_id::text = account.id::text
                  LEFT JOIN salesforce.v_gp_sfdc_account_current acc_partn ON opps.partner2__c::text = acc_partn.id::text
		 		  --LEFT JOIN salesforce.v_gp_sfdc_user_current users ON users.id::text = opps.owner_id::text
                  --LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp ON usr_lead_opp.lead_id::text = leads.id::text OR usr_lead_opp.opp_id::text = opps.id::text
		 		  LEFT JOIN salesforce.v_gp_gg_user_lead_opp_mat usr_lead_opp on usr_lead_opp.lead_or_opp_id::text = CASE WHEN leads.id IS NULL 
	THEN opps.id ELSE leads.id END
     ),
	 
MQL as (
   Select Distinct
      'MQL' as Cohort_Stage,
      lead_id as lead_or_opp_id,
      MQL_Date::date as Point_time_date,
      *
   From Leads_Opps 
    WHERE (Leads_Opps.partner_acq_leads::text <<>> 'Yes'::text OR Leads_Opps.partner_acq_leads IS NULL) 
	AND Leads_Opps.lead_id IS NOT NULL
   ),
MQL_to_SQL as (
   Select Distinct
      'MQL to SQL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      Created_date::date as Point_time_date,
      *
   From Leads_Opps 
  WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.opp_id IS NOT NULL
   ),
SQL_to_SAL as (
   Select Distinct
      'SQL to SAL' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      SAL_Accepted_Date::date as Point_time_date,
      *
   From Leads_Opps
   WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.s_a_l_by__sales__c::text = 'Yes'::text
   ),
SAL_to_MSA as (
   Select Distinct
      'SAL to MSA' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
   WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.opp_won = true
   ),
Opp_lost as (
   Select Distinct
      'Opp lost' as Cohort_Stage,
      opp_id as lead_or_opp_id,
      --last_mod_date::date as Point_time_date,
      MSA_date::date as Point_time_date,
      *
   From Leads_Opps
     WHERE Leads_Opps.opp_go_flag = 'Non Partner Opp or Existing Business'::text 
	AND Leads_Opps.opp_won = false
   ),

Full_Union as (
   Select *
   From MQL
   Union All
   Select *
   From MQL_to_SQL
   Union AlL
   Select *
   From SQL_to_SAL
   Union AlL
   Select *
   From SAL_to_MSA
	Union All
   Select *
   From Opp_Lost
   )
SELECT * 
FROM Full_Union"
001fd1d1-d089-b5de-b09f-122b22d8a4cc,Custom SQL Query+ (gpbidb) (2),postgres,"SELECT lead.id, lh.max AS lead_status_last_updated
   FROM salesforce.v_gp_sfdc_lead_current_pacific_time lead
     LEFT JOIN ( SELECT DISTINCT t1.lead_id,
            max(t1.created_date) AS max
           FROM salesforce.lead_history t1
          WHERE t1.is_deleted = false AND t1.field::text = 'Status'::text AND (t1.new_value::text = 'Disqualified'::text OR t1.new_value::text = 'Nurture'::text) AND t1.created_date = (( SELECT max(tmax.created_date) AS max
                   FROM salesforce.lead_history tmax
                  WHERE t1.id::text = tmax.id::text))
          GROUP BY t1.lead_id) lh ON lh.lead_id::text = lead.id::text
  WHERE lead.created_date BETWEEN NOW() - INTERVAL '2 YEARS' AND NOW()
  --lead.is_deleted IS FALSE"
001fd1d1-d089-b5de-b09f-122b22d8a4cc,Custom SQL Query+ (gpbidb) (2),postgres,"SELECT opportunity.id, ofh.max AS opp_status_last_updated
   FROM salesforce.opportunity
     LEFT JOIN (SELECT DISTINCT t1.opportunity_id,
            max(t1.created_date) AS max
           FROM salesforce.opportunity_field_history t1
          WHERE t1.is_deleted = false AND t1.field::text = 'Opportunity_Status__c'::text AND t1.new_value::text = 'BDR Requalify'::text AND t1.created_date = (( SELECT max(tmax.created_date) AS max
                   FROM salesforce.opportunity_field_history tmax
                  WHERE t1.id::text = tmax.id::text))
          GROUP BY t1.opportunity_id) ofh ON ofh.opportunity_id::text = opportunity.id::text
  WHERE opportunity.is_deleted IS FALSE"
fe7fa996-e05a-3b7f-0d9c-0cfb0d57ae53,Operations,postgres,"SELECT        
               a.id AS customer_id,
               a.name AS customer_name,
               CASE WHEN a.status = '1' THEN 'Active'
                          WHEN a.status = '2' THEN 'Inactive'
               END AS customer_status,
               CASE WHEN a.pricing_model = 0 THEN 'Enterprise'
                          WHEN a.pricing_model = 1 THEN 'Standard'
               END as customer_pricing_model,
			   a.salesforce_account_id AS gpp_salesforce_account_id,
			   mdm_match.source_id AS mdm_salesforce_account_id,
			   CASE WHEN a.salesforce_account_id  IS NOT NULL THEN a.salesforce_account_id 
               ELSE mdm_match.source_id END AS id_match,
			   g.name AS customer_billing_country,
			   g.gp_region AS customer_billing_region,
			   CONCAT (h.first_name, ' ', h.last_name)AS customer_account_manager,
			   CONCAT (i.first_name, ' ', i.last_name)AS customer_account_executive,
               a.is_gp_contractor_customer,
               a.is_gp_recruit_customer,
               a.is_bank_info_approved,
			   b.name AS customer_industry,
			   a.msa_contract_start_date_peo,
			   a.msa_contract_start_date_services,
			   a.msa_contract_start_date_aso,
			   a.msa_contract_start_date_sourcing,
			   c.id AS professional_id,
			   CONCAT(c.first_name, ' ', c.last_name) AS professional_name,
			   CASE WHEN c.status = '1' THEN 'New'
			        WHEN c.status = '2' THEN 'Onboarding'
					WHEN c.status = '3' THEN 'Active'
					WHEN c.status = '4' THEN 'Terminating'
					WHEN c.status = '5' THEN 'Inactive'
					END AS prof_status,
			   c.is_failed_to_launch,
			   e.name AS prof_employment_country,
			   e.gp_region AS prof_employment_region,
			   CASE
               WHEN j.is_gp_entity IS TRUE THEN 'GP Entity'::text
               WHEN j.is_gp_entity IS FALSE THEN 'LSP Entity'::text
               ELSE 'UNKNOWN'::text END AS entity_type,
                           c.service_class,
                           c.payroll_start_date,
                           c.payroll_end_date,
                           k.offboard_start_date,
                           k.offboard_end_date,
                           k.reason_type,
                           k.will_be_backfilling_this_position,
                           l.onboard_start_date,
                           l.onboard_end_date,
                           l.gp_empl_contract_prepared_by,
                           c.contract_start_date,
                           c.contract_end_date,
                           c.date_created,
                           c.is_sponsoring_visa,
						   m.id AS lsp_id,
						   m.name AS prof_lsp_name,
						   m.status AS lsp_status,
						   c.is_gp_recruit AS prof_is_gp_recruit,
						   benefit_type.name AS Benefit_type,
	                       CASE WHEN country_benefit.mandatory='1' THEN 'Mandatory'
	   		               WHEN country_benefit.mandatory='0' THEN 'Supplemental'
	                       END AS benefit_Plan_Type,
	                       benefit_current.name AS benefit_Plan_Name,
		                   benefit_current.custom benefit_custom,
		                   CASE WHEN benefit_current.active='1' THEN 'Yes'
                           WHEN benefit_current.active='0' THEN 'No' ELSE null
	                       END AS benefit_Active_plan,
		                   benefit_enrollment.benefit_id,
	                       benefit_enrollment.status as benefit_prof_status


FROM goglobal_gp_goglobal.v_gp_gg_client_current AS a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_industry_current AS b
ON a.industry_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_current AS c
ON a.id = c.client_id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS d
ON c.lsp_country_id = d.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS e
ON d.country_id = e.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_address_current AS f
ON a.billing_address_id = f.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_country_current AS g
ON f.country_id = g.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS h
ON a.gp_account_manager_id= h.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_gp_person_current AS i
ON a.gp_current_sales_rep_id= i.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_country_current AS j
ON c.lsp_country_id = j.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current AS k
ON c.professional_offboarding_id = k.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current AS l
ON c.professional_onboarding_id = l.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_lsp_current m
ON d.lsp_id = m.id
LEFT JOIN benefits_gp_benefits.v_benefits_professional_benefit_enrollment_current benefit_enrollment
ON c.id = benefit_enrollment.professional_external_id::INTEGER
LEFT JOIN benefits_gp_benefits.v_benefits_benefit_current benefit_current
ON benefit_enrollment.benefit_id = benefit_current.id::INTEGER AND e.id=benefit_current.country_external_id::INTEGER
LEFT JOIN benefits_gp_benefits.v_benefits_benefit_type_current benefit_type
ON benefit_current.benefit_type_id=benefit_type.id::INTEGER
LEFT JOIN benefits_gp_benefits.v_benefits_country_benefit_type_current country_benefit
ON benefit_type.id::INTEGER = country_benefit.benefit_type_id AND country_benefit.country_external_id::INTEGER = e.id::INTEGER
LEFT JOIN goglobal_gp_goglobal.V_GP_GG_LSP_CURRENT LSP
ON d.LSP_ID=LSP.ID
LEFT JOIN repo.v_gp_mdm_customer AS mdm
ON a.id::VARCHAR = mdm.source_id
LEFT JOIN (SELECT *
    FROM repo.v_gp_mdm_customer
    WHERE source = 'SFDC Customer'
    ) AS mdm_match
    ON mdm.parent_name = mdm_match.parent_name

		   

WHERE a.is_demo_client = false

ORDER BY a.id, c.id"
fe7fa996-e05a-3b7f-0d9c-0cfb0d57ae53,Operations,postgres,"WITH satisfaction AS (SELECT id, s.ticket_id, score, created_at, last_date, comment, reason
	FROM ""zendesk"".""satisfaction_rating"" AS s
	INNER JOIN (
	SELECT ticket_id, MAX(created_at) AS last_date
	FROM ""zendesk"".""satisfaction_rating""
	GROUP BY ticket_id) AS m
	ON (s.ticket_id = m.ticket_id AND created_at = last_date)),
gpp_zendesk as
(
SELECT 
	    CASE WHEN O.CUSTOM_CUSTOMER_ID IS NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
	         WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NULL THEN O.CUSTOM_CUSTOMER_ID
	         WHEN O.CUSTOM_CUSTOMER_ID IS NOT NULL AND zendesk_org.CUSTOM_CUSTOMER_ID IS  NOT NULL THEN zendesk_org.CUSTOM_CUSTOMER_ID
			 WHEN O.CUSTOM_CUSTOMER_ID = zendesk_org.CUSTOM_CUSTOMER_ID THEN zendesk_org.CUSTOM_CUSTOMER_ID
			else null
		END AS zendesk_gpp_client_id_match,
	    CASE WHEN cc.name IS NULL AND cc2.name IS NOT NULL THEN cc2.name
	         WHEN cc.name IS NOT NULL AND cc2.name IS NULL THEN cc.name
			 WHEN cc.name IS NOT NULL AND cc2.name IS not NULL THEN cc2.name
	         WHEN cc.name = cc2.name THEN cc.name
			 else null
	         END AS zendesk_gpp_client_name_match,
	    
	    CASE WHEN O.NAME IS NULL AND zendesk_org.name IS NOT NULL THEN zendesk_org.name
	         WHEN O.NAME IS NOT NULL AND zendesk_org.name IS NULL THEN O.NAME
			 WHEN O.NAME IS NOT NULL AND zendesk_org.name IS not NULL THEN zendesk_org.NAME
	         WHEN O.NAME = zendesk_org.name THEN zendesk_org.NAME
			 ELSE NULL 
	         END AS Zendesk_client_org,
		t.created_at,
		t.created_at::date as date,	
		t.created_at::time as time,
		t.organization_id AS customer_id,
							g.name AS group,
							t.requester_id,t.submitter_id,
							u.name AS requester,
							U.ROLE AS requester_ROLE,
							t.id AS ticket_id_ZENDESK,
							t.status,
							T.PRIORITY,
							T.CUSTOM_CATEGORY,
							U.organization_id AS USER_ORGANIZATION_ID,
							T.organization_id,
							U3.NAME AS SUBMITTER,
							U3.ROLE AS SUBMITTER_ROLE,
							t.via_channel,
							zendesk_tm.replies, zendesk_tm.full_resolution_time_in_minutes_business, zendesk_tm.reply_time_in_minutes_business,
							s.score,
							Case when ZENDESK_TM.full_resolution_time_in_minutes_business <<=7200 then '0 - 5 days'
								 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>7200 and ZENDESK_TM.full_resolution_time_in_minutes_business<<=43200) then '5 - 30 days'
								 when (ZENDESK_TM.full_resolution_time_in_minutes_business>>43200) then '+30 days'
							end as resolution_time,
							case when ZENDESK_TM.replies =0 then '0 touches'
								 when (ZENDESK_TM.replies>>0 and ZENDESK_TM.replies<<3) then '1 to 2 touches'
								 when (ZENDESK_TM.replies>>2 and ZENDESK_TM.replies<<6) then '3 to 5 touches'
								 when (ZENDESK_TM.replies>>5) then '+5 touches'
							end as replies_touches,
							ticket_merge.tag as closed_by_merge
							FROM ""zendesk"".""ticket"" AS t
							LEFT JOIN ""zendesk"".""user"" AS u
							ON t.requester_id = u.id
							LEFT JOIN ""zendesk"".""group"" AS g
							ON t.group_id = g.id
							LEFT JOIN ""zendesk"".""organization"" AS org
							ON t.organization_id = org.id
							LEFT JOIN ""zendesk"".""user"" AS u3
							ON t.SUBMITTER_ID = u3.id
							LEFT JOIN ZENDESK.TICKET_METRICS AS ZENDESK_TM ON t.id=ZENDESK_TM.TICKET_ID
							LEFT JOIN ""satisfaction"" AS s ON t.id = s.ticket_id
							left join zendesk.organization o on o.id=U.organization_id
							left join zendesk.organization zendesk_org on zendesk_org.id=T.organization_id
							left join goglobal_gp_goglobal.v_gp_gg_client_current cc on cc.id=o.custom_customer_id
							left join goglobal_gp_goglobal.v_gp_gg_client_current cc2 on cc2.id=zendesk_org.custom_customer_id
							left join (
										SELECT *
										FROM zendesk.ticket_tag
										WHERE tag = 'closed_by_merge'
										) ticket_merge on t.id=ticket_merge.ticket_id
 )
select *
from gpp_zendesk
where status <<>> 'deleted'"
fe7fa996-e05a-3b7f-0d9c-0cfb0d57ae53,Operations,postgres,"SELECT cal_date,
       client_id,
	   professional_id,
	   new_flag,
	   active_flag,
	   termination_flag,
           tenure_months

FROM goglobal_gp_goglobal.v_tableau_headcount_dashboard
WHERE DATE_TRUNC('month', cal_date) <<= DATE_TRUNC('month', CURRENT_DATE)
ORDER BY 2,1,3"
fe7fa996-e05a-3b7f-0d9c-0cfb0d57ae53,Operations,postgres,"SELECT a.id, b.onboard_end_date AS date, CASE WHEN b.onboard_end_date IS NOT NULL THEN 'Onboard'END AS process
FROM goglobal_gp_goglobal.v_gp_gg_professional_current a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_onboarding_current b
ON a.professional_onboarding_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current d
ON a.client_id = d.id
WHERE d.is_demo_client = false
AND b.onboard_end_date  IS NOT NULL


UNION 


SELECT a.id, b.offboard_end_date AS date, CASE WHEN b.offboard_end_date IS NOT NULL THEN 'Offboard'END AS process
FROM goglobal_gp_goglobal.v_gp_gg_professional_current a
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_professional_offboarding_current b
ON a.professional_offboarding_id = b.id
LEFT JOIN goglobal_gp_goglobal.v_gp_gg_client_current d
ON a.client_id = d.id
WHERE d.is_demo_client = false
AND b.offboard_end_date IS NOT NULL
ORDER BY 1"
fe7fa996-e05a-3b7f-0d9c-0cfb0d57ae53,Operations,postgres,"WITH client_historic AS(
SELECT date_trunc('month'::text, cal.cal_date::timestamp with time zone)::date AS cal_date,
       client.id,
	   client.name,
	   	 CASE WHEN client.msa_contract_start_date_peo IS NOT NULL THEN client.msa_contract_start_date_peo
	          WHEN client.msa_contract_start_date_peo IS NULL AND client.msa_contract_start_date_services IS NOT NULL THEN client.msa_contract_start_date_services
	          WHEN client.msa_contract_start_date_services IS NULL AND client.msa_contract_start_date_sourcing IS NOT NULL THEN client.msa_contract_start_date_sourcing
	          WHEN client.msa_contract_start_date_sourcing IS NULL AND client.msa_contract_start_date_aso IS NOT NULL THEN client.msa_contract_start_date_aso
	          ELSE client.msa_contract_start_date_peo END AS gpp_contract_date

	   
FROM gp_calendar cal, 
     goglobal_gp_goglobal.v_gp_gg_client_current client

	 
WHERE cal.first_of_month IS TRUE
AND cal.cal_date >>= '2012-01-01'
AND DATE_TRUNC('month',cal.cal_date) <<= DATE_TRUNC('month', CURRENT_DATE)
AND client.is_demo_client = FALSE)

SELECT client_historic.*,
		 CASE WHEN DATE_TRUNC('month',gpp_contract_date) = DATE_TRUNC('month', cal_date) THEN TRUE END AS Contract_start,
		 CASE WHEN DATE_TRUNC('month',gpp_contract_date) <<= DATE_TRUNC('month', cal_date) THEN TRUE END AS in_platform
FROM client_historic"
fe7fa996-e05a-3b7f-0d9c-0cfb0d57ae53,Operations,postgres,"with a as 
	(
		select distinct c.id as Country_id,
			c.name as Country, 
			bt.name as Benefit_type, 
			btc.mandatory, 
			bt.id as btc_id 
	from benefits_gp_benefits.v_benefits_country_benefit_type_current btc
	left join goglobal_gp_goglobal.v_gp_gg_country_current c on btc.country_external_id::integer = c.id
	left join benefits_gp_benefits.v_benefits_benefit_type_current bt on bt.id=btc.benefit_type_id
	),
b as 
	(
		select t1.client_id, 
				t1.country_id,
				t2.name as country 
		from goglobal_gp_goglobal.v_gp_gg_client_country_current t1 
		left join goglobal_gp_goglobal.v_gp_gg_country_current t2 on t1.country_id=t2.id 
		order by 1,2
	),
c as
	(
		select b.client_id,
				b.country_id, 
				a.country_id as country_id_1,
				b.country,
				a.benefit_type,
				a.mandatory,
				a.btc_id
		from b 
		left join a on b.country_id=a.country_id
	),
d as
	(
		select bc.id,
				bc.active,
				b.name as plan_name,
				case when b.active=true then 'Yes'
					 when b.active=false then 'No' 
					 else null
				end as Active_plan, 
				bc.customer_external_id as client_id, 
				c.id as country_id,
				c.name as Country, 
				bt.id as btc_id, 
				bt.name as benefit_type
		from benefits_gp_benefits.v_benefits_customer_benefit_offering_current bc, 
			 benefits_gp_benefits.v_benefits_benefit_current b, 
			 goglobal_gp_goglobal.v_gp_gg_country_current c, 
			 benefits_gp_benefits.v_benefits_benefit_type_current bt
		where bc.benefit_id = b.id::integer and b.country_external_id::integer = c.id and b.benefit_type_id = bt.id::integer and bc.active = true
	),
e as 
	(
		select c.*, 
				d.plan_name,
				d.active_plan
		from c 
		left join d on c.client_id=d.client_id::integer and c.country_id=d.country_id and c.btc_id=d.btc_id
	)

		select e.client_id, 
				z.name as Client,
				z.status as client_status, 
				z.is_demo_client,
				e.country_id,
				e.country,
				e.benefit_type, 
				e.mandatory,
				e.plan_name,
				e.active_plan,
				case when (e.mandatory=true and e.plan_name is not null) then 'Offering'
						when (e.mandatory=true and plan_name is null) then 'Setup Incomplete'
						when (e.mandatory=false and plan_name is not null) then 'Offering'
						when (e.mandatory=false and plan_name is  null) then 'Not Offering'
						else null
				END AS STATUS
	from e 
	left join goglobal_gp_goglobal.v_gp_gg_client_current z on e.client_id=z.id"
fe7fa996-e05a-3b7f-0d9c-0cfb0d57ae53,Operations,postgres,"SELECT
        cc.id,
		cc.name as client,
	    cb_org.employee_count
		
	FROM goglobal_gp_goglobal.v_gp_gg_client_current cc
	LEFT JOIN client_investor.client_investor_gp_cb as gp_cb on cc.id = gp_cb.client_id
    LEFT JOIN crunchbase.v_cb_organizations_latest_mat cb_org on gp_cb.uuid = cb_org.uuid	
	WHERE cc.is_demo_client = 'False' 
	ORDER BY cc.id"
fe7fa996-e05a-3b7f-0d9c-0cfb0d57ae53,Operations,postgres,"SELECT 
        sfdc.id AS sfdc_id,
		sfdc.name AS sfdc_account_name,
		sfdc.type AS sfdc_account_type,
		sfdc.client_health__c
FROM salesforce.v_gp_sfdc_account_current SFDC"
fe7fa996-e05a-3b7f-0d9c-0cfb0d57ae53,ADP,postgres,select * from workday_hris.v_non_sensitive_workday_data
